
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e9f4  08000000  08000000  00010000  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000150  2009e000  0800e9f4  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e8  2009e150  0800eb44  0002e150  2**2
                  ALLOC
  3 .stack        00000800  2009e438  0800ee2c  0002e150  2**0
                  ALLOC
  4 .debug_info   0002bbfb  00000000  00000000  0002e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00005f71  00000000  00000000  00059d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_loc    000145e9  00000000  00000000  0005fcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 000010c0  00000000  00000000  000742a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_ranges 00002128  00000000  00000000  00075365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_macro  00032533  00000000  00000000  0007748d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   0001ddf0  00000000  00000000  000a99c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0011cba7  00000000  00000000  000c77b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      00000049  00000000  00000000  001e4357  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000032  00000000  00000000  001e43a0  2**0
                  CONTENTS, READONLY
 14 .debug_frame  000036e4  00000000  00000000  001e43d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <_sfixed>:
 8000000:	200a0000 	.word	0x200a0000
 8000004:	080000b5 	.word	0x080000b5
 8000008:	0800001d 	.word	0x0800001d
 800000c:	0800001f 	.word	0x0800001f
 8000010:	08000021 	.word	0x08000021
 8000014:	08000023 	.word	0x08000023
 8000018:	08000025 	.word	0x08000025

0800001c <NMI_Handler>:
 800001c:	be01      	bkpt	0x0001

0800001e <HardFault_Handler>:
 800001e:	be02      	bkpt	0x0002

08000020 <MemManage_Handler>:
 8000020:	be03      	bkpt	0x0003

08000022 <BusFault_Handler>:
 8000022:	be04      	bkpt	0x0004

08000024 <UsageFault_Handler>:
 8000024:	be05      	bkpt	0x0005
 8000026:	e7fe      	b.n	8000026 <UsageFault_Handler+0x2>

08000028 <bootloader_info>:
	...
 8000040:	08000305 	.word	0x08000305

08000044 <my_version_code>:
 8000044:	00000200 	.word	0x00000200
	...
 8000060:	20296328 	.word	0x20296328
 8000064:	79706f43 	.word	0x79706f43
 8000068:	68676972 	.word	0x68676972
 800006c:	30322074 	.word	0x30322074
 8000070:	322d3831 	.word	0x322d3831
 8000074:	20323230 	.word	0x20323230
 8000078:	43207962 	.word	0x43207962
 800007c:	6b6e696f 	.word	0x6b6e696f
 8000080:	20657469 	.word	0x20657469
 8000084:	2e636e49 	.word	0x2e636e49
 8000088:	0a200a20 	.word	0x0a200a20
 800008c:	73696854 	.word	0x73696854
 8000090:	61707320 	.word	0x61707320
 8000094:	66206563 	.word	0x66206563
 8000098:	7220726f 	.word	0x7220726f
 800009c:	21746e65 	.word	0x21746e65
 80000a0:	73754a20 	.word	0x73754a20
 80000a4:	42312074 	.word	0x42312074
 80000a8:	792f4354 	.word	0x792f4354
 80000ac:	2e726165 	.word	0x2e726165
 80000b0:	0a200a20 	.word	0x0a200a20

080000b4 <reset_entry>:
 80000b4:	f000 f816 	bl	80000e4 <firewall_setup>
 80000b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80000bc:	f04f 0100 	mov.w	r1, #0
 80000c0:	f04f 0200 	mov.w	r2, #0
 80000c4:	f04f 0300 	mov.w	r3, #0
 80000c8:	f000 f91c 	bl	8000304 <callgate_entry0>
 80000cc:	f248 0120 	movw	r1, #32800	; 0x8020
 80000d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80000d4:	6808      	ldr	r0, [r1, #0]
 80000d6:	4685      	mov	sp, r0
 80000d8:	f04f 0001 	mov.w	r0, #1
 80000dc:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80000e0:	4770      	bx	lr
	...

080000e4 <firewall_setup>:
    void
firewall_setup(void)
{
    // This is critical: without the clock enabled to "SYSCFG" we
    // can't tell the FW is enabled or not! Enabling it would also not work
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80000e4:	4b1b      	ldr	r3, [pc, #108]	; (8000154 <firewall_setup+0x70>)
{
 80000e6:	b500      	push	{lr}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80000e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80000ea:	f042 0201 	orr.w	r2, r2, #1
 80000ee:	661a      	str	r2, [r3, #96]	; 0x60
 80000f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 80000f2:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80000f4:	f003 0301 	and.w	r3, r3, #1
 80000f8:	9300      	str	r3, [sp, #0]
 80000fa:	9b00      	ldr	r3, [sp, #0]

    if(__HAL_FIREWALL_IS_ENABLED()) {
 80000fc:	4b16      	ldr	r3, [pc, #88]	; (8000158 <firewall_setup+0x74>)
 80000fe:	685b      	ldr	r3, [r3, #4]
 8000100:	07db      	lsls	r3, r3, #31
 8000102:	d524      	bpl.n	800014e <firewall_setup+0x6a>
    // REMINDERS: 
    // - cannot debug anything in boot loader w/ firewall enabled (no readback, no bkpt)
    // - when RDP=2, this protection still important or else python can read pairing secret
    // - in factory mode (RDP!=2), it's nice to have this disabled so we can debug still
    // - could look at RDP level here, but it would be harder to completely reset the bag number!
    if(check_all_ones_raw(rom_secrets->bag_number, sizeof(rom_secrets->bag_number))) {
 8000104:	4815      	ldr	r0, [pc, #84]	; (800015c <firewall_setup+0x78>)
 8000106:	2120      	movs	r1, #32
 8000108:	f002 faae 	bl	8002668 <check_all_ones_raw>
 800010c:	b9f8      	cbnz	r0, 800014e <firewall_setup+0x6a>
    // for debug builds, never enable firewall
    return;
#endif

    extern int firewall_starts;       // see startup.S ... aligned@256 (0x08000300)
    uint32_t    start = (uint32_t)&firewall_starts;
 800010e:	4b14      	ldr	r3, [pc, #80]	; (8000160 <firewall_setup+0x7c>)
    uint32_t    len = BL_FLASH_SIZE - (start - BL_FLASH_BASE);
 8000110:	4a14      	ldr	r2, [pc, #80]	; (8000164 <firewall_setup+0x80>)
    //   but sensitive stuff is still there (which would allow bypass)
    // - so it's important to enable option bytes to set write-protect flash of entire bootloader
    // - to disable debug and complete protection, must enable write-protect "level 2" (RDP=2)
    //

    FIREWALL_InitTypeDef init = {
 8000112:	9302      	str	r3, [sp, #8]
    uint32_t    len = BL_FLASH_SIZE - (start - BL_FLASH_BASE);
 8000114:	1ad3      	subs	r3, r2, r3
    FIREWALL_InitTypeDef init = {
 8000116:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800011a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800011e:	e9cd 3005 	strd	r3, r0, [sp, #20]
 8000122:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8000126:	9009      	str	r0, [sp, #36]	; 0x24
        .VDataSegmentLength = 0,
        .VolatileDataExecution = 0,
        .VolatileDataShared = 0,
    };

    int rv = HAL_FIREWALL_Config((FIREWALL_InitTypeDef *)&init);
 8000128:	a802      	add	r0, sp, #8
 800012a:	f000 f821 	bl	8000170 <HAL_FIREWALL_Config>
    if(rv) {
 800012e:	b110      	cbz	r0, 8000136 <firewall_setup+0x52>
        INCONSISTENT("fw");
 8000130:	480d      	ldr	r0, [pc, #52]	; (8000168 <firewall_setup+0x84>)
 8000132:	f000 fc89 	bl	8000a48 <fatal_error>
    }

    __HAL_FIREWALL_PREARM_DISABLE();
 8000136:	4b0d      	ldr	r3, [pc, #52]	; (800016c <firewall_setup+0x88>)
 8000138:	6a1a      	ldr	r2, [r3, #32]
 800013a:	f022 0201 	bic.w	r2, r2, #1
 800013e:	621a      	str	r2, [r3, #32]
 8000140:	6a1b      	ldr	r3, [r3, #32]
 8000142:	f003 0301 	and.w	r3, r3, #1
 8000146:	9301      	str	r3, [sp, #4]
 8000148:	9b01      	ldr	r3, [sp, #4]
    HAL_FIREWALL_EnableFirewall();
 800014a:	f000 f88b 	bl	8000264 <HAL_FIREWALL_EnableFirewall>
}
 800014e:	b00b      	add	sp, #44	; 0x2c
 8000150:	f85d fb04 	ldr.w	pc, [sp], #4
 8000154:	40021000 	.word	0x40021000
 8000158:	40010000 	.word	0x40010000
 800015c:	0801c050 	.word	0x0801c050
 8000160:	08000300 	.word	0x08000300
 8000164:	0801c000 	.word	0x0801c000
 8000168:	0800d6b0 	.word	0x0800d6b0
 800016c:	40011c00 	.word	0x40011c00

08000170 <HAL_FIREWALL_Config>:
  * @param fw_init: Firewall initialization structure
  * @note  The API returns HAL_ERROR if the Firewall is already enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FIREWALL_Config(FIREWALL_InitTypeDef * fw_init)
{
 8000170:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Check the Firewall initialization structure allocation */
  if(fw_init == NULL)
 8000172:	b910      	cbnz	r0, 800017a <HAL_FIREWALL_Config+0xa>
  {
    return HAL_ERROR;
 8000174:	2001      	movs	r0, #1
  /* Set Firewall Configuration Register VDE and VDS bits
     (volatile data execution and shared configuration) */
  MODIFY_REG(FIREWALL->CR, FW_CR_VDS|FW_CR_VDE, fw_init->VolatileDataExecution|fw_init->VolatileDataShared);

  return HAL_OK;
}
 8000176:	b002      	add	sp, #8
 8000178:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 800017a:	4b19      	ldr	r3, [pc, #100]	; (80001e0 <HAL_FIREWALL_Config+0x70>)
 800017c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800017e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000182:	661a      	str	r2, [r3, #96]	; 0x60
 8000184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800018a:	9301      	str	r3, [sp, #4]
 800018c:	9b01      	ldr	r3, [sp, #4]
  if (__HAL_FIREWALL_IS_ENABLED() != RESET)
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <HAL_FIREWALL_Config+0x74>)
 8000190:	685b      	ldr	r3, [r3, #4]
 8000192:	07db      	lsls	r3, r3, #31
 8000194:	d5ee      	bpl.n	8000174 <HAL_FIREWALL_Config+0x4>
  if (fw_init->CodeSegmentLength != 0U)
 8000196:	6841      	ldr	r1, [r0, #4]
    if (fw_init->NonVDataSegmentLength < 0x100U)
 8000198:	68c2      	ldr	r2, [r0, #12]
  if (fw_init->CodeSegmentLength != 0U)
 800019a:	b109      	cbz	r1, 80001a0 <HAL_FIREWALL_Config+0x30>
    if (fw_init->NonVDataSegmentLength < 0x100U)
 800019c:	2aff      	cmp	r2, #255	; 0xff
 800019e:	d9e9      	bls.n	8000174 <HAL_FIREWALL_Config+0x4>
  WRITE_REG(FIREWALL->CSSA, (FW_CSSA_ADD & fw_init->CodeSegmentStartAddress));
 80001a0:	6803      	ldr	r3, [r0, #0]
 80001a2:	4e11      	ldr	r6, [pc, #68]	; (80001e8 <HAL_FIREWALL_Config+0x78>)
  if (fw_init->VDataSegmentLength != 0U)
 80001a4:	6944      	ldr	r4, [r0, #20]
  WRITE_REG(FIREWALL->CSSA, (FW_CSSA_ADD & fw_init->CodeSegmentStartAddress));
 80001a6:	ea03 0506 	and.w	r5, r3, r6
 80001aa:	4b10      	ldr	r3, [pc, #64]	; (80001ec <HAL_FIREWALL_Config+0x7c>)
 80001ac:	601d      	str	r5, [r3, #0]
  WRITE_REG(FIREWALL->CSL, (FW_CSL_LENG & fw_init->CodeSegmentLength));
 80001ae:	4d10      	ldr	r5, [pc, #64]	; (80001f0 <HAL_FIREWALL_Config+0x80>)
 80001b0:	4029      	ands	r1, r5
 80001b2:	6059      	str	r1, [r3, #4]
  WRITE_REG(FIREWALL->NVDSSA, (FW_NVDSSA_ADD & fw_init->NonVDataSegmentStartAddress));
 80001b4:	6881      	ldr	r1, [r0, #8]
  WRITE_REG(FIREWALL->NVDSL, (FW_NVDSL_LENG & fw_init->NonVDataSegmentLength));
 80001b6:	402a      	ands	r2, r5
  WRITE_REG(FIREWALL->NVDSSA, (FW_NVDSSA_ADD & fw_init->NonVDataSegmentStartAddress));
 80001b8:	4031      	ands	r1, r6
 80001ba:	6099      	str	r1, [r3, #8]
  WRITE_REG(FIREWALL->NVDSL, (FW_NVDSL_LENG & fw_init->NonVDataSegmentLength));
 80001bc:	60da      	str	r2, [r3, #12]
  WRITE_REG(FIREWALL->VDSSA, (FW_VDSSA_ADD & fw_init->VDataSegmentStartAddress));
 80001be:	6901      	ldr	r1, [r0, #16]
 80001c0:	4a0c      	ldr	r2, [pc, #48]	; (80001f4 <HAL_FIREWALL_Config+0x84>)
 80001c2:	4011      	ands	r1, r2
  WRITE_REG(FIREWALL->VDSL, (FW_VDSL_LENG & fw_init->VDataSegmentLength));
 80001c4:	4022      	ands	r2, r4
  WRITE_REG(FIREWALL->VDSSA, (FW_VDSSA_ADD & fw_init->VDataSegmentStartAddress));
 80001c6:	6119      	str	r1, [r3, #16]
  WRITE_REG(FIREWALL->VDSL, (FW_VDSL_LENG & fw_init->VDataSegmentLength));
 80001c8:	615a      	str	r2, [r3, #20]
  MODIFY_REG(FIREWALL->CR, FW_CR_VDS|FW_CR_VDE, fw_init->VolatileDataExecution|fw_init->VolatileDataShared);
 80001ca:	e9d0 2006 	ldrd	r2, r0, [r0, #24]
 80001ce:	6a19      	ldr	r1, [r3, #32]
 80001d0:	4302      	orrs	r2, r0
 80001d2:	f021 0106 	bic.w	r1, r1, #6
 80001d6:	430a      	orrs	r2, r1
 80001d8:	621a      	str	r2, [r3, #32]
  return HAL_OK;
 80001da:	2000      	movs	r0, #0
 80001dc:	e7cb      	b.n	8000176 <HAL_FIREWALL_Config+0x6>
 80001de:	bf00      	nop
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40010000 	.word	0x40010000
 80001e8:	00ffff00 	.word	0x00ffff00
 80001ec:	40011c00 	.word	0x40011c00
 80001f0:	003fff00 	.word	0x003fff00
 80001f4:	0003ffc0 	.word	0x0003ffc0

080001f8 <HAL_FIREWALL_GetConfig>:
void HAL_FIREWALL_GetConfig(FIREWALL_InitTypeDef * fw_config)
{

  /* Enable Firewall clock, in case no Firewall configuration has been carried
     out up to this point */
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <HAL_FIREWALL_GetConfig+0x58>)
 80001fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80001fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 80001fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000202:	661a      	str	r2, [r3, #96]	; 0x60
 8000204:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Retrieve code segment protection setting */
  fw_config->CodeSegmentStartAddress = (READ_REG(FIREWALL->CSSA) & FW_CSSA_ADD);
 8000206:	4e13      	ldr	r6, [pc, #76]	; (8000254 <HAL_FIREWALL_GetConfig+0x5c>)
  fw_config->CodeSegmentLength = (READ_REG(FIREWALL->CSL) & FW_CSL_LENG);
 8000208:	4d13      	ldr	r5, [pc, #76]	; (8000258 <HAL_FIREWALL_GetConfig+0x60>)
  __HAL_RCC_FIREWALL_CLK_ENABLE();
 800020a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800020e:	9301      	str	r3, [sp, #4]
 8000210:	9b01      	ldr	r3, [sp, #4]
  fw_config->CodeSegmentStartAddress = (READ_REG(FIREWALL->CSSA) & FW_CSSA_ADD);
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <HAL_FIREWALL_GetConfig+0x64>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	4032      	ands	r2, r6
 8000218:	6002      	str	r2, [r0, #0]
  fw_config->CodeSegmentLength = (READ_REG(FIREWALL->CSL) & FW_CSL_LENG);
 800021a:	685c      	ldr	r4, [r3, #4]
 800021c:	402c      	ands	r4, r5
 800021e:	6044      	str	r4, [r0, #4]

  /* Retrieve non volatile data segment protection setting */
  fw_config->NonVDataSegmentStartAddress = (READ_REG(FIREWALL->NVDSSA) & FW_NVDSSA_ADD);
 8000220:	6899      	ldr	r1, [r3, #8]
  fw_config->NonVDataSegmentLength = (READ_REG(FIREWALL->NVDSL) & FW_NVDSL_LENG);

  /* Retrieve volatile data segment protection setting */
  fw_config->VDataSegmentStartAddress = (READ_REG(FIREWALL->VDSSA) & FW_VDSSA_ADD);
 8000222:	4c0f      	ldr	r4, [pc, #60]	; (8000260 <HAL_FIREWALL_GetConfig+0x68>)
  fw_config->NonVDataSegmentStartAddress = (READ_REG(FIREWALL->NVDSSA) & FW_NVDSSA_ADD);
 8000224:	4031      	ands	r1, r6
 8000226:	6081      	str	r1, [r0, #8]
  fw_config->NonVDataSegmentLength = (READ_REG(FIREWALL->NVDSL) & FW_NVDSL_LENG);
 8000228:	68da      	ldr	r2, [r3, #12]
 800022a:	402a      	ands	r2, r5
 800022c:	60c2      	str	r2, [r0, #12]
  fw_config->VDataSegmentStartAddress = (READ_REG(FIREWALL->VDSSA) & FW_VDSSA_ADD);
 800022e:	6919      	ldr	r1, [r3, #16]
 8000230:	4021      	ands	r1, r4
 8000232:	6101      	str	r1, [r0, #16]
  fw_config->VDataSegmentLength = (READ_REG(FIREWALL->VDSL) & FW_VDSL_LENG);
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4022      	ands	r2, r4
 8000238:	6142      	str	r2, [r0, #20]

  /* Retrieve volatile data execution setting */
  fw_config->VolatileDataExecution = (READ_REG(FIREWALL->CR) & FW_CR_VDE);
 800023a:	6a1a      	ldr	r2, [r3, #32]
 800023c:	f002 0204 	and.w	r2, r2, #4
 8000240:	6182      	str	r2, [r0, #24]

  /* Retrieve volatile data shared setting */
  fw_config->VolatileDataShared = (READ_REG(FIREWALL->CR) & FW_CR_VDS);
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	61c3      	str	r3, [r0, #28]

  return;
}
 800024a:	b002      	add	sp, #8
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000
 8000254:	00ffff00 	.word	0x00ffff00
 8000258:	003fff00 	.word	0x003fff00
 800025c:	40011c00 	.word	0x40011c00
 8000260:	0003ffc0 	.word	0x0003ffc0

08000264 <HAL_FIREWALL_EnableFirewall>:
  * @retval None
  */
void HAL_FIREWALL_EnableFirewall(void)
{
  /* Clears FWDIS bit of SYSCFG CFGR1 register */
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_FWDIS);
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_FIREWALL_EnableFirewall+0xc>)
 8000266:	6853      	ldr	r3, [r2, #4]
 8000268:	f023 0301 	bic.w	r3, r3, #1
 800026c:	6053      	str	r3, [r2, #4]

}
 800026e:	4770      	bx	lr
 8000270:	40010000 	.word	0x40010000

08000274 <HAL_FIREWALL_EnablePreArmFlag>:
  * @retval None
  */
void HAL_FIREWALL_EnablePreArmFlag(void)
{
  /* Set FPA bit */
  SET_BIT(FIREWALL->CR, FW_CR_FPA);
 8000274:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_FIREWALL_EnablePreArmFlag+0xc>)
 8000276:	6a13      	ldr	r3, [r2, #32]
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6213      	str	r3, [r2, #32]
}
 800027e:	4770      	bx	lr
 8000280:	40011c00 	.word	0x40011c00

08000284 <HAL_FIREWALL_DisablePreArmFlag>:
  * @retval None
  */
void HAL_FIREWALL_DisablePreArmFlag(void)
{
  /* Clear FPA bit */
  CLEAR_BIT(FIREWALL->CR, FW_CR_FPA);
 8000284:	4a02      	ldr	r2, [pc, #8]	; (8000290 <HAL_FIREWALL_DisablePreArmFlag+0xc>)
 8000286:	6a13      	ldr	r3, [r2, #32]
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	6213      	str	r3, [r2, #32]
}
 800028e:	4770      	bx	lr
 8000290:	40011c00 	.word	0x40011c00
	...

08000300 <_firewall_start>:
 8000300:	0f193a11 	.word	0x0f193a11

08000304 <callgate_entry0>:
 8000304:	f24e 0900 	movw	r9, #57344	; 0xe000
 8000308:	f2c2 0909 	movt	r9, #8201	; 0x2009
 800030c:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8000310:	44ca      	add	sl, r9

08000312 <wipe_loop1>:
 8000312:	f849 ab04 	str.w	sl, [r9], #4
 8000316:	45d1      	cmp	r9, sl
 8000318:	d1fb      	bne.n	8000312 <wipe_loop1>
 800031a:	46ea      	mov	sl, sp
 800031c:	46cd      	mov	sp, r9
 800031e:	e92d 4400 	stmdb	sp!, {sl, lr}

08000322 <dispatcher>:
 8000322:	f000 f841 	bl	80003a8 <firewall_dispatch>
 8000326:	e8bd 4400 	ldmia.w	sp!, {sl, lr}
 800032a:	46d5      	mov	sp, sl
 800032c:	f24e 0900 	movw	r9, #57344	; 0xe000
 8000330:	f2c2 0909 	movt	r9, #8201	; 0x2009
 8000334:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8000338:	44ca      	add	sl, r9

0800033a <wipe_loop2>:
 800033a:	f849 0b04 	str.w	r0, [r9], #4
 800033e:	45d1      	cmp	r9, sl
 8000340:	d1fb      	bne.n	800033a <wipe_loop2>
 8000342:	4770      	bx	lr

08000344 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000344:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000348:	4905      	ldr	r1, [pc, #20]	; (8000360 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800034c:	68ca      	ldr	r2, [r1, #12]
 800034e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000352:	4313      	orrs	r3, r2
 8000354:	60cb      	str	r3, [r1, #12]
 8000356:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800035a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800035c:	e7fd      	b.n	800035a <__NVIC_SystemReset+0x16>
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	05fa0004 	.word	0x05fa0004

08000368 <good_addr>:
good_addr(const uint8_t *b, int minlen, int len, bool readonly)
{
    uint32_t x = (uint32_t)b;

    if(minlen) {
        if(!b) return EFAULT;               // gave no buffer
 8000368:	b198      	cbz	r0, 8000392 <good_addr+0x2a>
        if(len < minlen) return ERANGE;     // too small
 800036a:	4291      	cmp	r1, r2
 800036c:	dc13      	bgt.n	8000396 <good_addr+0x2e>
    }
        
    if((x >= SRAM1_BASE) && ((x+len) <= BL_SRAM_BASE)) {
 800036e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8000372:	d303      	bcc.n	800037c <good_addr+0x14>
 8000374:	490b      	ldr	r1, [pc, #44]	; (80003a4 <good_addr+0x3c>)
 8000376:	4402      	add	r2, r0
 8000378:	428a      	cmp	r2, r1
 800037a:	d90e      	bls.n	800039a <good_addr+0x32>
        // ok: it's inside the SRAM areas, up to where we start
        return 0;
    }

    if(!readonly) {
 800037c:	b17b      	cbz	r3, 800039e <good_addr+0x36>
        return EPERM;
    }

    if((x >= FIRMWARE_START) && (x - FIRMWARE_START) < FW_MAX_LENGTH_MK4) {
 800037e:	f100 4077 	add.w	r0, r0, #4143972352	; 0xf7000000
 8000382:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
        // inside flash of main firmware (happens for QSTR's)
        return 0;
    }

    return EACCES;
 8000386:	f5b0 1ff0 	cmp.w	r0, #1966080	; 0x1e0000
 800038a:	bf34      	ite	cc
 800038c:	2000      	movcc	r0, #0
 800038e:	200d      	movcs	r0, #13
 8000390:	4770      	bx	lr
        if(!b) return EFAULT;               // gave no buffer
 8000392:	200e      	movs	r0, #14
 8000394:	4770      	bx	lr
        if(len < minlen) return ERANGE;     // too small
 8000396:	2022      	movs	r0, #34	; 0x22
 8000398:	4770      	bx	lr
        return 0;
 800039a:	2000      	movs	r0, #0
 800039c:	4770      	bx	lr
        return EPERM;
 800039e:	2001      	movs	r0, #1
}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	2009e000 	.word	0x2009e000

080003a8 <firewall_dispatch>:
//
    __attribute__ ((used))
    int
firewall_dispatch(int method_num, uint8_t *buf_io, int len_in,
                        uint32_t arg2, uint32_t incoming_sp, uint32_t incoming_lr)
{
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	b09e      	sub	sp, #120	; 0x78
 80003ac:	460d      	mov	r5, r1
 80003ae:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80003b0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80003b2:	b672      	cpsid	i
    // in case the caller didn't already, but would just lead to a crash anyway
    __disable_irq();

    // "1=any code executed outside the protected segment will close the Firewall"
    // "0=.. will reset the processor"
    __HAL_FIREWALL_PREARM_DISABLE();
 80003b4:	4ba5      	ldr	r3, [pc, #660]	; (800064c <firewall_dispatch+0x2a4>)
 80003b6:	6a19      	ldr	r1, [r3, #32]
 80003b8:	f021 0101 	bic.w	r1, r1, #1
 80003bc:	6219      	str	r1, [r3, #32]
 80003be:	6a1b      	ldr	r3, [r3, #32]
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	9302      	str	r3, [sp, #8]
    //   using read/write in place.
    // - use arg2 use when a simple number is needed; never a pointer!
    // - mpy may provide a pointer to flash if we give it a qstr or small value, and if
    //   we're reading only, that's fine.

    if(len_in > 1024) {     // arbitrary max, increase as needed
 80003c6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_FIREWALL_PREARM_DISABLE();
 80003ca:	9b02      	ldr	r3, [sp, #8]
    if(len_in > 1024) {     // arbitrary max, increase as needed
 80003cc:	f300 82e3 	bgt.w	8000996 <firewall_dispatch+0x5ee>

    // Use these macros
#define REQUIRE_IN_ONLY(x)   if((rv = good_addr(buf_io, (x), len_in, true))) { goto fail; }
#define REQUIRE_OUT(x)       if((rv = good_addr(buf_io, (x), len_in, false))) { goto fail; }

    switch(method_num) {
 80003d0:	3001      	adds	r0, #1
 80003d2:	281c      	cmp	r0, #28
 80003d4:	f200 81b6 	bhi.w	8000744 <firewall_dispatch+0x39c>
 80003d8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80003dc:	001d02f9 	.word	0x001d02f9
 80003e0:	00800034 	.word	0x00800034
 80003e4:	00d100bd 	.word	0x00d100bd
 80003e8:	01f300f2 	.word	0x01f300f2
 80003ec:	01b401b4 	.word	0x01b401b4
 80003f0:	01b401b4 	.word	0x01b401b4
 80003f4:	00fa01b4 	.word	0x00fa01b4
 80003f8:	01b401b4 	.word	0x01b401b4
 80003fc:	01240105 	.word	0x01240105
 8000400:	01670154 	.word	0x01670154
 8000404:	01f701ab 	.word	0x01f701ab
 8000408:	025f0206 	.word	0x025f0206
 800040c:	02b702a2 	.word	0x02b702a2
 8000410:	02cf02bf 	.word	0x02cf02bf
 8000414:	02eb      	.short	0x02eb
        case 0: {
            REQUIRE_OUT(64);
 8000416:	2300      	movs	r3, #0
 8000418:	2140      	movs	r1, #64	; 0x40
 800041a:	4628      	mov	r0, r5
 800041c:	9200      	str	r2, [sp, #0]
 800041e:	f7ff ffa3 	bl	8000368 <good_addr>
 8000422:	4604      	mov	r4, r0
 8000424:	bb48      	cbnz	r0, 800047a <firewall_dispatch+0xd2>

            // Return my version string
            memset(buf_io, 0, len_in);
 8000426:	4601      	mov	r1, r0
 8000428:	9a00      	ldr	r2, [sp, #0]
 800042a:	4628      	mov	r0, r5
 800042c:	f00d f8fa 	bl	800d624 <memset>
            strlcpy((char *)buf_io, version_string, len_in);
 8000430:	9a00      	ldr	r2, [sp, #0]
 8000432:	4987      	ldr	r1, [pc, #540]	; (8000650 <firewall_dispatch+0x2a8>)
 8000434:	4628      	mov	r0, r5
 8000436:	f00d f913 	bl	800d660 <strlcpy>

            rv = strlen(version_string);
 800043a:	4885      	ldr	r0, [pc, #532]	; (8000650 <firewall_dispatch+0x2a8>)
 800043c:	f00d f925 	bl	800d68a <strlen>
            ae_setup();
            ae_keep_alive();
            switch(arg2) {
                default:
                case 0:     // read state
                    rv = ae_get_gpio();
 8000440:	4604      	mov	r4, r0
                    break;
 8000442:	e01a      	b.n	800047a <firewall_dispatch+0xd2>
            REQUIRE_OUT(32);
 8000444:	2300      	movs	r3, #0
 8000446:	2120      	movs	r1, #32
 8000448:	4628      	mov	r0, r5
 800044a:	f7ff ff8d 	bl	8000368 <good_addr>
 800044e:	4604      	mov	r4, r0
 8000450:	b998      	cbnz	r0, 800047a <firewall_dispatch+0xd2>
            sha256_init(&ctx);
 8000452:	a80b      	add	r0, sp, #44	; 0x2c
 8000454:	f005 f80e 	bl	8005474 <sha256_init>
            sha256_update(&ctx, (void *)&arg2, 4);
 8000458:	2204      	movs	r2, #4
 800045a:	eb0d 0102 	add.w	r1, sp, r2
 800045e:	a80b      	add	r0, sp, #44	; 0x2c
 8000460:	f005 f816 	bl	8005490 <sha256_update>
            sha256_update(&ctx, (void *)BL_FLASH_BASE, BL_FLASH_SIZE);
 8000464:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000468:	a80b      	add	r0, sp, #44	; 0x2c
 800046a:	f44f 32e0 	mov.w	r2, #114688	; 0x1c000
 800046e:	f005 f80f 	bl	8005490 <sha256_update>
            sha256_final(&ctx, buf_io);
 8000472:	4629      	mov	r1, r5
 8000474:	a80b      	add	r0, sp, #44	; 0x2c
 8000476:	f005 f851 	bl	800551c <sha256_final>

fail:

    // Precaution: we don't want to leave SE1 authorized for any specific keys,
    // perhaps due to an error path we didn't see. Always reset the chip.
    ae_reset_chip();
 800047a:	f002 fa95 	bl	80029a8 <ae_reset_chip>

    // Unlikely it matters, but clear flash memory cache.
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800047e:	4b75      	ldr	r3, [pc, #468]	; (8000654 <firewall_dispatch+0x2ac>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000486:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000496:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800049e:	601a      	str	r2, [r3, #0]

    // .. and instruction memory (flash cache too?)
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80004a6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80004b6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004be:	601a      	str	r2, [r3, #0]

    // authorize return from firewall into user's code
    __HAL_FIREWALL_PREARM_ENABLE();
 80004c0:	f5a3 3382 	sub.w	r3, r3, #66560	; 0x10400

    return rv;
}
 80004c4:	4620      	mov	r0, r4
    __HAL_FIREWALL_PREARM_ENABLE();
 80004c6:	6a1a      	ldr	r2, [r3, #32]
 80004c8:	f042 0201 	orr.w	r2, r2, #1
 80004cc:	621a      	str	r2, [r3, #32]
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80004d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
 80004d8:	b01e      	add	sp, #120	; 0x78
 80004da:	bd70      	pop	{r4, r5, r6, pc}
// Write bag number (probably a string)
void flash_save_bag_number(const uint8_t new_number[32]);

// Are we operating in level2?
static inline bool flash_is_security_level2(void) {
    rng_delay();
 80004dc:	f002 f94e 	bl	800277c <rng_delay>
    return ((FLASH->OPTR & FLASH_OPTR_RDP_Msk) == 0xCC);
 80004e0:	4b5c      	ldr	r3, [pc, #368]	; (8000654 <firewall_dispatch+0x2ac>)
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	f1a3 02cc 	sub.w	r2, r3, #204	; 0xcc
 80004ea:	4255      	negs	r5, r2
 80004ec:	4155      	adcs	r5, r2
            switch(arg2) {
 80004ee:	9a01      	ldr	r2, [sp, #4]
 80004f0:	2a02      	cmp	r2, #2
 80004f2:	d01c      	beq.n	800052e <firewall_dispatch+0x186>
 80004f4:	2a03      	cmp	r2, #3
 80004f6:	d01f      	beq.n	8000538 <firewall_dispatch+0x190>
 80004f8:	2a01      	cmp	r2, #1
 80004fa:	d013      	beq.n	8000524 <firewall_dispatch+0x17c>
                    if(secure) {
 80004fc:	2bcc      	cmp	r3, #204	; 0xcc
 80004fe:	f000 8216 	beq.w	800092e <firewall_dispatch+0x586>
                    puts("Die: DFU");
 8000502:	4855      	ldr	r0, [pc, #340]	; (8000658 <firewall_dispatch+0x2b0>)
                    scr = screen_upgrading;     // was screen_dfu, but limited audience
 8000504:	4c55      	ldr	r4, [pc, #340]	; (800065c <firewall_dispatch+0x2b4>)
                    puts("Die: DFU");
 8000506:	f004 fc45 	bl	8004d94 <puts>
            bool secure = flash_is_security_level2();
 800050a:	2500      	movs	r5, #0
            oled_setup();
 800050c:	f000 fc0a 	bl	8000d24 <oled_setup>
            oled_show(scr);
 8000510:	4620      	mov	r0, r4
 8000512:	f000 fc97 	bl	8000e44 <oled_show>
            wipe_all_sram();
 8000516:	f000 fa77 	bl	8000a08 <wipe_all_sram>
            psram_wipe();
 800051a:	f004 fd63 	bl	8004fe4 <psram_wipe>
            if(secure) {
 800051e:	b18d      	cbz	r5, 8000544 <firewall_dispatch+0x19c>
                LOCKUP_FOREVER();
 8000520:	bf30      	wfi
 8000522:	e7fd      	b.n	8000520 <firewall_dispatch+0x178>
                    puts("Die: Downgrade");
 8000524:	484e      	ldr	r0, [pc, #312]	; (8000660 <firewall_dispatch+0x2b8>)
                    scr = screen_downgrade;
 8000526:	4c4f      	ldr	r4, [pc, #316]	; (8000664 <firewall_dispatch+0x2bc>)
                    puts("Die: Downgrade");
 8000528:	f004 fc34 	bl	8004d94 <puts>
                    break;
 800052c:	e7ee      	b.n	800050c <firewall_dispatch+0x164>
                    puts("Die: Blankish");
 800052e:	484e      	ldr	r0, [pc, #312]	; (8000668 <firewall_dispatch+0x2c0>)
                    scr = screen_blankish;
 8000530:	4c4e      	ldr	r4, [pc, #312]	; (800066c <firewall_dispatch+0x2c4>)
                    puts("Die: Blankish");
 8000532:	f004 fc2f 	bl	8004d94 <puts>
                    break;
 8000536:	e7e9      	b.n	800050c <firewall_dispatch+0x164>
                    puts("Die: Brick");
 8000538:	484d      	ldr	r0, [pc, #308]	; (8000670 <firewall_dispatch+0x2c8>)
                    scr = screen_brick;
 800053a:	4c4e      	ldr	r4, [pc, #312]	; (8000674 <firewall_dispatch+0x2cc>)
                    puts("Die: Brick");
 800053c:	f004 fc2a 	bl	8004d94 <puts>
                    secure = true;      // no point going into DFU, if even possible
 8000540:	2501      	movs	r5, #1
                    break;
 8000542:	e7e3      	b.n	800050c <firewall_dispatch+0x164>
                memcpy(dfu_flag->magic, REBOOT_TO_DFU, sizeof(dfu_flag->magic));
 8000544:	494c      	ldr	r1, [pc, #304]	; (8000678 <firewall_dispatch+0x2d0>)
 8000546:	4a4d      	ldr	r2, [pc, #308]	; (800067c <firewall_dispatch+0x2d4>)
 8000548:	6808      	ldr	r0, [r1, #0]
 800054a:	6849      	ldr	r1, [r1, #4]
 800054c:	4613      	mov	r3, r2
 800054e:	c303      	stmia	r3!, {r0, r1}
                dfu_flag->screen = scr;
 8000550:	6094      	str	r4, [r2, #8]
                NVIC_SystemReset();
 8000552:	f7ff fef7 	bl	8000344 <__NVIC_SystemReset>
            switch(arg2) { 
 8000556:	9b01      	ldr	r3, [sp, #4]
 8000558:	f033 0302 	bics.w	r3, r3, #2
 800055c:	d102      	bne.n	8000564 <firewall_dispatch+0x1bc>
                    oled_show(screen_logout);
 800055e:	4848      	ldr	r0, [pc, #288]	; (8000680 <firewall_dispatch+0x2d8>)
 8000560:	f000 fc70 	bl	8000e44 <oled_show>
            wipe_all_sram();
 8000564:	f000 fa50 	bl	8000a08 <wipe_all_sram>
            psram_wipe();
 8000568:	f004 fd3c 	bl	8004fe4 <psram_wipe>
            if(arg2 == 2) {
 800056c:	9b01      	ldr	r3, [sp, #4]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d103      	bne.n	800057a <firewall_dispatch+0x1d2>
                delay_ms(100);
 8000572:	2064      	movs	r0, #100	; 0x64
 8000574:	f003 f9c0 	bl	80038f8 <delay_ms>
 8000578:	e7eb      	b.n	8000552 <firewall_dispatch+0x1aa>
            LOCKUP_FOREVER();
 800057a:	bf30      	wfi
 800057c:	e7fd      	b.n	800057a <firewall_dispatch+0x1d2>
            ae_setup();
 800057e:	f002 fa21 	bl	80029c4 <ae_setup>
            ae_keep_alive();
 8000582:	f002 fa51 	bl	8002a28 <ae_keep_alive>
            switch(arg2) {
 8000586:	9b01      	ldr	r3, [sp, #4]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d00a      	beq.n	80005a2 <firewall_dispatch+0x1fa>
 800058c:	2b03      	cmp	r3, #3
 800058e:	d00a      	beq.n	80005a6 <firewall_dispatch+0x1fe>
 8000590:	2b01      	cmp	r3, #1
 8000592:	d002      	beq.n	800059a <firewall_dispatch+0x1f2>
                    rv = ae_get_gpio();
 8000594:	f002 ffc6 	bl	8003524 <ae_get_gpio>
 8000598:	e752      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = ae_set_gpio(0);
 800059a:	2000      	movs	r0, #0
                    rv = ae_set_gpio(1);
 800059c:	f002 ff94 	bl	80034c8 <ae_set_gpio>
 80005a0:	e74e      	b.n	8000440 <firewall_dispatch+0x98>
 80005a2:	2001      	movs	r0, #1
 80005a4:	e7fa      	b.n	800059c <firewall_dispatch+0x1f4>
                    checksum_flash(fw_digest, world_digest, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	a90b      	add	r1, sp, #44	; 0x2c
 80005aa:	a803      	add	r0, sp, #12
 80005ac:	f001 fa44 	bl	8001a38 <checksum_flash>
                    rv = ae_set_gpio_secure(world_digest);
 80005b0:	a80b      	add	r0, sp, #44	; 0x2c
 80005b2:	f002 ff9f 	bl	80034f4 <ae_set_gpio_secure>
 80005b6:	4604      	mov	r4, r0
                    oled_show(screen_blankish);
 80005b8:	482c      	ldr	r0, [pc, #176]	; (800066c <firewall_dispatch+0x2c4>)
 80005ba:	f000 fc43 	bl	8000e44 <oled_show>
                    break;
 80005be:	e75c      	b.n	800047a <firewall_dispatch+0xd2>
            ae_setup();
 80005c0:	f002 fa00 	bl	80029c4 <ae_setup>
            rv = (ae_pair_unlock() != 0);
 80005c4:	f002 fbf4 	bl	8002db0 <ae_pair_unlock>
 80005c8:	1e04      	subs	r4, r0, #0
 80005ca:	bf18      	it	ne
 80005cc:	2401      	movne	r4, #1
            break;
 80005ce:	e754      	b.n	800047a <firewall_dispatch+0xd2>
            REQUIRE_OUT(1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4628      	mov	r0, r5
 80005d6:	f7ff fec7 	bl	8000368 <good_addr>
 80005da:	4604      	mov	r4, r0
 80005dc:	2800      	cmp	r0, #0
 80005de:	f47f af4c 	bne.w	800047a <firewall_dispatch+0xd2>
            buf_io[0] = 0;          // NOT SUPPORTED on Mk4
 80005e2:	7028      	strb	r0, [r5, #0]
            break;
 80005e4:	e749      	b.n	800047a <firewall_dispatch+0xd2>
            if(len_in != 4 && len_in != 32 && len_in != 72) {
 80005e6:	2a04      	cmp	r2, #4
 80005e8:	d004      	beq.n	80005f4 <firewall_dispatch+0x24c>
 80005ea:	2a20      	cmp	r2, #32
 80005ec:	d002      	beq.n	80005f4 <firewall_dispatch+0x24c>
 80005ee:	2a48      	cmp	r2, #72	; 0x48
 80005f0:	f040 81d1 	bne.w	8000996 <firewall_dispatch+0x5ee>
                REQUIRE_OUT(4);
 80005f4:	2300      	movs	r3, #0
 80005f6:	2104      	movs	r1, #4
 80005f8:	4628      	mov	r0, r5
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	f7ff feb4 	bl	8000368 <good_addr>
 8000600:	4604      	mov	r4, r0
 8000602:	2800      	cmp	r0, #0
 8000604:	f47f af39 	bne.w	800047a <firewall_dispatch+0xd2>
                ae_setup();
 8000608:	f002 f9dc 	bl	80029c4 <ae_setup>
                if(ae_read_data_slot(arg2 & 0xf, buf_io, len_in)) {
 800060c:	9801      	ldr	r0, [sp, #4]
 800060e:	9a00      	ldr	r2, [sp, #0]
 8000610:	4629      	mov	r1, r5
 8000612:	f000 000f 	and.w	r0, r0, #15
 8000616:	f002 ff11 	bl	800343c <ae_read_data_slot>
            if(rv) {
 800061a:	2800      	cmp	r0, #0
 800061c:	f000 80d1 	beq.w	80007c2 <firewall_dispatch+0x41a>
                rv = EIO;
 8000620:	2405      	movs	r4, #5
 8000622:	e72a      	b.n	800047a <firewall_dispatch+0xd2>
            REQUIRE_OUT(MAX_PIN_LEN);
 8000624:	2300      	movs	r3, #0
 8000626:	2120      	movs	r1, #32
 8000628:	4628      	mov	r0, r5
 800062a:	f7ff fe9d 	bl	8000368 <good_addr>
 800062e:	4604      	mov	r4, r0
 8000630:	2800      	cmp	r0, #0
 8000632:	f47f af22 	bne.w	800047a <firewall_dispatch+0xd2>
            if((arg2 < 1) || (arg2 > MAX_PIN_LEN)) {
 8000636:	9901      	ldr	r1, [sp, #4]
 8000638:	1e4b      	subs	r3, r1, #1
 800063a:	2b1f      	cmp	r3, #31
 800063c:	f200 81ab 	bhi.w	8000996 <firewall_dispatch+0x5ee>
                if(pin_prefix_words((char *)buf_io, arg2, (uint32_t *)buf_io)) {
 8000640:	462a      	mov	r2, r5
 8000642:	4628      	mov	r0, r5
 8000644:	f003 fc5c 	bl	8003f00 <pin_prefix_words>
 8000648:	e7e7      	b.n	800061a <firewall_dispatch+0x272>
 800064a:	bf00      	nop
 800064c:	40011c00 	.word	0x40011c00
 8000650:	0800e6d0 	.word	0x0800e6d0
 8000654:	40022000 	.word	0x40022000
 8000658:	0800d6b6 	.word	0x0800d6b6
 800065c:	0800e13b 	.word	0x0800e13b
 8000660:	0800d6bf 	.word	0x0800d6bf
 8000664:	0800da2a 	.word	0x0800da2a
 8000668:	0800d6ce 	.word	0x0800d6ce
 800066c:	0800d78e 	.word	0x0800d78e
 8000670:	0800d6dc 	.word	0x0800d6dc
 8000674:	0800d7bb 	.word	0x0800d7bb
 8000678:	0800d6e7 	.word	0x0800d6e7
 800067c:	20008000 	.word	0x20008000
 8000680:	0800db46 	.word	0x0800db46
            REQUIRE_OUT(32);
 8000684:	2300      	movs	r3, #0
 8000686:	2120      	movs	r1, #32
 8000688:	4628      	mov	r0, r5
 800068a:	f7ff fe6d 	bl	8000368 <good_addr>
 800068e:	4604      	mov	r4, r0
 8000690:	2800      	cmp	r0, #0
 8000692:	f47f aef2 	bne.w	800047a <firewall_dispatch+0xd2>
            memset(buf_io, 0x55, 32);       // to help show errors
 8000696:	2220      	movs	r2, #32
 8000698:	2155      	movs	r1, #85	; 0x55
 800069a:	4628      	mov	r0, r5
 800069c:	f00c ffc2 	bl	800d624 <memset>
            rng_buffer(buf_io, 32);
 80006a0:	2120      	movs	r1, #32
 80006a2:	4628      	mov	r0, r5
 80006a4:	f002 f854 	bl	8002750 <rng_buffer>
            break;
 80006a8:	e6e7      	b.n	800047a <firewall_dispatch+0xd2>
            REQUIRE_OUT(PIN_ATTEMPT_SIZE_V2);
 80006aa:	2300      	movs	r3, #0
 80006ac:	f44f 718c 	mov.w	r1, #280	; 0x118
 80006b0:	4628      	mov	r0, r5
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	f7ff fe58 	bl	8000368 <good_addr>
 80006b8:	4604      	mov	r4, r0
 80006ba:	2800      	cmp	r0, #0
 80006bc:	f47f aedd 	bne.w	800047a <firewall_dispatch+0xd2>
            switch(arg2) {
 80006c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d83d      	bhi.n	8000744 <firewall_dispatch+0x39c>
 80006c8:	e8df f003 	tbb	[pc, r3]
 80006cc:	110d0905 	.word	0x110d0905
 80006d0:	221d1915 	.word	0x221d1915
 80006d4:	26          	.byte	0x26
 80006d5:	00          	.byte	0x00
                    rv = pin_setup_attempt(args);
 80006d6:	4628      	mov	r0, r5
 80006d8:	f003 fc30 	bl	8003f3c <pin_setup_attempt>
 80006dc:	e6b0      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = pin_delay(args);
 80006de:	4628      	mov	r0, r5
 80006e0:	f003 fc9a 	bl	8004018 <pin_delay>
 80006e4:	e6ac      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = pin_login_attempt(args);
 80006e6:	4628      	mov	r0, r5
 80006e8:	f003 fc98 	bl	800401c <pin_login_attempt>
 80006ec:	e6a8      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = pin_change(args);
 80006ee:	4628      	mov	r0, r5
 80006f0:	f003 fd96 	bl	8004220 <pin_change>
 80006f4:	e6a4      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = pin_fetch_secret(args);
 80006f6:	4628      	mov	r0, r5
 80006f8:	f003 fe4a 	bl	8004390 <pin_fetch_secret>
 80006fc:	e6a0      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = pin_firmware_greenlight(args);
 80006fe:	4628      	mov	r0, r5
 8000700:	f004 f806 	bl	8004710 <pin_firmware_greenlight>
 8000704:	e69c      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = pin_long_secret(args, NULL);
 8000706:	2100      	movs	r1, #0
                    rv = pin_long_secret(args, &buf_io[PIN_ATTEMPT_SIZE_V2]);
 8000708:	4628      	mov	r0, r5
 800070a:	f003 ff43 	bl	8004594 <pin_long_secret>
 800070e:	e697      	b.n	8000440 <firewall_dispatch+0x98>
                    rv = pin_firmware_upgrade(args);
 8000710:	4628      	mov	r0, r5
 8000712:	f004 f83d 	bl	8004790 <pin_firmware_upgrade>
 8000716:	e693      	b.n	8000440 <firewall_dispatch+0x98>
                    REQUIRE_OUT(PIN_ATTEMPT_SIZE_V2 + AE_LONG_SECRET_LEN);
 8000718:	2300      	movs	r3, #0
 800071a:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800071e:	4628      	mov	r0, r5
 8000720:	f7ff fe22 	bl	8000368 <good_addr>
 8000724:	4604      	mov	r4, r0
 8000726:	2800      	cmp	r0, #0
 8000728:	f47f aea7 	bne.w	800047a <firewall_dispatch+0xd2>
                    rv = pin_long_secret(args, &buf_io[PIN_ATTEMPT_SIZE_V2]);
 800072c:	f505 718c 	add.w	r1, r5, #280	; 0x118
 8000730:	e7ea      	b.n	8000708 <firewall_dispatch+0x360>
            switch(arg2) {
 8000732:	9b01      	ldr	r3, [sp, #4]
 8000734:	2b64      	cmp	r3, #100	; 0x64
 8000736:	d041      	beq.n	80007bc <firewall_dispatch+0x414>
 8000738:	d806      	bhi.n	8000748 <firewall_dispatch+0x3a0>
 800073a:	2b01      	cmp	r3, #1
 800073c:	d01e      	beq.n	800077c <firewall_dispatch+0x3d4>
 800073e:	2b02      	cmp	r3, #2
 8000740:	d028      	beq.n	8000794 <firewall_dispatch+0x3ec>
 8000742:	b13b      	cbz	r3, 8000754 <firewall_dispatch+0x3ac>
 8000744:	2402      	movs	r4, #2
 8000746:	e698      	b.n	800047a <firewall_dispatch+0xd2>
 8000748:	2b65      	cmp	r3, #101	; 0x65
 800074a:	d03c      	beq.n	80007c6 <firewall_dispatch+0x41e>
 800074c:	2b66      	cmp	r3, #102	; 0x66
 800074e:	d1f9      	bne.n	8000744 <firewall_dispatch+0x39c>
                    flash_lockdown_hard(OB_RDP_LEVEL_2);        // No change possible after this.
 8000750:	20cc      	movs	r0, #204	; 0xcc
 8000752:	e034      	b.n	80007be <firewall_dispatch+0x416>
                    REQUIRE_OUT(32);
 8000754:	2120      	movs	r1, #32
 8000756:	4628      	mov	r0, r5
 8000758:	f7ff fe06 	bl	8000368 <good_addr>
 800075c:	4604      	mov	r4, r0
 800075e:	2800      	cmp	r0, #0
 8000760:	f47f ae8b 	bne.w	800047a <firewall_dispatch+0xd2>
                    memcpy(buf_io, rom_secrets->bag_number, 32);
 8000764:	4aa1      	ldr	r2, [pc, #644]	; (80009ec <firewall_dispatch+0x644>)
 8000766:	4ea2      	ldr	r6, [pc, #648]	; (80009f0 <firewall_dispatch+0x648>)
 8000768:	4613      	mov	r3, r2
 800076a:	cb03      	ldmia	r3!, {r0, r1}
 800076c:	42b3      	cmp	r3, r6
 800076e:	6028      	str	r0, [r5, #0]
 8000770:	6069      	str	r1, [r5, #4]
 8000772:	461a      	mov	r2, r3
 8000774:	f105 0508 	add.w	r5, r5, #8
 8000778:	d1f6      	bne.n	8000768 <firewall_dispatch+0x3c0>
 800077a:	e67e      	b.n	800047a <firewall_dispatch+0xd2>
                    REQUIRE_IN_ONLY(32);
 800077c:	2120      	movs	r1, #32
 800077e:	4628      	mov	r0, r5
 8000780:	f7ff fdf2 	bl	8000368 <good_addr>
 8000784:	4604      	mov	r4, r0
 8000786:	2800      	cmp	r0, #0
 8000788:	f47f ae77 	bne.w	800047a <firewall_dispatch+0xd2>
                    flash_save_bag_number(buf_io);
 800078c:	4628      	mov	r0, r5
 800078e:	f001 fcf9 	bl	8002184 <flash_save_bag_number>
                    break;
 8000792:	e672      	b.n	800047a <firewall_dispatch+0xd2>
                    REQUIRE_OUT(1);
 8000794:	2300      	movs	r3, #0
 8000796:	2101      	movs	r1, #1
 8000798:	4628      	mov	r0, r5
 800079a:	f7ff fde5 	bl	8000368 <good_addr>
 800079e:	4604      	mov	r4, r0
 80007a0:	2800      	cmp	r0, #0
 80007a2:	f47f ae6a 	bne.w	800047a <firewall_dispatch+0xd2>
    rng_delay();
 80007a6:	f001 ffe9 	bl	800277c <rng_delay>
    return ((FLASH->OPTR & FLASH_OPTR_RDP_Msk) == 0xCC);
 80007aa:	4b92      	ldr	r3, [pc, #584]	; (80009f4 <firewall_dispatch+0x64c>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	b2db      	uxtb	r3, r3
                    buf_io[0] = (flash_is_security_level2() ? 2 : 0xff);
 80007b0:	2bcc      	cmp	r3, #204	; 0xcc
 80007b2:	bf0c      	ite	eq
 80007b4:	2302      	moveq	r3, #2
 80007b6:	23ff      	movne	r3, #255	; 0xff
                    buf_io[0] = 32;
 80007b8:	702b      	strb	r3, [r5, #0]
                    break;
 80007ba:	e65e      	b.n	800047a <firewall_dispatch+0xd2>
                    flash_lockdown_hard(OB_RDP_LEVEL_0);        // wipes contents of flash (1->0)
 80007bc:	20aa      	movs	r0, #170	; 0xaa
                    flash_lockdown_hard(OB_RDP_LEVEL_2);        // No change possible after this.
 80007be:	f001 fde3 	bl	8002388 <flash_lockdown_hard>
    int rv = 0;
 80007c2:	2400      	movs	r4, #0
                    break;
 80007c4:	e659      	b.n	800047a <firewall_dispatch+0xd2>
                    flash_lockdown_hard(OB_RDP_LEVEL_1);        // Can only do 0->1 (experiments)
 80007c6:	20bb      	movs	r0, #187	; 0xbb
 80007c8:	e7f9      	b.n	80007be <firewall_dispatch+0x416>
            REQUIRE_OUT(128);
 80007ca:	2300      	movs	r3, #0
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	4628      	mov	r0, r5
 80007d0:	f7ff fdca 	bl	8000368 <good_addr>
 80007d4:	4604      	mov	r4, r0
 80007d6:	2800      	cmp	r0, #0
 80007d8:	f47f ae4f 	bne.w	800047a <firewall_dispatch+0xd2>
            ae_setup();
 80007dc:	f002 f8f2 	bl	80029c4 <ae_setup>
            rv = ae_config_read(buf_io);
 80007e0:	4628      	mov	r0, r5
 80007e2:	f002 fef0 	bl	80035c6 <ae_config_read>
 80007e6:	e718      	b.n	800061a <firewall_dispatch+0x272>
            switch(arg2) {
 80007e8:	9b01      	ldr	r3, [sp, #4]
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d8aa      	bhi.n	8000744 <firewall_dispatch+0x39c>
 80007ee:	e8df f003 	tbb	[pc, r3]
 80007f2:	0f02      	.short	0x0f02
 80007f4:	441d      	.short	0x441d
                    REQUIRE_OUT(8);
 80007f6:	2300      	movs	r3, #0
 80007f8:	2108      	movs	r1, #8
 80007fa:	4628      	mov	r0, r5
 80007fc:	f7ff fdb4 	bl	8000368 <good_addr>
 8000800:	4604      	mov	r4, r0
 8000802:	2800      	cmp	r0, #0
 8000804:	f47f ae39 	bne.w	800047a <firewall_dispatch+0xd2>
                    get_min_version(buf_io);
 8000808:	4628      	mov	r0, r5
 800080a:	f001 f9a5 	bl	8001b58 <get_min_version>
                    break;
 800080e:	e634      	b.n	800047a <firewall_dispatch+0xd2>
                    REQUIRE_IN_ONLY(8);
 8000810:	2301      	movs	r3, #1
 8000812:	2108      	movs	r1, #8
 8000814:	4628      	mov	r0, r5
 8000816:	f7ff fda7 	bl	8000368 <good_addr>
 800081a:	4604      	mov	r4, r0
 800081c:	2800      	cmp	r0, #0
 800081e:	f47f ae2c 	bne.w	800047a <firewall_dispatch+0xd2>
                    rv = check_is_downgrade(buf_io, NULL);
 8000822:	4601      	mov	r1, r0
 8000824:	4628      	mov	r0, r5
 8000826:	f001 f9b7 	bl	8001b98 <check_is_downgrade>
 800082a:	e609      	b.n	8000440 <firewall_dispatch+0x98>
                    REQUIRE_IN_ONLY(8);
 800082c:	2301      	movs	r3, #1
 800082e:	2108      	movs	r1, #8
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff fd99 	bl	8000368 <good_addr>
 8000836:	4604      	mov	r4, r0
 8000838:	2800      	cmp	r0, #0
 800083a:	f47f ae1e 	bne.w	800047a <firewall_dispatch+0xd2>
                    if(buf_io[0] < 0x10 || buf_io[0] >= 0x40) {
 800083e:	782b      	ldrb	r3, [r5, #0]
 8000840:	3b10      	subs	r3, #16
                        rv = ERANGE;
 8000842:	2b2f      	cmp	r3, #47	; 0x2f
                    } if(check_is_downgrade(buf_io, NULL)) {
 8000844:	4601      	mov	r1, r0
 8000846:	4628      	mov	r0, r5
                        rv = ERANGE;
 8000848:	bf88      	it	hi
 800084a:	2422      	movhi	r4, #34	; 0x22
                    } if(check_is_downgrade(buf_io, NULL)) {
 800084c:	f001 f9a4 	bl	8001b98 <check_is_downgrade>
 8000850:	2800      	cmp	r0, #0
 8000852:	f040 80c8 	bne.w	80009e6 <firewall_dispatch+0x63e>
                        get_min_version(min);
 8000856:	a80b      	add	r0, sp, #44	; 0x2c
 8000858:	f001 f97e 	bl	8001b58 <get_min_version>
                        if(memcmp(min, buf_io, 8) == 0) {
 800085c:	2208      	movs	r2, #8
 800085e:	4629      	mov	r1, r5
 8000860:	a80b      	add	r0, sp, #44	; 0x2c
 8000862:	f00c fea7 	bl	800d5b4 <memcmp>
 8000866:	2800      	cmp	r0, #0
 8000868:	f000 80bd 	beq.w	80009e6 <firewall_dispatch+0x63e>
                            if(record_highwater_version(buf_io)) {
 800086c:	4628      	mov	r0, r5
 800086e:	f001 fda5 	bl	80023bc <record_highwater_version>
                                rv = ENOMEM;
 8000872:	2800      	cmp	r0, #0
 8000874:	bf18      	it	ne
 8000876:	240c      	movne	r4, #12
 8000878:	e5ff      	b.n	800047a <firewall_dispatch+0xd2>
                    REQUIRE_OUT(4);
 800087a:	2300      	movs	r3, #0
 800087c:	2104      	movs	r1, #4
 800087e:	4628      	mov	r0, r5
 8000880:	f7ff fd72 	bl	8000368 <good_addr>
 8000884:	4604      	mov	r4, r0
 8000886:	2800      	cmp	r0, #0
 8000888:	f47f adf7 	bne.w	800047a <firewall_dispatch+0xd2>
                    ae_setup();
 800088c:	f002 f89a 	bl	80029c4 <ae_setup>
                    rv = ae_get_counter((uint32_t *)buf_io, 0) ? EIO: 0;
 8000890:	4621      	mov	r1, r4
 8000892:	4628      	mov	r0, r5
 8000894:	f002 fc87 	bl	80031a6 <ae_get_counter>
 8000898:	e6bf      	b.n	800061a <firewall_dispatch+0x272>
            REQUIRE_OUT(PIN_ATTEMPT_SIZE_V2 + sizeof(trick_slot_t));
 800089a:	2300      	movs	r3, #0
 800089c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80008a0:	4628      	mov	r0, r5
 80008a2:	f7ff fd61 	bl	8000368 <good_addr>
 80008a6:	4604      	mov	r4, r0
 80008a8:	2800      	cmp	r0, #0
 80008aa:	f47f ade6 	bne.w	800047a <firewall_dispatch+0xd2>
            rv = pin_check_logged_in(args, &trick_mode);
 80008ae:	a90b      	add	r1, sp, #44	; 0x2c
 80008b0:	4628      	mov	r0, r5
 80008b2:	f003 fc83 	bl	80041bc <pin_check_logged_in>
            if(rv) goto fail;
 80008b6:	4604      	mov	r4, r0
 80008b8:	2800      	cmp	r0, #0
 80008ba:	f47f adde 	bne.w	800047a <firewall_dispatch+0xd2>
            if(trick_mode) {
 80008be:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80008c2:	b10b      	cbz	r3, 80008c8 <firewall_dispatch+0x520>
                mcu_key_clear(NULL);
 80008c4:	f001 fdc8 	bl	8002458 <mcu_key_clear>
            switch(arg2) {
 80008c8:	9b01      	ldr	r3, [sp, #4]
 80008ca:	2b01      	cmp	r3, #1
            trick_slot_t *slot = (trick_slot_t *)(&buf_io[PIN_ATTEMPT_SIZE_V2]);
 80008cc:	f505 728c 	add.w	r2, r5, #280	; 0x118
            switch(arg2) {
 80008d0:	d00c      	beq.n	80008ec <firewall_dispatch+0x544>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d01b      	beq.n	800090e <firewall_dispatch+0x566>
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f47f af34 	bne.w	8000744 <firewall_dispatch+0x39c>
                    if(!trick_mode) {
 80008dc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f47f adca 	bne.w	800047a <firewall_dispatch+0xd2>
                        se2_clear_tricks();
 80008e6:	f007 fa11 	bl	8007d0c <se2_clear_tricks>
 80008ea:	e5c6      	b.n	800047a <firewall_dispatch+0xd2>
                    if(trick_mode) {
 80008ec:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80008f0:	2900      	cmp	r1, #0
 80008f2:	f47f af27 	bne.w	8000744 <firewall_dispatch+0x39c>
                        if(slot->pin_len > 16) {
 80008f6:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 80008fa:	2910      	cmp	r1, #16
 80008fc:	dc4b      	bgt.n	8000996 <firewall_dispatch+0x5ee>
                        if(se2_test_trick_pin(slot->pin, slot->pin_len, slot, true)) {
 80008fe:	f505 70b0 	add.w	r0, r5, #352	; 0x160
 8000902:	f007 fa69 	bl	8007dd8 <se2_test_trick_pin>
 8000906:	2800      	cmp	r0, #0
 8000908:	f47f adb7 	bne.w	800047a <firewall_dispatch+0xd2>
 800090c:	e71a      	b.n	8000744 <firewall_dispatch+0x39c>
                    if(!trick_mode) {
 800090e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8000912:	2b00      	cmp	r3, #0
 8000914:	f47f adb1 	bne.w	800047a <firewall_dispatch+0xd2>
                        rv = se2_save_trick(slot);
 8000918:	4610      	mov	r0, r2
 800091a:	f007 fb75 	bl	8008008 <se2_save_trick>
 800091e:	e58f      	b.n	8000440 <firewall_dispatch+0x98>
            if(arg2 == 0xBeef) {
 8000920:	9b01      	ldr	r3, [sp, #4]
 8000922:	f64b 62ef 	movw	r2, #48879	; 0xbeef
 8000926:	4293      	cmp	r3, r2
 8000928:	d103      	bne.n	8000932 <firewall_dispatch+0x58a>
                fast_wipe();
 800092a:	f001 fe87 	bl	800263c <fast_wipe>
            rv = EPERM;
 800092e:	2401      	movs	r4, #1
 8000930:	e5a3      	b.n	800047a <firewall_dispatch+0xd2>
            } else if(arg2 == 0xDead) {
 8000932:	f64d 62ad 	movw	r2, #57005	; 0xdead
 8000936:	4293      	cmp	r3, r2
 8000938:	d1f9      	bne.n	800092e <firewall_dispatch+0x586>
                mcu_key_clear(NULL);
 800093a:	2000      	movs	r0, #0
 800093c:	f001 fd8c 	bl	8002458 <mcu_key_clear>
                oled_show(screen_wiped);
 8000940:	482d      	ldr	r0, [pc, #180]	; (80009f8 <firewall_dispatch+0x650>)
 8000942:	f000 fa7f 	bl	8000e44 <oled_show>
                LOCKUP_FOREVER();
 8000946:	bf30      	wfi
 8000948:	e7fd      	b.n	8000946 <firewall_dispatch+0x59e>
            if(arg2 == 0xDead) fast_brick();
 800094a:	9a01      	ldr	r2, [sp, #4]
 800094c:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8000950:	429a      	cmp	r2, r3
 8000952:	d1ec      	bne.n	800092e <firewall_dispatch+0x586>
 8000954:	f001 fe44 	bl	80025e0 <fast_brick>
 8000958:	e7e9      	b.n	800092e <firewall_dispatch+0x586>
            REQUIRE_OUT(8);
 800095a:	2300      	movs	r3, #0
 800095c:	2108      	movs	r1, #8
 800095e:	4628      	mov	r0, r5
 8000960:	f7ff fd02 	bl	8000368 <good_addr>
 8000964:	4604      	mov	r4, r0
 8000966:	2800      	cmp	r0, #0
 8000968:	f47f ad87 	bne.w	800047a <firewall_dispatch+0xd2>
            mcu_key_usage(avail, consumed, total);
 800096c:	f105 0208 	add.w	r2, r5, #8
 8000970:	1d29      	adds	r1, r5, #4
 8000972:	4628      	mov	r0, r5
 8000974:	f001 fd9e 	bl	80024b4 <mcu_key_usage>
            break;
 8000978:	e57f      	b.n	800047a <firewall_dispatch+0xd2>
            REQUIRE_OUT(33);
 800097a:	2300      	movs	r3, #0
 800097c:	2121      	movs	r1, #33	; 0x21
 800097e:	4628      	mov	r0, r5
 8000980:	f7ff fcf2 	bl	8000368 <good_addr>
 8000984:	4604      	mov	r4, r0
 8000986:	2800      	cmp	r0, #0
 8000988:	f47f ad77 	bne.w	800047a <firewall_dispatch+0xd2>
            switch(arg2) {
 800098c:	9b01      	ldr	r3, [sp, #4]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d003      	beq.n	800099a <firewall_dispatch+0x5f2>
 8000992:	2b02      	cmp	r3, #2
 8000994:	d008      	beq.n	80009a8 <firewall_dispatch+0x600>
        rv = ERANGE;
 8000996:	2422      	movs	r4, #34	; 0x22
 8000998:	e56f      	b.n	800047a <firewall_dispatch+0xd2>
                    ae_setup();
 800099a:	f002 f813 	bl	80029c4 <ae_setup>
                    ae_secure_random(&buf_io[1]);
 800099e:	1c68      	adds	r0, r5, #1
 80009a0:	f002 fb78 	bl	8003094 <ae_secure_random>
                    buf_io[0] = 32;
 80009a4:	2320      	movs	r3, #32
 80009a6:	e707      	b.n	80007b8 <firewall_dispatch+0x410>
                    se2_read_rng(&buf_io[1]);
 80009a8:	1c68      	adds	r0, r5, #1
 80009aa:	f007 fd11 	bl	80083d0 <se2_read_rng>
                    buf_io[0] = 8;
 80009ae:	2308      	movs	r3, #8
 80009b0:	e702      	b.n	80007b8 <firewall_dispatch+0x410>
            REQUIRE_OUT(80);
 80009b2:	2300      	movs	r3, #0
 80009b4:	2150      	movs	r1, #80	; 0x50
 80009b6:	4628      	mov	r0, r5
 80009b8:	f7ff fcd6 	bl	8000368 <good_addr>
 80009bc:	4604      	mov	r4, r0
 80009be:	2800      	cmp	r0, #0
 80009c0:	f47f ad5b 	bne.w	800047a <firewall_dispatch+0xd2>
            strcpy((char *)buf_io, "ATECC608B\nDS28C36B");
 80009c4:	490d      	ldr	r1, [pc, #52]	; (80009fc <firewall_dispatch+0x654>)
 80009c6:	4628      	mov	r0, r5
 80009c8:	f00c fe42 	bl	800d650 <strcpy>
            break;
 80009cc:	e555      	b.n	800047a <firewall_dispatch+0xd2>
            if(incoming_lr <= BL_FLASH_BASE || incoming_lr >= (uint32_t)&firewall_starts) {
 80009ce:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 80009d2:	d902      	bls.n	80009da <firewall_dispatch+0x632>
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <firewall_dispatch+0x658>)
 80009d6:	429c      	cmp	r4, r3
 80009d8:	d302      	bcc.n	80009e0 <firewall_dispatch+0x638>
                fatal_error("LR");
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <firewall_dispatch+0x65c>)
 80009dc:	f000 f834 	bl	8000a48 <fatal_error>
                system_startup();
 80009e0:	f000 f890 	bl	8000b04 <system_startup>
            break;
 80009e4:	e6ed      	b.n	80007c2 <firewall_dispatch+0x41a>
                        rv = EAGAIN;
 80009e6:	240b      	movs	r4, #11
 80009e8:	e547      	b.n	800047a <firewall_dispatch+0xd2>
 80009ea:	bf00      	nop
 80009ec:	0801c050 	.word	0x0801c050
 80009f0:	0801c070 	.word	0x0801c070
 80009f4:	40022000 	.word	0x40022000
 80009f8:	0800e2c0 	.word	0x0800e2c0
 80009fc:	0800d6f0 	.word	0x0800d6f0
 8000a00:	08000300 	.word	0x08000300
 8000a04:	0800d703 	.word	0x0800d703

08000a08 <wipe_all_sram>:
//
    static inline void
memset4(uint32_t *dest, uint32_t value, uint32_t byte_len)
{
    for(; byte_len; byte_len-=4, dest++) {
        *dest = value;
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <wipe_all_sram+0x2c>)
    for(; byte_len; byte_len-=4, dest++) {
 8000a0a:	490b      	ldr	r1, [pc, #44]	; (8000a38 <wipe_all_sram+0x30>)

// wipe_all_sram()
//
    void
wipe_all_sram(void)
{
 8000a0c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
        *dest = value;
 8000a10:	f843 2b04 	str.w	r2, [r3], #4
    for(; byte_len; byte_len-=4, dest++) {
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d1fb      	bne.n	8000a10 <wipe_all_sram+0x8>
 8000a18:	4908      	ldr	r1, [pc, #32]	; (8000a3c <wipe_all_sram+0x34>)
 8000a1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
        *dest = value;
 8000a1e:	f843 2b04 	str.w	r2, [r3], #4
    for(; byte_len; byte_len-=4, dest++) {
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d1fb      	bne.n	8000a1e <wipe_all_sram+0x16>
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <wipe_all_sram+0x38>)
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <wipe_all_sram+0x3c>)
        *dest = value;
 8000a2a:	f843 2b04 	str.w	r2, [r3], #4
    for(; byte_len; byte_len-=4, dest++) {
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d1fb      	bne.n	8000a2a <wipe_all_sram+0x22>
    STATIC_ASSERT((SRAM3_BASE + SRAM3_SIZE) - BL_SRAM_BASE == 8192);

    memset4((void *)SRAM1_BASE, noise, SRAM1_SIZE_MAX);
    memset4((void *)SRAM2_BASE, noise, SRAM2_SIZE);
    memset4((void *)SRAM3_BASE, noise, SRAM3_SIZE - (BL_SRAM_BASE - SRAM3_BASE));
}
 8000a32:	4770      	bx	lr
 8000a34:	deadbeef 	.word	0xdeadbeef
 8000a38:	20030000 	.word	0x20030000
 8000a3c:	10010000 	.word	0x10010000
 8000a40:	20040000 	.word	0x20040000
 8000a44:	20042000 	.word	0x20042000

08000a48 <fatal_error>:

// fatal_error(const char *msg)
//
    void __attribute__((noreturn))
fatal_error(const char *msgvoid)
{
 8000a48:	b508      	push	{r3, lr}
    oled_setup();
 8000a4a:	f000 f96b 	bl	8000d24 <oled_setup>
    oled_show(screen_fatal);
 8000a4e:	4802      	ldr	r0, [pc, #8]	; (8000a58 <fatal_error+0x10>)
 8000a50:	f000 f9f8 	bl	8000e44 <oled_show>
    BREAKPOINT;
#endif

    // Maybe should do a reset after a delay, like with
    // the watchdog timer or something.
    LOCKUP_FOREVER();
 8000a54:	bf30      	wfi
 8000a56:	e7fd      	b.n	8000a54 <fatal_error+0xc>
 8000a58:	0800db02 	.word	0x0800db02

08000a5c <fatal_mitm>:

// fatal_mitm()
//
    void __attribute__((noreturn))
fatal_mitm(void)
{
 8000a5c:	b508      	push	{r3, lr}
    oled_setup();
 8000a5e:	f000 f961 	bl	8000d24 <oled_setup>
    oled_show(screen_mitm);
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <fatal_mitm+0x14>)
 8000a64:	f000 f9ee 	bl	8000e44 <oled_show>

#ifdef RELEASE
    wipe_all_sram();
 8000a68:	f7ff ffce 	bl	8000a08 <wipe_all_sram>
#endif

    LOCKUP_FOREVER();
 8000a6c:	bf30      	wfi
 8000a6e:	e7fd      	b.n	8000a6c <fatal_mitm+0x10>
 8000a70:	0800dc06 	.word	0x0800dc06

08000a74 <enter_dfu>:

// enter_dfu()
//
    void __attribute__((noreturn))
enter_dfu(void)
{
 8000a74:	b507      	push	{r0, r1, r2, lr}
    puts("enter_dfu()");
 8000a76:	481f      	ldr	r0, [pc, #124]	; (8000af4 <enter_dfu+0x80>)
 8000a78:	f004 f98c 	bl	8004d94 <puts>

    // clear the green light, if set
    ae_setup();
 8000a7c:	f001 ffa2 	bl	80029c4 <ae_setup>
    ae_set_gpio(0);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f002 fd21 	bl	80034c8 <ae_set_gpio>

    // Reset huge parts of the chip
    __HAL_RCC_APB1_FORCE_RESET();
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <enter_dfu+0x84>)
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    __HAL_RCC_APB1_RELEASE_RESET();
 8000a8c:	2200      	movs	r2, #0
    __HAL_RCC_APB1_FORCE_RESET();
 8000a8e:	6399      	str	r1, [r3, #56]	; 0x38
 8000a90:	63d9      	str	r1, [r3, #60]	; 0x3c
    __HAL_RCC_APB1_RELEASE_RESET();
 8000a92:	639a      	str	r2, [r3, #56]	; 0x38
 8000a94:	63da      	str	r2, [r3, #60]	; 0x3c

    __HAL_RCC_APB2_FORCE_RESET();
 8000a96:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_APB2_RELEASE_RESET();
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40

    __HAL_RCC_AHB1_FORCE_RESET();
 8000a9a:	6299      	str	r1, [r3, #40]	; 0x28
    __HAL_RCC_AHB1_RELEASE_RESET();
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
    // But not this; it borks things.
    __HAL_RCC_AHB2_FORCE_RESET();
    __HAL_RCC_AHB2_RELEASE_RESET();
#endif

    __HAL_RCC_AHB3_FORCE_RESET();
 8000a9e:	6319      	str	r1, [r3, #48]	; 0x30
    __HAL_RCC_AHB3_RELEASE_RESET();
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30

    __HAL_FIREWALL_PREARM_ENABLE();
 8000aa2:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8000aa6:	6a1a      	ldr	r2, [r3, #32]
 8000aa8:	f042 0201 	orr.w	r2, r2, #1
 8000aac:	621a      	str	r2, [r3, #32]
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	9b01      	ldr	r3, [sp, #4]

    // Wipe all of memory SRAM, just in case 
    // there is some way to trick us into DFU
    // after sensitive content in place.
    wipe_all_sram();
 8000ab8:	f7ff ffa6 	bl	8000a08 <wipe_all_sram>
    rng_delay();
 8000abc:	f001 fe5e 	bl	800277c <rng_delay>
    return ((FLASH->OPTR & FLASH_OPTR_RDP_Msk) == 0xCC);
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <enter_dfu+0x88>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	b2db      	uxtb	r3, r3

    if(flash_is_security_level2()) {
 8000ac6:	2bcc      	cmp	r3, #204	; 0xcc
 8000ac8:	d101      	bne.n	8000ace <enter_dfu+0x5a>
        // cannot do DFU in RDP=2, so just die. Helps to preserve screen
        LOCKUP_FOREVER();
 8000aca:	bf30      	wfi
 8000acc:	e7fd      	b.n	8000aca <enter_dfu+0x56>
    }

    // Reset clocks.
    HAL_RCC_DeInit();
 8000ace:	f007 fdbd 	bl	800864c <HAL_RCC_DeInit>

    // move system ROM into 0x0
    __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <enter_dfu+0x8c>)
 8000ad4:	6813      	ldr	r3, [r2, #0]
 8000ad6:	f023 0307 	bic.w	r3, r3, #7
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6013      	str	r3, [r2, #0]

    // need this here?!
    asm("nop; nop; nop; nop;");
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop

    // simulate a reset vector
    __ASM volatile ("movs r0, #0\n"
 8000ae8:	2000      	movs	r0, #0
 8000aea:	6803      	ldr	r3, [r0, #0]
 8000aec:	f383 8808 	msr	MSP, r3
 8000af0:	6843      	ldr	r3, [r0, #4]
 8000af2:	4798      	blx	r3
                    "ldr r3, [r0, #4]\n"
                    "blx r3"
        : : : "r0", "r3");      // also SP

    // NOT-REACHED.
    __builtin_unreachable();
 8000af4:	0800d706 	.word	0x0800d706
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40022000 	.word	0x40022000
 8000b00:	40010000 	.word	0x40010000

08000b04 <system_startup>:
{
 8000b04:	b510      	push	{r4, lr}
    system_init0();
 8000b06:	f001 f985 	bl	8001e14 <system_init0>
    clocks_setup();
 8000b0a:	f001 f9a5 	bl	8001e58 <clocks_setup>
    rng_setup();            // needs to be super early
 8000b0e:	f001 fdf3 	bl	80026f8 <rng_setup>
    rng_delay();
 8000b12:	f001 fe33 	bl	800277c <rng_delay>
    if(!check_all_ones(rom_secrets->bag_number, sizeof(rom_secrets->bag_number))
 8000b16:	4838      	ldr	r0, [pc, #224]	; (8000bf8 <system_startup+0xf4>)
 8000b18:	2120      	movs	r1, #32
 8000b1a:	f001 fdb1 	bl	8002680 <check_all_ones>
 8000b1e:	b948      	cbnz	r0, 8000b34 <system_startup+0x30>
    rng_delay();
 8000b20:	f001 fe2c 	bl	800277c <rng_delay>
    return ((FLASH->OPTR & FLASH_OPTR_RDP_Msk) == 0xCC);
 8000b24:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <system_startup+0xf8>)
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	b2db      	uxtb	r3, r3
            && !flash_is_security_level2()
 8000b2a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b2c:	d002      	beq.n	8000b34 <system_startup+0x30>
        flash_lockdown_hard(OB_RDP_LEVEL_2);
 8000b2e:	20cc      	movs	r0, #204	; 0xcc
 8000b30:	f001 fc2a 	bl	8002388 <flash_lockdown_hard>
    gpio_setup();
 8000b34:	f002 fef0 	bl	8003918 <gpio_setup>
    uint32_t reset_reason = RCC->CSR;
 8000b38:	4c31      	ldr	r4, [pc, #196]	; (8000c00 <system_startup+0xfc>)
    console_setup();
 8000b3a:	f004 f851 	bl	8004be0 <console_setup>
    puts2(BOOT_BANNER);
 8000b3e:	4831      	ldr	r0, [pc, #196]	; (8000c04 <system_startup+0x100>)
 8000b40:	f004 f89a 	bl	8004c78 <puts2>
    puts(version_string);
 8000b44:	4830      	ldr	r0, [pc, #192]	; (8000c08 <system_startup+0x104>)
 8000b46:	f004 f925 	bl	8004d94 <puts>
    uint32_t reset_reason = RCC->CSR;
 8000b4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    if(reset_reason & RCC_CSR_FWRSTF) {
 8000b4e:	01db      	lsls	r3, r3, #7
 8000b50:	d502      	bpl.n	8000b58 <system_startup+0x54>
        puts(">FIREWALLED<");
 8000b52:	482e      	ldr	r0, [pc, #184]	; (8000c0c <system_startup+0x108>)
 8000b54:	f004 f91e 	bl	8004d94 <puts>
    SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000b58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b60:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    if(memcmp(dfu_flag->magic, REBOOT_TO_DFU, sizeof(dfu_flag->magic)) == 0) {
 8000b64:	4c2a      	ldr	r4, [pc, #168]	; (8000c10 <system_startup+0x10c>)
    pin_setup0();
 8000b66:	f003 f935 	bl	8003dd4 <pin_setup0>
    rng_delay();
 8000b6a:	f001 fe07 	bl	800277c <rng_delay>
    oled_setup();
 8000b6e:	f000 f8d9 	bl	8000d24 <oled_setup>
    if(memcmp(dfu_flag->magic, REBOOT_TO_DFU, sizeof(dfu_flag->magic)) == 0) {
 8000b72:	4928      	ldr	r1, [pc, #160]	; (8000c14 <system_startup+0x110>)
 8000b74:	2208      	movs	r2, #8
 8000b76:	4620      	mov	r0, r4
 8000b78:	f00c fd1c 	bl	800d5b4 <memcmp>
 8000b7c:	b928      	cbnz	r0, 8000b8a <system_startup+0x86>
        dfu_flag->magic[0] = 0;
 8000b7e:	7020      	strb	r0, [r4, #0]
        oled_show(dfu_flag->screen);
 8000b80:	68a0      	ldr	r0, [r4, #8]
 8000b82:	f000 f95f 	bl	8000e44 <oled_show>
        enter_dfu();
 8000b86:	f7ff ff75 	bl	8000a74 <enter_dfu>
    rng_delay();
 8000b8a:	f001 fdf7 	bl	800277c <rng_delay>
    oled_show_progress(screen_verify, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4821      	ldr	r0, [pc, #132]	; (8000c18 <system_startup+0x114>)
 8000b92:	f000 f999 	bl	8000ec8 <oled_show_progress>
    wipe_all_sram();
 8000b96:	f7ff ff37 	bl	8000a08 <wipe_all_sram>
    ae_setup();
 8000b9a:	f001 ff13 	bl	80029c4 <ae_setup>
    ae_set_gpio(0);         // turn light red
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f002 fc92 	bl	80034c8 <ae_set_gpio>
    se2_setup();
 8000ba4:	f007 f86c 	bl	8007c80 <se2_setup>
    se2_probe();
 8000ba8:	f006 fdf0 	bl	800778c <se2_probe>
    flash_setup();
 8000bac:	f001 fb56 	bl	800225c <flash_setup>
    psram_setup();
 8000bb0:	f004 f928 	bl	8004e04 <psram_setup>
    if(ae_pair_unlock() != 0) {
 8000bb4:	f002 f8fc 	bl	8002db0 <ae_pair_unlock>
 8000bb8:	b138      	cbz	r0, 8000bca <system_startup+0xc6>
        oled_show(screen_brick);
 8000bba:	4818      	ldr	r0, [pc, #96]	; (8000c1c <system_startup+0x118>)
 8000bbc:	f000 f942 	bl	8000e44 <oled_show>
        puts("pair-bricked");
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <system_startup+0x11c>)
 8000bc2:	f004 f8e7 	bl	8004d94 <puts>
        LOCKUP_FOREVER();
 8000bc6:	bf30      	wfi
 8000bc8:	e7fd      	b.n	8000bc6 <system_startup+0xc2>
    puts2("Verify: ");
 8000bca:	4816      	ldr	r0, [pc, #88]	; (8000c24 <system_startup+0x120>)
 8000bcc:	f004 f854 	bl	8004c78 <puts2>
    bool main_ok = verify_firmware();
 8000bd0:	f001 f8a4 	bl	8001d1c <verify_firmware>
    if(main_ok) {
 8000bd4:	b120      	cbz	r0, 8000be0 <system_startup+0xdc>
}
 8000bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        oled_show(screen_blankish);
 8000bda:	4813      	ldr	r0, [pc, #76]	; (8000c28 <system_startup+0x124>)
 8000bdc:	f000 b932 	b.w	8000e44 <oled_show>
    psram_recover_firmware();
 8000be0:	f004 fa5e 	bl	80050a0 <psram_recover_firmware>
    rng_delay();
 8000be4:	f001 fdca 	bl	800277c <rng_delay>
    return ((FLASH->OPTR & FLASH_OPTR_RDP_Msk) == 0xCC);
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <system_startup+0xf8>)
 8000bea:	6a1b      	ldr	r3, [r3, #32]
 8000bec:	b2db      	uxtb	r3, r3
    if(!flash_is_security_level2()) {
 8000bee:	2bcc      	cmp	r3, #204	; 0xcc
 8000bf0:	d1c9      	bne.n	8000b86 <system_startup+0x82>
    while(1) sdcard_recovery();
 8000bf2:	f004 fc05 	bl	8005400 <sdcard_recovery>
 8000bf6:	e7fc      	b.n	8000bf2 <system_startup+0xee>
 8000bf8:	0801c050 	.word	0x0801c050
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	40021000 	.word	0x40021000
 8000c04:	0800d712 	.word	0x0800d712
 8000c08:	0800e6d0 	.word	0x0800e6d0
 8000c0c:	0800d726 	.word	0x0800d726
 8000c10:	20008000 	.word	0x20008000
 8000c14:	0800d6e7 	.word	0x0800d6e7
 8000c18:	0800e1f2 	.word	0x0800e1f2
 8000c1c:	0800d7bb 	.word	0x0800d7bb
 8000c20:	0800d733 	.word	0x0800d733
 8000c24:	0800d740 	.word	0x0800d740
 8000c28:	0800d78e 	.word	0x0800d78e

08000c2c <write_bytes>:
    static inline void
write_bytes(int len, const uint8_t *buf)
{
#ifndef DISABLE_OLED
    // send via SPI(1)
    HAL_SPI_Transmit(&spi_port, (uint8_t *)buf, len, HAL_MAX_DELAY);
 8000c2c:	b282      	uxth	r2, r0
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c32:	4801      	ldr	r0, [pc, #4]	; (8000c38 <write_bytes+0xc>)
 8000c34:	f000 bc06 	b.w	8001444 <HAL_SPI_Transmit>
 8000c38:	2009e154 	.word	0x2009e154

08000c3c <oled_write_cmd>:

// oled_write_cmd()
//
    void
oled_write_cmd(uint8_t cmd)
{
 8000c3c:	b507      	push	{r0, r1, r2, lr}
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000c3e:	2201      	movs	r2, #1
{
 8000c40:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000c44:	2110      	movs	r1, #16
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f000 fb5b 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f000 fb54 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2110      	movs	r1, #16
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fb4e 	bl	8001304 <HAL_GPIO_WritePin>

    write_bytes(1, &cmd);
 8000c68:	f10d 0107 	add.w	r1, sp, #7
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff ffdd 	bl	8000c2c <write_bytes>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2110      	movs	r1, #16
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f000 fb43 	bl	8001304 <HAL_GPIO_WritePin>
}
 8000c7e:	b003      	add	sp, #12
 8000c80:	f85d fb04 	ldr.w	pc, [sp], #4

08000c84 <oled_write_cmd_sequence>:

// oled_write_cmd_sequence()
//
    void
oled_write_cmd_sequence(int len, const uint8_t *cmds)
{
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	4605      	mov	r5, r0
 8000c88:	460e      	mov	r6, r1
    for(int i=0; i<len; i++) {
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	42ac      	cmp	r4, r5
 8000c8e:	db00      	blt.n	8000c92 <oled_write_cmd_sequence+0xe>
        oled_write_cmd(cmds[i]);
    }
}
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
        oled_write_cmd(cmds[i]);
 8000c92:	5d30      	ldrb	r0, [r6, r4]
 8000c94:	f7ff ffd2 	bl	8000c3c <oled_write_cmd>
    for(int i=0; i<len; i++) {
 8000c98:	3401      	adds	r4, #1
 8000c9a:	e7f7      	b.n	8000c8c <oled_write_cmd_sequence+0x8>

08000c9c <oled_write_data>:

// oled_write_data()
//
    void
oled_write_data(int len, const uint8_t *pixels)
{
 8000c9c:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000c9e:	2201      	movs	r2, #1
{
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	2110      	movs	r1, #16
 8000caa:	f000 fb2b 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fb24 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f000 fb1e 	bl	8001304 <HAL_GPIO_WritePin>

    write_bytes(len, pixels);
 8000cc8:	4629      	mov	r1, r5
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f7ff ffae 	bl	8000c2c <write_bytes>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
}
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f000 bb12 	b.w	8001304 <HAL_GPIO_WritePin>

08000ce0 <oled_spi_setup>:
//
// Just setup SPI, do not reset display, etc.
//
    void
oled_spi_setup(void)
{
 8000ce0:	b538      	push	{r3, r4, r5, lr}
#ifndef DISABLE_OLED
    // might already be setup
    if(spi_port.Instance == SPI1) return;
 8000ce2:	4c0e      	ldr	r4, [pc, #56]	; (8000d1c <oled_spi_setup+0x3c>)
 8000ce4:	4d0e      	ldr	r5, [pc, #56]	; (8000d20 <oled_spi_setup+0x40>)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d016      	beq.n	8000d1a <oled_spi_setup+0x3a>

    memset(&spi_port, 0, sizeof(spi_port));
 8000cec:	f104 0008 	add.w	r0, r4, #8
 8000cf0:	225c      	movs	r2, #92	; 0x5c
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f00c fc96 	bl	800d624 <memset>

    spi_port.Instance = SPI1;

    // see SPI_InitTypeDef
    spi_port.Init.Mode = SPI_MODE_MASTER;
 8000cf8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000cfc:	6063      	str	r3, [r4, #4]
    spi_port.Init.Direction = SPI_DIRECTION_2LINES;
    spi_port.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d02:	60e3      	str	r3, [r4, #12]
    spi_port.Init.CLKPolarity = SPI_POLARITY_LOW;
    spi_port.Init.CLKPhase = SPI_PHASE_1EDGE;
    spi_port.Init.NSS = SPI_NSS_SOFT;
    spi_port.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;    // conservative
 8000d04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d08:	2318      	movs	r3, #24
 8000d0a:	e9c4 0306 	strd	r0, r3, [r4, #24]
    spi_port.Instance = SPI1;
 8000d0e:	6025      	str	r5, [r4, #0]
    spi_port.Init.FirstBit = SPI_FIRSTBIT_MSB;
    spi_port.Init.TIMode = SPI_TIMODE_DISABLED;
    spi_port.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;

    HAL_SPI_Init(&spi_port);
 8000d10:	4620      	mov	r0, r4
#endif
}
 8000d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_SPI_Init(&spi_port);
 8000d16:	f000 bb37 	b.w	8001388 <HAL_SPI_Init>
}
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
 8000d1c:	2009e154 	.word	0x2009e154
 8000d20:	40013000 	.word	0x40013000

08000d24 <oled_setup>:
//
// Ok to call this lots.
//
    void
oled_setup(void)
{
 8000d24:	b530      	push	{r4, r5, lr}
    puts("oled disabled");return;     // disable so I can use MCO
#endif

    static uint32_t inited;

    if(inited == 0x238a572F) {
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <oled_setup+0xb4>)
 8000d28:	4a2c      	ldr	r2, [pc, #176]	; (8000ddc <oled_setup+0xb8>)
 8000d2a:	6819      	ldr	r1, [r3, #0]
 8000d2c:	4291      	cmp	r1, r2
{
 8000d2e:	b089      	sub	sp, #36	; 0x24
    if(inited == 0x238a572F) {
 8000d30:	d050      	beq.n	8000dd4 <oled_setup+0xb0>
        return;
    }
    inited = 0x238a572F;
 8000d32:	601a      	str	r2, [r3, #0]

    // enable some internal clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <oled_setup+0xbc>)
    __HAL_RCC_SPI1_CLK_ENABLE();

    // simple pins
    GPIO_InitTypeDef setup = {
 8000d36:	4d2b      	ldr	r5, [pc, #172]	; (8000de4 <oled_setup+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3a:	f042 0201 	orr.w	r2, r2, #1
 8000d3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d42:	f002 0201 	and.w	r2, r2, #1
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d50:	661a      	str	r2, [r3, #96]	; 0x60
 8000d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitTypeDef setup = {
 8000d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5e:	ac03      	add	r4, sp, #12
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	682b      	ldr	r3, [r5, #0]
 8000d64:	6023      	str	r3, [r4, #0]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_MEDIUM,
        .Alternate = 0,
    };
    HAL_GPIO_Init(GPIOA, &setup);
 8000d66:	a903      	add	r1, sp, #12
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f000 f950 	bl	8001010 <HAL_GPIO_Init>

    // starting values
    HAL_GPIO_WritePin(GPIOA, RESET_PIN | CS_PIN | DC_PIN, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f000 fac3 	bl	8001304 <HAL_GPIO_WritePin>

    // SPI pins
    setup.Pin = SPI_SCK | SPI_MOSI;
    setup.Mode = GPIO_MODE_AF_PP;
 8000d7e:	22a0      	movs	r2, #160	; 0xa0
 8000d80:	2302      	movs	r3, #2
 8000d82:	e9cd 2303 	strd	r2, r3, [sp, #12]
    setup.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &setup);
 8000d86:	a903      	add	r1, sp, #12
    setup.Alternate = GPIO_AF5_SPI1;
 8000d88:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &setup);
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    setup.Alternate = GPIO_AF5_SPI1;
 8000d8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &setup);
 8000d90:	f000 f93e 	bl	8001010 <HAL_GPIO_Init>

    // lock the RESET pin so that St's DFU code doesn't clear screen
    // it might be trying to use it a MISO signal for SPI loading
    HAL_GPIO_LockPin(GPIOA, RESET_PIN | CS_PIN | DC_PIN);
 8000d94:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f000 fabb 	bl	8001316 <HAL_GPIO_LockPin>

    // 10ms low-going pulse on reset pin
    delay_ms(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f002 fda9 	bl	80038f8 <delay_ms>
    HAL_GPIO_WritePin(GPIOA, RESET_PIN, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f000 faa9 	bl	8001304 <HAL_GPIO_WritePin>
    delay_ms(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f002 fda0 	bl	80038f8 <delay_ms>
    HAL_GPIO_WritePin(GPIOA, RESET_PIN, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f000 faa0 	bl	8001304 <HAL_GPIO_WritePin>

    oled_spi_setup();
 8000dc4:	f7ff ff8c 	bl	8000ce0 <oled_spi_setup>
    // this code:
    //      '0x37c', '0x1700', '0x603'
    //SPI1->CR1 = 0x354;

    // write a sequence to reset things
    oled_write_cmd_sequence(sizeof(reset_commands), reset_commands);
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <oled_setup+0xc4>)
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f7ff ff5a 	bl	8000c84 <oled_write_cmd_sequence>

    rng_delay();
 8000dd0:	f001 fcd4 	bl	800277c <rng_delay>
}
 8000dd4:	b009      	add	sp, #36	; 0x24
 8000dd6:	bd30      	pop	{r4, r5, pc}
 8000dd8:	2009e150 	.word	0x2009e150
 8000ddc:	238a572f 	.word	0x238a572f
 8000de0:	40021000 	.word	0x40021000
 8000de4:	0800d74c 	.word	0x0800d74c
 8000de8:	0800d76f 	.word	0x0800d76f

08000dec <oled_show_raw>:
//
// No decompression.
//
    void
oled_show_raw(uint32_t len, const uint8_t *pixels)
{
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4604      	mov	r4, r0
 8000df0:	460d      	mov	r5, r1
    oled_setup();
 8000df2:	f7ff ff97 	bl	8000d24 <oled_setup>

    oled_write_cmd_sequence(sizeof(before_show), before_show);
 8000df6:	4912      	ldr	r1, [pc, #72]	; (8000e40 <oled_show_raw+0x54>)
 8000df8:	2006      	movs	r0, #6
 8000dfa:	f7ff ff43 	bl	8000c84 <oled_write_cmd_sequence>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2110      	movs	r1, #16
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e06:	f000 fa7d 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 fa76 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f000 fa70 	bl	8001304 <HAL_GPIO_WritePin>

    write_bytes(len, pixels);
 8000e24:	4629      	mov	r1, r5
 8000e26:	4620      	mov	r0, r4
 8000e28:	f7ff ff00 	bl	8000c2c <write_bytes>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2110      	movs	r1, #16
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 fa66 	bl	8001304 <HAL_GPIO_WritePin>
    rng_delay();
}
 8000e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    rng_delay();
 8000e3c:	f001 bc9e 	b.w	800277c <rng_delay>
 8000e40:	0800d769 	.word	0x0800d769

08000e44 <oled_show>:
//
// Perform simple RLE decompression.
//
    void
oled_show(const uint8_t *pixels)
{
 8000e44:	b530      	push	{r4, r5, lr}
 8000e46:	b0a1      	sub	sp, #132	; 0x84
 8000e48:	4604      	mov	r4, r0
    oled_setup();
 8000e4a:	f7ff ff6b 	bl	8000d24 <oled_setup>

    oled_write_cmd_sequence(sizeof(before_show), before_show);
 8000e4e:	491d      	ldr	r1, [pc, #116]	; (8000ec4 <oled_show+0x80>)
 8000e50:	2006      	movs	r0, #6
 8000e52:	f7ff ff17 	bl	8000c84 <oled_write_cmd_sequence>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f000 fa51 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 fa4a 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2110      	movs	r1, #16
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f000 fa44 	bl	8001304 <HAL_GPIO_WritePin>
    uint8_t         buf[127];
    const uint8_t *p = pixels;

    // NOTE: must also update code in oled_show_progress, which dups this heavily.
    while(1) {
        uint8_t hdr = *(p++);
 8000e7c:	7823      	ldrb	r3, [r4, #0]
        if(!hdr) break;
 8000e7e:	b1b3      	cbz	r3, 8000eae <oled_show+0x6a>

        uint8_t len = hdr & 0x7f;
 8000e80:	f003 057f 	and.w	r5, r3, #127	; 0x7f
        if(hdr & 0x80) {
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	d50b      	bpl.n	8000ea0 <oled_show+0x5c>
        uint8_t hdr = *(p++);
 8000e88:	3401      	adds	r4, #1
            // random bytes follow
            memcpy(buf, p, len);
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	462a      	mov	r2, r5
 8000e8e:	4668      	mov	r0, sp
 8000e90:	f00c fba0 	bl	800d5d4 <memcpy>
            p += len;
 8000e94:	442c      	add	r4, r5
            // repeat same byte
            memset(buf, *p, len);
            p++;
        }

        write_bytes(len, buf);
 8000e96:	4669      	mov	r1, sp
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f7ff fec7 	bl	8000c2c <write_bytes>
    while(1) {
 8000e9e:	e7ed      	b.n	8000e7c <oled_show+0x38>
            memset(buf, *p, len);
 8000ea0:	7861      	ldrb	r1, [r4, #1]
 8000ea2:	462a      	mov	r2, r5
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f00c fbbd 	bl	800d624 <memset>
            p++;
 8000eaa:	3402      	adds	r4, #2
 8000eac:	e7f3      	b.n	8000e96 <oled_show+0x52>
    }

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f000 fa25 	bl	8001304 <HAL_GPIO_WritePin>
    rng_delay();
 8000eba:	f001 fc5f 	bl	800277c <rng_delay>
}
 8000ebe:	b021      	add	sp, #132	; 0x84
 8000ec0:	bd30      	pop	{r4, r5, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800d769 	.word	0x0800d769

08000ec8 <oled_show_progress>:
//
// Perform simple RLE decompression, and add a bar on final screen line.
//
    void
oled_show_progress(const uint8_t *pixels, int progress)
{
 8000ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ecc:	b0a1      	sub	sp, #132	; 0x84
 8000ece:	460d      	mov	r5, r1
 8000ed0:	4606      	mov	r6, r0
    oled_setup();
 8000ed2:	f7ff ff27 	bl	8000d24 <oled_setup>

    oled_write_cmd_sequence(sizeof(before_show), before_show);
 8000ed6:	493b      	ldr	r1, [pc, #236]	; (8000fc4 <oled_show_progress+0xfc>)
 8000ed8:	2006      	movs	r0, #6
 8000eda:	f7ff fed3 	bl	8000c84 <oled_write_cmd_sequence>

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f000 fa0d 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DC_PIN, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f000 fa06 	bl	8001304 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CS_PIN, 0);
 8000ef8:	2110      	movs	r1, #16
 8000efa:	2200      	movs	r2, #0
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f000 fa00 	bl	8001304 <HAL_GPIO_WritePin>

    uint8_t         buf[127];
    const uint8_t *p = pixels;

    const uint16_t p_start = 896;
    uint32_t p_count = 1280 * progress / 1000;
 8000f04:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f08:	434d      	muls	r5, r1
 8000f0a:	2400      	movs	r4, #0
 8000f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f10:	fb95 f5f1 	sdiv	r5, r5, r1

    if(p_count > 128) p_count = 128;
 8000f14:	2d80      	cmp	r5, #128	; 0x80
 8000f16:	bf28      	it	cs
 8000f18:	2580      	movcs	r5, #128	; 0x80
    uint32_t p_count = 1280 * progress / 1000;
 8000f1a:	46a0      	mov	r8, r4

    bool last_line = false;

    uint16_t offset = 0;
    while(1) {
        uint8_t hdr = *(p++);
 8000f1c:	7833      	ldrb	r3, [r6, #0]
        if(hdr == 0) break;
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d045      	beq.n	8000fae <oled_show_progress+0xe6>

        uint8_t len = hdr & 0x7f;
 8000f22:	f003 097f 	and.w	r9, r3, #127	; 0x7f
        if(hdr & 0x80) {
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	d524      	bpl.n	8000f74 <oled_show_progress+0xac>
        uint8_t hdr = *(p++);
 8000f2a:	3601      	adds	r6, #1
            // random bytes follow
            memcpy(buf, p, len);
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	464a      	mov	r2, r9
 8000f30:	4668      	mov	r0, sp
 8000f32:	f00c fb4f 	bl	800d5d4 <memcpy>
            p += len;
 8000f36:	444e      	add	r6, r9
            // repeat same byte
            memset(buf, *p, len);
            p++;
        }

        if(!last_line && (offset+len) >= p_start) {
 8000f38:	f1b8 0f00 	cmp.w	r8, #0
 8000f3c:	d117      	bne.n	8000f6e <oled_show_progress+0xa6>
 8000f3e:	eb04 0309 	add.w	r3, r4, r9
 8000f42:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000f46:	db29      	blt.n	8000f9c <oled_show_progress+0xd4>
            last_line = true;

            // adjust so we're aligned w/ last line
            int h = p_start - offset;
            if(h) {
 8000f48:	f5d4 7460 	rsbs	r4, r4, #896	; 0x380
 8000f4c:	d00d      	beq.n	8000f6a <oled_show_progress+0xa2>
                write_bytes(h, buf);
 8000f4e:	4669      	mov	r1, sp
 8000f50:	4620      	mov	r0, r4
                memmove(buf, buf+h, len-h);
 8000f52:	eba9 0904 	sub.w	r9, r9, r4
                write_bytes(h, buf);
 8000f56:	f7ff fe69 	bl	8000c2c <write_bytes>
                memmove(buf, buf+h, len-h);
 8000f5a:	464a      	mov	r2, r9
 8000f5c:	eb0d 0104 	add.w	r1, sp, r4
 8000f60:	4668      	mov	r0, sp
 8000f62:	f00c fb45 	bl	800d5f0 <memmove>
                len -= h;
 8000f66:	fa5f f989 	uxtb.w	r9, r9
                offset += h;
 8000f6a:	f44f 7460 	mov.w	r4, #896	; 0x380
            }
        }

        if(last_line) {
 8000f6e:	466b      	mov	r3, sp
    while(1) {
 8000f70:	462f      	mov	r7, r5
 8000f72:	e00c      	b.n	8000f8e <oled_show_progress+0xc6>
            memset(buf, *p, len);
 8000f74:	7871      	ldrb	r1, [r6, #1]
 8000f76:	464a      	mov	r2, r9
 8000f78:	4668      	mov	r0, sp
 8000f7a:	f00c fb53 	bl	800d624 <memset>
            p++;
 8000f7e:	3602      	adds	r6, #2
 8000f80:	e7da      	b.n	8000f38 <oled_show_progress+0x70>
            for(int j=0; (p_count > 0) && (j<len); j++, p_count--) {
                buf[j] |= 0x80;
 8000f82:	7819      	ldrb	r1, [r3, #0]
 8000f84:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000f88:	f803 1b01 	strb.w	r1, [r3], #1
            for(int j=0; (p_count > 0) && (j<len); j++, p_count--) {
 8000f8c:	3f01      	subs	r7, #1
 8000f8e:	b117      	cbz	r7, 8000f96 <oled_show_progress+0xce>
 8000f90:	1bea      	subs	r2, r5, r7
 8000f92:	454a      	cmp	r2, r9
 8000f94:	dbf5      	blt.n	8000f82 <oled_show_progress+0xba>
 8000f96:	f04f 0801 	mov.w	r8, #1
 8000f9a:	e000      	b.n	8000f9e <oled_show_progress+0xd6>
 8000f9c:	462f      	mov	r7, r5
            }
        }

        write_bytes(len, buf);
 8000f9e:	4669      	mov	r1, sp
 8000fa0:	4648      	mov	r0, r9
        offset += len;
 8000fa2:	444c      	add	r4, r9
        write_bytes(len, buf);
 8000fa4:	f7ff fe42 	bl	8000c2c <write_bytes>
        offset += len;
 8000fa8:	b2a4      	uxth	r4, r4
    while(1) {
 8000faa:	463d      	mov	r5, r7
 8000fac:	e7b6      	b.n	8000f1c <oled_show_progress+0x54>
    }

    HAL_GPIO_WritePin(GPIOA, CS_PIN, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f000 f9a5 	bl	8001304 <HAL_GPIO_WritePin>
    rng_delay();
 8000fba:	f001 fbdf 	bl	800277c <rng_delay>
}
 8000fbe:	b021      	add	sp, #132	; 0x84
 8000fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fc4:	0800d769 	.word	0x0800d769

08000fc8 <oled_factory_busy>:

// oled_factory_busy()
//
    void
oled_factory_busy(void)
{
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	b0a0      	sub	sp, #128	; 0x80
 8000fcc:	466a      	mov	r2, sp
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd2:	4614      	mov	r4, r2
    };
    uint8_t data[128];

    for(int x=0; x<128; x++) {
        // each byte here is a vertical column, 8 pixels tall, MSB at bottom
        data[x] = (1<<(7 - (x%8)));
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f003 0107 	and.w	r1, r3, #7
    for(int x=0; x<128; x++) {
 8000fda:	3b01      	subs	r3, #1
        data[x] = (1<<(7 - (x%8)));
 8000fdc:	fa00 f101 	lsl.w	r1, r0, r1
    for(int x=0; x<128; x++) {
 8000fe0:	f113 0f81 	cmn.w	r3, #129	; 0x81
        data[x] = (1<<(7 - (x%8)));
 8000fe4:	f802 1b01 	strb.w	r1, [r2], #1
    for(int x=0; x<128; x++) {
 8000fe8:	d1f5      	bne.n	8000fd6 <oled_factory_busy+0xe>
    }

    oled_write_cmd_sequence(sizeof(setup), setup);
 8000fea:	4907      	ldr	r1, [pc, #28]	; (8001008 <oled_factory_busy+0x40>)
 8000fec:	2006      	movs	r0, #6
 8000fee:	f7ff fe49 	bl	8000c84 <oled_write_cmd_sequence>
    oled_write_data(sizeof(data), data);
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	2080      	movs	r0, #128	; 0x80
 8000ff6:	f7ff fe51 	bl	8000c9c <oled_write_data>
    oled_write_cmd_sequence(sizeof(animate), animate);
 8000ffa:	4904      	ldr	r1, [pc, #16]	; (800100c <oled_factory_busy+0x44>)
 8000ffc:	2009      	movs	r0, #9
 8000ffe:	f7ff fe41 	bl	8000c84 <oled_write_cmd_sequence>
}
 8001002:	b020      	add	sp, #128	; 0x80
 8001004:	bd10      	pop	{r4, pc}
 8001006:	bf00      	nop
 8001008:	0800d788 	.word	0x0800d788
 800100c:	0800d760 	.word	0x0800d760

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80011cc <HAL_GPIO_Init+0x1bc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001018:	4c6a      	ldr	r4, [pc, #424]	; (80011c4 <HAL_GPIO_Init+0x1b4>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800101a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 80011d0 <HAL_GPIO_Init+0x1c0>
{
 800101e:	b085      	sub	sp, #20
  uint32_t position = 0x00;
 8001020:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001022:	680a      	ldr	r2, [r1, #0]
 8001024:	fa32 f503 	lsrs.w	r5, r2, r3
 8001028:	d102      	bne.n	8001030 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 800102a:	b005      	add	sp, #20
 800102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001030:	2701      	movs	r7, #1
 8001032:	409f      	lsls	r7, r3
    if(iocurrent)
 8001034:	403a      	ands	r2, r7
 8001036:	f000 80b4 	beq.w	80011a2 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103a:	684d      	ldr	r5, [r1, #4]
 800103c:	f025 0a10 	bic.w	sl, r5, #16
 8001040:	f1ba 0f02 	cmp.w	sl, #2
 8001044:	d116      	bne.n	8001074 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8001046:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800104a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800104e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001052:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001056:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800105a:	f04f 0c0f 	mov.w	ip, #15
 800105e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001062:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001066:	690e      	ldr	r6, [r1, #16]
 8001068:	fa06 f60b 	lsl.w	r6, r6, fp
 800106c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001070:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8001074:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001078:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800107c:	f04f 0c03 	mov.w	ip, #3
 8001080:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001084:	ea6f 060c 	mvn.w	r6, ip
 8001088:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800108c:	f005 0c03 	and.w	ip, r5, #3
 8001090:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001094:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001098:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80010a0:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 80010a2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a6:	d815      	bhi.n	80010d4 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR;
 80010a8:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80010ac:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80010b0:	68ce      	ldr	r6, [r1, #12]
 80010b2:	fa06 fa0e 	lsl.w	sl, r6, lr
 80010b6:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 80010ba:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 80010be:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c2:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010c6:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 80010ca:	fa0c fc03 	lsl.w	ip, ip, r3
 80010ce:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 80010d2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010d4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80010d6:	9e01      	ldr	r6, [sp, #4]
 80010d8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010da:	688e      	ldr	r6, [r1, #8]
 80010dc:	fa06 f60e 	lsl.w	r6, r6, lr
 80010e0:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80010e2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e4:	00ee      	lsls	r6, r5, #3
 80010e6:	d55c      	bpl.n	80011a2 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e8:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010ec:	f046 0601 	orr.w	r6, r6, #1
 80010f0:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80010f4:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010f8:	f023 0703 	bic.w	r7, r3, #3
 80010fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001100:	f006 0601 	and.w	r6, r6, #1
 8001104:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001108:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800110a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001110:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001114:	f04f 0e0f 	mov.w	lr, #15
 8001118:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800111c:	fa0e f60c 	lsl.w	r6, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001120:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001124:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001128:	d03d      	beq.n	80011a6 <HAL_GPIO_Init+0x196>
 800112a:	4e27      	ldr	r6, [pc, #156]	; (80011c8 <HAL_GPIO_Init+0x1b8>)
 800112c:	42b0      	cmp	r0, r6
 800112e:	d03c      	beq.n	80011aa <HAL_GPIO_Init+0x19a>
 8001130:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001134:	42b0      	cmp	r0, r6
 8001136:	d03a      	beq.n	80011ae <HAL_GPIO_Init+0x19e>
 8001138:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800113c:	42b0      	cmp	r0, r6
 800113e:	d038      	beq.n	80011b2 <HAL_GPIO_Init+0x1a2>
 8001140:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001144:	42b0      	cmp	r0, r6
 8001146:	d036      	beq.n	80011b6 <HAL_GPIO_Init+0x1a6>
 8001148:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800114c:	42b0      	cmp	r0, r6
 800114e:	d034      	beq.n	80011ba <HAL_GPIO_Init+0x1aa>
 8001150:	4548      	cmp	r0, r9
 8001152:	d034      	beq.n	80011be <HAL_GPIO_Init+0x1ae>
 8001154:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001158:	42b0      	cmp	r0, r6
 800115a:	bf0c      	ite	eq
 800115c:	2607      	moveq	r6, #7
 800115e:	2608      	movne	r6, #8
 8001160:	fa06 f60c 	lsl.w	r6, r6, ip
 8001164:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001168:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800116a:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800116c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001172:	bf0c      	ite	eq
 8001174:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001176:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8001178:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR1;
 800117a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001180:	bf0c      	ite	eq
 8001182:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001184:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001186:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR1;
 8001188:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800118e:	bf0c      	ite	eq
 8001190:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001192:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001194:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001196:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001198:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800119a:	bf54      	ite	pl
 800119c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800119e:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 80011a0:	60e6      	str	r6, [r4, #12]
    position++;
 80011a2:	3301      	adds	r3, #1
 80011a4:	e73d      	b.n	8001022 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80011a6:	2600      	movs	r6, #0
 80011a8:	e7da      	b.n	8001160 <HAL_GPIO_Init+0x150>
 80011aa:	2601      	movs	r6, #1
 80011ac:	e7d8      	b.n	8001160 <HAL_GPIO_Init+0x150>
 80011ae:	2602      	movs	r6, #2
 80011b0:	e7d6      	b.n	8001160 <HAL_GPIO_Init+0x150>
 80011b2:	2603      	movs	r6, #3
 80011b4:	e7d4      	b.n	8001160 <HAL_GPIO_Init+0x150>
 80011b6:	2604      	movs	r6, #4
 80011b8:	e7d2      	b.n	8001160 <HAL_GPIO_Init+0x150>
 80011ba:	2605      	movs	r6, #5
 80011bc:	e7d0      	b.n	8001160 <HAL_GPIO_Init+0x150>
 80011be:	2606      	movs	r6, #6
 80011c0:	e7ce      	b.n	8001160 <HAL_GPIO_Init+0x150>
 80011c2:	bf00      	nop
 80011c4:	40010400 	.word	0x40010400
 80011c8:	48000400 	.word	0x48000400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48001800 	.word	0x48001800

080011d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80011d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 80011d8:	4c43      	ldr	r4, [pc, #268]	; (80012e8 <HAL_GPIO_DeInit+0x114>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80011da:	f8df a114 	ldr.w	sl, [pc, #276]	; 80012f0 <HAL_GPIO_DeInit+0x11c>
 80011de:	f8df b114 	ldr.w	fp, [pc, #276]	; 80012f4 <HAL_GPIO_DeInit+0x120>
  uint32_t position = 0x00;
 80011e2:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 80011e4:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != RESET)
 80011e8:	fa31 f302 	lsrs.w	r3, r1, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 80011ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80011f2:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent)
 80011f6:	ea18 0c01 	ands.w	ip, r8, r1
 80011fa:	d064      	beq.n	80012c6 <HAL_GPIO_DeInit+0xf2>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 80011fc:	6805      	ldr	r5, [r0, #0]
 80011fe:	2303      	movs	r3, #3
 8001200:	0056      	lsls	r6, r2, #1
 8001202:	fa03 f606 	lsl.w	r6, r3, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001206:	fa22 fe03 	lsr.w	lr, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 800120a:	4335      	orrs	r5, r6
 800120c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001210:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001212:	f8de 5020 	ldr.w	r5, [lr, #32]
 8001216:	f002 0707 	and.w	r7, r2, #7
 800121a:	462b      	mov	r3, r5
 800121c:	00bf      	lsls	r7, r7, #2
 800121e:	250f      	movs	r5, #15
 8001220:	fa05 f707 	lsl.w	r7, r5, r7
 8001224:	ea23 0707 	bic.w	r7, r3, r7
 8001228:	f8ce 7020 	str.w	r7, [lr, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800122c:	6887      	ldr	r7, [r0, #8]
 800122e:	ea27 0706 	bic.w	r7, r7, r6
 8001232:	6087      	str	r7, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001234:	6847      	ldr	r7, [r0, #4]
 8001236:	ea27 0708 	bic.w	r7, r7, r8
 800123a:	6047      	str	r7, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800123c:	68c7      	ldr	r7, [r0, #12]
 800123e:	ea27 0606 	bic.w	r6, r7, r6
 8001242:	60c6      	str	r6, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8001244:	f022 0603 	bic.w	r6, r2, #3
 8001248:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800124c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001250:	f002 0703 	and.w	r7, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8001254:	f8d6 e008 	ldr.w	lr, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001258:	00bf      	lsls	r7, r7, #2
 800125a:	40bd      	lsls	r5, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800125c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001260:	ea05 0e0e 	and.w	lr, r5, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8001264:	d031      	beq.n	80012ca <HAL_GPIO_DeInit+0xf6>
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_GPIO_DeInit+0x118>)
 8001268:	4298      	cmp	r0, r3
 800126a:	d030      	beq.n	80012ce <HAL_GPIO_DeInit+0xfa>
 800126c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001270:	4298      	cmp	r0, r3
 8001272:	d02e      	beq.n	80012d2 <HAL_GPIO_DeInit+0xfe>
 8001274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001278:	4298      	cmp	r0, r3
 800127a:	d02c      	beq.n	80012d6 <HAL_GPIO_DeInit+0x102>
 800127c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001280:	4298      	cmp	r0, r3
 8001282:	d02a      	beq.n	80012da <HAL_GPIO_DeInit+0x106>
 8001284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001288:	4298      	cmp	r0, r3
 800128a:	d028      	beq.n	80012de <HAL_GPIO_DeInit+0x10a>
 800128c:	4550      	cmp	r0, sl
 800128e:	d028      	beq.n	80012e2 <HAL_GPIO_DeInit+0x10e>
 8001290:	4558      	cmp	r0, fp
 8001292:	bf0c      	ite	eq
 8001294:	2307      	moveq	r3, #7
 8001296:	2308      	movne	r3, #8
 8001298:	40bb      	lsls	r3, r7
 800129a:	4573      	cmp	r3, lr
 800129c:	d113      	bne.n	80012c6 <HAL_GPIO_DeInit+0xf2>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800129e:	68b3      	ldr	r3, [r6, #8]
 80012a0:	ea23 0505 	bic.w	r5, r3, r5
 80012a4:	60b5      	str	r5, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	ea23 030c 	bic.w	r3, r3, ip
 80012ac:	6023      	str	r3, [r4, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 80012ae:	6863      	ldr	r3, [r4, #4]
 80012b0:	ea23 030c 	bic.w	r3, r3, ip
 80012b4:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 80012b6:	68a3      	ldr	r3, [r4, #8]
 80012b8:	ea23 030c 	bic.w	r3, r3, ip
 80012bc:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 80012be:	68e3      	ldr	r3, [r4, #12]
 80012c0:	ea23 030c 	bic.w	r3, r3, ip
 80012c4:	60e3      	str	r3, [r4, #12]
    position++;
 80012c6:	3201      	adds	r2, #1
 80012c8:	e78e      	b.n	80011e8 <HAL_GPIO_DeInit+0x14>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80012ca:	2300      	movs	r3, #0
 80012cc:	e7e4      	b.n	8001298 <HAL_GPIO_DeInit+0xc4>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e7e2      	b.n	8001298 <HAL_GPIO_DeInit+0xc4>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e7e0      	b.n	8001298 <HAL_GPIO_DeInit+0xc4>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e7de      	b.n	8001298 <HAL_GPIO_DeInit+0xc4>
 80012da:	2304      	movs	r3, #4
 80012dc:	e7dc      	b.n	8001298 <HAL_GPIO_DeInit+0xc4>
 80012de:	2305      	movs	r3, #5
 80012e0:	e7da      	b.n	8001298 <HAL_GPIO_DeInit+0xc4>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e7d8      	b.n	8001298 <HAL_GPIO_DeInit+0xc4>
 80012e6:	bf00      	nop
 80012e8:	40010400 	.word	0x40010400
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48001800 	.word	0x48001800
 80012f4:	48001c00 	.word	0x48001c00

080012f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f8:	6903      	ldr	r3, [r0, #16]
 80012fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012fc:	bf14      	ite	ne
 80012fe:	2001      	movne	r0, #1
 8001300:	2000      	moveq	r0, #0
 8001302:	4770      	bx	lr

08001304 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	b10a      	cbz	r2, 800130a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001306:	6181      	str	r1, [r0, #24]
 8001308:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800130c:	4770      	bx	lr

0800130e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800130e:	6943      	ldr	r3, [r0, #20]
 8001310:	4059      	eors	r1, r3
 8001312:	6141      	str	r1, [r0, #20]
}
 8001314:	4770      	bx	lr

08001316 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001316:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800131e:	9b01      	ldr	r3, [sp, #4]
 8001320:	430b      	orrs	r3, r1
 8001322:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001324:	9b01      	ldr	r3, [sp, #4]
 8001326:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001328:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800132a:	9b01      	ldr	r3, [sp, #4]
 800132c:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800132e:	69c3      	ldr	r3, [r0, #28]
 8001330:	9301      	str	r3, [sp, #4]

  if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8001332:	69c0      	ldr	r0, [r0, #28]
 8001334:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
  }
  else
  {
    return HAL_ERROR;
  }
}
 8001338:	f3c0 4000 	ubfx	r0, r0, #16, #1
 800133c:	b002      	add	sp, #8
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001340:	4770      	bx	lr
	...

08001344 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001346:	6951      	ldr	r1, [r2, #20]
 8001348:	4201      	tst	r1, r0
{
 800134a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800134c:	d002      	beq.n	8001354 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800134e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001350:	f7ff fff6 	bl	8001340 <HAL_GPIO_EXTI_Callback>
}
 8001354:	bd08      	pop	{r3, pc}
 8001356:	bf00      	nop
 8001358:	40010400 	.word	0x40010400

0800135c <SPI_EndRxTxTransaction.isra.0>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800135c:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 800135e:	b082      	sub	sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8001366:	d1fb      	bne.n	8001360 <SPI_EndRxTxTransaction.isra.0+0x4>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	0612      	lsls	r2, r2, #24
 800136c:	d4fc      	bmi.n	8001368 <SPI_EndRxTxTransaction.isra.0+0xc>
  while ((hspi->Instance->SR & Fifo) != State)
 800136e:	6898      	ldr	r0, [r3, #8]
 8001370:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8001374:	d101      	bne.n	800137a <SPI_EndRxTxTransaction.isra.0+0x1e>
}
 8001376:	b002      	add	sp, #8
 8001378:	4770      	bx	lr
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800137a:	7b1a      	ldrb	r2, [r3, #12]
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	f88d 2007 	strb.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8001382:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001386:	e7f2      	b.n	800136e <SPI_EndRxTxTransaction.isra.0+0x12>

08001388 <HAL_SPI_Init>:
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800138a:	2800      	cmp	r0, #0
 800138c:	d054      	beq.n	8001438 <HAL_SPI_Init+0xb0>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800138e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001392:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001396:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139a:	b90b      	cbnz	r3, 80013a0 <HAL_SPI_Init+0x18>
    hspi->Lock = HAL_UNLOCKED;
 800139c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
  __HAL_SPI_DISABLE(hspi);
 80013a0:	6801      	ldr	r1, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013a2:	68c2      	ldr	r2, [r0, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80013a4:	2302      	movs	r3, #2
 80013a6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80013aa:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013ac:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80013b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013b4:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	d83f      	bhi.n	800143c <HAL_SPI_Init+0xb4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80013bc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80013c0:	d000      	beq.n	80013c4 <HAL_SPI_Init+0x3c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80013c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80013c6:	b92b      	cbnz	r3, 80013d4 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013c8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80013cc:	bf8c      	ite	hi
 80013ce:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80013d0:	2301      	movls	r3, #1
 80013d2:	6303      	str	r3, [r0, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80013d4:	e9d0 3701 	ldrd	r3, r7, [r0, #4]
 80013d8:	433b      	orrs	r3, r7
 80013da:	6907      	ldr	r7, [r0, #16]
 80013dc:	6984      	ldr	r4, [r0, #24]
 80013de:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80013e0:	433b      	orrs	r3, r7
 80013e2:	6947      	ldr	r7, [r0, #20]
 80013e4:	433b      	orrs	r3, r7
 80013e6:	69c7      	ldr	r7, [r0, #28]
 80013e8:	433b      	orrs	r3, r7
 80013ea:	6a07      	ldr	r7, [r0, #32]
 80013ec:	433b      	orrs	r3, r7
 80013ee:	4333      	orrs	r3, r6
 80013f0:	f404 7700 	and.w	r7, r4, #512	; 0x200
 80013f4:	433b      	orrs	r3, r7
 80013f6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80013f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80013fa:	2b02      	cmp	r3, #2
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 80013fc:	bf02      	ittt	eq
 80013fe:	680b      	ldreq	r3, [r1, #0]
 8001400:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8001404:	600b      	streq	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001406:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001408:	ea4c 0202 	orr.w	r2, ip, r2
 800140c:	0c24      	lsrs	r4, r4, #16
 800140e:	431a      	orrs	r2, r3
 8001410:	f004 0404 	and.w	r4, r4, #4
 8001414:	4322      	orrs	r2, r4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001416:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800141a:	bf08      	it	eq
 800141c:	6ac3      	ldreq	r3, [r0, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800141e:	ea45 0502 	orr.w	r5, r5, r2
 8001422:	604d      	str	r5, [r1, #4]
  hspi->State     = HAL_SPI_STATE_READY;
 8001424:	f04f 0201 	mov.w	r2, #1
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001428:	bf08      	it	eq
 800142a:	610b      	streq	r3, [r1, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800142c:	2300      	movs	r3, #0
 800142e:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001430:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
  return HAL_OK;
 8001434:	4618      	mov	r0, r3
}
 8001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001438:	2001      	movs	r0, #1
 800143a:	e7fc      	b.n	8001436 <HAL_SPI_Init+0xae>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800143c:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800143e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8001442:	e7bd      	b.n	80013c0 <HAL_SPI_Init+0x38>

08001444 <HAL_SPI_Transmit>:
{
 8001444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001448:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800144a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800144e:	2b01      	cmp	r3, #1
{
 8001450:	4604      	mov	r4, r0
 8001452:	460d      	mov	r5, r1
 8001454:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001456:	f000 809c 	beq.w	8001592 <HAL_SPI_Transmit+0x14e>
 800145a:	2301      	movs	r3, #1
 800145c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001460:	f005 fe38 	bl	80070d4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001464:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8001468:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800146a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800146c:	b2d8      	uxtb	r0, r3
 800146e:	f040 808e 	bne.w	800158e <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001472:	2d00      	cmp	r5, #0
 8001474:	d07a      	beq.n	800156c <HAL_SPI_Transmit+0x128>
 8001476:	f1b8 0f00 	cmp.w	r8, #0
 800147a:	d077      	beq.n	800156c <HAL_SPI_Transmit+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800147c:	2303      	movs	r3, #3
 800147e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001482:	68a3      	ldr	r3, [r4, #8]
    SPI_1LINE_TX(hspi);
 8001484:	6822      	ldr	r2, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001486:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001488:	2100      	movs	r1, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800148a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800148e:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8001490:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8001494:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 8001498:	bf08      	it	eq
 800149a:	6813      	ldreq	r3, [r2, #0]
  hspi->TxXferSize  = Size;
 800149c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 80014a0:	bf08      	it	eq
 80014a2:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->RxISR       = NULL;
 80014a6:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014aa:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80014ac:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
    SPI_1LINE_TX(hspi);
 80014b0:	bf08      	it	eq
 80014b2:	6013      	streq	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ba:	d107      	bne.n	80014cc <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ca:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014cc:	6813      	ldr	r3, [r2, #0]
 80014ce:	0659      	lsls	r1, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80014d0:	bf5e      	ittt	pl
 80014d2:	6813      	ldrpl	r3, [r2, #0]
 80014d4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80014d8:	6013      	strpl	r3, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	b11b      	cbz	r3, 80014e6 <HAL_SPI_Transmit+0xa2>
 80014de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d110      	bne.n	8001508 <HAL_SPI_Transmit+0xc4>
      if (hspi->TxXferCount > 1U)
 80014e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d905      	bls.n	80014fa <HAL_SPI_Transmit+0xb6>
        hspi->Instance->DR = *((uint16_t *)pData);
 80014ee:	f835 3b02 	ldrh.w	r3, [r5], #2
 80014f2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 80014f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014f6:	3b02      	subs	r3, #2
 80014f8:	e004      	b.n	8001504 <HAL_SPI_Transmit+0xc0>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80014fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80014fe:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8001500:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001502:	3b01      	subs	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001508:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800150a:	b29b      	uxth	r3, r3
 800150c:	b9e3      	cbnz	r3, 8001548 <HAL_SPI_Transmit+0x104>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800150e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001514:	bf01      	itttt	eq
 8001516:	6822      	ldreq	r2, [r4, #0]
 8001518:	6813      	ldreq	r3, [r2, #0]
 800151a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800151e:	6013      	streq	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ff1b 	bl	800135c <SPI_EndRxTxTransaction.isra.0>
 8001526:	b108      	cbz	r0, 800152c <HAL_SPI_Transmit+0xe8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001528:	2320      	movs	r3, #32
 800152a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800152c:	68a3      	ldr	r3, [r4, #8]
 800152e:	b933      	cbnz	r3, 800153e <HAL_SPI_Transmit+0xfa>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	9201      	str	r2, [sp, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800153e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001540:	3800      	subs	r0, #0
 8001542:	bf18      	it	ne
 8001544:	2001      	movne	r0, #1
error:
 8001546:	e011      	b.n	800156c <HAL_SPI_Transmit+0x128>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	0792      	lsls	r2, r2, #30
 800154e:	d50b      	bpl.n	8001568 <HAL_SPI_Transmit+0x124>
        if (hspi->TxXferCount > 1U)
 8001550:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001552:	b292      	uxth	r2, r2
 8001554:	2a01      	cmp	r2, #1
 8001556:	d903      	bls.n	8001560 <HAL_SPI_Transmit+0x11c>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001558:	f835 2b02 	ldrh.w	r2, [r5], #2
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	e7c9      	b.n	80014f4 <HAL_SPI_Transmit+0xb0>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001560:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001564:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001566:	e7cb      	b.n	8001500 <HAL_SPI_Transmit+0xbc>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001568:	b94e      	cbnz	r6, 800157e <HAL_SPI_Transmit+0x13a>
          errorcode = HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800156c:	2301      	movs	r3, #1
 800156e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001572:	2300      	movs	r3, #0
 8001574:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001578:	b002      	add	sp, #8
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800157e:	1c73      	adds	r3, r6, #1
 8001580:	d0c2      	beq.n	8001508 <HAL_SPI_Transmit+0xc4>
 8001582:	f005 fda7 	bl	80070d4 <HAL_GetTick>
 8001586:	1bc0      	subs	r0, r0, r7
 8001588:	42b0      	cmp	r0, r6
 800158a:	d3bd      	bcc.n	8001508 <HAL_SPI_Transmit+0xc4>
 800158c:	e7ed      	b.n	800156a <HAL_SPI_Transmit+0x126>
    errorcode = HAL_BUSY;
 800158e:	2002      	movs	r0, #2
 8001590:	e7ec      	b.n	800156c <HAL_SPI_Transmit+0x128>
  __HAL_LOCK(hspi);
 8001592:	2002      	movs	r0, #2
 8001594:	e7f0      	b.n	8001578 <HAL_SPI_Transmit+0x134>

08001596 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001596:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800159a:	461e      	mov	r6, r3
  uint32_t tmp = 0U, tmp1 = 0U;
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	f8ad 3006 	strh.w	r3, [sp, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80015a2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80015a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80015aa:	2b01      	cmp	r3, #1
{
 80015ac:	4604      	mov	r4, r0
 80015ae:	460d      	mov	r5, r1
 80015b0:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80015b2:	f000 8124 	beq.w	80017fe <HAL_SPI_TransmitReceive+0x268>
 80015b6:	2301      	movs	r3, #1
 80015b8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015bc:	f005 fd8a 	bl	80070d4 <HAL_GetTick>

  tmp  = hspi->State;
 80015c0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 80015c4:	6861      	ldr	r1, [r4, #4]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80015c6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80015c8:	4681      	mov	r9, r0
  tmp  = hspi->State;
 80015ca:	b2da      	uxtb	r2, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80015cc:	d00a      	beq.n	80015e4 <HAL_SPI_TransmitReceive+0x4e>
 80015ce:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80015d2:	f040 8112 	bne.w	80017fa <HAL_SPI_TransmitReceive+0x264>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80015d6:	68a3      	ldr	r3, [r4, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 810e 	bne.w	80017fa <HAL_SPI_TransmitReceive+0x264>
 80015de:	2a04      	cmp	r2, #4
 80015e0:	f040 810b 	bne.w	80017fa <HAL_SPI_TransmitReceive+0x264>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80015e4:	b955      	cbnz	r5, 80015fc <HAL_SPI_TransmitReceive+0x66>
  {
    errorcode = HAL_ERROR;
 80015e6:	2101      	movs	r1, #1
  {
    errorcode = HAL_ERROR;
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80015ee:	2300      	movs	r3, #0
 80015f0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
}
 80015f4:	4608      	mov	r0, r1
 80015f6:	b003      	add	sp, #12
 80015f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80015fc:	2f00      	cmp	r7, #0
 80015fe:	d0f2      	beq.n	80015e6 <HAL_SPI_TransmitReceive+0x50>
 8001600:	2e00      	cmp	r6, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001604:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001608:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800160a:	6427      	str	r7, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800160c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800160e:	bf1c      	itt	ne
 8001610:	2305      	movne	r3, #5
 8001612:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001616:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001618:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800161c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800161e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8001622:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    SPI_RESET_CRC(hspi);
 8001626:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8001628:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800162c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800162e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001630:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001632:	d107      	bne.n	8001644 <HAL_SPI_TransmitReceive+0xae>
    SPI_RESET_CRC(hspi);
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001642:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001644:	68e2      	ldr	r2, [r4, #12]
 8001646:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800164a:	d804      	bhi.n	8001656 <HAL_SPI_TransmitReceive+0xc0>
 800164c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001650:	b292      	uxth	r2, r2
 8001652:	2a01      	cmp	r2, #1
 8001654:	d94e      	bls.n	80016f4 <HAL_SPI_TransmitReceive+0x15e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800165c:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001662:	bf5e      	ittt	pl
 8001664:	681a      	ldrpl	r2, [r3, #0]
 8001666:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800166a:	601a      	strpl	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800166c:	b119      	cbz	r1, 8001676 <HAL_SPI_TransmitReceive+0xe0>
 800166e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001670:	b292      	uxth	r2, r2
 8001672:	2a01      	cmp	r2, #1
 8001674:	d10a      	bne.n	800168c <HAL_SPI_TransmitReceive+0xf6>
      if (hspi->TxXferCount > 1U)
 8001676:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001678:	b292      	uxth	r2, r2
 800167a:	2a01      	cmp	r2, #1
 800167c:	d93e      	bls.n	80016fc <HAL_SPI_TransmitReceive+0x166>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800167e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001682:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001684:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001686:	3b02      	subs	r3, #2
 8001688:	b29b      	uxth	r3, r3
 800168a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800168c:	2601      	movs	r6, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800168e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d138      	bne.n	8001708 <HAL_SPI_TransmitReceive+0x172>
 8001696:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d133      	bne.n	8001708 <HAL_SPI_TransmitReceive+0x172>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80016a2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80016a8:	d10d      	bne.n	80016c6 <HAL_SPI_TransmitReceive+0x130>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	07d1      	lsls	r1, r2, #31
 80016ae:	d5fc      	bpl.n	80016aa <HAL_SPI_TransmitReceive+0x114>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016b0:	68e2      	ldr	r2, [r4, #12]
 80016b2:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80016b6:	f040 8092 	bne.w	80017de <HAL_SPI_TransmitReceive+0x248>
      tmpreg = hspi->Instance->DR;
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	b292      	uxth	r2, r2
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80016be:	f8ad 2006 	strh.w	r2, [sp, #6]
        UNUSED(tmpreg);
 80016c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80016c6:	6899      	ldr	r1, [r3, #8]
 80016c8:	f011 0110 	ands.w	r1, r1, #16
 80016cc:	d007      	beq.n	80016de <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80016ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80016d0:	f042 0202 	orr.w	r2, r2, #2
 80016d4:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80016d6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80016da:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 80016dc:	2101      	movs	r1, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff fe3c 	bl	800135c <SPI_EndRxTxTransaction.isra.0>
 80016e4:	b108      	cbz	r0, 80016ea <HAL_SPI_TransmitReceive+0x154>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016e6:	2320      	movs	r3, #32
 80016e8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f af7a 	bne.w	80015e6 <HAL_SPI_TransmitReceive+0x50>
 80016f2:	e779      	b.n	80015e8 <HAL_SPI_TransmitReceive+0x52>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016fa:	e7af      	b.n	800165c <HAL_SPI_TransmitReceive+0xc6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80016fc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001700:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001702:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001704:	3b01      	subs	r3, #1
 8001706:	e7bf      	b.n	8001688 <HAL_SPI_TransmitReceive+0xf2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001708:	2e00      	cmp	r6, #0
 800170a:	d030      	beq.n	800176e <HAL_SPI_TransmitReceive+0x1d8>
 800170c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d02c      	beq.n	800176e <HAL_SPI_TransmitReceive+0x1d8>
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	0792      	lsls	r2, r2, #30
 800171a:	d528      	bpl.n	800176e <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 800171c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800171e:	b292      	uxth	r2, r2
 8001720:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001722:	bf8b      	itete	hi
 8001724:	f835 2b02 	ldrhhi.w	r2, [r5], #2
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001728:	f815 2b01 	ldrbls.w	r2, [r5], #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800172c:	60da      	strhi	r2, [r3, #12]
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800172e:	731a      	strbls	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8001730:	bf8b      	itete	hi
 8001732:	8fe3      	ldrhhi	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount--;
 8001734:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount -= 2U;
 8001736:	3b02      	subhi	r3, #2
          hspi->TxXferCount--;
 8001738:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 800173c:	b29b      	uxth	r3, r3
 800173e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001740:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
 8001742:	b2b6      	uxth	r6, r6
 8001744:	b996      	cbnz	r6, 800176c <HAL_SPI_TransmitReceive+0x1d6>
 8001746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174c:	d10f      	bne.n	800176e <HAL_SPI_TransmitReceive+0x1d8>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	0756      	lsls	r6, r2, #29
 8001754:	d406      	bmi.n	8001764 <HAL_SPI_TransmitReceive+0x1ce>
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	0710      	lsls	r0, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800175a:	bf42      	ittt	mi
 800175c:	681a      	ldrmi	r2, [r3, #0]
 800175e:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 8001762:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800176a:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800176c:	2600      	movs	r6, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800176e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001772:	b29b      	uxth	r3, r3
 8001774:	b1e3      	cbz	r3, 80017b0 <HAL_SPI_TransmitReceive+0x21a>
 8001776:	6821      	ldr	r1, [r4, #0]
 8001778:	688b      	ldr	r3, [r1, #8]
 800177a:	f013 0301 	ands.w	r3, r3, #1
 800177e:	d017      	beq.n	80017b0 <HAL_SPI_TransmitReceive+0x21a>
        if (hspi->RxXferCount > 1U)
 8001780:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001784:	b292      	uxth	r2, r2
 8001786:	2a01      	cmp	r2, #1
 8001788:	d91f      	bls.n	80017ca <HAL_SPI_TransmitReceive+0x234>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800178a:	68ca      	ldr	r2, [r1, #12]
 800178c:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 8001790:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001794:	3a02      	subs	r2, #2
 8001796:	b292      	uxth	r2, r2
 8001798:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800179c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80017a0:	b292      	uxth	r2, r2
 80017a2:	2a01      	cmp	r2, #1
 80017a4:	d803      	bhi.n	80017ae <HAL_SPI_TransmitReceive+0x218>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017a6:	684a      	ldr	r2, [r1, #4]
 80017a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017ac:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 80017ae:	461e      	mov	r6, r3
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80017b0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80017b4:	f43f af6b 	beq.w	800168e <HAL_SPI_TransmitReceive+0xf8>
 80017b8:	f005 fc8c 	bl	80070d4 <HAL_GetTick>
 80017bc:	eba0 0009 	sub.w	r0, r0, r9
 80017c0:	4540      	cmp	r0, r8
 80017c2:	f4ff af64 	bcc.w	800168e <HAL_SPI_TransmitReceive+0xf8>
        errorcode = HAL_TIMEOUT;
 80017c6:	2103      	movs	r1, #3
 80017c8:	e70e      	b.n	80015e8 <HAL_SPI_TransmitReceive+0x52>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80017ca:	7b0a      	ldrb	r2, [r1, #12]
 80017cc:	f807 2b01 	strb.w	r2, [r7], #1
          hspi->RxXferCount--;
 80017d0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80017d4:	3901      	subs	r1, #1
 80017d6:	b289      	uxth	r1, r1
 80017d8:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
 80017dc:	e7e7      	b.n	80017ae <HAL_SPI_TransmitReceive+0x218>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80017de:	7b1a      	ldrb	r2, [r3, #12]
 80017e0:	f8ad 2006 	strh.w	r2, [sp, #6]
      UNUSED(tmpreg);
 80017e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80017e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017ea:	2a02      	cmp	r2, #2
 80017ec:	f47f af6b 	bne.w	80016c6 <HAL_SPI_TransmitReceive+0x130>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	07d2      	lsls	r2, r2, #31
 80017f4:	d5fc      	bpl.n	80017f0 <HAL_SPI_TransmitReceive+0x25a>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80017f6:	7b1a      	ldrb	r2, [r3, #12]
 80017f8:	e761      	b.n	80016be <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 80017fa:	2102      	movs	r1, #2
 80017fc:	e6f4      	b.n	80015e8 <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 80017fe:	2102      	movs	r1, #2
 8001800:	e6f8      	b.n	80015f4 <HAL_SPI_TransmitReceive+0x5e>

08001802 <HAL_SPI_Receive>:
{
 8001802:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001806:	461f      	mov	r7, r3
  __IO uint16_t tmpreg = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	f8ad 300e 	strh.w	r3, [sp, #14]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800180e:	6843      	ldr	r3, [r0, #4]
 8001810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001814:	4604      	mov	r4, r0
 8001816:	460e      	mov	r6, r1
 8001818:	4615      	mov	r5, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800181a:	d10c      	bne.n	8001836 <HAL_SPI_Receive+0x34>
 800181c:	6883      	ldr	r3, [r0, #8]
 800181e:	b953      	cbnz	r3, 8001836 <HAL_SPI_Receive+0x34>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001820:	2304      	movs	r3, #4
 8001822:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001826:	4613      	mov	r3, r2
 8001828:	9700      	str	r7, [sp, #0]
 800182a:	460a      	mov	r2, r1
 800182c:	f7ff feb3 	bl	8001596 <HAL_SPI_TransmitReceive>
}
 8001830:	b004      	add	sp, #16
 8001832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001836:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800183a:	2b01      	cmp	r3, #1
 800183c:	f000 80dd 	beq.w	80019fa <HAL_SPI_Receive+0x1f8>
 8001840:	2301      	movs	r3, #1
 8001842:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001846:	f005 fc45 	bl	80070d4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800184a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800184e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001850:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001852:	b2d8      	uxtb	r0, r3
 8001854:	f040 80cf 	bne.w	80019f6 <HAL_SPI_Receive+0x1f4>
  if ((pData == NULL) || (Size == 0U))
 8001858:	2e00      	cmp	r6, #0
 800185a:	f000 8092 	beq.w	8001982 <HAL_SPI_Receive+0x180>
 800185e:	2d00      	cmp	r5, #0
 8001860:	f000 808f 	beq.w	8001982 <HAL_SPI_Receive+0x180>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001864:	2304      	movs	r3, #4
 8001866:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800186a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferSize  = Size;
 800186c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001870:	2100      	movs	r1, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001876:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8001878:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800187c:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001880:	6426      	str	r6, [r4, #64]	; 0x40
    SPI_RESET_CRC(hspi);
 8001882:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001884:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001886:	87a1      	strh	r1, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001888:	87e1      	strh	r1, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800188a:	d10d      	bne.n	80018a8 <HAL_SPI_Receive+0xa6>
    SPI_RESET_CRC(hspi);
 800188c:	682b      	ldr	r3, [r5, #0]
 800188e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001892:	602b      	str	r3, [r5, #0]
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800189a:	602b      	str	r3, [r5, #0]
    hspi->RxXferCount--;
 800189c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018a8:	68e3      	ldr	r3, [r4, #12]
 80018aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018ae:	686b      	ldr	r3, [r5, #4]
 80018b0:	bf8c      	ite	hi
 80018b2:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018b6:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 80018ba:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018bc:	68a3      	ldr	r3, [r4, #8]
 80018be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 80018c2:	bf02      	ittt	eq
 80018c4:	682b      	ldreq	r3, [r5, #0]
 80018c6:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 80018ca:	602b      	streq	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	0658      	lsls	r0, r3, #25
 80018d0:	d403      	bmi.n	80018da <HAL_SPI_Receive+0xd8>
    __HAL_SPI_ENABLE(hspi);
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d8:	602b      	str	r3, [r5, #0]
    while (hspi->RxXferCount > 0U)
 80018da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80018de:	6822      	ldr	r2, [r4, #0]
    while (hspi->RxXferCount > 0U)
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d13e      	bne.n	8001964 <HAL_SPI_Receive+0x162>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ec:	d11c      	bne.n	8001928 <HAL_SPI_Receive+0x126>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f4:	6013      	str	r3, [r2, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018f6:	6893      	ldr	r3, [r2, #8]
 80018f8:	07df      	lsls	r7, r3, #31
 80018fa:	d5fc      	bpl.n	80018f6 <HAL_SPI_Receive+0xf4>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018fc:	68e3      	ldr	r3, [r4, #12]
 80018fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001902:	bf95      	itete	ls
 8001904:	7b13      	ldrbls	r3, [r2, #12]
      *((uint16_t *)pData) = hspi->Instance->DR;
 8001906:	68d3      	ldrhi	r3, [r2, #12]
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001908:	7033      	strbls	r3, [r6, #0]
      *((uint16_t *)pData) = hspi->Instance->DR;
 800190a:	8033      	strhhi	r3, [r6, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	07d6      	lsls	r6, r2, #31
 8001912:	d5fc      	bpl.n	800190e <HAL_SPI_Receive+0x10c>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001914:	68e1      	ldr	r1, [r4, #12]
 8001916:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800191a:	d142      	bne.n	80019a2 <HAL_SPI_Receive+0x1a0>
      tmpreg = hspi->Instance->DR;
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8001920:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 8001924:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001928:	6861      	ldr	r1, [r4, #4]
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001930:	d10a      	bne.n	8001948 <HAL_SPI_Receive+0x146>
 8001932:	68a2      	ldr	r2, [r4, #8]
 8001934:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001938:	d002      	beq.n	8001940 <HAL_SPI_Receive+0x13e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800193a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800193e:	d103      	bne.n	8001948 <HAL_SPI_Receive+0x146>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001946:	601a      	str	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	0610      	lsls	r0, r2, #24
 800194c:	d4fc      	bmi.n	8001948 <HAL_SPI_Receive+0x146>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800194e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001952:	d036      	beq.n	80019c2 <HAL_SPI_Receive+0x1c0>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	06d2      	lsls	r2, r2, #27
 8001958:	d445      	bmi.n	80019e6 <HAL_SPI_Receive+0x1e4>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800195a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800195c:	3800      	subs	r0, #0
 800195e:	bf18      	it	ne
 8001960:	2001      	movne	r0, #1
error :
 8001962:	e00e      	b.n	8001982 <HAL_SPI_Receive+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001964:	6893      	ldr	r3, [r2, #8]
 8001966:	07d9      	lsls	r1, r3, #31
 8001968:	d509      	bpl.n	800197e <HAL_SPI_Receive+0x17c>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800196a:	7b13      	ldrb	r3, [r2, #12]
 800196c:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 8001970:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001974:	3b01      	subs	r3, #1
 8001976:	b29b      	uxth	r3, r3
 8001978:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800197c:	e7ad      	b.n	80018da <HAL_SPI_Receive+0xd8>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800197e:	b93f      	cbnz	r7, 8001990 <HAL_SPI_Receive+0x18e>
          errorcode = HAL_TIMEOUT;
 8001980:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001982:	2301      	movs	r3, #1
 8001984:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001988:	2300      	movs	r3, #0
 800198a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800198e:	e74f      	b.n	8001830 <HAL_SPI_Receive+0x2e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001990:	1c7b      	adds	r3, r7, #1
 8001992:	d0a2      	beq.n	80018da <HAL_SPI_Receive+0xd8>
 8001994:	f005 fb9e 	bl	80070d4 <HAL_GetTick>
 8001998:	eba0 0008 	sub.w	r0, r0, r8
 800199c:	42b8      	cmp	r0, r7
 800199e:	d39c      	bcc.n	80018da <HAL_SPI_Receive+0xd8>
 80019a0:	e7ee      	b.n	8001980 <HAL_SPI_Receive+0x17e>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80019a2:	7b1a      	ldrb	r2, [r3, #12]
 80019a4:	f8ad 200e 	strh.w	r2, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80019a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      UNUSED(tmpreg);
 80019ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80019b0:	d1ba      	bne.n	8001928 <HAL_SPI_Receive+0x126>
 80019b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019b4:	2a02      	cmp	r2, #2
 80019b6:	d1b7      	bne.n	8001928 <HAL_SPI_Receive+0x126>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	07d5      	lsls	r5, r2, #31
 80019bc:	d5fc      	bpl.n	80019b8 <HAL_SPI_Receive+0x1b6>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80019be:	7b1b      	ldrb	r3, [r3, #12]
 80019c0:	e7ae      	b.n	8001920 <HAL_SPI_Receive+0x11e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c2:	68a2      	ldr	r2, [r4, #8]
 80019c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019c8:	d002      	beq.n	80019d0 <HAL_SPI_Receive+0x1ce>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80019ce:	d1c1      	bne.n	8001954 <HAL_SPI_Receive+0x152>
  while ((hspi->Instance->SR & Fifo) != State)
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 80019d6:	d0bd      	beq.n	8001954 <HAL_SPI_Receive+0x152>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80019d8:	7b1a      	ldrb	r2, [r3, #12]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f88d 200d 	strb.w	r2, [sp, #13]
      UNUSED(tmpreg);
 80019e0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80019e4:	e7f4      	b.n	80019d0 <HAL_SPI_Receive+0x1ce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80019e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80019e8:	f042 0202 	orr.w	r2, r2, #2
 80019ec:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80019ee:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e7b1      	b.n	800195a <HAL_SPI_Receive+0x158>
    errorcode = HAL_BUSY;
 80019f6:	2002      	movs	r0, #2
 80019f8:	e7c3      	b.n	8001982 <HAL_SPI_Receive+0x180>
  __HAL_LOCK(hspi);
 80019fa:	2002      	movs	r0, #2
 80019fc:	e718      	b.n	8001830 <HAL_SPI_Receive+0x2e>
	...

08001a00 <checksum_more>:

// checksum_more()
//
    static void
checksum_more(SHA256_CTX *ctx, uint32_t *total, const uint8_t *addr, int len)
{
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	460c      	mov	r4, r1
    // mk4 has hardware hash engine, and no DFU button
    int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;
 8001a04:	6809      	ldr	r1, [r1, #0]
{
 8001a06:	461d      	mov	r5, r3
    int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;
 8001a08:	2364      	movs	r3, #100	; 0x64
{
 8001a0a:	4617      	mov	r7, r2
 8001a0c:	4606      	mov	r6, r0
    int percent = ((*total) * 100) / TOTAL_CHECKSUM_LEN;
 8001a0e:	4359      	muls	r1, r3
    puts2("Verify %0x");
    puthex2(percent);
    putchar('\n');
#endif

    oled_show_progress(screen_verify, percent);
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <checksum_more+0x30>)
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <checksum_more+0x34>)
 8001a14:	fbb1 f1f3 	udiv	r1, r1, r3
 8001a18:	f7ff fa56 	bl	8000ec8 <oled_show_progress>

    sha256_update(ctx, addr, len);
 8001a1c:	462a      	mov	r2, r5
 8001a1e:	4639      	mov	r1, r7
 8001a20:	4630      	mov	r0, r6
 8001a22:	f003 fd35 	bl	8005490 <sha256_update>
    *total += len;
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	442b      	add	r3, r5
 8001a2a:	6023      	str	r3, [r4, #0]
}
 8001a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	0800e1f2 	.word	0x0800e1f2
 8001a34:	0018541c 	.word	0x0018541c

08001a38 <checksum_flash>:

// checksum_flash()
//
    void
checksum_flash(uint8_t fw_digest[32], uint8_t world_digest[32], uint32_t fw_length)
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	b09c      	sub	sp, #112	; 0x70
 8001a3c:	4606      	mov	r6, r0
 8001a3e:	460d      	mov	r5, r1
 8001a40:	4614      	mov	r4, r2
    const uint8_t *start = (const uint8_t *)FIRMWARE_START;

    rng_delay();
 8001a42:	f000 fe9b 	bl	800277c <rng_delay>

    SHA256_CTX  ctx;
    uint32_t    total_len = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	9300      	str	r3, [sp, #0]

    if(fw_length == 0) {
 8001a4a:	2c00      	cmp	r4, #0
 8001a4c:	d15f      	bne.n	8001b0e <checksum_flash+0xd6>
        uint8_t first[32];
        sha256_init(&ctx);
 8001a4e:	a809      	add	r0, sp, #36	; 0x24
 8001a50:	f003 fd10 	bl	8005474 <sha256_init>

        // use length from header in flash
        fw_length = FW_HDR->firmware_length;
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <checksum_flash+0xf8>)

        // start of firmware (just after we end) to header
        checksum_more(&ctx, &total_len, start, FW_HEADER_OFFSET + FW_HEADER_SIZE - 64);
 8001a56:	4a37      	ldr	r2, [pc, #220]	; (8001b34 <checksum_flash+0xfc>)
        fw_length = FW_HDR->firmware_length;
 8001a58:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
        checksum_more(&ctx, &total_len, start, FW_HEADER_OFFSET + FW_HEADER_SIZE - 64);
 8001a5c:	4669      	mov	r1, sp
 8001a5e:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8001a62:	a809      	add	r0, sp, #36	; 0x24
 8001a64:	f7ff ffcc 	bl	8001a00 <checksum_more>

        // from after header to end
        checksum_more(&ctx, &total_len, start + FW_HEADER_OFFSET + FW_HEADER_SIZE, 
 8001a68:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <checksum_flash+0x100>)
 8001a6a:	f5a4 4380 	sub.w	r3, r4, #16384	; 0x4000
 8001a6e:	4669      	mov	r1, sp
 8001a70:	a809      	add	r0, sp, #36	; 0x24
 8001a72:	f7ff ffc5 	bl	8001a00 <checksum_more>
                                fw_length - (FW_HEADER_OFFSET + FW_HEADER_SIZE));

        sha256_final(&ctx, first);
 8001a76:	a901      	add	r1, sp, #4
 8001a78:	a809      	add	r0, sp, #36	; 0x24
 8001a7a:	f003 fd4f 	bl	800551c <sha256_final>

        // double SHA256
        sha256_single(first, sizeof(first), fw_digest);
 8001a7e:	4632      	mov	r2, r6
 8001a80:	2120      	movs	r1, #32
 8001a82:	a801      	add	r0, sp, #4
 8001a84:	f003 fd5e 	bl	8005544 <sha256_single>
        // fw_digest should already be populated by caller
        total_len = fw_length - 64;
    }

    // start over, and get the rest of flash. All of it.
    sha256_init(&ctx);
 8001a88:	a809      	add	r0, sp, #36	; 0x24
 8001a8a:	f003 fcf3 	bl	8005474 <sha256_init>

    // .. and chain in what we have so far
    sha256_update(&ctx, fw_digest, 32);
 8001a8e:	2220      	movs	r2, #32
 8001a90:	4631      	mov	r1, r6
 8001a92:	a809      	add	r0, sp, #36	; 0x24
 8001a94:	f003 fcfc 	bl	8005490 <sha256_update>

    // Bootloader, including pairing secret area, but excluding MCU keys.
    const uint8_t *base = (const uint8_t *)BL_FLASH_BASE;
    checksum_more(&ctx, &total_len, base, ((uint8_t *)MCU_KEYS)-base);
 8001a98:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 8001a9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa0:	4669      	mov	r1, sp
 8001aa2:	a809      	add	r0, sp, #36	; 0x24
 8001aa4:	f7ff ffac 	bl	8001a00 <checksum_more>

    // Probably-blank area after firmware, and filesystem area.
    // Important: firmware images (fw_length) must be aligned with flash erase unit size (4k).
    const uint8_t *fs = start + fw_length;
    const uint8_t *last = base + MAIN_FLASH_SIZE;
    checksum_more(&ctx, &total_len, fs, last-fs);
 8001aa8:	f104 6200 	add.w	r2, r4, #134217728	; 0x8000000
 8001aac:	f5c4 13b0 	rsb	r3, r4, #1441792	; 0x160000
 8001ab0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8001ab4:	4669      	mov	r1, sp
 8001ab6:	a809      	add	r0, sp, #36	; 0x24
 8001ab8:	f7ff ffa2 	bl	8001a00 <checksum_more>

    rng_delay();
 8001abc:	f000 fe5e 	bl	800277c <rng_delay>

    // OTP area
    checksum_more(&ctx, &total_len, (void *)0x1fff7000, 0x400);
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <checksum_flash+0x104>)
 8001ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac6:	4669      	mov	r1, sp
 8001ac8:	a809      	add	r0, sp, #36	; 0x24
 8001aca:	f7ff ff99 	bl	8001a00 <checksum_more>

    // "just in case" ... the option bytes (2 banks)
    checksum_more(&ctx, &total_len, (void *)0x1fff7800, 0x28);
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <checksum_flash+0x108>)
 8001ad0:	2328      	movs	r3, #40	; 0x28
 8001ad2:	4669      	mov	r1, sp
 8001ad4:	a809      	add	r0, sp, #36	; 0x24
 8001ad6:	f7ff ff93 	bl	8001a00 <checksum_more>
    checksum_more(&ctx, &total_len, (void *)0x1ffff800, 0x28);
 8001ada:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <checksum_flash+0x10c>)
 8001adc:	2328      	movs	r3, #40	; 0x28
 8001ade:	4669      	mov	r1, sp
 8001ae0:	a809      	add	r0, sp, #36	; 0x24
 8001ae2:	f7ff ff8d 	bl	8001a00 <checksum_more>

    // System ROM (they say it can't change, but clearly
    // implemented as flash cells)
    checksum_more(&ctx, &total_len, (void *)0x1fff0000, 0x7000);
 8001ae6:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <checksum_flash+0x110>)
 8001ae8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001aec:	4669      	mov	r1, sp
 8001aee:	a809      	add	r0, sp, #36	; 0x24
 8001af0:	f7ff ff86 	bl	8001a00 <checksum_more>

    // device serial number, just for kicks
    checksum_more(&ctx, &total_len, (void *)0x1fff7590, 12);
 8001af4:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <checksum_flash+0x114>)
 8001af6:	230c      	movs	r3, #12
 8001af8:	4669      	mov	r1, sp
 8001afa:	a809      	add	r0, sp, #36	; 0x24
 8001afc:	f7ff ff80 	bl	8001a00 <checksum_more>

    ASSERT(total_len == TOTAL_CHECKSUM_LEN);
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <checksum_flash+0x118>)
 8001b02:	9a00      	ldr	r2, [sp, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d006      	beq.n	8001b16 <checksum_flash+0xde>
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <checksum_flash+0x11c>)
 8001b0a:	f7fe ff9d 	bl	8000a48 <fatal_error>
        total_len = fw_length - 64;
 8001b0e:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	e7b8      	b.n	8001a88 <checksum_flash+0x50>
    
    sha256_final(&ctx, world_digest);
 8001b16:	4629      	mov	r1, r5
 8001b18:	a809      	add	r0, sp, #36	; 0x24
 8001b1a:	f003 fcff 	bl	800551c <sha256_final>

    // double SHA256 (a bitcoin fetish)
    sha256_single(world_digest, 32, world_digest);
 8001b1e:	462a      	mov	r2, r5
 8001b20:	2120      	movs	r1, #32
 8001b22:	4628      	mov	r0, r5
 8001b24:	f003 fd0e 	bl	8005544 <sha256_single>

    rng_delay();
 8001b28:	f000 fe28 	bl	800277c <rng_delay>
}
 8001b2c:	b01c      	add	sp, #112	; 0x70
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
 8001b30:	08023f00 	.word	0x08023f00
 8001b34:	08020000 	.word	0x08020000
 8001b38:	08024000 	.word	0x08024000
 8001b3c:	1fff7000 	.word	0x1fff7000
 8001b40:	1fff7800 	.word	0x1fff7800
 8001b44:	1ffff800 	.word	0x1ffff800
 8001b48:	1fff0000 	.word	0x1fff0000
 8001b4c:	1fff7590 	.word	0x1fff7590
 8001b50:	0018541c 	.word	0x0018541c
 8001b54:	0800e390 	.word	0x0800e390

08001b58 <get_min_version>:
// Scan the OTP area and determine what the current min-version (timestamp)
// we can allow. All zeros if any if okay.
//
    void
get_min_version(uint8_t min_version[8])
{
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	4604      	mov	r4, r0
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;
 8001b5c:	4d0c      	ldr	r5, [pc, #48]	; (8001b90 <get_min_version+0x38>)

    rng_delay();
    memset(min_version, 0, 8);

    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 8001b5e:	4e0d      	ldr	r6, [pc, #52]	; (8001b94 <get_min_version+0x3c>)
    rng_delay();
 8001b60:	f000 fe0c 	bl	800277c <rng_delay>
    memset(min_version, 0, 8);
 8001b64:	2300      	movs	r3, #0
 8001b66:	6023      	str	r3, [r4, #0]
 8001b68:	6063      	str	r3, [r4, #4]
        // is it programmed?
        if(otp[0] == 0xff) continue;

        // is it a timestamp value?
        if(otp[0] >= 0x40) continue;
        if(otp[0] < 0x10) continue;
 8001b6a:	782b      	ldrb	r3, [r5, #0]
 8001b6c:	3b10      	subs	r3, #16
 8001b6e:	2b2f      	cmp	r3, #47	; 0x2f
 8001b70:	d80a      	bhi.n	8001b88 <get_min_version+0x30>

        if(memcmp(otp, min_version, 8) > 0) {
 8001b72:	4621      	mov	r1, r4
 8001b74:	2208      	movs	r2, #8
 8001b76:	4628      	mov	r0, r5
 8001b78:	f00b fd1c 	bl	800d5b4 <memcmp>
 8001b7c:	2800      	cmp	r0, #0
            memcpy(min_version, otp, 8);
 8001b7e:	bfc1      	itttt	gt
 8001b80:	462b      	movgt	r3, r5
 8001b82:	cb03      	ldmiagt	r3!, {r0, r1}
 8001b84:	6020      	strgt	r0, [r4, #0]
 8001b86:	6061      	strgt	r1, [r4, #4]
    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 8001b88:	3508      	adds	r5, #8
 8001b8a:	42b5      	cmp	r5, r6
 8001b8c:	d1ed      	bne.n	8001b6a <get_min_version+0x12>
        }
    }
}
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	1fff7000 	.word	0x1fff7000
 8001b94:	1fff7400 	.word	0x1fff7400

08001b98 <check_is_downgrade>:

// check_is_downgrade()
//
    bool
check_is_downgrade(const uint8_t timestamp[8], const char *version)
{
 8001b98:	b513      	push	{r0, r1, r4, lr}
 8001b9a:	4604      	mov	r4, r0
#ifndef FOR_Q1_ONLY
    if(version) {
 8001b9c:	b129      	cbz	r1, 8001baa <check_is_downgrade+0x12>
        int major = (version[1] == '.') ? (version[0]-'0') : 10;
 8001b9e:	784b      	ldrb	r3, [r1, #1]
 8001ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8001ba2:	d102      	bne.n	8001baa <check_is_downgrade+0x12>
        if(major < 3) {
 8001ba4:	780b      	ldrb	r3, [r1, #0]
 8001ba6:	2b32      	cmp	r3, #50	; 0x32
 8001ba8:	d90a      	bls.n	8001bc0 <check_is_downgrade+0x28>
    }
#endif

    // look at FW_HDR->timestamp and compare to a growing list in main flash OTP
    uint8_t min[8];
    get_min_version(min);
 8001baa:	4668      	mov	r0, sp
 8001bac:	f7ff ffd4 	bl	8001b58 <get_min_version>

    return (memcmp(timestamp, min, 8) < 0);
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4669      	mov	r1, sp
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f00b fcfd 	bl	800d5b4 <memcmp>
 8001bba:	0fc0      	lsrs	r0, r0, #31
}
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd10      	pop	{r4, pc}
            return true;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7fb      	b.n	8001bbc <check_is_downgrade+0x24>

08001bc4 <warn_fishy_firmware>:

// warn_fishy_firmware()
//
    void
warn_fishy_firmware(const uint8_t *pixels)
{
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	4605      	mov	r5, r0
    const int wait = 100;
#else
    const int wait = 10;
#endif
    
    for(int i=0; i < wait; i++) {
 8001bc8:	2400      	movs	r4, #0
        oled_show_progress(pixels, (i*100)/wait);
 8001bca:	4621      	mov	r1, r4
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f7ff f97b 	bl	8000ec8 <oled_show_progress>
    for(int i=0; i < wait; i++) {
 8001bd2:	3401      	adds	r4, #1

        delay_ms(250);
 8001bd4:	20fa      	movs	r0, #250	; 0xfa
 8001bd6:	f001 fe8f 	bl	80038f8 <delay_ms>
    for(int i=0; i < wait; i++) {
 8001bda:	2c64      	cmp	r4, #100	; 0x64
 8001bdc:	d1f5      	bne.n	8001bca <warn_fishy_firmware+0x6>
    }
}
 8001bde:	bd38      	pop	{r3, r4, r5, pc}

08001be0 <verify_header>:

// verify_header()
//
    bool
verify_header(const coldcardFirmwareHeader_t *hdr)
{
 8001be0:	b510      	push	{r4, lr}
 8001be2:	4604      	mov	r4, r0
    rng_delay();
 8001be4:	f000 fdca 	bl	800277c <rng_delay>

    if(hdr->magic_value != FW_HEADER_MAGIC) goto fail;
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <verify_header+0x38>)
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d110      	bne.n	8001c12 <verify_header+0x32>
    if(hdr->version_string[0] == 0x0) goto fail;
 8001bf0:	7b20      	ldrb	r0, [r4, #12]
 8001bf2:	b168      	cbz	r0, 8001c10 <verify_header+0x30>
    if(hdr->timestamp[0] >= 0x40) goto fail;        // 22 yr product lifetime
 8001bf4:	7923      	ldrb	r3, [r4, #4]
 8001bf6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf8:	d80b      	bhi.n	8001c12 <verify_header+0x32>
    if(hdr->firmware_length < FW_MIN_LENGTH) goto fail;
 8001bfa:	69a3      	ldr	r3, [r4, #24]
 8001bfc:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8001c00:	f5b3 1fd0 	cmp.w	r3, #1703936	; 0x1a0000
 8001c04:	d205      	bcs.n	8001c12 <verify_header+0x32>
    if(hdr->firmware_length >= FW_MAX_LENGTH_MK4) goto fail;
    if(hdr->pubkey_num >= NUM_KNOWN_PUBKEYS) goto fail;
 8001c06:	6960      	ldr	r0, [r4, #20]
 8001c08:	2805      	cmp	r0, #5
 8001c0a:	bf8c      	ite	hi
 8001c0c:	2000      	movhi	r0, #0
 8001c0e:	2001      	movls	r0, #1

    return true;
fail:
    return false;
}
 8001c10:	bd10      	pop	{r4, pc}
    return false;
 8001c12:	2000      	movs	r0, #0
 8001c14:	e7fc      	b.n	8001c10 <verify_header+0x30>
 8001c16:	bf00      	nop
 8001c18:	cc001234 	.word	0xcc001234

08001c1c <verify_signature>:
//
// Given double-sha256 over the firmware bytes, check the signature.
//
    bool
verify_signature(const coldcardFirmwareHeader_t *hdr, const uint8_t fw_check[32])
{
 8001c1c:	b530      	push	{r4, r5, lr}
    // this takes a few ms at least, not fast.
    int ok = uECC_verify(approved_pubkeys[hdr->pubkey_num], fw_check, 32,
 8001c1e:	6943      	ldr	r3, [r0, #20]
 8001c20:	4d0b      	ldr	r5, [pc, #44]	; (8001c50 <verify_signature+0x34>)
{
 8001c22:	b085      	sub	sp, #20
    int ok = uECC_verify(approved_pubkeys[hdr->pubkey_num], fw_check, 32,
 8001c24:	eb05 1583 	add.w	r5, r5, r3, lsl #6
{
 8001c28:	4604      	mov	r4, r0
 8001c2a:	9103      	str	r1, [sp, #12]
    int ok = uECC_verify(approved_pubkeys[hdr->pubkey_num], fw_check, 32,
 8001c2c:	f004 fe4e 	bl	80068cc <uECC_secp256k1>
 8001c30:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001c34:	9903      	ldr	r1, [sp, #12]
 8001c36:	9000      	str	r0, [sp, #0]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f005 f8cd 	bl	8006dda <uECC_verify>
 8001c40:	4604      	mov	r4, r0
                                    hdr->signature, uECC_secp256k1());

    //puts(ok ? "Sig ok" : "Sig fail");
    rng_delay();
 8001c42:	f000 fd9b 	bl	800277c <rng_delay>

    return ok;
}
 8001c46:	1e20      	subs	r0, r4, #0
 8001c48:	bf18      	it	ne
 8001c4a:	2001      	movne	r0, #1
 8001c4c:	b005      	add	sp, #20
 8001c4e:	bd30      	pop	{r4, r5, pc}
 8001c50:	0800e40a 	.word	0x0800e40a

08001c54 <verify_firmware_in_ram>:
// Check hdr, and even signature of protential new firmware in PSRAM.
// Returns checksum needed for 608
//
    bool
verify_firmware_in_ram(const uint8_t *start, uint32_t len, uint8_t world_check[32])
{
 8001c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    const coldcardFirmwareHeader_t *hdr = (const coldcardFirmwareHeader_t *)
 8001c58:	f500 567e 	add.w	r6, r0, #16256	; 0x3f80
{
 8001c5c:	b09c      	sub	sp, #112	; 0x70
 8001c5e:	4605      	mov	r5, r0
                                                    (start + FW_HEADER_OFFSET);
    uint8_t fw_digest[32];

    // check basics like verison, hw compat, etc
    if(!verify_header(hdr)) goto fail;
 8001c60:	4630      	mov	r0, r6
{
 8001c62:	4617      	mov	r7, r2
    if(!verify_header(hdr)) goto fail;
 8001c64:	f7ff ffbc 	bl	8001be0 <verify_header>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	b150      	cbz	r0, 8001c82 <verify_firmware_in_ram+0x2e>

    if(check_is_downgrade(hdr->timestamp, (const char *)hdr->version_string)) {
 8001c6c:	f106 010c 	add.w	r1, r6, #12
 8001c70:	1d30      	adds	r0, r6, #4
 8001c72:	f7ff ff91 	bl	8001b98 <check_is_downgrade>
 8001c76:	4604      	mov	r4, r0
 8001c78:	b138      	cbz	r0, 8001c8a <verify_firmware_in_ram+0x36>
        puts("downgrade");
 8001c7a:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <verify_firmware_in_ram+0xa0>)
 8001c7c:	f003 f88a 	bl	8004d94 <puts>

    checksum_flash(fw_digest, world_check, hdr->firmware_length);

    return true;
fail:
    return false;
 8001c80:	2400      	movs	r4, #0
}
 8001c82:	4620      	mov	r0, r4
 8001c84:	b01c      	add	sp, #112	; 0x70
 8001c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rng_delay();
 8001c8a:	f000 fd77 	bl	800277c <rng_delay>
                            hdr->firmware_length - (FW_HEADER_OFFSET + FW_HEADER_SIZE));
 8001c8e:	f505 5840 	add.w	r8, r5, #12288	; 0x3000
    sha256_init(&ctx);
 8001c92:	a809      	add	r0, sp, #36	; 0x24
    uint32_t    total_len = 0;
 8001c94:	9400      	str	r4, [sp, #0]
    sha256_init(&ctx);
 8001c96:	f003 fbed 	bl	8005474 <sha256_init>
    checksum_more(&ctx, &total_len, start, FW_HEADER_OFFSET + FW_HEADER_SIZE - 64);
 8001c9a:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8001c9e:	462a      	mov	r2, r5
 8001ca0:	4669      	mov	r1, sp
 8001ca2:	a809      	add	r0, sp, #36	; 0x24
 8001ca4:	f7ff feac 	bl	8001a00 <checksum_more>
                            hdr->firmware_length - (FW_HEADER_OFFSET + FW_HEADER_SIZE));
 8001ca8:	f8d8 3f98 	ldr.w	r3, [r8, #3992]	; 0xf98
    checksum_more(&ctx, &total_len, start + FW_HEADER_OFFSET + FW_HEADER_SIZE, 
 8001cac:	f505 4280 	add.w	r2, r5, #16384	; 0x4000
 8001cb0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001cb4:	4669      	mov	r1, sp
 8001cb6:	a809      	add	r0, sp, #36	; 0x24
 8001cb8:	f7ff fea2 	bl	8001a00 <checksum_more>
    sha256_final(&ctx, fw_digest);
 8001cbc:	a901      	add	r1, sp, #4
 8001cbe:	a809      	add	r0, sp, #36	; 0x24
 8001cc0:	f003 fc2c 	bl	800551c <sha256_final>
    sha256_single(fw_digest, 32, fw_digest);
 8001cc4:	aa01      	add	r2, sp, #4
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	2120      	movs	r1, #32
 8001cca:	f003 fc3b 	bl	8005544 <sha256_single>
    rng_delay();
 8001cce:	f000 fd55 	bl	800277c <rng_delay>
    if(!verify_signature(hdr, fw_digest)) {
 8001cd2:	a901      	add	r1, sp, #4
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f7ff ffa1 	bl	8001c1c <verify_signature>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	b918      	cbnz	r0, 8001ce6 <verify_firmware_in_ram+0x92>
        puts("sig fail");
 8001cde:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <verify_firmware_in_ram+0xa4>)
 8001ce0:	f003 f858 	bl	8004d94 <puts>
        goto fail;
 8001ce4:	e7cd      	b.n	8001c82 <verify_firmware_in_ram+0x2e>
    checksum_flash(fw_digest, world_check, hdr->firmware_length);
 8001ce6:	f8d8 2f98 	ldr.w	r2, [r8, #3992]	; 0xf98
 8001cea:	4639      	mov	r1, r7
 8001cec:	a801      	add	r0, sp, #4
 8001cee:	f7ff fea3 	bl	8001a38 <checksum_flash>
    return true;
 8001cf2:	e7c6      	b.n	8001c82 <verify_firmware_in_ram+0x2e>
 8001cf4:	0800e397 	.word	0x0800e397
 8001cf8:	0800e3a1 	.word	0x0800e3a1

08001cfc <verify_world_checksum>:
// - don't set the light at this point.
// - requires bootloader to have been unchanged since world_check recorded (debug issue)
//
    bool
verify_world_checksum(const uint8_t world_check[32])
{
 8001cfc:	b507      	push	{r0, r1, r2, lr}
 8001cfe:	9001      	str	r0, [sp, #4]
    ae_setup();
 8001d00:	f000 fe60 	bl	80029c4 <ae_setup>
    ae_pair_unlock();
 8001d04:	f001 f854 	bl	8002db0 <ae_pair_unlock>

    return (ae_checkmac_hard(KEYNUM_firmware, world_check) == 0);
 8001d08:	9901      	ldr	r1, [sp, #4]
 8001d0a:	200e      	movs	r0, #14
 8001d0c:	f001 f9de 	bl	80030cc <ae_checkmac_hard>
}
 8001d10:	fab0 f080 	clz	r0, r0
 8001d14:	0940      	lsrs	r0, r0, #5
 8001d16:	b003      	add	sp, #12
 8001d18:	f85d fb04 	ldr.w	pc, [sp], #4

08001d1c <verify_firmware>:

// verify_firmware()
//
    bool
verify_firmware(void)
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
    STATIC_ASSERT(sizeof(coldcardFirmwareHeader_t) == FW_HEADER_SIZE);

    rng_delay();

    // watch for unprogrammed header. and some 
    if(FW_HDR->version_string[0] == 0xff) goto blank;
 8001d1e:	4e2a      	ldr	r6, [pc, #168]	; (8001dc8 <verify_firmware+0xac>)
{
 8001d20:	b090      	sub	sp, #64	; 0x40
    rng_delay();
 8001d22:	f000 fd2b 	bl	800277c <rng_delay>
    if(FW_HDR->version_string[0] == 0xff) goto blank;
 8001d26:	f896 308c 	ldrb.w	r3, [r6, #140]	; 0x8c
 8001d2a:	2bff      	cmp	r3, #255	; 0xff
 8001d2c:	d107      	bne.n	8001d3e <verify_firmware+0x22>
    puts("corrupt firmware");
    oled_show(screen_corrupt);
    return false;

blank:
    puts("no firmware");
 8001d2e:	4827      	ldr	r0, [pc, #156]	; (8001dcc <verify_firmware+0xb0>)
    puts("corrupt firmware");
 8001d30:	f003 f830 	bl	8004d94 <puts>
    oled_show(screen_corrupt);
 8001d34:	4826      	ldr	r0, [pc, #152]	; (8001dd0 <verify_firmware+0xb4>)
 8001d36:	f7ff f885 	bl	8000e44 <oled_show>
    return false;
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	e030      	b.n	8001da0 <verify_firmware+0x84>
    if(!verify_header(FW_HDR)) goto fail;
 8001d3e:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <verify_firmware+0xb8>)
 8001d40:	f7ff ff4e 	bl	8001be0 <verify_header>
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d03c      	beq.n	8001dc2 <verify_firmware+0xa6>
    rng_delay();
 8001d48:	f000 fd18 	bl	800277c <rng_delay>
    checksum_flash(fw_check, world_check, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	a908      	add	r1, sp, #32
 8001d50:	4668      	mov	r0, sp
 8001d52:	f7ff fe71 	bl	8001a38 <checksum_flash>
    rng_delay();
 8001d56:	f000 fd11 	bl	800277c <rng_delay>
    if(!verify_signature(FW_HDR, fw_check)) goto fail;
 8001d5a:	481e      	ldr	r0, [pc, #120]	; (8001dd4 <verify_firmware+0xb8>)
 8001d5c:	4669      	mov	r1, sp
 8001d5e:	f7ff ff5d 	bl	8001c1c <verify_signature>
 8001d62:	4604      	mov	r4, r0
 8001d64:	b368      	cbz	r0, 8001dc2 <verify_firmware+0xa6>
    int not_green = ae_set_gpio_secure(world_check);
 8001d66:	a808      	add	r0, sp, #32
 8001d68:	f001 fbc4 	bl	80034f4 <ae_set_gpio_secure>
 8001d6c:	4605      	mov	r5, r0
    rng_delay();
 8001d6e:	f000 fd05 	bl	800277c <rng_delay>
    rng_delay();
 8001d72:	f000 fd03 	bl	800277c <rng_delay>
    return ((FLASH->OPTR & FLASH_OPTR_RDP_Msk) == 0xCC);
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <verify_firmware+0xbc>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	b2db      	uxtb	r3, r3
    if(!flash_is_security_level2() && not_green) {
 8001d7c:	2bcc      	cmp	r3, #204	; 0xcc
 8001d7e:	d008      	beq.n	8001d92 <verify_firmware+0x76>
 8001d80:	b18d      	cbz	r5, 8001da6 <verify_firmware+0x8a>
        oled_show_progress(screen_verify, 100);
 8001d82:	4816      	ldr	r0, [pc, #88]	; (8001ddc <verify_firmware+0xc0>)
 8001d84:	2164      	movs	r1, #100	; 0x64
 8001d86:	f7ff f89f 	bl	8000ec8 <oled_show_progress>
        puts("Factory boot");
 8001d8a:	4815      	ldr	r0, [pc, #84]	; (8001de0 <verify_firmware+0xc4>)
        puts("Good firmware");
 8001d8c:	f003 f802 	bl	8004d94 <puts>
 8001d90:	e006      	b.n	8001da0 <verify_firmware+0x84>
    } else if(not_green) {
 8001d92:	b145      	cbz	r5, 8001da6 <verify_firmware+0x8a>
        puts("WARN: Red light");
 8001d94:	4813      	ldr	r0, [pc, #76]	; (8001de4 <verify_firmware+0xc8>)
 8001d96:	f002 fffd 	bl	8004d94 <puts>
        warn_fishy_firmware(screen_red_light);
 8001d9a:	4813      	ldr	r0, [pc, #76]	; (8001de8 <verify_firmware+0xcc>)
        warn_fishy_firmware(screen_devmode);
 8001d9c:	f7ff ff12 	bl	8001bc4 <warn_fishy_firmware>
    oled_show(screen_corrupt);

    return false;
}
 8001da0:	4620      	mov	r0, r4
 8001da2:	b010      	add	sp, #64	; 0x40
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
    } else if(FW_HDR->pubkey_num == 0) {
 8001da6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8001daa:	b923      	cbnz	r3, 8001db6 <verify_firmware+0x9a>
        puts("WARN: Unsigned firmware");
 8001dac:	480f      	ldr	r0, [pc, #60]	; (8001dec <verify_firmware+0xd0>)
 8001dae:	f002 fff1 	bl	8004d94 <puts>
        warn_fishy_firmware(screen_devmode);
 8001db2:	480f      	ldr	r0, [pc, #60]	; (8001df0 <verify_firmware+0xd4>)
 8001db4:	e7f2      	b.n	8001d9c <verify_firmware+0x80>
        oled_show_progress(screen_verify, 100);
 8001db6:	4809      	ldr	r0, [pc, #36]	; (8001ddc <verify_firmware+0xc0>)
 8001db8:	2164      	movs	r1, #100	; 0x64
 8001dba:	f7ff f885 	bl	8000ec8 <oled_show_progress>
        puts("Good firmware");
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <verify_firmware+0xd8>)
 8001dc0:	e7e4      	b.n	8001d8c <verify_firmware+0x70>
    puts("corrupt firmware");
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <verify_firmware+0xdc>)
 8001dc4:	e7b4      	b.n	8001d30 <verify_firmware+0x14>
 8001dc6:	bf00      	nop
 8001dc8:	08023f00 	.word	0x08023f00
 8001dcc:	0800e3aa 	.word	0x0800e3aa
 8001dd0:	0800d825 	.word	0x0800d825
 8001dd4:	08023f80 	.word	0x08023f80
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	0800e1f2 	.word	0x0800e1f2
 8001de0:	0800e3b6 	.word	0x0800e3b6
 8001de4:	0800e3c3 	.word	0x0800e3c3
 8001de8:	0800dd22 	.word	0x0800dd22
 8001dec:	0800e3d3 	.word	0x0800e3d3
 8001df0:	0800d8e2 	.word	0x0800d8e2
 8001df4:	0800e3eb 	.word	0x0800e3eb
 8001df8:	0800e3f9 	.word	0x0800e3f9

08001dfc <systick_setup>:
    void
systick_setup(void)
{
    const uint32_t ticks = HCLK_FREQUENCY/1000;

    SysTick->LOAD = (ticks - 1);
 8001dfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <systick_setup+0x14>)
 8001e02:	615a      	str	r2, [r3, #20]
    SysTick->VAL = 0;
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
    SysTick->CTRL = SYSTICK_CLKSOURCE_HCLK | SysTick_CTRL_ENABLE_Msk;
 8001e08:	2205      	movs	r2, #5
 8001e0a:	611a      	str	r2, [r3, #16]
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	0001d4bf 	.word	0x0001d4bf

08001e14 <system_init0>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <system_init0+0x3c>)
 8001e16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <system_init0+0x40>)
 8001e24:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e26:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001e2e:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001e36:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e48:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e4a:	6199      	str	r1, [r3, #24]
}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	40021000 	.word	0x40021000

08001e58 <clocks_setup>:

// clocks_setup()
//
    void
clocks_setup(void)
{
 8001e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    // setup power supplies
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

    // Configure LSE Drive Capability
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e5c:	4c41      	ldr	r4, [pc, #260]	; (8001f64 <clocks_setup+0x10c>)
{
 8001e5e:	b0c1      	sub	sp, #260	; 0x104
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f005 f94d 	bl	8007100 <HAL_PWREx_ControlVoltageScaling>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e6a:	f023 0318 	bic.w	r3, r3, #24
 8001e6e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90

    // Enable HSE Oscillator and activate PLL with HSE as source
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;

    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
    RCC_OscInitStruct.MSIState = RCC_MSI_OFF;

    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7c:	2703      	movs	r7, #3

    // Select PLL as system clock source and configure
    // the HCLK, PCLK1 and PCLK2 clocks dividers
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK 
 8001e7e:	230f      	movs	r3, #15
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001e80:	2500      	movs	r5, #0
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e82:	2602      	movs	r6, #2
                                    | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e84:	e9cd 3705 	strd	r3, r7, [sp, #20]

    RCC_OscInitStruct.PLL.PLLM = CKCC_CLK_PLLM;
    RCC_OscInitStruct.PLL.PLLN = CKCC_CLK_PLLN;
    RCC_OscInitStruct.PLL.PLLP = CKCC_CLK_PLLP;
 8001e88:	f04f 0807 	mov.w	r8, #7
 8001e8c:	233c      	movs	r3, #60	; 0x3c
    RCC_OscInitStruct.PLL.PLLQ = CKCC_CLK_PLLQ;
 8001e8e:	f04f 0905 	mov.w	r9, #5

    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e92:	a80a      	add	r0, sp, #40	; 0x28
    RCC_OscInitStruct.PLL.PLLP = CKCC_CLK_PLLP;
 8001e94:	e9cd 3817 	strd	r3, r8, [sp, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLR = CKCC_CLK_PLLR;
 8001e9c:	e9cd 9619 	strd	r9, r6, [sp, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	e9cd 5507 	strd	r5, r5, [sp, #28]
    RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001ea4:	950c      	str	r5, [sp, #48]	; 0x30
    RCC_OscInitStruct.MSIState = RCC_MSI_OFF;
 8001ea6:	9510      	str	r5, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLM = CKCC_CLK_PLLM;
 8001ea8:	9616      	str	r6, [sp, #88]	; 0x58
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001eac:	f006 fcb4 	bl	8008818 <HAL_RCC_OscConfig>

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	a805      	add	r0, sp, #20
 8001eb4:	f006 ff5e 	bl	8008d74 <HAL_RCC_ClockConfig>

    // DIS-able MSI-Hardware auto calibration mode with LSE
    CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6023      	str	r3, [r4, #0]

    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <clocks_setup+0x110>)
 8001ec2:	931b      	str	r3, [sp, #108]	; 0x6c

    // PLLSAI is used to clock USB, ADC, I2C1 and RNG. The frequency is
    // HSE(8MHz)/PLLM(2)*PLLSAI1N(24)/PLLSAIQ(2) = 48MHz.
    //
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ec8:	933b      	str	r3, [sp, #236]	; 0xec
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001eca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ece:	9338      	str	r3, [sp, #224]	; 0xe0
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32; // but unused
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001ed0:	933a      	str	r3, [sp, #232]	; 0xe8

    PeriphClkInitStruct.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1M = 2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1N = 24;
 8001ed2:	2318      	movs	r3, #24
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32; // but unused
 8001ed4:	f44f 7240 	mov.w	r2, #768	; 0x300
    PeriphClkInitStruct.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ed8:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    PeriphClkInitStruct.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
                                                 |RCC_PLLSAI1_48M2CLK
                                                 |RCC_PLLSAI1_ADC1CLK;

    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001edc:	a81b      	add	r0, sp, #108	; 0x6c
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <clocks_setup+0x114>)
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32; // but unused
 8001ee0:	923f      	str	r2, [sp, #252]	; 0xfc
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 8001ee2:	9322      	str	r3, [sp, #136]	; 0x88
    PeriphClkInitStruct.PLLSAI1.PLLSAI1M = 2;
 8001ee4:	e9cd 761c 	strd	r7, r6, [sp, #112]	; 0x70
    PeriphClkInitStruct.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ee8:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001eec:	9531      	str	r5, [sp, #196]	; 0xc4
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001eee:	9536      	str	r5, [sp, #216]	; 0xd8
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001ef0:	f007 fa64 	bl	80093bc <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_RTC_ENABLE();
 8001ef4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    __HAL_RCC_HASH_CLK_ENABLE();        // for SHA256
 8001f00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f06:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001f08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_SPI1_CLK_ENABLE();        // for OLED
 8001f12:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f18:	6623      	str	r3, [r4, #96]	; 0x60
 8001f1a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	9b02      	ldr	r3, [sp, #8]
    //__HAL_RCC_SPI2_CLK_ENABLE();        // for SPI flash
    __HAL_RCC_DMAMUX1_CLK_ENABLE();     // (need this) because code missing in mpy?
 8001f24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	64a3      	str	r3, [r4, #72]	; 0x48
 8001f2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	9303      	str	r3, [sp, #12]
 8001f34:	9b03      	ldr	r3, [sp, #12]

    // for SE2
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f44:	9304      	str	r3, [sp, #16]
 8001f46:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_I2C2_FORCE_RESET();
 8001f48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f4e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_I2C2_RELEASE_RESET();
 8001f50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f52:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f56:	63a3      	str	r3, [r4, #56]	; 0x38

    // setup SYSTICK, but we don't have the irq hooked up and not using HAL
    // but we use it in polling mode for delay_ms()
    systick_setup();
 8001f58:	f7ff ff50 	bl	8001dfc <systick_setup>

}
 8001f5c:	b041      	add	sp, #260	; 0x104
 8001f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00066880 	.word	0x00066880
 8001f6c:	01110000 	.word	0x01110000

08001f70 <flash_ob_lock.part.0>:
    } else {

        // write changes to OB flash bytes

        // Set OPTSTRT bit
        SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <flash_ob_lock.part.0+0x50>)
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f78:	615a      	str	r2, [r3, #20]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	03d2      	lsls	r2, r2, #15
 8001f7e:	d4fc      	bmi.n	8001f7a <flash_ob_lock.part.0+0xa>
    uint32_t error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001f80:	6919      	ldr	r1, [r3, #16]
    if(error) {
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <flash_ob_lock.part.0+0x54>)
 8001f84:	4211      	tst	r1, r2
 8001f86:	d104      	bne.n	8001f92 <flash_ob_lock.part.0+0x22>
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	07d0      	lsls	r0, r2, #31
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f8c:	bf44      	itt	mi
 8001f8e:	2201      	movmi	r2, #1
 8001f90:	611a      	strmi	r2, [r3, #16]

        /// Wait for update to complete
        _flash_wait_done();

        // lock OB again.
        SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <flash_ob_lock.part.0+0x50>)
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f9a:	615a      	str	r2, [r3, #20]

        // include "launch" to make them take effect NOW
        SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001fa2:	615a      	str	r2, [r3, #20]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	03d1      	lsls	r1, r2, #15
 8001fa8:	d4fc      	bmi.n	8001fa4 <flash_ob_lock.part.0+0x34>
    uint32_t error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001faa:	6919      	ldr	r1, [r3, #16]
    if(error) {
 8001fac:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <flash_ob_lock.part.0+0x54>)
 8001fae:	4211      	tst	r1, r2
 8001fb0:	d104      	bne.n	8001fbc <flash_ob_lock.part.0+0x4c>
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	07d2      	lsls	r2, r2, #31
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001fb6:	bf44      	itt	mi
 8001fb8:	2201      	movmi	r2, #1
 8001fba:	611a      	strmi	r2, [r3, #16]

        _flash_wait_done();
    }
}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	0002c3fa 	.word	0x0002c3fa

08001fc8 <flash_setup0>:
{
 8001fc8:	b507      	push	{r0, r1, r2, lr}
    memcpy(&_srelocate, &_etext, ((uint32_t)&_erelocate)-(uint32_t)&_srelocate);
 8001fca:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <flash_setup0+0x28>)
 8001fcc:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <flash_setup0+0x2c>)
 8001fce:	490a      	ldr	r1, [pc, #40]	; (8001ff8 <flash_setup0+0x30>)
 8001fd0:	1a12      	subs	r2, r2, r0
 8001fd2:	f00b faff 	bl	800d5d4 <memcpy>
    __HAL_RCC_FLASH_CLK_ENABLE();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <flash_setup0+0x34>)
 8001fd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fde:	649a      	str	r2, [r3, #72]	; 0x48
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	9b01      	ldr	r3, [sp, #4]
}
 8001fea:	b003      	add	sp, #12
 8001fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ff0:	2009e000 	.word	0x2009e000
 8001ff4:	2009e150 	.word	0x2009e150
 8001ff8:	0800e9f4 	.word	0x0800e9f4
 8001ffc:	40021000 	.word	0x40021000

08002000 <flash_lock>:
    SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002000:	4a02      	ldr	r2, [pc, #8]	; (800200c <flash_lock+0xc>)
 8002002:	6953      	ldr	r3, [r2, #20]
 8002004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002008:	6153      	str	r3, [r2, #20]
}
 800200a:	4770      	bx	lr
 800200c:	40022000 	.word	0x40022000

08002010 <flash_unlock>:
{
 8002010:	b508      	push	{r3, lr}
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK)) {
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <flash_unlock+0x24>)
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	2a00      	cmp	r2, #0
 8002018:	da0a      	bge.n	8002030 <flash_unlock+0x20>
        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800201a:	4a07      	ldr	r2, [pc, #28]	; (8002038 <flash_unlock+0x28>)
 800201c:	609a      	str	r2, [r3, #8]
        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800201e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002022:	609a      	str	r2, [r3, #8]
        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK)) {
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <flash_unlock+0x20>
            INCONSISTENT("failed to unlock");
 800202a:	4804      	ldr	r0, [pc, #16]	; (800203c <flash_unlock+0x2c>)
 800202c:	f7fe fd0c 	bl	8000a48 <fatal_error>
}
 8002030:	bd08      	pop	{r3, pc}
 8002032:	bf00      	nop
 8002034:	40022000 	.word	0x40022000
 8002038:	45670123 	.word	0x45670123
 800203c:	0800d6b0 	.word	0x0800d6b0

08002040 <flash_ob_lock>:
{
 8002040:	b510      	push	{r4, lr}
    if(!lock) {
 8002042:	b980      	cbnz	r0, 8002066 <flash_ob_lock+0x26>
        if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK)) {
 8002044:	4c0a      	ldr	r4, [pc, #40]	; (8002070 <flash_ob_lock+0x30>)
 8002046:	6963      	ldr	r3, [r4, #20]
 8002048:	005a      	lsls	r2, r3, #1
 800204a:	d510      	bpl.n	800206e <flash_ob_lock+0x2e>
            flash_unlock();
 800204c:	f7ff ffe0 	bl	8002010 <flash_unlock>
            WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <flash_ob_lock+0x34>)
 8002052:	60e3      	str	r3, [r4, #12]
            WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002054:	f103 3344 	add.w	r3, r3, #1145324612	; 0x44444444
 8002058:	60e3      	str	r3, [r4, #12]
            if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK)) {
 800205a:	6963      	ldr	r3, [r4, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	d506      	bpl.n	800206e <flash_ob_lock+0x2e>
                INCONSISTENT("failed to OB unlock");
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <flash_ob_lock+0x38>)
 8002062:	f7fe fcf1 	bl	8000a48 <fatal_error>
}
 8002066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800206a:	f7ff bf81 	b.w	8001f70 <flash_ob_lock.part.0>
 800206e:	bd10      	pop	{r4, pc}
 8002070:	40022000 	.word	0x40022000
 8002074:	08192a3b 	.word	0x08192a3b
 8002078:	0800d6b0 	.word	0x0800d6b0

0800207c <pick_pairing_secret>:

// pick_pairing_secret()
//
    static void
pick_pairing_secret(void)
{
 800207c:	b570      	push	{r4, r5, r6, lr}
 800207e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
    // important the RNG works here. ok to call setup multiple times.
    rng_setup();
 8002082:	f000 fb39 	bl	80026f8 <rng_setup>
 8002086:	24c8      	movs	r4, #200	; 0xc8
#else
    // Demo to anyone watching that the RNG is working, but likely only
    // to be seen by production team during initial powerup.
    uint8_t    tmp[1024];
    for(int i=0; i<200; i++) {
        rng_buffer(tmp, sizeof(tmp));
 8002088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208c:	a80a      	add	r0, sp, #40	; 0x28
 800208e:	f000 fb5f 	bl	8002750 <rng_buffer>

        oled_show_raw(sizeof(tmp), (void *)tmp);
 8002092:	a90a      	add	r1, sp, #40	; 0x28
 8002094:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002098:	f7fe fea8 	bl	8000dec <oled_show_raw>
    for(int i=0; i<200; i++) {
 800209c:	3c01      	subs	r4, #1
 800209e:	d1f3      	bne.n	8002088 <pick_pairing_secret+0xc>
    }

    oled_factory_busy();
 80020a0:	f7fe ff92 	bl	8000fc8 <oled_factory_busy>
#endif

    // .. but don't use those numbers, because those are semi-public now.
    uint32_t secret[8];
    for(int i=0; i<8; i++) {
 80020a4:	ad02      	add	r5, sp, #8
    oled_factory_busy();
 80020a6:	462e      	mov	r6, r5
        secret[i] = rng_sample();
 80020a8:	f000 fb14 	bl	80026d4 <rng_sample>
    for(int i=0; i<8; i++) {
 80020ac:	3401      	adds	r4, #1
 80020ae:	2c08      	cmp	r4, #8
        secret[i] = rng_sample();
 80020b0:	f846 0b04 	str.w	r0, [r6], #4
    for(int i=0; i<8; i++) {
 80020b4:	d1f8      	bne.n	80020a8 <pick_pairing_secret+0x2c>
    }

    // enforce policy that first word is not all ones (so it never
    // looks like unprogrammed flash).
    while(secret[0] == ~0) {
 80020b6:	682b      	ldr	r3, [r5, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	d00c      	beq.n	80020d6 <pick_pairing_secret+0x5a>

    // Write pairing secret into flash
    {
        uint32_t dest = (uint32_t)&rom_secrets->pairing_secret;

        flash_unlock();
 80020bc:	f7ff ffa8 	bl	8002010 <flash_unlock>
        uint32_t dest = (uint32_t)&rom_secrets->pairing_secret;
 80020c0:	4c16      	ldr	r4, [pc, #88]	; (800211c <pick_pairing_secret+0xa0>)
        for(int i=0; i<8; i+=2, dest += 8) {
 80020c2:	4e17      	ldr	r6, [pc, #92]	; (8002120 <pick_pairing_secret+0xa4>)
            uint64_t    val = (((uint64_t)secret[i]) << 32) | secret[i+1];

            if(flash_burn(dest, val)) {
 80020c4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80020c8:	4620      	mov	r0, r4
 80020ca:	f00b fae9 	bl	800d6a0 <__flash_burn_veneer>
 80020ce:	b130      	cbz	r0, 80020de <pick_pairing_secret+0x62>
                INCONSISTENT("flash fail");
 80020d0:	4814      	ldr	r0, [pc, #80]	; (8002124 <pick_pairing_secret+0xa8>)
 80020d2:	f7fe fcb9 	bl	8000a48 <fatal_error>
        secret[0] = rng_sample();
 80020d6:	f000 fafd 	bl	80026d4 <rng_sample>
 80020da:	6028      	str	r0, [r5, #0]
 80020dc:	e7eb      	b.n	80020b6 <pick_pairing_secret+0x3a>
        for(int i=0; i<8; i+=2, dest += 8) {
 80020de:	3408      	adds	r4, #8
 80020e0:	42b4      	cmp	r4, r6
 80020e2:	f105 0508 	add.w	r5, r5, #8
 80020e6:	d1ed      	bne.n	80020c4 <pick_pairing_secret+0x48>
            }
        }
        flash_lock();
 80020e8:	f7ff ff8a 	bl	8002000 <flash_lock>
                                + sizeof(rom_secrets->mcu_hmac_key);

        STATIC_ASSERT(offsetof(rom_secrets_t, hash_cache_secret) % 8 == 0);
        STATIC_ASSERT(blen % 8 == 0);

        flash_unlock();
 80020ec:	f7ff ff90 	bl	8002010 <flash_unlock>
        uint32_t dest = (uint32_t)&rom_secrets->hash_cache_secret;
 80020f0:	4c0d      	ldr	r4, [pc, #52]	; (8002128 <pick_pairing_secret+0xac>)
        for(int i=0; i<blen; i+=8, dest += 8) {
 80020f2:	4d0e      	ldr	r5, [pc, #56]	; (800212c <pick_pairing_secret+0xb0>)
            uint64_t    val = ((uint64_t)rng_sample() << 32) | rng_sample();
 80020f4:	f000 faee 	bl	80026d4 <rng_sample>
 80020f8:	9001      	str	r0, [sp, #4]
 80020fa:	f000 faeb 	bl	80026d4 <rng_sample>

            if(flash_burn(dest, val)) {
 80020fe:	9b01      	ldr	r3, [sp, #4]
            uint64_t    val = ((uint64_t)rng_sample() << 32) | rng_sample();
 8002100:	4602      	mov	r2, r0
            if(flash_burn(dest, val)) {
 8002102:	4620      	mov	r0, r4
 8002104:	f00b facc 	bl	800d6a0 <__flash_burn_veneer>
 8002108:	2800      	cmp	r0, #0
 800210a:	d1e1      	bne.n	80020d0 <pick_pairing_secret+0x54>
        for(int i=0; i<blen; i+=8, dest += 8) {
 800210c:	3408      	adds	r4, #8
 800210e:	42ac      	cmp	r4, r5
 8002110:	d1f0      	bne.n	80020f4 <pick_pairing_secret+0x78>
                INCONSISTENT("flash fail");
            }
        }
        flash_lock();
 8002112:	f7ff ff75 	bl	8002000 <flash_lock>
    }
    
}
 8002116:	f50d 6d85 	add.w	sp, sp, #1064	; 0x428
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	0801c000 	.word	0x0801c000
 8002120:	0801c020 	.word	0x0801c020
 8002124:	0800d6b0 	.word	0x0800d6b0
 8002128:	0801c070 	.word	0x0801c070
 800212c:	0801c0b0 	.word	0x0801c0b0

08002130 <flash_save_ae_serial>:
//
// Write the serial number of ATECC608 into flash forever.
//
    void
flash_save_ae_serial(const uint8_t serial[9])
{
 8002130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002132:	4602      	mov	r2, r0
    uint64_t    tmp[2];
    memset(&tmp, 0x0, sizeof(tmp));
 8002134:	2300      	movs	r3, #0
    memcpy(&tmp, serial, 9);
 8002136:	6800      	ldr	r0, [r0, #0]
 8002138:	6851      	ldr	r1, [r2, #4]
 800213a:	7a12      	ldrb	r2, [r2, #8]
    memset(&tmp, 0x0, sizeof(tmp));
 800213c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    memcpy(&tmp, serial, 9);
 8002140:	466b      	mov	r3, sp
 8002142:	c303      	stmia	r3!, {r0, r1}
 8002144:	701a      	strb	r2, [r3, #0]

    flash_setup0();
 8002146:	f7ff ff3f 	bl	8001fc8 <flash_setup0>
    flash_unlock();
 800214a:	f7ff ff61 	bl	8002010 <flash_unlock>

    if(flash_burn((uint32_t)&rom_secrets->ae_serial_number[0], tmp[0])) {
 800214e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002152:	4809      	ldr	r0, [pc, #36]	; (8002178 <flash_save_ae_serial+0x48>)
 8002154:	f00b faa4 	bl	800d6a0 <__flash_burn_veneer>
 8002158:	b110      	cbz	r0, 8002160 <flash_save_ae_serial+0x30>
        INCONSISTENT("fail1");
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <flash_save_ae_serial+0x4c>)
 800215c:	f7fe fc74 	bl	8000a48 <fatal_error>
    }
    if(flash_burn((uint32_t)&rom_secrets->ae_serial_number[1], tmp[1])) {
 8002160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002164:	4806      	ldr	r0, [pc, #24]	; (8002180 <flash_save_ae_serial+0x50>)
 8002166:	f00b fa9b 	bl	800d6a0 <__flash_burn_veneer>
 800216a:	2800      	cmp	r0, #0
 800216c:	d1f5      	bne.n	800215a <flash_save_ae_serial+0x2a>
        INCONSISTENT("fail2");
    }

    flash_lock();
}
 800216e:	b005      	add	sp, #20
 8002170:	f85d eb04 	ldr.w	lr, [sp], #4
    flash_lock();
 8002174:	f7ff bf44 	b.w	8002000 <flash_lock>
 8002178:	0801c040 	.word	0x0801c040
 800217c:	0800d6b0 	.word	0x0800d6b0
 8002180:	0801c048 	.word	0x0801c048

08002184 <flash_save_bag_number>:
//
// Write bag number (probably a string)
//
    void
flash_save_bag_number(const uint8_t new_number[32])
{
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	b088      	sub	sp, #32
    uint32_t dest = (uint32_t)&rom_secrets->bag_number[0];
    uint64_t tmp[4] = { 0 };
    uint64_t *src = tmp;

    STATIC_ASSERT(sizeof(tmp) == 32);
    memcpy(tmp, new_number, 32);
 8002188:	4603      	mov	r3, r0
 800218a:	466c      	mov	r4, sp
 800218c:	f100 0520 	add.w	r5, r0, #32
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	4622      	mov	r2, r4
 8002196:	c203      	stmia	r2!, {r0, r1}
 8002198:	3308      	adds	r3, #8
 800219a:	42ab      	cmp	r3, r5
 800219c:	4614      	mov	r4, r2
 800219e:	d1f7      	bne.n	8002190 <flash_save_bag_number+0xc>

    flash_setup0();
 80021a0:	f7ff ff12 	bl	8001fc8 <flash_setup0>
    flash_unlock();
 80021a4:	f7ff ff34 	bl	8002010 <flash_unlock>
    uint32_t dest = (uint32_t)&rom_secrets->bag_number[0];
 80021a8:	4d09      	ldr	r5, [pc, #36]	; (80021d0 <flash_save_bag_number+0x4c>)

    // NOTE: can only write once! No provision for read/check/update.
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 80021aa:	4e0a      	ldr	r6, [pc, #40]	; (80021d4 <flash_save_bag_number+0x50>)
 80021ac:	466c      	mov	r4, sp
        if(flash_burn(dest, *src)) {
 80021ae:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80021b2:	4628      	mov	r0, r5
 80021b4:	f00b fa74 	bl	800d6a0 <__flash_burn_veneer>
 80021b8:	b110      	cbz	r0, 80021c0 <flash_save_bag_number+0x3c>
            INCONSISTENT("fail write");
 80021ba:	4807      	ldr	r0, [pc, #28]	; (80021d8 <flash_save_bag_number+0x54>)
 80021bc:	f7fe fc44 	bl	8000a48 <fatal_error>
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 80021c0:	3508      	adds	r5, #8
 80021c2:	42b5      	cmp	r5, r6
 80021c4:	d1f3      	bne.n	80021ae <flash_save_bag_number+0x2a>
        }
    }

    flash_lock();
}
 80021c6:	b008      	add	sp, #32
 80021c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    flash_lock();
 80021cc:	f7ff bf18 	b.w	8002000 <flash_lock>
 80021d0:	0801c050 	.word	0x0801c050
 80021d4:	0801c070 	.word	0x0801c070
 80021d8:	0800d6b0 	.word	0x0800d6b0

080021dc <flash_save_se2_data>:
// Save bunch of stuff related to SE2. Allow updates to sections that are
// given as ones at this point.
//
    void
flash_save_se2_data(const se2_secrets_t *se2)
{
 80021dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80021e0:	4605      	mov	r5, r0
    uint8_t *dest = (uint8_t *)&rom_secrets->se2;
 80021e2:	4c1a      	ldr	r4, [pc, #104]	; (800224c <flash_save_se2_data+0x70>)
    STATIC_ASSERT(offsetof(rom_secrets_t, se2) % 8 == 0);

    flash_setup0();
    flash_unlock();

    for(int i=0; i<(sizeof(se2_secrets_t)/8); i++, dest+=8, src+=8) {
 80021e4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002258 <flash_save_se2_data+0x7c>
    flash_setup0();
 80021e8:	f7ff feee 	bl	8001fc8 <flash_setup0>
    flash_unlock();
 80021ec:	f7ff ff10 	bl	8002010 <flash_unlock>
    for(int i=0; i<(sizeof(se2_secrets_t)/8); i++, dest+=8, src+=8) {
 80021f0:	1b2d      	subs	r5, r5, r4
 80021f2:	eb05 0c04 	add.w	ip, r5, r4
        uint64_t val;
        memcpy(&val, src, sizeof(val));
 80021f6:	5928      	ldr	r0, [r5, r4]
 80021f8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80021fc:	466b      	mov	r3, sp

        // don't write if all ones or already written correctly
        if(val == ~0) continue;
 80021fe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002202:	bf08      	it	eq
 8002204:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
        memcpy(&val, src, sizeof(val));
 8002208:	c303      	stmia	r3!, {r0, r1}
        if(val == ~0) continue;
 800220a:	4607      	mov	r7, r0
 800220c:	460e      	mov	r6, r1
 800220e:	d015      	beq.n	800223c <flash_save_se2_data+0x60>
        if(check_equal(dest, src, 8)) continue;
 8002210:	2208      	movs	r2, #8
 8002212:	4661      	mov	r1, ip
 8002214:	4620      	mov	r0, r4
 8002216:	f000 fa4c 	bl	80026b2 <check_equal>
 800221a:	b978      	cbnz	r0, 800223c <flash_save_se2_data+0x60>

        // can't write if not ones already
        ASSERT(check_all_ones(dest, 8));
 800221c:	2108      	movs	r1, #8
 800221e:	4620      	mov	r0, r4
 8002220:	f000 fa2e 	bl	8002680 <check_all_ones>
 8002224:	b910      	cbnz	r0, 800222c <flash_save_se2_data+0x50>
 8002226:	480a      	ldr	r0, [pc, #40]	; (8002250 <flash_save_se2_data+0x74>)

        if(flash_burn((uint32_t)dest, val)) {
            INCONSISTENT("fail write");
 8002228:	f7fe fc0e 	bl	8000a48 <fatal_error>
        if(flash_burn((uint32_t)dest, val)) {
 800222c:	463a      	mov	r2, r7
 800222e:	4633      	mov	r3, r6
 8002230:	4620      	mov	r0, r4
 8002232:	f00b fa35 	bl	800d6a0 <__flash_burn_veneer>
 8002236:	b108      	cbz	r0, 800223c <flash_save_se2_data+0x60>
            INCONSISTENT("fail write");
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <flash_save_se2_data+0x78>)
 800223a:	e7f5      	b.n	8002228 <flash_save_se2_data+0x4c>
    for(int i=0; i<(sizeof(se2_secrets_t)/8); i++, dest+=8, src+=8) {
 800223c:	3408      	adds	r4, #8
 800223e:	4544      	cmp	r4, r8
 8002240:	d1d7      	bne.n	80021f2 <flash_save_se2_data+0x16>
        }
    }

    flash_lock();
}
 8002242:	b002      	add	sp, #8
 8002244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    flash_lock();
 8002248:	f7ff beda 	b.w	8002000 <flash_lock>
 800224c:	0801c0b0 	.word	0x0801c0b0
 8002250:	0800e390 	.word	0x0800e390
 8002254:	0800d6b0 	.word	0x0800d6b0
 8002258:	0801c190 	.word	0x0801c190

0800225c <flash_setup>:
//
// This is really a state-machine, to recover boards that are booted w/ missing AE chip.
//
    void
flash_setup(void)
{
 800225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    // see if we have picked a pairing secret yet.
    // NOTE: critical section for glitching (at least in past versions)
    //  - check_all.. functions have a rng_delay in them already
    rng_delay();
    bool blank_ps = check_all_ones(rom_secrets->pairing_secret, 32);
 8002260:	4d3e      	ldr	r5, [pc, #248]	; (800235c <flash_setup+0x100>)
{
 8002262:	b088      	sub	sp, #32
    flash_setup0();
 8002264:	f7ff feb0 	bl	8001fc8 <flash_setup0>
    rng_delay();
 8002268:	f000 fa88 	bl	800277c <rng_delay>
    bool blank_ps = check_all_ones(rom_secrets->pairing_secret, 32);
 800226c:	2120      	movs	r1, #32
 800226e:	4628      	mov	r0, r5
 8002270:	f000 fa06 	bl	8002680 <check_all_ones>
    bool zeroed_ps = check_all_zeros(rom_secrets->pairing_secret, 32);
 8002274:	2120      	movs	r1, #32
    bool blank_ps = check_all_ones(rom_secrets->pairing_secret, 32);
 8002276:	4606      	mov	r6, r0
    bool zeroed_ps = check_all_zeros(rom_secrets->pairing_secret, 32);
 8002278:	4628      	mov	r0, r5
 800227a:	f000 fa0b 	bl	8002694 <check_all_zeros>
    bool blank_xor = check_all_ones(rom_secrets->pairing_secret_xor, 32);
 800227e:	2120      	movs	r1, #32
    bool zeroed_ps = check_all_zeros(rom_secrets->pairing_secret, 32);
 8002280:	4607      	mov	r7, r0
    bool blank_xor = check_all_ones(rom_secrets->pairing_secret_xor, 32);
 8002282:	4837      	ldr	r0, [pc, #220]	; (8002360 <flash_setup+0x104>)
 8002284:	f000 f9fc 	bl	8002680 <check_all_ones>
    bool blank_ae = (~rom_secrets->ae_serial_number[0] == 0);
 8002288:	e9d5 8510 	ldrd	r8, r5, [r5, #64]	; 0x40
    bool blank_xor = check_all_ones(rom_secrets->pairing_secret_xor, 32);
 800228c:	4604      	mov	r4, r0
    rng_delay();
 800228e:	f000 fa75 	bl	800277c <rng_delay>

    if(zeroed_ps) {
 8002292:	b127      	cbz	r7, 800229e <flash_setup+0x42>
        // fast brick process leaves us w/ zero pairing secret
        oled_show(screen_brick);
 8002294:	4833      	ldr	r0, [pc, #204]	; (8002364 <flash_setup+0x108>)
 8002296:	f7fe fdd5 	bl	8000e44 <oled_show>
        LOCKUP_FOREVER();
 800229a:	bf30      	wfi
 800229c:	e7fd      	b.n	800229a <flash_setup+0x3e>
    }

    if(blank_ps) {
 800229e:	b10e      	cbz	r6, 80022a4 <flash_setup+0x48>
        // get some good entropy, save it.
        pick_pairing_secret();
 80022a0:	f7ff feec 	bl	800207c <pick_pairing_secret>

        blank_ps = false;
    }

    if(blank_xor || blank_ae) {
 80022a4:	b92c      	cbnz	r4, 80022b2 <flash_setup+0x56>
 80022a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80022aa:	bf08      	it	eq
 80022ac:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 80022b0:	d12f      	bne.n	8002312 <flash_setup+0xb6>

        // setup the SE2 (mostly). handles failures by dying
        se2_setup_config();
 80022b2:	f005 facb 	bl	800784c <se2_setup_config>

        // configure and lock-down the SE1
        int rv = ae_setup_config();
 80022b6:	f001 f99b 	bl	80035f0 <ae_setup_config>
 80022ba:	4605      	mov	r5, r0

        rng_delay();
 80022bc:	f000 fa5e 	bl	800277c <rng_delay>
        if(rv) {
 80022c0:	b13d      	cbz	r5, 80022d2 <flash_setup+0x76>
            // Hardware fail speaking to AE chip ... be careful not to brick here.
            // Do not continue!! We might fix the board, or add missing pullup, etc.
            oled_show(screen_se1_issue);
 80022c2:	4829      	ldr	r0, [pc, #164]	; (8002368 <flash_setup+0x10c>)
 80022c4:	f7fe fdbe 	bl	8000e44 <oled_show>
            puts("SE1 config fail");
 80022c8:	4828      	ldr	r0, [pc, #160]	; (800236c <flash_setup+0x110>)
 80022ca:	f002 fd63 	bl	8004d94 <puts>

            LOCKUP_FOREVER();
 80022ce:	bf30      	wfi
 80022d0:	e7fd      	b.n	80022ce <flash_setup+0x72>
        }

        rng_delay();
 80022d2:	f000 fa53 	bl	800277c <rng_delay>
        if(blank_xor) {
 80022d6:	b1a4      	cbz	r4, 8002302 <flash_setup+0xa6>
    flash_unlock();
 80022d8:	f7ff fe9a 	bl	8002010 <flash_unlock>
    uint64_t *src = (uint64_t *)&rom_secrets->pairing_secret;
 80022dc:	4c1f      	ldr	r4, [pc, #124]	; (800235c <flash_setup+0x100>)
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 80022de:	4d20      	ldr	r5, [pc, #128]	; (8002360 <flash_setup+0x104>)
        uint64_t    val = ~(*src);
 80022e0:	e9d4 2300 	ldrd	r2, r3, [r4]
        if(flash_burn(dest, val)) {
 80022e4:	f104 0020 	add.w	r0, r4, #32
 80022e8:	43d2      	mvns	r2, r2
 80022ea:	43db      	mvns	r3, r3
 80022ec:	f00b f9d8 	bl	800d6a0 <__flash_burn_veneer>
 80022f0:	b110      	cbz	r0, 80022f8 <flash_setup+0x9c>
            INCONSISTENT("flash xor fail");
 80022f2:	481f      	ldr	r0, [pc, #124]	; (8002370 <flash_setup+0x114>)
 80022f4:	f7fe fba8 	bl	8000a48 <fatal_error>
    for(int i=0; i<(32/8); i++, dest+=8, src++) {
 80022f8:	3408      	adds	r4, #8
 80022fa:	42ac      	cmp	r4, r5
 80022fc:	d1f0      	bne.n	80022e0 <flash_setup+0x84>
    flash_lock();
 80022fe:	f7ff fe7f 	bl	8002000 <flash_lock>
        // Q: just do it (we warned them)
        extern void turn_power_off(void);
        turn_power_off();
#else
        // Mk: operator must do it
        oled_show(screen_replug);
 8002302:	481c      	ldr	r0, [pc, #112]	; (8002374 <flash_setup+0x118>)
 8002304:	f7fe fd9e 	bl	8000e44 <oled_show>
        puts("replug required");
 8002308:	481b      	ldr	r0, [pc, #108]	; (8002378 <flash_setup+0x11c>)
 800230a:	f002 fd43 	bl	8004d94 <puts>
        LOCKUP_FOREVER();
 800230e:	bf30      	wfi
 8002310:	e7fd      	b.n	800230e <flash_setup+0xb2>

    rng_delay();
    if(!blank_ps && !blank_xor) {
        // check the XOR value also written: 2 phase commit
        uint8_t tmp[32];
        memcpy(tmp, rom_secrets->pairing_secret, 32);
 8002312:	4d12      	ldr	r5, [pc, #72]	; (800235c <flash_setup+0x100>)
    rng_delay();
 8002314:	f000 fa32 	bl	800277c <rng_delay>
        memcpy(tmp, rom_secrets->pairing_secret, 32);
 8002318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800231a:	466c      	mov	r4, sp
 800231c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800231e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002326:	466b      	mov	r3, sp
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <flash_setup+0x104>)
bool check_equal(const void *aV, const void *bV, int len);

// XOR-mixin more bytes; acc = acc XOR more for each byte
void static inline xor_mixin(uint8_t *acc, const uint8_t *more, int len)
{
	for(; len; len--, more++, acc++) {
 800232a:	4c14      	ldr	r4, [pc, #80]	; (800237c <flash_setup+0x120>)
 800232c:	4618      	mov	r0, r3
		*(acc) ^= *(more);
 800232e:	7819      	ldrb	r1, [r3, #0]
 8002330:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002334:	4069      	eors	r1, r5
	for(; len; len--, more++, acc++) {
 8002336:	42a2      	cmp	r2, r4
		*(acc) ^= *(more);
 8002338:	f803 1b01 	strb.w	r1, [r3], #1
	for(; len; len--, more++, acc++) {
 800233c:	d1f7      	bne.n	800232e <flash_setup+0xd2>
        xor_mixin(tmp, rom_secrets->pairing_secret_xor, 32);

        if(!check_all_ones(tmp, 32)) {
 800233e:	2120      	movs	r1, #32
 8002340:	f000 f99e 	bl	8002680 <check_all_ones>
 8002344:	b938      	cbnz	r0, 8002356 <flash_setup+0xfa>
            oled_show(screen_corrupt);
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <flash_setup+0x124>)
 8002348:	f7fe fd7c 	bl	8000e44 <oled_show>
            puts("corrupt pair sec");
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <flash_setup+0x128>)
 800234e:	f002 fd21 	bl	8004d94 <puts>

            // dfu won't save them here, so just die
            LOCKUP_FOREVER();
 8002352:	bf30      	wfi
 8002354:	e7fd      	b.n	8002352 <flash_setup+0xf6>
    // That's fine if we intend to ship units locked already.
    
    // Do NOT do write every boot, as it might wear-out
    // the flash bits in OB.

}
 8002356:	b008      	add	sp, #32
 8002358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800235c:	0801c000 	.word	0x0801c000
 8002360:	0801c020 	.word	0x0801c020
 8002364:	0800d7bb 	.word	0x0800d7bb
 8002368:	0800ded7 	.word	0x0800ded7
 800236c:	0800e58a 	.word	0x0800e58a
 8002370:	0800d6b0 	.word	0x0800d6b0
 8002374:	0800de76 	.word	0x0800de76
 8002378:	0800e59a 	.word	0x0800e59a
 800237c:	0801c040 	.word	0x0801c040
 8002380:	0800d825 	.word	0x0800d825
 8002384:	0800e5aa 	.word	0x0800e5aa

08002388 <flash_lockdown_hard>:
// 
// This is a one-way trip. Might need power cycle to (fully?) take effect.
//
    void
flash_lockdown_hard(uint8_t rdp_level_code)
{
 8002388:	b510      	push	{r4, lr}
 800238a:	4604      	mov	r4, r0
#if RELEASE
    flash_setup0();
 800238c:	f7ff fe1c 	bl	8001fc8 <flash_setup0>

    // see FLASH_OB_WRPConfig()

    flash_ob_lock(false);
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff fe55 	bl	8002040 <flash_ob_lock>
        // lock first 128k-8k against any writes
        FLASH->WRP1AR = (num_pages_locked << 16);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <flash_lockdown_hard+0x30>)
 8002398:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
        FLASH->WRP1BR = 0xff;      // unused.
 800239e:	22ff      	movs	r2, #255	; 0xff
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
        FLASH->WRP2AR = 0xff;      // unused.
 80023a2:	64da      	str	r2, [r3, #76]	; 0x4c
        FLASH->WRP2BR = 0xff;      // unused.
 80023a4:	651a      	str	r2, [r3, #80]	; 0x50
        //    the RDP level is decreased from Level 1 to Level 0)."
        // - D-bus access blocked, even for code running inside the PCROP area! (AN4758)
        //   So literal values and constant tables and such would need special linking.

        // set protection level
        uint32_t was = FLASH->OPTR & ~0xff;
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
        FLASH->OPTR = was | rdp_level_code;    // select level X, other values as observed
 80023ac:	4322      	orrs	r2, r4
 80023ae:	621a      	str	r2, [r3, #32]
#else
    puts2("flash_lockdown_hard(");
    puthex2(rdp_level_code);
    puts(") skipped");
#endif
}
 80023b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023b4:	f7ff bddc 	b.w	8001f70 <flash_ob_lock.part.0>
 80023b8:	40022000 	.word	0x40022000

080023bc <record_highwater_version>:

// record_highwater_version()
//
    int
record_highwater_version(const uint8_t timestamp[8])
{
 80023bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;

    ASSERT(timestamp[0] < 0x40);
    ASSERT(timestamp[0] >= 0x10);
 80023be:	7802      	ldrb	r2, [r0, #0]
 80023c0:	3a10      	subs	r2, #16
 80023c2:	2a2f      	cmp	r2, #47	; 0x2f
{
 80023c4:	4603      	mov	r3, r0
    ASSERT(timestamp[0] >= 0x10);
 80023c6:	d902      	bls.n	80023ce <record_highwater_version+0x12>
    ASSERT(timestamp[0] < 0x40);
 80023c8:	4810      	ldr	r0, [pc, #64]	; (800240c <record_highwater_version+0x50>)
 80023ca:	f7fe fb3d 	bl	8000a48 <fatal_error>

    uint64_t val = 0;
    memcpy(&val, timestamp, 8);
 80023ce:	6800      	ldr	r0, [r0, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
    const uint8_t *otp = (const uint8_t *)OPT_FLASH_BASE;
 80023d2:	4c0f      	ldr	r4, [pc, #60]	; (8002410 <record_highwater_version+0x54>)

    // just write to first blank slot we can find.
    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 80023d4:	4d0f      	ldr	r5, [pc, #60]	; (8002414 <record_highwater_version+0x58>)
    memcpy(&val, timestamp, 8);
 80023d6:	466a      	mov	r2, sp
 80023d8:	c203      	stmia	r2!, {r0, r1}
        if(check_all_ones(otp, 8)) {
 80023da:	2108      	movs	r1, #8
 80023dc:	4620      	mov	r0, r4
 80023de:	f000 f94f 	bl	8002680 <check_all_ones>
 80023e2:	b168      	cbz	r0, 8002400 <record_highwater_version+0x44>
            // write here.
            flash_setup0();
 80023e4:	f7ff fdf0 	bl	8001fc8 <flash_setup0>
            flash_unlock();
 80023e8:	f7ff fe12 	bl	8002010 <flash_unlock>
                flash_burn((uint32_t)otp, val);
 80023ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80023f0:	4620      	mov	r0, r4
 80023f2:	f00b f955 	bl	800d6a0 <__flash_burn_veneer>
            flash_lock();
 80023f6:	f7ff fe03 	bl	8002000 <flash_lock>

            return 0;
 80023fa:	2000      	movs	r0, #0
        }
    }

    // no space.
    return 1;
}
 80023fc:	b003      	add	sp, #12
 80023fe:	bd30      	pop	{r4, r5, pc}
    for(int i=0; i<NUM_OPT_SLOTS; i++, otp+=8) {
 8002400:	3408      	adds	r4, #8
 8002402:	42ac      	cmp	r4, r5
 8002404:	d1e9      	bne.n	80023da <record_highwater_version+0x1e>
    return 1;
 8002406:	2001      	movs	r0, #1
 8002408:	e7f8      	b.n	80023fc <record_highwater_version+0x40>
 800240a:	bf00      	nop
 800240c:	0800e390 	.word	0x0800e390
 8002410:	1fff7000 	.word	0x1fff7000
 8002414:	1fff7400 	.word	0x1fff7400

08002418 <mcu_key_get>:

// mcu_key_get()
//
    const mcu_key_t *
mcu_key_get(bool *valid)
{
 8002418:	b570      	push	{r4, r5, r6, lr}
    // get current "mcu_key" value; first byte will never be 0x0 or 0xff
    // - except if no key set yet/recently wiped
    // - if none set, returns ptr to first available slot which will be all ones
    const mcu_key_t *ptr = MCU_KEYS, *avail=NULL;

    for(int i=0; i<NUM_MCU_KEYS; i++, ptr++) {
 800241a:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <mcu_key_get+0x38>)
    const mcu_key_t *ptr = MCU_KEYS, *avail=NULL;
 800241c:	4c0d      	ldr	r4, [pc, #52]	; (8002454 <mcu_key_get+0x3c>)
{
 800241e:	4606      	mov	r6, r0
    const mcu_key_t *ptr = MCU_KEYS, *avail=NULL;
 8002420:	2500      	movs	r5, #0
        if(ptr->value[0] == 0xff) {
 8002422:	7823      	ldrb	r3, [r4, #0]
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d10b      	bne.n	8002440 <mcu_key_get+0x28>
            if(!avail) {
 8002428:	2d00      	cmp	r5, #0
 800242a:	bf08      	it	eq
 800242c:	4625      	moveq	r5, r4
    for(int i=0; i<NUM_MCU_KEYS; i++, ptr++) {
 800242e:	3420      	adds	r4, #32
 8002430:	4294      	cmp	r4, r2
 8002432:	d1f6      	bne.n	8002422 <mcu_key_get+0xa>
            *valid = true;
            return ptr;
        }
    }

    rng_delay();
 8002434:	f000 f9a2 	bl	800277c <rng_delay>
    *valid = false;
 8002438:	2300      	movs	r3, #0
 800243a:	7033      	strb	r3, [r6, #0]
    return avail;
 800243c:	462c      	mov	r4, r5
 800243e:	e005      	b.n	800244c <mcu_key_get+0x34>
        } else if(ptr->value[0] != 0x00) {
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f4      	beq.n	800242e <mcu_key_get+0x16>
            rng_delay();
 8002444:	f000 f99a 	bl	800277c <rng_delay>
            *valid = true;
 8002448:	2301      	movs	r3, #1
 800244a:	7033      	strb	r3, [r6, #0]
}
 800244c:	4620      	mov	r0, r4
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	08020000 	.word	0x08020000
 8002454:	0801e000 	.word	0x0801e000

08002458 <mcu_key_clear>:

// mcu_key_clear()
//
    void
mcu_key_clear(const mcu_key_t *cur)
{
 8002458:	b513      	push	{r0, r1, r4, lr}
    if(!cur) {
 800245a:	4604      	mov	r4, r0
 800245c:	b938      	cbnz	r0, 800246e <mcu_key_clear+0x16>
        bool valid;
        cur = mcu_key_get(&valid);
 800245e:	f10d 0007 	add.w	r0, sp, #7
 8002462:	f7ff ffd9 	bl	8002418 <mcu_key_get>

        if(!valid) return;
 8002466:	f89d 3007 	ldrb.w	r3, [sp, #7]
        cur = mcu_key_get(&valid);
 800246a:	4604      	mov	r4, r0
        if(!valid) return;
 800246c:	b1fb      	cbz	r3, 80024ae <mcu_key_clear+0x56>
    }

    // no delays here since decision has been made, and don't 
    // want to give them more time to interrupt us
    flash_setup0();
 800246e:	f7ff fdab 	bl	8001fc8 <flash_setup0>
    flash_unlock();
 8002472:	f7ff fdcd 	bl	8002010 <flash_unlock>
        uint32_t  pos = (uint32_t)cur;
        flash_burn(pos, 0); pos += 8;
 8002476:	2200      	movs	r2, #0
 8002478:	2300      	movs	r3, #0
 800247a:	4620      	mov	r0, r4
 800247c:	f00b f910 	bl	800d6a0 <__flash_burn_veneer>
        flash_burn(pos, 0); pos += 8;
 8002480:	2200      	movs	r2, #0
 8002482:	2300      	movs	r3, #0
 8002484:	f104 0008 	add.w	r0, r4, #8
 8002488:	f00b f90a 	bl	800d6a0 <__flash_burn_veneer>
        flash_burn(pos, 0); pos += 8;
 800248c:	2200      	movs	r2, #0
 800248e:	2300      	movs	r3, #0
 8002490:	f104 0010 	add.w	r0, r4, #16
 8002494:	f00b f904 	bl	800d6a0 <__flash_burn_veneer>
        flash_burn(pos, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2300      	movs	r3, #0
 800249c:	f104 0018 	add.w	r0, r4, #24
 80024a0:	f00b f8fe 	bl	800d6a0 <__flash_burn_veneer>
    flash_lock();
}
 80024a4:	b002      	add	sp, #8
 80024a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flash_lock();
 80024aa:	f7ff bda9 	b.w	8002000 <flash_lock>
}
 80024ae:	b002      	add	sp, #8
 80024b0:	bd10      	pop	{r4, pc}
	...

080024b4 <mcu_key_usage>:

// mcu_key_usage()
//
    void
mcu_key_usage(int *avail_out, int *consumed_out, int *total_out)
{
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const mcu_key_t *ptr = MCU_KEYS;
    int avail = 0, used = 0;
 80024b6:	2300      	movs	r3, #0
    const mcu_key_t *ptr = MCU_KEYS;
 80024b8:	4c09      	ldr	r4, [pc, #36]	; (80024e0 <mcu_key_usage+0x2c>)

    for(int i=0; i<NUM_MCU_KEYS; i++, ptr++) {
 80024ba:	4f0a      	ldr	r7, [pc, #40]	; (80024e4 <mcu_key_usage+0x30>)
    int avail = 0, used = 0;
 80024bc:	461d      	mov	r5, r3
        if(ptr->value[0] == 0xff) {
 80024be:	7826      	ldrb	r6, [r4, #0]
 80024c0:	2eff      	cmp	r6, #255	; 0xff
 80024c2:	d109      	bne.n	80024d8 <mcu_key_usage+0x24>
            avail ++;
 80024c4:	3501      	adds	r5, #1
    for(int i=0; i<NUM_MCU_KEYS; i++, ptr++) {
 80024c6:	3420      	adds	r4, #32
 80024c8:	42bc      	cmp	r4, r7
 80024ca:	d1f8      	bne.n	80024be <mcu_key_usage+0xa>
        } else if(ptr->value[0] == 0x00) {
            used ++;
        }
    }

    *avail_out = avail;
 80024cc:	6005      	str	r5, [r0, #0]
    *consumed_out = used;
 80024ce:	600b      	str	r3, [r1, #0]
    *total_out = NUM_MCU_KEYS;
 80024d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]
}
 80024d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(ptr->value[0] == 0x00) {
 80024d8:	2e00      	cmp	r6, #0
 80024da:	d1f4      	bne.n	80024c6 <mcu_key_usage+0x12>
            used ++;
 80024dc:	3301      	adds	r3, #1
 80024de:	e7f2      	b.n	80024c6 <mcu_key_usage+0x12>
 80024e0:	0801e000 	.word	0x0801e000
 80024e4:	08020000 	.word	0x08020000

080024e8 <mcu_key_pick>:

// mcu_key_pick()
//
    const mcu_key_t *
mcu_key_pick(void)
{
 80024e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
    mcu_key_t       n;

    // get some good entropy, and whiten it just in case.
    do { 
        rng_buffer(n.value, 32);
 80024ec:	ad02      	add	r5, sp, #8
 80024ee:	2120      	movs	r1, #32
 80024f0:	4628      	mov	r0, r5
 80024f2:	f000 f92d 	bl	8002750 <rng_buffer>
        sha256_single(n.value, 32, n.value);
 80024f6:	462a      	mov	r2, r5
 80024f8:	2120      	movs	r1, #32
 80024fa:	4628      	mov	r0, r5
 80024fc:	f003 f822 	bl	8005544 <sha256_single>
        sha256_single(n.value, 32, n.value);
 8002500:	462a      	mov	r2, r5
 8002502:	2120      	movs	r1, #32
 8002504:	4628      	mov	r0, r5
 8002506:	f003 f81d 	bl	8005544 <sha256_single>
    } while(n.value[0] == 0x0 || n.value[0] == 0xff);
 800250a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800250e:	3b01      	subs	r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2bfd      	cmp	r3, #253	; 0xfd
 8002514:	d8eb      	bhi.n	80024ee <mcu_key_pick+0x6>

    int err = 0;
    const mcu_key_t *cur;

    do {
        bool valid = false; 
 8002516:	2300      	movs	r3, #0
        cur = mcu_key_get(&valid);
 8002518:	4668      	mov	r0, sp
        bool valid = false; 
 800251a:	f88d 3000 	strb.w	r3, [sp]
        cur = mcu_key_get(&valid);
 800251e:	f7ff ff7b 	bl	8002418 <mcu_key_get>

        if(!cur) {
 8002522:	4604      	mov	r4, r0
 8002524:	b938      	cbnz	r0, 8002536 <mcu_key_pick+0x4e>
            // no free slots. we are brick.
            puts("mcu full");
 8002526:	4828      	ldr	r0, [pc, #160]	; (80025c8 <mcu_key_pick+0xe0>)
 8002528:	f002 fc34 	bl	8004d94 <puts>
            oled_show(screen_brick);
 800252c:	4827      	ldr	r0, [pc, #156]	; (80025cc <mcu_key_pick+0xe4>)
 800252e:	f7fe fc89 	bl	8000e44 <oled_show>

            LOCKUP_FOREVER();
 8002532:	bf30      	wfi
 8002534:	e7fd      	b.n	8002532 <mcu_key_pick+0x4a>
        }

        if(valid) {
 8002536:	f89d 3000 	ldrb.w	r3, [sp]
 800253a:	b14b      	cbz	r3, 8002550 <mcu_key_pick+0x68>
            // clear existing key, if it's defined.
            ASSERT(cur->value[0] != 0x00);
 800253c:	7803      	ldrb	r3, [r0, #0]
 800253e:	3b01      	subs	r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2bfd      	cmp	r3, #253	; 0xfd
 8002544:	d902      	bls.n	800254c <mcu_key_pick+0x64>
 8002546:	4822      	ldr	r0, [pc, #136]	; (80025d0 <mcu_key_pick+0xe8>)
 8002548:	f7fe fa7e 	bl	8000a48 <fatal_error>
            ASSERT(cur->value[0] != 0xff);

            mcu_key_clear(cur);
 800254c:	f7ff ff84 	bl	8002458 <mcu_key_clear>
            continue;
        }
    } while(0);
    
    // burn it
    flash_setup0();
 8002550:	f7ff fd3a 	bl	8001fc8 <flash_setup0>
    flash_unlock();
 8002554:	f7ff fd5c 	bl	8002010 <flash_unlock>
        uint32_t  pos = (uint32_t)cur;
        const uint8_t   *fr = n.value;

        for(int i=0; i<32; i+= 8, pos += 8, fr += 8) {
 8002558:	2700      	movs	r7, #0
            uint64_t v;
            memcpy(&v, fr, sizeof(v));
 800255a:	19ea      	adds	r2, r5, r7
 800255c:	59e8      	ldr	r0, [r5, r7]
 800255e:	6851      	ldr	r1, [r2, #4]
 8002560:	466b      	mov	r3, sp
 8002562:	c303      	stmia	r3!, {r0, r1}

            err = flash_burn(pos, v);
 8002564:	19e0      	adds	r0, r4, r7
 8002566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800256a:	f00b f899 	bl	800d6a0 <__flash_burn_veneer>
            if(err) break;
 800256e:	4606      	mov	r6, r0
 8002570:	b910      	cbnz	r0, 8002578 <mcu_key_pick+0x90>
        for(int i=0; i<32; i+= 8, pos += 8, fr += 8) {
 8002572:	3708      	adds	r7, #8
 8002574:	2f20      	cmp	r7, #32
 8002576:	d1f0      	bne.n	800255a <mcu_key_pick+0x72>
        }
    flash_lock();
 8002578:	f7ff fd42 	bl	8002000 <flash_lock>

    // NOTE: Errors not expected, but lets be graceful about them.

    if(err) {
 800257c:	b166      	cbz	r6, 8002598 <mcu_key_pick+0xb0>
        // what to do?
        puts("burn fail: ");
 800257e:	4815      	ldr	r0, [pc, #84]	; (80025d4 <mcu_key_pick+0xec>)
 8002580:	f002 fc08 	bl	8004d94 <puts>
        puthex2(err);
 8002584:	b2f0      	uxtb	r0, r6
 8002586:	f002 fba9 	bl	8004cdc <puthex2>
        putchar('\n');
 800258a:	200a      	movs	r0, #10
 800258c:	f002 fb88 	bl	8004ca0 <putchar>
        return NULL;
    }

    if(after != cur || !check_equal(after->value, n.value, 32)) {
        puts("bad val?");
        return NULL;
 8002590:	2400      	movs	r4, #0
    }

    return cur;
}
 8002592:	4620      	mov	r0, r4
 8002594:	b00b      	add	sp, #44	; 0x2c
 8002596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const mcu_key_t *after = mcu_key_get(&valid);
 8002598:	4668      	mov	r0, sp
    bool valid = false; 
 800259a:	f88d 6000 	strb.w	r6, [sp]
    const mcu_key_t *after = mcu_key_get(&valid);
 800259e:	f7ff ff3b 	bl	8002418 <mcu_key_get>
    if(!valid) {
 80025a2:	f89d 2000 	ldrb.w	r2, [sp]
 80025a6:	b91a      	cbnz	r2, 80025b0 <mcu_key_pick+0xc8>
        puts("!valid?");
 80025a8:	480b      	ldr	r0, [pc, #44]	; (80025d8 <mcu_key_pick+0xf0>)
        puts("bad val?");
 80025aa:	f002 fbf3 	bl	8004d94 <puts>
 80025ae:	e7ef      	b.n	8002590 <mcu_key_pick+0xa8>
    if(after != cur || !check_equal(after->value, n.value, 32)) {
 80025b0:	4284      	cmp	r4, r0
 80025b2:	d001      	beq.n	80025b8 <mcu_key_pick+0xd0>
        puts("bad val?");
 80025b4:	4809      	ldr	r0, [pc, #36]	; (80025dc <mcu_key_pick+0xf4>)
 80025b6:	e7f8      	b.n	80025aa <mcu_key_pick+0xc2>
    if(after != cur || !check_equal(after->value, n.value, 32)) {
 80025b8:	2220      	movs	r2, #32
 80025ba:	4629      	mov	r1, r5
 80025bc:	f000 f879 	bl	80026b2 <check_equal>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d1e6      	bne.n	8002592 <mcu_key_pick+0xaa>
 80025c4:	e7f6      	b.n	80025b4 <mcu_key_pick+0xcc>
 80025c6:	bf00      	nop
 80025c8:	0800e5bb 	.word	0x0800e5bb
 80025cc:	0800d7bb 	.word	0x0800d7bb
 80025d0:	0800e390 	.word	0x0800e390
 80025d4:	0800e5c4 	.word	0x0800e5c4
 80025d8:	0800e5d0 	.word	0x0800e5d0
 80025dc:	0800e5d8 	.word	0x0800e5d8

080025e0 <fast_brick>:

// fast_brick()
//
    void
fast_brick(void)
{
 80025e0:	b538      	push	{r3, r4, r5, lr}
#ifndef RELEASE
    puts2("DISABLED fast brick... ");
    oled_show(screen_brick);
#else
    // do a fast wipe of our key
    mcu_key_clear(NULL);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff ff38 	bl	8002458 <mcu_key_clear>

    // brick SE1 for future
    ae_brick_myself();
 80025e8:	f001 f970 	bl	80038cc <ae_brick_myself>

    // NOTE: could brick SE1 (somewhat) by dec'ing the counter, which will
    // invalidate all PIN hashes

    // no going back from that -- but for privacy, wipe more stuff
    oled_show(screen_brick);
 80025ec:	480e      	ldr	r0, [pc, #56]	; (8002628 <fast_brick+0x48>)
        uint32_t bot = (uint32_t)MCU_KEYS;
        flash_page_erase(bot);

        // 2: LFS area first, since holds settings (AES'ed w/ lost key, but yeah)
        // 3: the firmware, not a secret anyway
        for(uint32_t pos=(FLASH_BASE + 0x200000 - FLASH_ERASE_SIZE); 
 80025ee:	4c0f      	ldr	r4, [pc, #60]	; (800262c <fast_brick+0x4c>)
 80025f0:	4d0f      	ldr	r5, [pc, #60]	; (8002630 <fast_brick+0x50>)
    oled_show(screen_brick);
 80025f2:	f7fe fc27 	bl	8000e44 <oled_show>
    puts2("fast brick... ");
 80025f6:	480f      	ldr	r0, [pc, #60]	; (8002634 <fast_brick+0x54>)
 80025f8:	f002 fb3e 	bl	8004c78 <puts2>
    flash_setup0();
 80025fc:	f7ff fce4 	bl	8001fc8 <flash_setup0>
    flash_unlock();
 8002600:	f7ff fd06 	bl	8002010 <flash_unlock>
        flash_page_erase(bot);
 8002604:	480a      	ldr	r0, [pc, #40]	; (8002630 <fast_brick+0x50>)
 8002606:	f00b f84f 	bl	800d6a8 <__flash_page_erase_veneer>
                pos > bot; pos -= FLASH_ERASE_SIZE) {
            flash_page_erase(pos);
 800260a:	4620      	mov	r0, r4
                pos > bot; pos -= FLASH_ERASE_SIZE) {
 800260c:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
            flash_page_erase(pos);
 8002610:	f00b f84a 	bl	800d6a8 <__flash_page_erase_veneer>
        for(uint32_t pos=(FLASH_BASE + 0x200000 - FLASH_ERASE_SIZE); 
 8002614:	42ac      	cmp	r4, r5
 8002616:	d1f8      	bne.n	800260a <fast_brick+0x2a>
        }
    flash_lock();
    puts(" done");
 8002618:	4807      	ldr	r0, [pc, #28]	; (8002638 <fast_brick+0x58>)
    flash_lock();
 800261a:	f7ff fcf1 	bl	8002000 <flash_lock>
    puts(" done");
 800261e:	f002 fbb9 	bl	8004d94 <puts>
#endif

    LOCKUP_FOREVER();
 8002622:	bf30      	wfi
 8002624:	e7fd      	b.n	8002622 <fast_brick+0x42>
 8002626:	bf00      	nop
 8002628:	0800d7bb 	.word	0x0800d7bb
 800262c:	081ff000 	.word	0x081ff000
 8002630:	0801e000 	.word	0x0801e000
 8002634:	0800e5e1 	.word	0x0800e5e1
 8002638:	0800e5f0 	.word	0x0800e5f0

0800263c <fast_wipe>:

// fast_wipe()
//
    void
fast_wipe(void)
{
 800263c:	b508      	push	{r3, lr}
    // dump (part of) the main seed key and become a new Coldcard
    // - lots of other code can and will detect a missing MCU key as "blank"
    // - and the check value on main seed will be garbage now
    mcu_key_clear(NULL);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff0a 	bl	8002458 <mcu_key_clear>
  __ASM volatile ("dsb 0xF":::"memory");
 8002644:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002648:	4905      	ldr	r1, [pc, #20]	; (8002660 <fast_wipe+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <fast_wipe+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800264c:	68ca      	ldr	r2, [r1, #12]
 800264e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
 8002656:	f3bf 8f4f 	dsb	sy
    __NOP();
 800265a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800265c:	e7fd      	b.n	800265a <fast_wipe+0x1e>
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	05fa0004 	.word	0x05fa0004

08002668 <check_all_ones_raw>:
check_all_ones_raw(const void *ptrV, int len)
{
	uint8_t rv = 0xff;
	const uint8_t *ptr = (const uint8_t *)ptrV;

	for(; len; len--, ptr++) {
 8002668:	4401      	add	r1, r0
	uint8_t rv = 0xff;
 800266a:	23ff      	movs	r3, #255	; 0xff
	for(; len; len--, ptr++) {
 800266c:	4288      	cmp	r0, r1
 800266e:	d103      	bne.n	8002678 <check_all_ones_raw+0x10>
		rv &= *ptr;
	}

	return (rv == 0xff);
}
 8002670:	3bff      	subs	r3, #255	; 0xff
 8002672:	4258      	negs	r0, r3
 8002674:	4158      	adcs	r0, r3
 8002676:	4770      	bx	lr
		rv &= *ptr;
 8002678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800267c:	4013      	ands	r3, r2
	for(; len; len--, ptr++) {
 800267e:	e7f5      	b.n	800266c <check_all_ones_raw+0x4>

08002680 <check_all_ones>:
//
// Return T if all bytes are 0xFF
//
	bool
check_all_ones(const void *ptrV, int len)
{
 8002680:	b507      	push	{r0, r1, r2, lr}
	bool rv = check_all_ones_raw(ptrV, len);
 8002682:	f7ff fff1 	bl	8002668 <check_all_ones_raw>
 8002686:	9001      	str	r0, [sp, #4]

    rng_delay();
 8002688:	f000 f878 	bl	800277c <rng_delay>

	return rv;
}
 800268c:	9801      	ldr	r0, [sp, #4]
 800268e:	b003      	add	sp, #12
 8002690:	f85d fb04 	ldr.w	pc, [sp], #4

08002694 <check_all_zeros>:
//
// Return T if all bytes are 0x00
//
	bool
check_all_zeros(const void *ptrV, int len)
{
 8002694:	b510      	push	{r4, lr}
 8002696:	4401      	add	r1, r0
	uint8_t rv = 0x0;
 8002698:	2400      	movs	r4, #0
	const uint8_t *ptr = (const uint8_t *)ptrV;

	for(; len; len--, ptr++) {
 800269a:	4288      	cmp	r0, r1
 800269c:	d105      	bne.n	80026aa <check_all_zeros+0x16>
		rv |= *ptr;
	}

    rng_delay();
 800269e:	f000 f86d 	bl	800277c <rng_delay>
	return (rv == 0x00);
}
 80026a2:	fab4 f084 	clz	r0, r4
 80026a6:	0940      	lsrs	r0, r0, #5
 80026a8:	bd10      	pop	{r4, pc}
		rv |= *ptr;
 80026aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80026ae:	431c      	orrs	r4, r3
	for(; len; len--, ptr++) {
 80026b0:	e7f3      	b.n	800269a <check_all_zeros+0x6>

080026b2 <check_equal>:
	const uint8_t *left = (const uint8_t *)aV;
	const uint8_t *right = (const uint8_t *)bV;
    uint8_t diff = 0;
    int i;

    for (i = 0; i < len; i++) {
 80026b2:	2300      	movs	r3, #0
{
 80026b4:	b570      	push	{r4, r5, r6, lr}
    uint8_t diff = 0;
 80026b6:	461c      	mov	r4, r3
    for (i = 0; i < len; i++) {
 80026b8:	4293      	cmp	r3, r2
 80026ba:	db05      	blt.n	80026c8 <check_equal+0x16>
        diff |= (left[i] ^ right[i]);
    }

    rng_delay();
 80026bc:	f000 f85e 	bl	800277c <rng_delay>
    return (diff == 0);
}
 80026c0:	fab4 f084 	clz	r0, r4
 80026c4:	0940      	lsrs	r0, r0, #5
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
        diff |= (left[i] ^ right[i]);
 80026c8:	5cc5      	ldrb	r5, [r0, r3]
 80026ca:	5cce      	ldrb	r6, [r1, r3]
 80026cc:	4075      	eors	r5, r6
 80026ce:	432c      	orrs	r4, r5
    for (i = 0; i < len; i++) {
 80026d0:	3301      	adds	r3, #1
 80026d2:	e7f1      	b.n	80026b8 <check_equal+0x6>

080026d4 <rng_sample>:
        }

        // Get the new number
        uint32_t rv = RNG->DR;

        if(rv != last_rng_result && rv) {
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <rng_sample+0x1c>)
        while(!(RNG->SR & RNG_FLAG_DRDY)) {
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <rng_sample+0x20>)
        if(rv != last_rng_result && rv) {
 80026d8:	6819      	ldr	r1, [r3, #0]
        while(!(RNG->SR & RNG_FLAG_DRDY)) {
 80026da:	6850      	ldr	r0, [r2, #4]
 80026dc:	07c0      	lsls	r0, r0, #31
 80026de:	d5fc      	bpl.n	80026da <rng_sample+0x6>
        uint32_t rv = RNG->DR;
 80026e0:	6890      	ldr	r0, [r2, #8]
        if(rv != last_rng_result && rv) {
 80026e2:	4281      	cmp	r1, r0
 80026e4:	d0f9      	beq.n	80026da <rng_sample+0x6>
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d0f7      	beq.n	80026da <rng_sample+0x6>
            last_rng_result = rv;
 80026ea:	6018      	str	r0, [r3, #0]

        // keep trying if not a new number
    }

    // NOT-REACHED
}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	2009e1b8 	.word	0x2009e1b8
 80026f4:	50060800 	.word	0x50060800

080026f8 <rng_setup>:
    if(RNG->CR & RNG_CR_RNGEN) {
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <rng_setup+0x4c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	0752      	lsls	r2, r2, #29
{
 80026fe:	b513      	push	{r0, r1, r4, lr}
    if(RNG->CR & RNG_CR_RNGEN) {
 8002700:	d41d      	bmi.n	800273e <rng_setup+0x46>
    __HAL_RCC_RNG_CLK_ENABLE();
 8002702:	4a11      	ldr	r2, [pc, #68]	; (8002748 <rng_setup+0x50>)
 8002704:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002706:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800270a:	64d1      	str	r1, [r2, #76]	; 0x4c
 800270c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800270e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002712:	9201      	str	r2, [sp, #4]
 8002714:	9a01      	ldr	r2, [sp, #4]
    RNG->CR |= RNG_CR_RNGEN;
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f042 0204 	orr.w	r2, r2, #4
 800271c:	601a      	str	r2, [r3, #0]
    uint32_t chk = rng_sample();
 800271e:	f7ff ffd9 	bl	80026d4 <rng_sample>
 8002722:	4604      	mov	r4, r0
    uint32_t chk2 = rng_sample();
 8002724:	f7ff ffd6 	bl	80026d4 <rng_sample>
    if(chk == 0 || chk == ~0
 8002728:	1e63      	subs	r3, r4, #1
 800272a:	3303      	adds	r3, #3
 800272c:	d804      	bhi.n	8002738 <rng_setup+0x40>
        || chk2 == 0 || chk2 == ~0
 800272e:	1e43      	subs	r3, r0, #1
 8002730:	3303      	adds	r3, #3
 8002732:	d801      	bhi.n	8002738 <rng_setup+0x40>
        || chk == chk2
 8002734:	4284      	cmp	r4, r0
 8002736:	d102      	bne.n	800273e <rng_setup+0x46>
        INCONSISTENT("bad rng");
 8002738:	4804      	ldr	r0, [pc, #16]	; (800274c <rng_setup+0x54>)
 800273a:	f7fe f985 	bl	8000a48 <fatal_error>
}
 800273e:	b002      	add	sp, #8
 8002740:	bd10      	pop	{r4, pc}
 8002742:	bf00      	nop
 8002744:	50060800 	.word	0x50060800
 8002748:	40021000 	.word	0x40021000
 800274c:	0800d6b0 	.word	0x0800d6b0

08002750 <rng_buffer>:

// rng_buffer()
//
    void
rng_buffer(uint8_t *result, int len)
{
 8002750:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002752:	460c      	mov	r4, r1
 8002754:	1845      	adds	r5, r0, r1
    while(len > 0) {
 8002756:	2c00      	cmp	r4, #0
 8002758:	eba5 0604 	sub.w	r6, r5, r4
 800275c:	dc01      	bgt.n	8002762 <rng_buffer+0x12>
        memcpy(result, &t, MIN(4, len));

        len -= 4;
        result += 4;
    }
}
 800275e:	b002      	add	sp, #8
 8002760:	bd70      	pop	{r4, r5, r6, pc}
        uint32_t    t = rng_sample();
 8002762:	f7ff ffb7 	bl	80026d4 <rng_sample>
        memcpy(result, &t, MIN(4, len));
 8002766:	2c04      	cmp	r4, #4
 8002768:	4622      	mov	r2, r4
        uint32_t    t = rng_sample();
 800276a:	9001      	str	r0, [sp, #4]
        memcpy(result, &t, MIN(4, len));
 800276c:	bfa8      	it	ge
 800276e:	2204      	movge	r2, #4
 8002770:	a901      	add	r1, sp, #4
 8002772:	4630      	mov	r0, r6
 8002774:	f00a ff2e 	bl	800d5d4 <memcpy>
        len -= 4;
 8002778:	3c04      	subs	r4, #4
        result += 4;
 800277a:	e7ec      	b.n	8002756 <rng_buffer+0x6>

0800277c <rng_delay>:
//
// Call anytime. Delays for a random time period to fustrate glitchers.
//
    void
rng_delay(void)
{
 800277c:	b508      	push	{r3, lr}
    uint32_t    r = rng_sample() % 8;
 800277e:	f7ff ffa9 	bl	80026d4 <rng_sample>
    uint32_t    cnt = (1<<r);
 8002782:	2301      	movs	r3, #1
    uint32_t    r = rng_sample() % 8;
 8002784:	f000 0007 	and.w	r0, r0, #7
    uint32_t    cnt = (1<<r);
 8002788:	fa03 f000 	lsl.w	r0, r3, r0

    while(cnt) {
        asm("nop");         // need this to keep from being optimized away, check bootloader.lss
 800278c:	bf00      	nop
    while(cnt) {
 800278e:	3801      	subs	r0, #1
 8002790:	d1fc      	bne.n	800278c <rng_delay+0x10>
        cnt--;
    }
}
 8002792:	bd08      	pop	{r3, pc}

08002794 <_send_byte>:
    static inline void
_send_byte(uint8_t ch)
{
    // reset timeout timer (Systick)
    uint32_t    ticks = 0;
    SysTick->VAL = 0;
 8002794:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
{
 8002798:	b510      	push	{r4, lr}
    SysTick->VAL = 0;
 800279a:	2300      	movs	r3, #0

    while(!(MY_UART->ISR & UART_FLAG_TXE)) {
 800279c:	4c07      	ldr	r4, [pc, #28]	; (80027bc <_send_byte+0x28>)
    SysTick->VAL = 0;
 800279e:	6193      	str	r3, [r2, #24]
    while(!(MY_UART->ISR & UART_FLAG_TXE)) {
 80027a0:	230b      	movs	r3, #11
 80027a2:	69e1      	ldr	r1, [r4, #28]
 80027a4:	0609      	lsls	r1, r1, #24
 80027a6:	d404      	bmi.n	80027b2 <_send_byte+0x1e>
        // busy-wait until able to send (no fifo?)
        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80027a8:	6911      	ldr	r1, [r2, #16]
 80027aa:	03c9      	lsls	r1, r1, #15
 80027ac:	d5f9      	bpl.n	80027a2 <_send_byte+0xe>
            // failsafe timeout
            ticks += 1;
            if(ticks > 10) break;
 80027ae:	3b01      	subs	r3, #1
 80027b0:	d1f7      	bne.n	80027a2 <_send_byte+0xe>
        }
    }
    MY_UART->TDR = ch;
 80027b2:	4b02      	ldr	r3, [pc, #8]	; (80027bc <_send_byte+0x28>)
 80027b4:	b280      	uxth	r0, r0
 80027b6:	8518      	strh	r0, [r3, #40]	; 0x28
}
 80027b8:	bd10      	pop	{r4, pc}
 80027ba:	bf00      	nop
 80027bc:	40004c00 	.word	0x40004c00

080027c0 <_send_bits>:

// _send_bits()
//
    static void
_send_bits(uint8_t tx)
{
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4606      	mov	r6, r0
 80027c4:	2508      	movs	r5, #8
    // serialize and send one byte
    uint8_t     mask = 0x1;
 80027c6:	2401      	movs	r4, #1

    for(int i=0; i<8; i++, mask <<= 1) {
        uint8_t h = (tx & mask) ? BIT1 : BIT0;
 80027c8:	4226      	tst	r6, r4

        _send_byte(h);
 80027ca:	bf14      	ite	ne
 80027cc:	207f      	movne	r0, #127	; 0x7f
 80027ce:	207d      	moveq	r0, #125	; 0x7d
 80027d0:	f7ff ffe0 	bl	8002794 <_send_byte>
    for(int i=0; i<8; i++, mask <<= 1) {
 80027d4:	0064      	lsls	r4, r4, #1
 80027d6:	3d01      	subs	r5, #1
 80027d8:	b2e4      	uxtb	r4, r4
 80027da:	d1f5      	bne.n	80027c8 <_send_bits+0x8>
    }
}
 80027dc:	bd70      	pop	{r4, r5, r6, pc}

080027de <_send_serialized>:

// _send_serialized()
//
    static void
_send_serialized(const uint8_t *buf, int len)
{
 80027de:	b538      	push	{r3, r4, r5, lr}
 80027e0:	4604      	mov	r4, r0
 80027e2:	1845      	adds	r5, r0, r1
    for(int i=0; i<len; i++) {
        _send_bits(buf[i]);
 80027e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80027e8:	f7ff ffea 	bl	80027c0 <_send_bits>
    for(int i=0; i<len; i++) {
 80027ec:	42ac      	cmp	r4, r5
 80027ee:	d1f9      	bne.n	80027e4 <_send_serialized+0x6>
    }
}
 80027f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080027f4 <_flush_rx>:
//
    static inline void
_flush_rx(void)
{
    // reset timeout timer (Systick)
    SysTick->VAL = 0;
 80027f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80027f8:	2200      	movs	r2, #0

    while(!(MY_UART->ISR & UART_FLAG_TC)) {
 80027fa:	490b      	ldr	r1, [pc, #44]	; (8002828 <_flush_rx+0x34>)
    SysTick->VAL = 0;
 80027fc:	619a      	str	r2, [r3, #24]
    while(!(MY_UART->ISR & UART_FLAG_TC)) {
 80027fe:	69ca      	ldr	r2, [r1, #28]
 8002800:	0652      	lsls	r2, r2, #25
 8002802:	d402      	bmi.n	800280a <_flush_rx+0x16>
        // wait for last bit(byte) to be serialized and sent

        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	03d0      	lsls	r0, r2, #15
 8002808:	d5f9      	bpl.n	80027fe <_flush_rx+0xa>
            break;
        }
    }

    // We actually need this delay here!
    __NOP();
 800280a:	bf00      	nop
    __NOP();
 800280c:	bf00      	nop
    __NOP();
 800280e:	bf00      	nop
    __NOP();
 8002810:	bf00      	nop
    __NOP();
 8002812:	bf00      	nop
    __NOP();
 8002814:	bf00      	nop
    __NOP();
 8002816:	bf00      	nop
    __NOP();
 8002818:	bf00      	nop

    // clear junk in rx buffer
    MY_UART->RQR = USART_RQR_RXFRQ;
 800281a:	4b03      	ldr	r3, [pc, #12]	; (8002828 <_flush_rx+0x34>)
 800281c:	2208      	movs	r2, #8
 800281e:	831a      	strh	r2, [r3, #24]

    // clear overrun error
    // clear rx timeout flag
    // clear framing error
    MY_UART->ICR = USART_ICR_ORECF | USART_ICR_RTOCF | USART_ICR_FECF;
 8002820:	f640 020a 	movw	r2, #2058	; 0x80a
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	4770      	bx	lr
 8002828:	40004c00 	.word	0x40004c00

0800282c <crc16_chain>:
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;
    
    crc_register = (((uint16_t) crc[0]) & 0x00FF) | (((uint16_t) crc[1]) << 8);
 800282c:	8813      	ldrh	r3, [r2, #0]
{
 800282e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002830:	4408      	add	r0, r1

         // Shift CRC to the left by 1.
         crc_register <<= 1; 

         if ((data_bit ^ crc_bit) != 0)
            crc_register ^= polynom;
 8002832:	f248 0605 	movw	r6, #32773	; 0x8005
    for (counter = 0; counter < length; counter++) {
 8002836:	4281      	cmp	r1, r0
 8002838:	d103      	bne.n	8002842 <crc16_chain+0x16>
      }  
    }
        
    crc[0] = (uint8_t) (crc_register & 0x00FF);
 800283a:	7013      	strb	r3, [r2, #0]
    crc[1] = (uint8_t) (crc_register >> 8);
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	7053      	strb	r3, [r2, #1]
}   
 8002840:	bdf0      	pop	{r4, r5, r6, r7, pc}
         data_bit = (data[counter] & shift_register) ? 1 : 0;
 8002842:	f811 7b01 	ldrb.w	r7, [r1], #1
 8002846:	2508      	movs	r5, #8
      for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
 8002848:	2401      	movs	r4, #1
         data_bit = (data[counter] & shift_register) ? 1 : 0;
 800284a:	4227      	tst	r7, r4
         crc_bit = crc_register >> 15;
 800284c:	ea4f 3cd3 	mov.w	ip, r3, lsr #15
         if ((data_bit ^ crc_bit) != 0)
 8002850:	bf18      	it	ne
 8002852:	f04f 0e01 	movne.w	lr, #1
         crc_register <<= 1; 
 8002856:	ea4f 0343 	mov.w	r3, r3, lsl #1
         if ((data_bit ^ crc_bit) != 0)
 800285a:	bf08      	it	eq
 800285c:	f04f 0e00 	moveq.w	lr, #0
 8002860:	45e6      	cmp	lr, ip
         crc_register <<= 1; 
 8002862:	b29b      	uxth	r3, r3
            crc_register ^= polynom;
 8002864:	bf18      	it	ne
 8002866:	4073      	eorne	r3, r6
      for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
 8002868:	0064      	lsls	r4, r4, #1
 800286a:	3d01      	subs	r5, #1
 800286c:	b2e4      	uxtb	r4, r4
 800286e:	d1ec      	bne.n	800284a <crc16_chain+0x1e>
 8002870:	e7e1      	b.n	8002836 <crc16_chain+0xa>

08002872 <ae_check_crc>:

// ae_check_crc()
//
	static bool
ae_check_crc(const uint8_t *data, uint8_t length)
{
 8002872:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t obs[2] = { 0, 0 };

	if(data[0] != length) {
 8002874:	7806      	ldrb	r6, [r0, #0]
	uint8_t obs[2] = { 0, 0 };
 8002876:	2400      	movs	r4, #0
	if(data[0] != length) {
 8002878:	428e      	cmp	r6, r1
{
 800287a:	4605      	mov	r5, r0
	uint8_t obs[2] = { 0, 0 };
 800287c:	f8ad 4004 	strh.w	r4, [sp, #4]
	if(data[0] != length) {
 8002880:	d113      	bne.n	80028aa <ae_check_crc+0x38>
		// length is wrong
        STATS(crc_len_error++);
		return false;
	}

	crc16_chain(length-2, data, obs);
 8002882:	4629      	mov	r1, r5
 8002884:	1eb0      	subs	r0, r6, #2

	return (obs[0] == data[length-2] && obs[1] == data[length-1]);
 8002886:	4435      	add	r5, r6
	crc16_chain(length-2, data, obs);
 8002888:	aa01      	add	r2, sp, #4
 800288a:	b2c0      	uxtb	r0, r0
 800288c:	f7ff ffce 	bl	800282c <crc16_chain>
	return (obs[0] == data[length-2] && obs[1] == data[length-1]);
 8002890:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002894:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <ae_check_crc+0x38>
 800289c:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80028a0:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80028a4:	1a23      	subs	r3, r4, r0
 80028a6:	425c      	negs	r4, r3
 80028a8:	415c      	adcs	r4, r3
		return false;
 80028aa:	4620      	mov	r0, r4
}
 80028ac:	b002      	add	sp, #8
 80028ae:	bd70      	pop	{r4, r5, r6, pc}

080028b0 <ae_wake>:
{
 80028b0:	b508      	push	{r3, lr}
    _send_byte(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7ff ff6e 	bl	8002794 <_send_byte>
    delay_ms(3);     // measured: ~2.9ms
 80028b8:	2003      	movs	r0, #3
 80028ba:	f001 f81d 	bl	80038f8 <delay_ms>
}
 80028be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _flush_rx();
 80028c2:	f7ff bf97 	b.w	80027f4 <_flush_rx>

080028c6 <ae_send_idle>:
{
 80028c6:	b508      	push	{r3, lr}
    ae_wake();
 80028c8:	f7ff fff2 	bl	80028b0 <ae_wake>
}
 80028cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _send_bits(IOFLAG_IDLE);
 80028d0:	20bb      	movs	r0, #187	; 0xbb
 80028d2:	f7ff bf75 	b.w	80027c0 <_send_bits>
	...

080028d8 <ae_read_response>:
{
 80028d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int max_expect = (max_len+1) * 8;
 80028dc:	3101      	adds	r1, #1
    uint8_t raw[max_expect];
 80028de:	466b      	mov	r3, sp
 80028e0:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
{
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4606      	mov	r6, r0
    uint8_t raw[max_expect];
 80028e8:	469d      	mov	sp, r3
    _send_bits(IOFLAG_TX);
 80028ea:	2088      	movs	r0, #136	; 0x88
    int max_expect = (max_len+1) * 8;
 80028ec:	00cd      	lsls	r5, r1, #3
    _send_bits(IOFLAG_TX);
 80028ee:	f7ff ff67 	bl	80027c0 <_send_bits>
    _flush_rx();
 80028f2:	f7ff ff7f 	bl	80027f4 <_flush_rx>
    int actual = 0;
 80028f6:	2200      	movs	r2, #0
    while(!(MY_UART->ISR & UART_FLAG_RXNE) && !(MY_UART->ISR & UART_FLAG_RTOF)) {
 80028f8:	4829      	ldr	r0, [pc, #164]	; (80029a0 <ae_read_response+0xc8>)
    uint8_t raw[max_expect];
 80028fa:	466c      	mov	r4, sp
    for(uint8_t *p = raw; ; actual++) {
 80028fc:	4669      	mov	r1, sp
    SysTick->VAL = 0;
 80028fe:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 8002902:	4696      	mov	lr, r2
 8002904:	f8cc e018 	str.w	lr, [ip, #24]
    while(!(MY_UART->ISR & UART_FLAG_RXNE) && !(MY_UART->ISR & UART_FLAG_RTOF)) {
 8002908:	2305      	movs	r3, #5
 800290a:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800290e:	f018 0f20 	tst.w	r8, #32
 8002912:	d104      	bne.n	800291e <ae_read_response+0x46>
 8002914:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002918:	f418 6f00 	tst.w	r8, #2048	; 0x800
 800291c:	d008      	beq.n	8002930 <ae_read_response+0x58>
    if(MY_UART->ISR & UART_FLAG_RXNE) {
 800291e:	69c3      	ldr	r3, [r0, #28]
 8002920:	069b      	lsls	r3, r3, #26
 8002922:	d52e      	bpl.n	8002982 <ae_read_response+0xaa>
        return MY_UART->RDR & 0x7f;
 8002924:	8c83      	ldrh	r3, [r0, #36]	; 0x24
        if(actual < max_expect) {
 8002926:	42aa      	cmp	r2, r5
        return MY_UART->RDR & 0x7f;
 8002928:	b29b      	uxth	r3, r3
        if(actual < max_expect) {
 800292a:	db34      	blt.n	8002996 <ae_read_response+0xbe>
    for(uint8_t *p = raw; ; actual++) {
 800292c:	3201      	adds	r2, #1
 800292e:	e7e9      	b.n	8002904 <ae_read_response+0x2c>
        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8002930:	f8dc 8010 	ldr.w	r8, [ip, #16]
 8002934:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8002938:	d0e7      	beq.n	800290a <ae_read_response+0x32>
            if(ticks >= 5) {
 800293a:	3b01      	subs	r3, #1
 800293c:	d1e5      	bne.n	800290a <ae_read_response+0x32>
    actual &= ~7;
 800293e:	f022 0107 	bic.w	r1, r2, #7
    while(from_len > 0) {
 8002942:	3d08      	subs	r5, #8
 8002944:	4425      	add	r5, r4
 8002946:	4623      	mov	r3, r4
 8002948:	4421      	add	r1, r4
 800294a:	1ac8      	subs	r0, r1, r3
 800294c:	2800      	cmp	r0, #0
 800294e:	dd14      	ble.n	800297a <ae_read_response+0xa2>
 8002950:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
        uint8_t rv = 0, mask = 0x1;
 8002954:	2001      	movs	r0, #1
 8002956:	2400      	movs	r4, #0
        for(int i=0; i<8; i++, mask <<= 1) {
 8002958:	f103 0e07 	add.w	lr, r3, #7
            if(from[i] == BIT1) {
 800295c:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
 8002960:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
                rv |= mask;
 8002964:	bf08      	it	eq
 8002966:	4304      	orreq	r4, r0
        for(int i=0; i<8; i++, mask <<= 1) {
 8002968:	0040      	lsls	r0, r0, #1
 800296a:	45f4      	cmp	ip, lr
 800296c:	b2c0      	uxtb	r0, r0
 800296e:	d1f5      	bne.n	800295c <ae_read_response+0x84>
        from += 8;
 8002970:	3308      	adds	r3, #8
        if(max_into <= 0) break;
 8002972:	42ab      	cmp	r3, r5
        *(into++) = rv;
 8002974:	f806 4b01 	strb.w	r4, [r6], #1
        if(max_into <= 0) break;
 8002978:	d1e7      	bne.n	800294a <ae_read_response+0x72>
    return actual / 8;
 800297a:	10d0      	asrs	r0, r2, #3
}
 800297c:	46bd      	mov	sp, r7
 800297e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(MY_UART->ISR & UART_FLAG_RTOF) {
 8002982:	69c3      	ldr	r3, [r0, #28]
 8002984:	051b      	lsls	r3, r3, #20
 8002986:	d503      	bpl.n	8002990 <ae_read_response+0xb8>
        MY_UART->ICR = USART_ICR_RTOCF;
 8002988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800298c:	6203      	str	r3, [r0, #32]
        if(ch < 0) {
 800298e:	e7d6      	b.n	800293e <ae_read_response+0x66>
    INCONSISTENT("rxf");
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <ae_read_response+0xcc>)
 8002992:	f7fe f859 	bl	8000a48 <fatal_error>
            *(p++) = ch;
 8002996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800299a:	f801 3b01 	strb.w	r3, [r1], #1
 800299e:	e7c5      	b.n	800292c <ae_read_response+0x54>
 80029a0:	40004c00 	.word	0x40004c00
 80029a4:	0800d6b0 	.word	0x0800d6b0

080029a8 <ae_reset_chip>:
    if(ae_chip_is_setup == AE_CHIP_IS_SETUP) {
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <ae_reset_chip+0x14>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <ae_reset_chip+0x18>)
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d102      	bne.n	80029b8 <ae_reset_chip+0x10>
        _send_bits(IOFLAG_SLEEP);
 80029b2:	20cc      	movs	r0, #204	; 0xcc
 80029b4:	f7ff bf04 	b.w	80027c0 <_send_bits>
}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	2009e1bc 	.word	0x2009e1bc
 80029c0:	35d25d63 	.word	0x35d25d63

080029c4 <ae_setup>:
    __HAL_RCC_UART4_CLK_ENABLE();
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <ae_setup+0x50>)
 80029c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029c8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80029cc:	659a      	str	r2, [r3, #88]	; 0x58
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80029d0:	b082      	sub	sp, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 80029d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b01      	ldr	r3, [sp, #4]
    MY_UART->CR1 = 0;
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <ae_setup+0x54>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
    MY_UART->CR1 = 0x1000002d & ~(0
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <ae_setup+0x58>)
 80029e2:	601a      	str	r2, [r3, #0]
    MY_UART->RTOR = 24;                  // timeout in bit periods: 3 chars or so
 80029e4:	2218      	movs	r2, #24
 80029e6:	615a      	str	r2, [r3, #20]
    MY_UART->CR2 = USART_CR2_RTOEN;      // rx timeout enable
 80029e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029ec:	605a      	str	r2, [r3, #4]
    MY_UART->CR3 = USART_CR3_HDSEL | USART_CR3_ONEBIT;
 80029ee:	f640 0208 	movw	r2, #2056	; 0x808
 80029f2:	609a      	str	r2, [r3, #8]
    MY_UART->BRR = 521;                 // 230400 bps @ 120 Mhz SYSCLK
 80029f4:	f240 2209 	movw	r2, #521	; 0x209
 80029f8:	60da      	str	r2, [r3, #12]
    MY_UART->ICR = USART_ICR_RTOCF;
 80029fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fe:	621a      	str	r2, [r3, #32]
    MY_UART->CR1 |= USART_CR1_UE;
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    ae_chip_is_setup = AE_CHIP_IS_SETUP;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <ae_setup+0x5c>)
 8002a0a:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <ae_setup+0x60>)
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	b002      	add	sp, #8
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40004c00 	.word	0x40004c00
 8002a1c:	1000002c 	.word	0x1000002c
 8002a20:	2009e1bc 	.word	0x2009e1bc
 8002a24:	35d25d63 	.word	0x35d25d63

08002a28 <ae_keep_alive>:
	ae_send_idle();
 8002a28:	f7ff bf4d 	b.w	80028c6 <ae_send_idle>

08002a2c <ae_read1>:
// Read a one-byte status/error code response from chip. It's wrapped as 4 bytes: 
//	(len=4) (value) (crc16) (crc16)
//
	int
ae_read1(void)
{
 8002a2c:	b513      	push	{r0, r1, r4, lr}
 8002a2e:	2408      	movs	r4, #8
	uint8_t msg[4];

	for(int retry=7; retry >= 0; retry--) {
        // tell it we want to read a response, read it, and deserialize
        int rv = ae_read_response(msg, 4);
 8002a30:	2104      	movs	r1, #4
 8002a32:	eb0d 0001 	add.w	r0, sp, r1
 8002a36:	f7ff ff4f 	bl	80028d8 <ae_read_response>

        if(rv == 0) {
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	b938      	cbnz	r0, 8002a4e <ae_read1+0x22>
            // nothing heard, it's probably still processing
            ERR("not rdy");
            STATS(not_ready++);

            delay_ms(5);
 8002a3e:	2005      	movs	r0, #5
 8002a40:	f000 ff5a 	bl	80038f8 <delay_ms>
	for(int retry=7; retry >= 0; retry--) {
 8002a44:	3c01      	subs	r4, #1
 8002a46:	d1f3      	bne.n	8002a30 <ae_read1+0x4>
	try_again:
        STATS(l1_retry++);
	}

	// fail.
	return -1;
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a4c:	e008      	b.n	8002a60 <ae_read1+0x34>
        if(rv != 4) {
 8002a4e:	2804      	cmp	r0, #4
 8002a50:	d1f8      	bne.n	8002a44 <ae_read1+0x18>
		if(!ae_check_crc(msg, 4)) {
 8002a52:	a801      	add	r0, sp, #4
 8002a54:	f7ff ff0d 	bl	8002872 <ae_check_crc>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d0f3      	beq.n	8002a44 <ae_read1+0x18>
		return msg[1];
 8002a5c:	f89d 0005 	ldrb.w	r0, [sp, #5]
}
 8002a60:	b002      	add	sp, #8
 8002a62:	bd10      	pop	{r4, pc}

08002a64 <ae_read_n>:
// Read and check CRC over N bytes, wrapped in 3-bytes of framing overhead.
// Return -1 for timeout, zero for normal, and one-byte error code otherwise.
//
	int
ae_read_n(uint8_t len, uint8_t *body)
{
 8002a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t tmp[1+len+2];
 8002a68:	f100 030a 	add.w	r3, r0, #10
 8002a6c:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
{
 8002a70:	af00      	add	r7, sp, #0
    uint8_t tmp[1+len+2];
 8002a72:	ebad 0d03 	sub.w	sp, sp, r3
{
 8002a76:	460d      	mov	r5, r1
    uint8_t tmp[1+len+2];
 8002a78:	1cc6      	adds	r6, r0, #3
 8002a7a:	46e8      	mov	r8, sp
 8002a7c:	f04f 0908 	mov.w	r9, #8

	for(int retry=7; retry >= 0; retry--) {

        int actual = ae_read_response(tmp, len+3);
 8002a80:	4631      	mov	r1, r6
 8002a82:	4640      	mov	r0, r8
 8002a84:	f7ff ff28 	bl	80028d8 <ae_read_response>
        if(actual < 4) {
 8002a88:	2803      	cmp	r0, #3
        int actual = ae_read_response(tmp, len+3);
 8002a8a:	4604      	mov	r4, r0
        if(actual < 4) {
 8002a8c:	dc0b      	bgt.n	8002aa6 <ae_read_n+0x42>

            if(actual == 0) {
 8002a8e:	b910      	cbnz	r0, 8002a96 <ae_read_n+0x32>
                // nothing heard, it's probably still processing
                delay_ms(5);
 8002a90:	2005      	movs	r0, #5
 8002a92:	f000 ff31 	bl	80038f8 <delay_ms>

		return 0;

	try_again:
        STATS(ln_retry++);
        ae_wake();
 8002a96:	f7ff ff0b 	bl	80028b0 <ae_wake>
	for(int retry=7; retry >= 0; retry--) {
 8002a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8002a9e:	d1ef      	bne.n	8002a80 <ae_read_n+0x1c>
	}

	return -1;
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa4:	e007      	b.n	8002ab6 <ae_read_n+0x52>
        uint8_t resp_len = tmp[0];
 8002aa6:	f898 3000 	ldrb.w	r3, [r8]
		if(resp_len != (len + 3)) {
 8002aaa:	42b3      	cmp	r3, r6
 8002aac:	d006      	beq.n	8002abc <ae_read_n+0x58>
            if(resp_len == 4) {
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d1f1      	bne.n	8002a96 <ae_read_n+0x32>
                return tmp[1];
 8002ab2:	f898 0001 	ldrb.w	r0, [r8, #1]
}
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(!ae_check_crc(tmp, actual)) {
 8002abc:	b2c1      	uxtb	r1, r0
 8002abe:	4640      	mov	r0, r8
 8002ac0:	f7ff fed7 	bl	8002872 <ae_check_crc>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d0e6      	beq.n	8002a96 <ae_read_n+0x32>
        memcpy(body, tmp+1, actual-3);
 8002ac8:	1ee2      	subs	r2, r4, #3
 8002aca:	f108 0101 	add.w	r1, r8, #1
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f00a fd80 	bl	800d5d4 <memcpy>
		return 0;
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	e7ee      	b.n	8002ab6 <ae_read_n+0x52>

08002ad8 <ae_send_n>:

// ae_send_n()
//
	void
ae_send_n(aeopcode_t opcode, uint8_t p1, uint16_t p2, const uint8_t *data, uint8_t data_len) 
{
 8002ad8:	b530      	push	{r4, r5, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	461d      	mov	r5, r3
 8002ade:	f89d 4020 	ldrb.w	r4, [sp, #32]
		uint8_t	framed_len;
		uint8_t	op;
		uint8_t	p1;
		uint8_t	p2_lsb;
		uint8_t	p2_msb;
	} known = { 
 8002ae2:	f88d 200c 	strb.w	r2, [sp, #12]
 8002ae6:	2377      	movs	r3, #119	; 0x77
 8002ae8:	0a12      	lsrs	r2, r2, #8
 8002aea:	f88d 3008 	strb.w	r3, [sp, #8]
        .ioflag = IOFLAG_CMD,
		.framed_len = (data_len + 7),		// 7 = (1 len) + (4 bytes of msg) + (2 crc)
 8002aee:	1de3      	adds	r3, r4, #7
	} known = { 
 8002af0:	f88d 3009 	strb.w	r3, [sp, #9]
 8002af4:	f88d 200d 	strb.w	r2, [sp, #13]
 8002af8:	f88d 000a 	strb.w	r0, [sp, #10]
 8002afc:	f88d 100b 	strb.w	r1, [sp, #11]
    STATS(last_op = opcode);
    STATS(last_p1 = p1);
    STATS(last_p2 = p2);

    // important to wake chip at this point.
    ae_wake();
 8002b00:	f7ff fed6 	bl	80028b0 <ae_wake>

    _send_serialized((const uint8_t *)&known, sizeof(known));
 8002b04:	2106      	movs	r1, #6
 8002b06:	a802      	add	r0, sp, #8
 8002b08:	f7ff fe69 	bl	80027de <_send_serialized>

	// CRC will start from frame_len onwards
	uint8_t crc[2] = {0, 0};
 8002b0c:	2300      	movs	r3, #0
	crc16_chain(sizeof(known)-1, &known.framed_len, crc);
 8002b0e:	aa01      	add	r2, sp, #4
 8002b10:	f10d 0109 	add.w	r1, sp, #9
 8002b14:	2005      	movs	r0, #5
	uint8_t crc[2] = {0, 0};
 8002b16:	f8ad 3004 	strh.w	r3, [sp, #4]
	crc16_chain(sizeof(known)-1, &known.framed_len, crc);
 8002b1a:	f7ff fe87 	bl	800282c <crc16_chain>

	// insert a variable-length body area (sometimes)
	if(data_len) {
 8002b1e:	b144      	cbz	r4, 8002b32 <ae_send_n+0x5a>
        _send_serialized(data, data_len);
 8002b20:	4621      	mov	r1, r4
 8002b22:	4628      	mov	r0, r5
 8002b24:	f7ff fe5b 	bl	80027de <_send_serialized>
		
		crc16_chain(data_len, data, crc);
 8002b28:	aa01      	add	r2, sp, #4
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff fe7d 	bl	800282c <crc16_chain>
	}

	// send final CRC bytes
    _send_serialized(crc, 2);
 8002b32:	2102      	movs	r1, #2
 8002b34:	a801      	add	r0, sp, #4
 8002b36:	f7ff fe52 	bl	80027de <_send_serialized>
}
 8002b3a:	b005      	add	sp, #20
 8002b3c:	bd30      	pop	{r4, r5, pc}

08002b3e <ae_send>:
{
 8002b3e:	b507      	push	{r0, r1, r2, lr}
	ae_send_n(opcode, p1, p2, NULL, 0);
 8002b40:	2300      	movs	r3, #0
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	f7ff ffc8 	bl	8002ad8 <ae_send_n>
}
 8002b48:	b003      	add	sp, #12
 8002b4a:	f85d fb04 	ldr.w	pc, [sp], #4

08002b4e <ae_get_info>:
//
// Do Info(p1=2) command, and return result.
//
	uint16_t
ae_get_info(void)
{
 8002b4e:	b507      	push	{r0, r1, r2, lr}
	// not doing error checking here
	ae_send(OP_Info, 0x2, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2102      	movs	r1, #2
 8002b54:	2030      	movs	r0, #48	; 0x30
 8002b56:	f7ff fff2 	bl	8002b3e <ae_send>

	// note: always returns 4 bytes, but most are garbage and unused.
	uint8_t tmp[4];
	ae_read_n(4, tmp);
 8002b5a:	a901      	add	r1, sp, #4
 8002b5c:	2004      	movs	r0, #4
 8002b5e:	f7ff ff81 	bl	8002a64 <ae_read_n>

	return (tmp[0] << 8) | tmp[1];
 8002b62:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002b66:	ba40      	rev16	r0, r0
}
 8002b68:	b280      	uxth	r0, r0
 8002b6a:	b003      	add	sp, #12
 8002b6c:	f85d fb04 	ldr.w	pc, [sp], #4

08002b70 <ae_load_nonce>:
// Load Tempkey with a specific value. Resulting Tempkey cannot be
// used with many commands/keys, but is needed for signing.
//
	int
ae_load_nonce(const uint8_t nonce[32])
{
 8002b70:	b507      	push	{r0, r1, r2, lr}
    // p1=3
	ae_send_n(OP_Nonce, 3, 0, nonce, 32);          // 608a ok
 8002b72:	2220      	movs	r2, #32
{
 8002b74:	4603      	mov	r3, r0
	ae_send_n(OP_Nonce, 3, 0, nonce, 32);          // 608a ok
 8002b76:	9200      	str	r2, [sp, #0]
 8002b78:	2103      	movs	r1, #3
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2016      	movs	r0, #22
 8002b7e:	f7ff ffab 	bl	8002ad8 <ae_send_n>

    return ae_read1();
}
 8002b82:	b003      	add	sp, #12
 8002b84:	f85d eb04 	ldr.w	lr, [sp], #4
    return ae_read1();
 8002b88:	f7ff bf50 	b.w	8002a2c <ae_read1>

08002b8c <ae_load_msgdigest>:
// Load 32bytes of message digest  with a specific value.
// Needed for signing.
//
	int
ae_load_msgdigest(const uint8_t md[32])
{
 8002b8c:	b507      	push	{r0, r1, r2, lr}
	ae_send_n(OP_Nonce, (1<<6) | 3, 0, md, 32);
 8002b8e:	2220      	movs	r2, #32
{
 8002b90:	4603      	mov	r3, r0
	ae_send_n(OP_Nonce, (1<<6) | 3, 0, md, 32);
 8002b92:	9200      	str	r2, [sp, #0]
 8002b94:	2143      	movs	r1, #67	; 0x43
 8002b96:	2200      	movs	r2, #0
 8002b98:	2016      	movs	r0, #22
 8002b9a:	f7ff ff9d 	bl	8002ad8 <ae_send_n>

    return ae_read1();
}
 8002b9e:	b003      	add	sp, #12
 8002ba0:	f85d eb04 	ldr.w	lr, [sp], #4
    return ae_read1();
 8002ba4:	f7ff bf42 	b.w	8002a2c <ae_read1>

08002ba8 <ae_pick_nonce>:
// Load Tempkey with a nonce value that we both know, but
// is random and we both know is random! Tricky!
//
	int
ae_pick_nonce(const uint8_t num_in[20], uint8_t tempkey[32])
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002baa:	b09f      	sub	sp, #124	; 0x7c
	// We provide some 20 bytes of randomness to chip
	// The chip must provide 32-bytes of random-ness,
	// so no choice in args to OP.Nonce here (due to ReqRandom).
	ae_send_n(OP_Nonce, 0, 0, num_in, 20);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2714      	movs	r7, #20
 8002bb0:	4603      	mov	r3, r0
{
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	460e      	mov	r6, r1
	ae_send_n(OP_Nonce, 0, 0, num_in, 20);
 8002bb6:	2016      	movs	r0, #22
 8002bb8:	4611      	mov	r1, r2
 8002bba:	9700      	str	r7, [sp, #0]
 8002bbc:	f7ff ff8c 	bl	8002ad8 <ae_send_n>

	// Nonce command returns the RNG result, but not contents of TempKey
	uint8_t randout[32];
	int rv = ae_read_n(32, randout);
 8002bc0:	a903      	add	r1, sp, #12
 8002bc2:	2020      	movs	r0, #32
 8002bc4:	f7ff ff4e 	bl	8002a64 <ae_read_n>
	RET_IF_BAD(rv);
 8002bc8:	4604      	mov	r4, r0
 8002bca:	b9e0      	cbnz	r0, 8002c06 <ae_pick_nonce+0x5e>
	//
	//		return sha256(rndout + num_in + b'\x16\0\0').digest()
	//
	SHA256_CTX ctx;

    sha256_init(&ctx);
 8002bcc:	a80b      	add	r0, sp, #44	; 0x2c
 8002bce:	f002 fc51 	bl	8005474 <sha256_init>
    sha256_update(&ctx, randout, 32);
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	a903      	add	r1, sp, #12
 8002bd6:	a80b      	add	r0, sp, #44	; 0x2c
 8002bd8:	f002 fc5a 	bl	8005490 <sha256_update>
    sha256_update(&ctx, num_in, 20);
 8002bdc:	463a      	mov	r2, r7
 8002bde:	4629      	mov	r1, r5
 8002be0:	a80b      	add	r0, sp, #44	; 0x2c
 8002be2:	f002 fc55 	bl	8005490 <sha256_update>
	const uint8_t fixed[3] = { 0x16, 0, 0 };
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <ae_pick_nonce+0x64>)
 8002be8:	881a      	ldrh	r2, [r3, #0]
 8002bea:	f8ad 2008 	strh.w	r2, [sp, #8]
 8002bee:	789b      	ldrb	r3, [r3, #2]
 8002bf0:	f88d 300a 	strb.w	r3, [sp, #10]
    sha256_update(&ctx, fixed, 3);
 8002bf4:	a902      	add	r1, sp, #8
 8002bf6:	a80b      	add	r0, sp, #44	; 0x2c
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	f002 fc49 	bl	8005490 <sha256_update>

    sha256_final(&ctx, tempkey);
 8002bfe:	4631      	mov	r1, r6
 8002c00:	a80b      	add	r0, sp, #44	; 0x2c
 8002c02:	f002 fc8b 	bl	800551c <sha256_final>

	return 0;
}
 8002c06:	4620      	mov	r0, r4
 8002c08:	b01f      	add	sp, #124	; 0x7c
 8002c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c0c:	0800e624 	.word	0x0800e624

08002c10 <ae_is_correct_tempkey>:
// Check that TempKey is holding what we think it does. Uses the MAC
// command over contents of Tempkey and our shared secret.
//
    bool
ae_is_correct_tempkey(const uint8_t expected_tempkey[32])
{
 8002c10:	b570      	push	{r4, r5, r6, lr}
    const uint8_t mode =   (1<<6)     // include full serial number
                         | (0<<2)     // TempKey.SourceFlag == 0 == 'rand'
                         | (0<<1)     // first 32 bytes are the shared secret
                         | (1<<0);    // second 32 bytes are tempkey

	ae_send(OP_MAC, mode, KEYNUM_pairing);
 8002c12:	2141      	movs	r1, #65	; 0x41
{
 8002c14:	b0a8      	sub	sp, #160	; 0xa0
 8002c16:	4604      	mov	r4, r0
	ae_send(OP_MAC, mode, KEYNUM_pairing);
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2008      	movs	r0, #8
 8002c1c:	f7ff ff8f 	bl	8002b3e <ae_send>

    // read chip's answer
	uint8_t resp[32];
	int rv = ae_read_n(32, resp);
 8002c20:	a905      	add	r1, sp, #20
 8002c22:	2020      	movs	r0, #32
 8002c24:	f7ff ff1e 	bl	8002a64 <ae_read_n>
    if(rv) return false;
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d135      	bne.n	8002c98 <ae_is_correct_tempkey+0x88>
	ae_send_idle();
 8002c2c:	f7ff fe4b 	bl	80028c6 <ae_send_idle>
    ae_keep_alive();

    // Duplicate the hash process, and then compare.
	SHA256_CTX ctx;

    sha256_init(&ctx);
 8002c30:	a815      	add	r0, sp, #84	; 0x54
 8002c32:	f002 fc1f 	bl	8005474 <sha256_init>
    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 8002c36:	4919      	ldr	r1, [pc, #100]	; (8002c9c <ae_is_correct_tempkey+0x8c>)
 8002c38:	2220      	movs	r2, #32
 8002c3a:	a815      	add	r0, sp, #84	; 0x54
 8002c3c:	f002 fc28 	bl	8005490 <sha256_update>
    sha256_update(&ctx, expected_tempkey, 32);
 8002c40:	2220      	movs	r2, #32
 8002c42:	4621      	mov	r1, r4
 8002c44:	a815      	add	r0, sp, #84	; 0x54
 8002c46:	f002 fc23 	bl	8005490 <sha256_update>

	const uint8_t fixed[16] = { OP_MAC, mode, KEYNUM_pairing, 0x0,
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <ae_is_correct_tempkey+0x90>)
 8002c4c:	aa01      	add	r2, sp, #4
 8002c4e:	f103 0610 	add.w	r6, r3, #16
 8002c52:	4615      	mov	r5, r2
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	4614      	mov	r4, r2
 8002c5a:	c403      	stmia	r4!, {r0, r1}
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	42b3      	cmp	r3, r6
 8002c60:	4622      	mov	r2, r4
 8002c62:	d1f7      	bne.n	8002c54 <ae_is_correct_tempkey+0x44>
                                    0,0,0,0, 0,0,0,0,       // eight zeros
                                    0,0,0,                  // three zeros
                                    0xEE };
    sha256_update(&ctx, fixed, sizeof(fixed));
 8002c64:	2210      	movs	r2, #16
 8002c66:	4629      	mov	r1, r5
 8002c68:	a815      	add	r0, sp, #84	; 0x54
 8002c6a:	f002 fc11 	bl	8005490 <sha256_update>

    sha256_update(&ctx, ((const uint8_t *)rom_secrets->ae_serial_number)+4, 4);
 8002c6e:	490d      	ldr	r1, [pc, #52]	; (8002ca4 <ae_is_correct_tempkey+0x94>)
 8002c70:	2204      	movs	r2, #4
 8002c72:	a815      	add	r0, sp, #84	; 0x54
 8002c74:	f002 fc0c 	bl	8005490 <sha256_update>
    sha256_update(&ctx, ((const uint8_t *)rom_secrets->ae_serial_number)+0, 4);
 8002c78:	2204      	movs	r2, #4
 8002c7a:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <ae_is_correct_tempkey+0x98>)
 8002c7c:	a815      	add	r0, sp, #84	; 0x54
 8002c7e:	f002 fc07 	bl	8005490 <sha256_update>
	// this verifies no problem.
	ASSERT(ctx.datalen + (ctx.bitlen/8) == 32+32+1+1+2+8+3+1+4+2+2);        // == 88
#endif

    uint8_t         actual[32];
    sha256_final(&ctx, actual);
 8002c82:	a90d      	add	r1, sp, #52	; 0x34
 8002c84:	a815      	add	r0, sp, #84	; 0x54
 8002c86:	f002 fc49 	bl	800551c <sha256_final>

    return check_equal(actual, resp, 32);
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	a905      	add	r1, sp, #20
 8002c8e:	a80d      	add	r0, sp, #52	; 0x34
 8002c90:	f7ff fd0f 	bl	80026b2 <check_equal>
}
 8002c94:	b028      	add	sp, #160	; 0xa0
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
    if(rv) return false;
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e7fb      	b.n	8002c94 <ae_is_correct_tempkey+0x84>
 8002c9c:	0801c000 	.word	0x0801c000
 8002ca0:	0800e627 	.word	0x0800e627
 8002ca4:	0801c044 	.word	0x0801c044
 8002ca8:	0801c040 	.word	0x0801c040

08002cac <ae_checkmac>:
// inside the 508a/608a, like use of a specific key, but not for us to
// authenticate the 508a/608a or its contents/state.
//
    int
ae_checkmac(uint8_t keynum, const uint8_t secret[32])
{
 8002cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb0:	b0c2      	sub	sp, #264	; 0x108

	// Since this is part of the hash, we want random bytes
	// for our "other data". Also a number for "numin" of nonce
	uint8_t od[32], numin[20];

	rng_buffer(od, sizeof(od));
 8002cb2:	ad0b      	add	r5, sp, #44	; 0x2c
{
 8002cb4:	4607      	mov	r7, r0
 8002cb6:	460e      	mov	r6, r1
	rng_buffer(od, sizeof(od));
 8002cb8:	4628      	mov	r0, r5
 8002cba:	2120      	movs	r1, #32
 8002cbc:	f7ff fd48 	bl	8002750 <rng_buffer>
	rng_buffer(numin, sizeof(numin));
 8002cc0:	2114      	movs	r1, #20
 8002cc2:	a806      	add	r0, sp, #24
 8002cc4:	f7ff fd44 	bl	8002750 <rng_buffer>
	ae_send_idle();
 8002cc8:	f7ff fdfd 	bl	80028c6 <ae_send_idle>

    // need this one, want to reset watchdog to this point.
	ae_keep_alive();

	// - load tempkey with a known nonce value
	uint8_t zeros[8] = {0};
 8002ccc:	2300      	movs	r3, #0
	uint8_t tempkey[32];
	rv = ae_pick_nonce(numin, tempkey);
 8002cce:	a913      	add	r1, sp, #76	; 0x4c
 8002cd0:	a806      	add	r0, sp, #24
	uint8_t zeros[8] = {0};
 8002cd2:	e9cd 3304 	strd	r3, r3, [sp, #16]
	rv = ae_pick_nonce(numin, tempkey);
 8002cd6:	f7ff ff67 	bl	8002ba8 <ae_pick_nonce>
	RET_IF_BAD(rv);
 8002cda:	4604      	mov	r4, r0
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d15d      	bne.n	8002d9c <ae_checkmac+0xf0>

	// - hash nonce and lots of other bits together
	SHA256_CTX ctx;
    sha256_init(&ctx);
 8002ce0:	a81b      	add	r0, sp, #108	; 0x6c
 8002ce2:	f002 fbc7 	bl	8005474 <sha256_init>

    // shared secret is 32 bytes from flash
    sha256_update(&ctx, secret, 32);
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	4631      	mov	r1, r6
 8002cea:	a81b      	add	r0, sp, #108	; 0x6c
 8002cec:	f002 fbd0 	bl	8005490 <sha256_update>

    sha256_update(&ctx, tempkey, 32);
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	a913      	add	r1, sp, #76	; 0x4c
 8002cf4:	a81b      	add	r0, sp, #108	; 0x6c
 8002cf6:	f002 fbcb 	bl	8005490 <sha256_update>
    sha256_update(&ctx, &od[0], 4);
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	a81b      	add	r0, sp, #108	; 0x6c
 8002d00:	f002 fbc6 	bl	8005490 <sha256_update>

    sha256_update(&ctx, zeros, 8);
 8002d04:	2208      	movs	r2, #8
 8002d06:	a904      	add	r1, sp, #16
 8002d08:	a81b      	add	r0, sp, #108	; 0x6c
 8002d0a:	f002 fbc1 	bl	8005490 <sha256_update>

    sha256_update(&ctx, &od[4], 3);
 8002d0e:	2203      	movs	r2, #3
 8002d10:	a90c      	add	r1, sp, #48	; 0x30
 8002d12:	a81b      	add	r0, sp, #108	; 0x6c
 8002d14:	f002 fbbc 	bl	8005490 <sha256_update>

	uint8_t ee = 0xEE;
 8002d18:	23ee      	movs	r3, #238	; 0xee
    sha256_update(&ctx, &ee, 1);
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f10d 010b 	add.w	r1, sp, #11
 8002d20:	a81b      	add	r0, sp, #108	; 0x6c
	uint8_t ee = 0xEE;
 8002d22:	f88d 300b 	strb.w	r3, [sp, #11]
    sha256_update(&ctx, &ee, 1);
 8002d26:	f002 fbb3 	bl	8005490 <sha256_update>
    sha256_update(&ctx, &od[7], 4);
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002d30:	a81b      	add	r0, sp, #108	; 0x6c
 8002d32:	f002 fbad 	bl	8005490 <sha256_update>

	uint8_t snp[2] = { 0x01, 0x23 };
 8002d36:	f242 3301 	movw	r3, #8961	; 0x2301
    sha256_update(&ctx, snp, 2);
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	a903      	add	r1, sp, #12
 8002d3e:	a81b      	add	r0, sp, #108	; 0x6c
	uint8_t snp[2] = { 0x01, 0x23 };
 8002d40:	f8ad 300c 	strh.w	r3, [sp, #12]
    sha256_update(&ctx, snp, 2);
 8002d44:	f002 fba4 	bl	8005490 <sha256_update>
    sha256_update(&ctx, &od[11], 2);
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8002d4e:	a81b      	add	r0, sp, #108	; 0x6c
 8002d50:	f002 fb9e 	bl	8005490 <sha256_update>
		uint8_t		resp[32];
		uint8_t		od[13];
	} req;

    // content doesn't matter, but nice and visible:
    memcpy(req.ch3, copyright_msg, 32);
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <ae_checkmac+0x100>)
 8002d56:	ac2e      	add	r4, sp, #184	; 0xb8
 8002d58:	f103 0220 	add.w	r2, r3, #32
 8002d5c:	46a0      	mov	r8, r4
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	4626      	mov	r6, r4
 8002d64:	c603      	stmia	r6!, {r0, r1}
 8002d66:	3308      	adds	r3, #8
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	4634      	mov	r4, r6
 8002d6c:	d1f7      	bne.n	8002d5e <ae_checkmac+0xb2>
	// this verifies no problem.
	int l = (ctx.blocks * 64) + ctx.npartial;
	ASSERT(l == 32+32+4+8+3+1+4+2+2);			// == 88
#endif

    sha256_final(&ctx, req.resp);
 8002d6e:	a936      	add	r1, sp, #216	; 0xd8
 8002d70:	a81b      	add	r0, sp, #108	; 0x6c
 8002d72:	f002 fbd3 	bl	800551c <sha256_final>
	memcpy(req.od, od, 13);
 8002d76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d7a:	ac3e      	add	r4, sp, #248	; 0xf8
 8002d7c:	c407      	stmia	r4!, {r0, r1, r2}
 8002d7e:	7023      	strb	r3, [r4, #0]

	STATIC_ASSERT(sizeof(req) == 32 + 32 + 13);

	// Give our answer to the chip.
	ae_send_n(OP_CheckMac, 0x01, keynum, (uint8_t *)&req, sizeof(req));
 8002d80:	234d      	movs	r3, #77	; 0x4d
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	463a      	mov	r2, r7
 8002d86:	4643      	mov	r3, r8
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2028      	movs	r0, #40	; 0x28
 8002d8c:	f7ff fea4 	bl	8002ad8 <ae_send_n>

	rv = ae_read1();
 8002d90:	f7ff fe4c 	bl	8002a2c <ae_read1>
	if(rv != 0) {
 8002d94:	4604      	mov	r4, r0
 8002d96:	b928      	cbnz	r0, 8002da4 <ae_checkmac+0xf8>
	ae_send_idle();
 8002d98:	f7ff fd95 	bl	80028c6 <ae_send_idle>

	// just in case ... always restart watchdog timer.
	ae_keep_alive();

	return 0;
}
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	b042      	add	sp, #264	; 0x108
 8002da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
 8002da4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002da8:	e7f8      	b.n	8002d9c <ae_checkmac+0xf0>
 8002daa:	bf00      	nop
 8002dac:	0800e5f6 	.word	0x0800e5f6

08002db0 <ae_pair_unlock>:
    return ae_checkmac(KEYNUM_pairing, rom_secrets->pairing_secret);
 8002db0:	4901      	ldr	r1, [pc, #4]	; (8002db8 <ae_pair_unlock+0x8>)
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7ff bf7a 	b.w	8002cac <ae_checkmac>
 8002db8:	0801c000 	.word	0x0801c000

08002dbc <ae_sign_authed>:
// Sign a message (already digested)
//
	int
ae_sign_authed(uint8_t keynum, const uint8_t msg_hash[32],
                uint8_t signature[64], int auth_kn, const uint8_t auth_digest[32])
{
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	460e      	mov	r6, r1
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	4615      	mov	r5, r2
    // indicate we know the PIN
    ae_pair_unlock();
 8002dc4:	f7ff fff4 	bl	8002db0 <ae_pair_unlock>
    int rv = ae_checkmac(KEYNUM_main_pin, auth_digest);
 8002dc8:	9904      	ldr	r1, [sp, #16]
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f7ff ff6e 	bl	8002cac <ae_checkmac>
    RET_IF_BAD(rv);
 8002dd0:	b990      	cbnz	r0, 8002df8 <ae_sign_authed+0x3c>

    // send what we need signed
	rv = ae_load_msgdigest(msg_hash);
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f7ff feda 	bl	8002b8c <ae_load_msgdigest>
	RET_IF_BAD(rv);
 8002dd8:	b970      	cbnz	r0, 8002df8 <ae_sign_authed+0x3c>

    do {
        ae_send(OP_Sign, (7<<5), keynum);
 8002dda:	b2a4      	uxth	r4, r4
 8002ddc:	4622      	mov	r2, r4
 8002dde:	21e0      	movs	r1, #224	; 0xe0
 8002de0:	2041      	movs	r0, #65	; 0x41
 8002de2:	f7ff feac 	bl	8002b3e <ae_send>

        delay_ms(60);     // min time for processing
 8002de6:	203c      	movs	r0, #60	; 0x3c
 8002de8:	f000 fd86 	bl	80038f8 <delay_ms>

        rv = ae_read_n(64, signature);
 8002dec:	4629      	mov	r1, r5
 8002dee:	2040      	movs	r0, #64	; 0x40
 8002df0:	f7ff fe38 	bl	8002a64 <ae_read_n>
    } while(rv == AE_ECC_FAULT);
 8002df4:	2805      	cmp	r0, #5
 8002df6:	d0f1      	beq.n	8002ddc <ae_sign_authed+0x20>

	return rv;
}
 8002df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dfc <ae_gen_ecc_key>:

// ae_gen_ecc_key()
//
    int
ae_gen_ecc_key(uint8_t keynum, uint8_t pubkey_out[64])
{
 8002dfc:	b530      	push	{r4, r5, lr}
    int rv;
    uint8_t junk[3] = { 0 };
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <ae_gen_ecc_key+0x40>)
{
 8002e00:	b085      	sub	sp, #20
    uint8_t junk[3] = { 0 };
 8002e02:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8002e06:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002e0a:	2300      	movs	r3, #0
{
 8002e0c:	460c      	mov	r4, r1
    uint8_t junk[3] = { 0 };
 8002e0e:	f88d 300e 	strb.w	r3, [sp, #14]

    do {
        ae_send_n(OP_GenKey, (1<<2), keynum, junk, 3);
 8002e12:	4605      	mov	r5, r0
 8002e14:	2303      	movs	r3, #3
 8002e16:	462a      	mov	r2, r5
 8002e18:	2104      	movs	r1, #4
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2040      	movs	r0, #64	; 0x40
 8002e1e:	ab03      	add	r3, sp, #12
 8002e20:	f7ff fe5a 	bl	8002ad8 <ae_send_n>

        delay_ms(100);     // to avoid timeouts
 8002e24:	2064      	movs	r0, #100	; 0x64
 8002e26:	f000 fd67 	bl	80038f8 <delay_ms>

        rv = ae_read_n(64, pubkey_out);
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	2040      	movs	r0, #64	; 0x40
 8002e2e:	f7ff fe19 	bl	8002a64 <ae_read_n>
    } while(rv == AE_ECC_FAULT);
 8002e32:	2805      	cmp	r0, #5
 8002e34:	d0ee      	beq.n	8002e14 <ae_gen_ecc_key+0x18>

    return rv;
}
 8002e36:	b005      	add	sp, #20
 8002e38:	bd30      	pop	{r4, r5, pc}
 8002e3a:	bf00      	nop
 8002e3c:	0800e624 	.word	0x0800e624

08002e40 <ae_hmac32>:
// 508a: Different opcode, OP_HMAC does exactly 32 bytes w/ less steps.
// 608a: Use old SHA256 command, but with new flags.
//
    int
ae_hmac32(uint8_t keynum, const uint8_t msg[32], uint8_t digest[32])
{
 8002e40:	b530      	push	{r4, r5, lr}
 8002e42:	b085      	sub	sp, #20
 8002e44:	4615      	mov	r5, r2
 8002e46:	9103      	str	r1, [sp, #12]
    // Start SHA w/ HMAC setup
	ae_send(OP_SHA, 4, keynum);        // 4 = HMAC_Init
 8002e48:	4602      	mov	r2, r0
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	2047      	movs	r0, #71	; 0x47
 8002e4e:	f7ff fe76 	bl	8002b3e <ae_send>

    // expect zero, meaning "ready"
    int rv = ae_read1();
 8002e52:	f7ff fdeb 	bl	8002a2c <ae_read1>
    RET_IF_BAD(rv);
 8002e56:	b970      	cbnz	r0, 8002e76 <ae_hmac32+0x36>

    // send the contents to be hashed
	ae_send_n(OP_SHA, (3<<6) | 2, 32, msg, 32); // 2 = Finalize, 3=Place output
 8002e58:	2420      	movs	r4, #32
 8002e5a:	9b03      	ldr	r3, [sp, #12]
 8002e5c:	9400      	str	r4, [sp, #0]
 8002e5e:	4622      	mov	r2, r4
 8002e60:	21c2      	movs	r1, #194	; 0xc2
 8002e62:	2047      	movs	r0, #71	; 0x47
 8002e64:	f7ff fe38 	bl	8002ad8 <ae_send_n>
    
    // read result
    return ae_read_n(32, digest);
 8002e68:	4629      	mov	r1, r5
 8002e6a:	4620      	mov	r0, r4
}
 8002e6c:	b005      	add	sp, #20
 8002e6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return ae_read_n(32, digest);
 8002e72:	f7ff bdf7 	b.w	8002a64 <ae_read_n>
}
 8002e76:	b005      	add	sp, #20
 8002e78:	bd30      	pop	{r4, r5, pc}

08002e7a <ae_get_serial>:
//
// Return the serial number: it's 9 bytes, altho 3 are fixed.
//
	int
ae_get_serial(uint8_t serial[6])
{
 8002e7a:	b510      	push	{r4, lr}
	ae_send(OP_Read, 0x80, 0x0);
 8002e7c:	2200      	movs	r2, #0
{
 8002e7e:	b08c      	sub	sp, #48	; 0x30
	ae_send(OP_Read, 0x80, 0x0);
 8002e80:	2180      	movs	r1, #128	; 0x80
{
 8002e82:	4604      	mov	r4, r0
	ae_send(OP_Read, 0x80, 0x0);
 8002e84:	2002      	movs	r0, #2
 8002e86:	f7ff fe5a 	bl	8002b3e <ae_send>

	uint8_t temp[32];
	int rv = ae_read_n(32, temp);
 8002e8a:	a904      	add	r1, sp, #16
 8002e8c:	2020      	movs	r0, #32
 8002e8e:	f7ff fde9 	bl	8002a64 <ae_read_n>
	RET_IF_BAD(rv);
 8002e92:	4603      	mov	r3, r0
 8002e94:	b9b8      	cbnz	r0, 8002ec6 <ae_get_serial+0x4c>

    // reformat to 9 bytes.
    uint8_t ts[9];
	memcpy(ts, &temp[0], 4);
	memcpy(&ts[4], &temp[8], 5);
 8002e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e9a:	9a04      	ldr	r2, [sp, #16]
 8002e9c:	f88d 100c 	strb.w	r1, [sp, #12]

    // check the hard-coded values
    if((ts[0] != 0x01) || (ts[1] != 0x23) || (ts[8] != 0xEE)) return 1;
 8002ea0:	b2d1      	uxtb	r1, r2
 8002ea2:	2901      	cmp	r1, #1
	memcpy(ts, &temp[0], 4);
 8002ea4:	9201      	str	r2, [sp, #4]
	memcpy(&ts[4], &temp[8], 5);
 8002ea6:	9002      	str	r0, [sp, #8]
    if((ts[0] != 0x01) || (ts[1] != 0x23) || (ts[8] != 0xEE)) return 1;
 8002ea8:	d110      	bne.n	8002ecc <ae_get_serial+0x52>
 8002eaa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002eae:	2a23      	cmp	r2, #35	; 0x23
 8002eb0:	d10c      	bne.n	8002ecc <ae_get_serial+0x52>
 8002eb2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002eb6:	2aee      	cmp	r2, #238	; 0xee
 8002eb8:	d10a      	bne.n	8002ed0 <ae_get_serial+0x56>

    // save only the unique bits.
    memcpy(serial, ts+2, 6);
 8002eba:	f8dd 2006 	ldr.w	r2, [sp, #6]
 8002ebe:	6022      	str	r2, [r4, #0]
 8002ec0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8002ec4:	80a2      	strh	r2, [r4, #4]

	return 0;
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	b00c      	add	sp, #48	; 0x30
 8002eca:	bd10      	pop	{r4, pc}
    if((ts[0] != 0x01) || (ts[1] != 0x23) || (ts[8] != 0xEE)) return 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e7fa      	b.n	8002ec6 <ae_get_serial+0x4c>
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	e7f8      	b.n	8002ec6 <ae_get_serial+0x4c>

08002ed4 <ae_probe>:
{
 8002ed4:	b513      	push	{r0, r1, r4, lr}
    ae_wake();
 8002ed6:	f7ff fceb 	bl	80028b0 <ae_wake>
    _send_bits(IOFLAG_SLEEP);
 8002eda:	20cc      	movs	r0, #204	; 0xcc
 8002edc:	f7ff fc70 	bl	80027c0 <_send_bits>
    ae_wake();
 8002ee0:	f7ff fce6 	bl	80028b0 <ae_wake>
    ae_read1();
 8002ee4:	f7ff fda2 	bl	8002a2c <ae_read1>
	uint8_t chk = ae_read1();
 8002ee8:	f7ff fda0 	bl	8002a2c <ae_read1>
	if(chk != AE_AFTER_WAKE) return "wk fl";
 8002eec:	b2c0      	uxtb	r0, r0
 8002eee:	2811      	cmp	r0, #17
 8002ef0:	d10e      	bne.n	8002f10 <ae_probe+0x3c>
	if(ae_get_serial(serial)) return "no ser";
 8002ef2:	4668      	mov	r0, sp
 8002ef4:	f7ff ffc1 	bl	8002e7a <ae_get_serial>
 8002ef8:	4604      	mov	r4, r0
 8002efa:	b938      	cbnz	r0, 8002f0c <ae_probe+0x38>
    ae_wake();
 8002efc:	f7ff fcd8 	bl	80028b0 <ae_wake>
    _send_bits(IOFLAG_SLEEP);
 8002f00:	20cc      	movs	r0, #204	; 0xcc
 8002f02:	f7ff fc5d 	bl	80027c0 <_send_bits>
	return NULL;
 8002f06:	4620      	mov	r0, r4
}
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd10      	pop	{r4, pc}
	if(ae_get_serial(serial)) return "no ser";
 8002f0c:	4801      	ldr	r0, [pc, #4]	; (8002f14 <ae_probe+0x40>)
 8002f0e:	e7fb      	b.n	8002f08 <ae_probe+0x34>
	if(chk != AE_AFTER_WAKE) return "wk fl";
 8002f10:	4801      	ldr	r0, [pc, #4]	; (8002f18 <ae_probe+0x44>)
 8002f12:	e7f9      	b.n	8002f08 <ae_probe+0x34>
 8002f14:	0800e617 	.word	0x0800e617
 8002f18:	0800e61e 	.word	0x0800e61e

08002f1c <ae_write_data_slot>:
//
// -- can also lock it.
//
    int
ae_write_data_slot(int slot_num, const uint8_t *data, int len, bool lock_it)
{
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f20:	4699      	mov	r9, r3
    ASSERT(len >= 32);
 8002f22:	f1a2 0320 	sub.w	r3, r2, #32
{
 8002f26:	b085      	sub	sp, #20
    ASSERT(len >= 32);
 8002f28:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
{
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	460d      	mov	r5, r1
 8002f32:	4690      	mov	r8, r2
    ASSERT(len >= 32);
 8002f34:	d902      	bls.n	8002f3c <ae_write_data_slot+0x20>
 8002f36:	482d      	ldr	r0, [pc, #180]	; (8002fec <ae_write_data_slot+0xd0>)
 8002f38:	f7fd fd86 	bl	8000a48 <fatal_error>
    ASSERT(len <= 416);

    for(int blk=0, xlen=len; xlen>0; blk++, xlen-=32) {
        // have to write each "block" of 32-bytes, separately
        // zone => data
        ae_send_n(OP_Write, 0x80|2, (blk<<8) | (slot_num<<3), data+(blk*32), 32);
 8002f3c:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
 8002f40:	fa0f fa8a 	sxth.w	sl, sl
 8002f44:	2600      	movs	r6, #0
 8002f46:	f04f 0b20 	mov.w	fp, #32
 8002f4a:	ebc6 3246 	rsb	r2, r6, r6, lsl #13
 8002f4e:	ea4a 02c2 	orr.w	r2, sl, r2, lsl #3
 8002f52:	b292      	uxth	r2, r2
 8002f54:	1bab      	subs	r3, r5, r6
 8002f56:	2182      	movs	r1, #130	; 0x82
 8002f58:	2012      	movs	r0, #18
 8002f5a:	f8cd b000 	str.w	fp, [sp]
 8002f5e:	f7ff fdbb 	bl	8002ad8 <ae_send_n>

        int rv = ae_read1();
 8002f62:	f7ff fd63 	bl	8002a2c <ae_read1>
        RET_IF_BAD(rv);
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d13c      	bne.n	8002fe4 <ae_write_data_slot+0xc8>
    for(int blk=0, xlen=len; xlen>0; blk++, xlen-=32) {
 8002f6a:	3e20      	subs	r6, #32
 8002f6c:	eb06 0308 	add.w	r3, r6, r8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dcea      	bgt.n	8002f4a <ae_write_data_slot+0x2e>
    }

    if(lock_it) {
 8002f74:	f1b9 0f00 	cmp.w	r9, #0
 8002f78:	d034      	beq.n	8002fe4 <ae_write_data_slot+0xc8>
        ASSERT(slot_num != 8);          // no support for mega slot 8
 8002f7a:	2c08      	cmp	r4, #8
    if(lock_it) {
 8002f7c:	466e      	mov	r6, sp
        ASSERT(slot_num != 8);          // no support for mega slot 8
 8002f7e:	d0da      	beq.n	8002f36 <ae_write_data_slot+0x1a>
        ASSERT(len == 32);              // probably not a limitation here
 8002f80:	f1b8 0f20 	cmp.w	r8, #32
 8002f84:	d1d7      	bne.n	8002f36 <ae_write_data_slot+0x1a>

        // Assume 36/72-byte long slot, which will be partially written, and rest
        // should be ones.
        const int slot_len = (slot_num <= 7) ? 36 : 72;
 8002f86:	2c08      	cmp	r4, #8
 8002f88:	bfb4      	ite	lt
 8002f8a:	f04f 0824 	movlt.w	r8, #36	; 0x24
 8002f8e:	f04f 0848 	movge.w	r8, #72	; 0x48
        uint8_t copy[slot_len];
 8002f92:	f108 0307 	add.w	r3, r8, #7
 8002f96:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002f9a:	ebad 0d03 	sub.w	sp, sp, r3
 8002f9e:	ab02      	add	r3, sp, #8

        memset(copy, 0xff, slot_len);
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	21ff      	movs	r1, #255	; 0xff
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f00a fb3d 	bl	800d624 <memset>
        memcpy(copy, data, len);
 8002faa:	f105 0120 	add.w	r1, r5, #32
        memset(copy, 0xff, slot_len);
 8002fae:	4603      	mov	r3, r0
        memcpy(copy, data, len);
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f855 0b04 	ldr.w	r0, [r5], #4
 8002fb6:	f842 0b04 	str.w	r0, [r2], #4
 8002fba:	428d      	cmp	r5, r1
 8002fbc:	d1f9      	bne.n	8002fb2 <ae_write_data_slot+0x96>

        // calc expected CRC
        uint8_t crc[2] = {0, 0};
 8002fbe:	2200      	movs	r2, #0
        crc16_chain(slot_len, copy, crc);
 8002fc0:	4619      	mov	r1, r3
        uint8_t crc[2] = {0, 0};
 8002fc2:	80ba      	strh	r2, [r7, #4]
        crc16_chain(slot_len, copy, crc);
 8002fc4:	4640      	mov	r0, r8
 8002fc6:	1d3a      	adds	r2, r7, #4
 8002fc8:	f7ff fc30 	bl	800282c <crc16_chain>

        // do the lock
        ae_send(OP_Lock, 2 | (slot_num << 2), (crc[1]<<8) | crc[0]);
 8002fcc:	00a1      	lsls	r1, r4, #2
 8002fce:	f041 0102 	orr.w	r1, r1, #2
 8002fd2:	88ba      	ldrh	r2, [r7, #4]
 8002fd4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002fd8:	2017      	movs	r0, #23
 8002fda:	f7ff fdb0 	bl	8002b3e <ae_send>

        int rv = ae_read1();
 8002fde:	f7ff fd25 	bl	8002a2c <ae_read1>
        RET_IF_BAD(rv);
 8002fe2:	46b5      	mov	sp, r6
    }

    return 0;
}
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fec:	0800e390 	.word	0x0800e390

08002ff0 <ae_gendig_slot>:

// ae_gendig_slot()
//
    int
ae_gendig_slot(int slot_num, const uint8_t slot_contents[32], uint8_t digest[32])
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	b0ab      	sub	sp, #172	; 0xac
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	460f      	mov	r7, r1
    // Construct a digest on the device (and here) that depends on the secret
    // contents of a specific slot.
    uint8_t num_in[20], tempkey[32];

	rng_buffer(num_in, sizeof(num_in));
 8002ff8:	a803      	add	r0, sp, #12
 8002ffa:	2114      	movs	r1, #20
{
 8002ffc:	4616      	mov	r6, r2
	rng_buffer(num_in, sizeof(num_in));
 8002ffe:	f7ff fba7 	bl	8002750 <rng_buffer>
	int rv = ae_pick_nonce(num_in, tempkey);
 8003002:	a90f      	add	r1, sp, #60	; 0x3c
 8003004:	a803      	add	r0, sp, #12
 8003006:	f7ff fdcf 	bl	8002ba8 <ae_pick_nonce>
    RET_IF_BAD(rv);
 800300a:	4604      	mov	r4, r0
 800300c:	2800      	cmp	r0, #0
 800300e:	d13d      	bne.n	800308c <ae_gendig_slot+0x9c>

    //using Zone=2="Data" => "KeyID specifies a slot in the Data zone"
    ae_send(OP_GenDig, 0x2, slot_num);
 8003010:	b2aa      	uxth	r2, r5
 8003012:	2102      	movs	r1, #2
 8003014:	2015      	movs	r0, #21
 8003016:	f7ff fd92 	bl	8002b3e <ae_send>

    rv = ae_read1();
 800301a:	f7ff fd07 	bl	8002a2c <ae_read1>
    RET_IF_BAD(rv);
 800301e:	4604      	mov	r4, r0
 8003020:	bba0      	cbnz	r0, 800308c <ae_gendig_slot+0x9c>
	ae_send_idle();
 8003022:	f7ff fc50 	bl	80028c6 <ae_send_idle>
    //   msg = hkey + b'\x15\x02' + ustruct.pack("<H", slot_num)
    //   msg += b'\xee\x01\x23' + (b'\0'*25) + challenge
    //   assert len(msg) == 32+1+1+2+1+2+25+32
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);
 8003026:	a817      	add	r0, sp, #92	; 0x5c
 8003028:	f002 fa24 	bl	8005474 <sha256_init>

	uint8_t args[7] = { OP_GenDig, 2, slot_num, 0, 0xEE, 0x01, 0x23 };
 800302c:	2302      	movs	r3, #2
 800302e:	f88d 3005 	strb.w	r3, [sp, #5]
 8003032:	23ee      	movs	r3, #238	; 0xee
 8003034:	f88d 3008 	strb.w	r3, [sp, #8]
 8003038:	2301      	movs	r3, #1
 800303a:	2215      	movs	r2, #21
 800303c:	f88d 3009 	strb.w	r3, [sp, #9]
    uint8_t zeros[25] = { 0 };
 8003040:	4621      	mov	r1, r4
	uint8_t args[7] = { OP_GenDig, 2, slot_num, 0, 0xEE, 0x01, 0x23 };
 8003042:	2323      	movs	r3, #35	; 0x23
    uint8_t zeros[25] = { 0 };
 8003044:	a809      	add	r0, sp, #36	; 0x24
	uint8_t args[7] = { OP_GenDig, 2, slot_num, 0, 0xEE, 0x01, 0x23 };
 8003046:	f88d 300a 	strb.w	r3, [sp, #10]
 800304a:	f88d 2004 	strb.w	r2, [sp, #4]
 800304e:	f88d 5006 	strb.w	r5, [sp, #6]
 8003052:	f88d 4007 	strb.w	r4, [sp, #7]
    uint8_t zeros[25] = { 0 };
 8003056:	9408      	str	r4, [sp, #32]
 8003058:	f00a fae4 	bl	800d624 <memset>

    sha256_update(&ctx, slot_contents, 32);
 800305c:	2220      	movs	r2, #32
 800305e:	4639      	mov	r1, r7
 8003060:	a817      	add	r0, sp, #92	; 0x5c
 8003062:	f002 fa15 	bl	8005490 <sha256_update>
    sha256_update(&ctx, args, sizeof(args));
 8003066:	2207      	movs	r2, #7
 8003068:	a901      	add	r1, sp, #4
 800306a:	a817      	add	r0, sp, #92	; 0x5c
 800306c:	f002 fa10 	bl	8005490 <sha256_update>
    sha256_update(&ctx, zeros, sizeof(zeros));
 8003070:	2219      	movs	r2, #25
 8003072:	a908      	add	r1, sp, #32
 8003074:	a817      	add	r0, sp, #92	; 0x5c
 8003076:	f002 fa0b 	bl	8005490 <sha256_update>
    sha256_update(&ctx, tempkey, 32);
 800307a:	a90f      	add	r1, sp, #60	; 0x3c
 800307c:	a817      	add	r0, sp, #92	; 0x5c
 800307e:	2220      	movs	r2, #32
 8003080:	f002 fa06 	bl	8005490 <sha256_update>

    sha256_final(&ctx, digest);
 8003084:	4631      	mov	r1, r6
 8003086:	a817      	add	r0, sp, #92	; 0x5c
 8003088:	f002 fa48 	bl	800551c <sha256_final>

    return 0;
}
 800308c:	4620      	mov	r0, r4
 800308e:	b02b      	add	sp, #172	; 0xac
 8003090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003094 <ae_secure_random>:
{
 8003094:	b507      	push	{r0, r1, r2, lr}
 8003096:	4602      	mov	r2, r0
    int rv = ae_gendig_slot(KEYNUM_pairing, rom_secrets->pairing_secret, randout);
 8003098:	9001      	str	r0, [sp, #4]
 800309a:	490b      	ldr	r1, [pc, #44]	; (80030c8 <ae_secure_random+0x34>)
 800309c:	2001      	movs	r0, #1
 800309e:	f7ff ffa7 	bl	8002ff0 <ae_gendig_slot>
    if(rv || !ae_is_correct_tempkey(randout)) {
 80030a2:	9a01      	ldr	r2, [sp, #4]
 80030a4:	b108      	cbz	r0, 80030aa <ae_secure_random+0x16>
        fatal_mitm();
 80030a6:	f7fd fcd9 	bl	8000a5c <fatal_mitm>
    if(rv || !ae_is_correct_tempkey(randout)) {
 80030aa:	4610      	mov	r0, r2
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	f7ff fdaf 	bl	8002c10 <ae_is_correct_tempkey>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d0f7      	beq.n	80030a6 <ae_secure_random+0x12>
    sha256_single(randout, 32, randout);
 80030b6:	9a01      	ldr	r2, [sp, #4]
 80030b8:	2120      	movs	r1, #32
 80030ba:	4610      	mov	r0, r2
}
 80030bc:	b003      	add	sp, #12
 80030be:	f85d eb04 	ldr.w	lr, [sp], #4
    sha256_single(randout, 32, randout);
 80030c2:	f002 ba3f 	b.w	8005544 <sha256_single>
 80030c6:	bf00      	nop
 80030c8:	0801c000 	.word	0x0801c000

080030cc <ae_checkmac_hard>:
{
 80030cc:	b510      	push	{r4, lr}
 80030ce:	b088      	sub	sp, #32
    int rv = ae_gendig_slot(keynum, secret, digest);
 80030d0:	466a      	mov	r2, sp
 80030d2:	f7ff ff8d 	bl	8002ff0 <ae_gendig_slot>
    RET_IF_BAD(rv);
 80030d6:	4604      	mov	r4, r0
 80030d8:	b930      	cbnz	r0, 80030e8 <ae_checkmac_hard+0x1c>
    if(!ae_is_correct_tempkey(digest)) return -2;
 80030da:	4668      	mov	r0, sp
 80030dc:	f7ff fd98 	bl	8002c10 <ae_is_correct_tempkey>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	bf08      	it	eq
 80030e4:	f06f 0401 	mvneq.w	r4, #1
}
 80030e8:	4620      	mov	r0, r4
 80030ea:	b008      	add	sp, #32
 80030ec:	bd10      	pop	{r4, pc}

080030ee <ae_gendig_counter>:
// the digest should be, and ask the chip to do the same. Verify we match
// using MAC command (done elsewhere).
//
    int
ae_gendig_counter(int counter_num, const uint32_t expected_value, uint8_t digest[32])
{
 80030ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030f0:	b0ad      	sub	sp, #180	; 0xb4
 80030f2:	4605      	mov	r5, r0
 80030f4:	9101      	str	r1, [sp, #4]
    uint8_t num_in[20], tempkey[32];

	rng_buffer(num_in, sizeof(num_in));
 80030f6:	a804      	add	r0, sp, #16
 80030f8:	2114      	movs	r1, #20
{
 80030fa:	4616      	mov	r6, r2
	rng_buffer(num_in, sizeof(num_in));
 80030fc:	f7ff fb28 	bl	8002750 <rng_buffer>
	int rv = ae_pick_nonce(num_in, tempkey);
 8003100:	a909      	add	r1, sp, #36	; 0x24
 8003102:	a804      	add	r0, sp, #16
 8003104:	f7ff fd50 	bl	8002ba8 <ae_pick_nonce>
    RET_IF_BAD(rv);
 8003108:	4604      	mov	r4, r0
 800310a:	2800      	cmp	r0, #0
 800310c:	d148      	bne.n	80031a0 <ae_gendig_counter+0xb2>

    //using Zone=4="Counter" => "KeyID specifies the monotonic counter ID"
    ae_send(OP_GenDig, 0x4, counter_num);
 800310e:	b2aa      	uxth	r2, r5
 8003110:	2104      	movs	r1, #4
 8003112:	2015      	movs	r0, #21
 8003114:	f7ff fd13 	bl	8002b3e <ae_send>

    rv = ae_read1();
 8003118:	f7ff fc88 	bl	8002a2c <ae_read1>
    RET_IF_BAD(rv);
 800311c:	4604      	mov	r4, r0
 800311e:	2800      	cmp	r0, #0
 8003120:	d13e      	bne.n	80031a0 <ae_gendig_counter+0xb2>
	ae_send_idle();
 8003122:	f7ff fbd0 	bl	80028c6 <ae_send_idle>
    //   msg = hkey + b'\x15\x02' + ustruct.pack("<H", slot_num)
    //   msg += b'\xee\x01\x23' + (b'\0'*25) + challenge
    //   assert len(msg) == 32+1+1+2+1+2+25+32
    //
	SHA256_CTX ctx;
    sha256_init(&ctx);
 8003126:	a819      	add	r0, sp, #100	; 0x64
 8003128:	f002 f9a4 	bl	8005474 <sha256_init>

    uint8_t zeros[32] = { 0 };
 800312c:	221c      	movs	r2, #28
 800312e:	4621      	mov	r1, r4
 8003130:	a812      	add	r0, sp, #72	; 0x48
 8003132:	9411      	str	r4, [sp, #68]	; 0x44
 8003134:	f00a fa76 	bl	800d624 <memset>
	uint8_t args[8] = { OP_GenDig, 0x4, counter_num, 0,  0xEE, 0x01, 0x23, 0x0 };
 8003138:	2315      	movs	r3, #21
 800313a:	f88d 3008 	strb.w	r3, [sp, #8]
 800313e:	23ee      	movs	r3, #238	; 0xee
 8003140:	f88d 300c 	strb.w	r3, [sp, #12]
 8003144:	2301      	movs	r3, #1
 8003146:	2704      	movs	r7, #4
 8003148:	f88d 300d 	strb.w	r3, [sp, #13]

    sha256_update(&ctx, zeros, 32);
 800314c:	2220      	movs	r2, #32
	uint8_t args[8] = { OP_GenDig, 0x4, counter_num, 0,  0xEE, 0x01, 0x23, 0x0 };
 800314e:	2323      	movs	r3, #35	; 0x23
    sha256_update(&ctx, zeros, 32);
 8003150:	a911      	add	r1, sp, #68	; 0x44
 8003152:	a819      	add	r0, sp, #100	; 0x64
	uint8_t args[8] = { OP_GenDig, 0x4, counter_num, 0,  0xEE, 0x01, 0x23, 0x0 };
 8003154:	f88d 300e 	strb.w	r3, [sp, #14]
 8003158:	f88d 7009 	strb.w	r7, [sp, #9]
 800315c:	f88d 500a 	strb.w	r5, [sp, #10]
 8003160:	f88d 400b 	strb.w	r4, [sp, #11]
 8003164:	f88d 400f 	strb.w	r4, [sp, #15]
    sha256_update(&ctx, zeros, 32);
 8003168:	f002 f992 	bl	8005490 <sha256_update>
    sha256_update(&ctx, args, sizeof(args));
 800316c:	2208      	movs	r2, #8
 800316e:	eb0d 0102 	add.w	r1, sp, r2
 8003172:	a819      	add	r0, sp, #100	; 0x64
 8003174:	f002 f98c 	bl	8005490 <sha256_update>
    sha256_update(&ctx, (const uint8_t *)&expected_value, 4);
 8003178:	463a      	mov	r2, r7
 800317a:	eb0d 0107 	add.w	r1, sp, r7
 800317e:	a819      	add	r0, sp, #100	; 0x64
 8003180:	f002 f986 	bl	8005490 <sha256_update>
    sha256_update(&ctx, zeros, 20);
 8003184:	2214      	movs	r2, #20
 8003186:	a911      	add	r1, sp, #68	; 0x44
 8003188:	a819      	add	r0, sp, #100	; 0x64
 800318a:	f002 f981 	bl	8005490 <sha256_update>
    sha256_update(&ctx, tempkey, 32);
 800318e:	a909      	add	r1, sp, #36	; 0x24
 8003190:	a819      	add	r0, sp, #100	; 0x64
 8003192:	2220      	movs	r2, #32
 8003194:	f002 f97c 	bl	8005490 <sha256_update>

    sha256_final(&ctx, digest);
 8003198:	4631      	mov	r1, r6
 800319a:	a819      	add	r0, sp, #100	; 0x64
 800319c:	f002 f9be 	bl	800551c <sha256_final>

    return 0;
}
 80031a0:	4620      	mov	r0, r4
 80031a2:	b02d      	add	sp, #180	; 0xb4
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031a6 <ae_get_counter>:
{
 80031a6:	b570      	push	{r4, r5, r6, lr}
    ae_send(OP_Counter, 0x0, counter_number);
 80031a8:	460a      	mov	r2, r1
{
 80031aa:	b088      	sub	sp, #32
 80031ac:	4606      	mov	r6, r0
 80031ae:	460d      	mov	r5, r1
    ae_send(OP_Counter, 0x0, counter_number);
 80031b0:	2024      	movs	r0, #36	; 0x24
 80031b2:	2100      	movs	r1, #0
 80031b4:	f7ff fcc3 	bl	8002b3e <ae_send>
    int rv = ae_read_n(4, (uint8_t *)result);
 80031b8:	4631      	mov	r1, r6
 80031ba:	2004      	movs	r0, #4
 80031bc:	f7ff fc52 	bl	8002a64 <ae_read_n>
    RET_IF_BAD(rv);
 80031c0:	4604      	mov	r4, r0
 80031c2:	b960      	cbnz	r0, 80031de <ae_get_counter+0x38>
    rv = ae_gendig_counter(counter_number, *result, digest);
 80031c4:	6831      	ldr	r1, [r6, #0]
 80031c6:	466a      	mov	r2, sp
 80031c8:	4628      	mov	r0, r5
 80031ca:	f7ff ff90 	bl	80030ee <ae_gendig_counter>
	RET_IF_BAD(rv);
 80031ce:	4604      	mov	r4, r0
 80031d0:	b928      	cbnz	r0, 80031de <ae_get_counter+0x38>
    if(!ae_is_correct_tempkey(digest)) {
 80031d2:	4668      	mov	r0, sp
 80031d4:	f7ff fd1c 	bl	8002c10 <ae_is_correct_tempkey>
 80031d8:	b908      	cbnz	r0, 80031de <ae_get_counter+0x38>
        fatal_mitm();
 80031da:	f7fd fc3f 	bl	8000a5c <fatal_mitm>
}
 80031de:	4620      	mov	r0, r4
 80031e0:	b008      	add	sp, #32
 80031e2:	bd70      	pop	{r4, r5, r6, pc}

080031e4 <ae_add_counter>:
{
 80031e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031e8:	4606      	mov	r6, r0
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	460d      	mov	r5, r1
 80031ee:	4617      	mov	r7, r2
    for(int i=0; i<incr; i++) {
 80031f0:	f04f 0800 	mov.w	r8, #0
        ae_send(OP_Counter, 0x1, counter_number);
 80031f4:	fa1f f981 	uxth.w	r9, r1
    for(int i=0; i<incr; i++) {
 80031f8:	45b8      	cmp	r8, r7
 80031fa:	db0c      	blt.n	8003216 <ae_add_counter+0x32>
    int rv = ae_gendig_counter(counter_number, *result, digest);
 80031fc:	6831      	ldr	r1, [r6, #0]
 80031fe:	466a      	mov	r2, sp
 8003200:	4628      	mov	r0, r5
 8003202:	f7ff ff74 	bl	80030ee <ae_gendig_counter>
	RET_IF_BAD(rv);
 8003206:	4604      	mov	r4, r0
 8003208:	b998      	cbnz	r0, 8003232 <ae_add_counter+0x4e>
    if(!ae_is_correct_tempkey(digest)) {
 800320a:	4668      	mov	r0, sp
 800320c:	f7ff fd00 	bl	8002c10 <ae_is_correct_tempkey>
 8003210:	b978      	cbnz	r0, 8003232 <ae_add_counter+0x4e>
        fatal_mitm();
 8003212:	f7fd fc23 	bl	8000a5c <fatal_mitm>
        ae_send(OP_Counter, 0x1, counter_number);
 8003216:	464a      	mov	r2, r9
 8003218:	2101      	movs	r1, #1
 800321a:	2024      	movs	r0, #36	; 0x24
 800321c:	f7ff fc8f 	bl	8002b3e <ae_send>
        int rv = ae_read_n(4, (uint8_t *)result);
 8003220:	4631      	mov	r1, r6
 8003222:	2004      	movs	r0, #4
 8003224:	f7ff fc1e 	bl	8002a64 <ae_read_n>
        RET_IF_BAD(rv);
 8003228:	4604      	mov	r4, r0
 800322a:	b910      	cbnz	r0, 8003232 <ae_add_counter+0x4e>
    for(int i=0; i<incr; i++) {
 800322c:	f108 0801 	add.w	r8, r8, #1
 8003230:	e7e2      	b.n	80031f8 <ae_add_counter+0x14>
}
 8003232:	4620      	mov	r0, r4
 8003234:	b009      	add	sp, #36	; 0x24
 8003236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800323a <ae_encrypted_read32>:
// ae_encrypted_read32()
//
    int
ae_encrypted_read32(int data_slot, int blk,
                    int read_kn, const uint8_t read_key[32], uint8_t data[32])
{
 800323a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323c:	b08b      	sub	sp, #44	; 0x2c
 800323e:	4617      	mov	r7, r2
 8003240:	460e      	mov	r6, r1
 8003242:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	4604      	mov	r4, r0
    uint8_t     digest[32];

    ae_pair_unlock();
 8003248:	f7ff fdb2 	bl	8002db0 <ae_pair_unlock>

    int rv = ae_gendig_slot(read_kn, read_key, digest);
 800324c:	9901      	ldr	r1, [sp, #4]
 800324e:	aa02      	add	r2, sp, #8
 8003250:	4638      	mov	r0, r7
 8003252:	f7ff fecd 	bl	8002ff0 <ae_gendig_slot>
    RET_IF_BAD(rv);
 8003256:	b9c0      	cbnz	r0, 800328a <ae_encrypted_read32+0x50>

    // read nth 32-byte "block"
    ae_send(OP_Read, 0x82, (blk << 8) | (data_slot<<3));
 8003258:	00e4      	lsls	r4, r4, #3
 800325a:	ea44 2206 	orr.w	r2, r4, r6, lsl #8
 800325e:	2182      	movs	r1, #130	; 0x82
 8003260:	2002      	movs	r0, #2
 8003262:	b292      	uxth	r2, r2
 8003264:	f7ff fc6b 	bl	8002b3e <ae_send>

    rv = ae_read_n(32, data);
 8003268:	4629      	mov	r1, r5
 800326a:	2020      	movs	r0, #32
 800326c:	f7ff fbfa 	bl	8002a64 <ae_read_n>
    RET_IF_BAD(rv);
 8003270:	b958      	cbnz	r0, 800328a <ae_encrypted_read32+0x50>
 8003272:	1e6a      	subs	r2, r5, #1
 8003274:	ab02      	add	r3, sp, #8
 8003276:	351f      	adds	r5, #31
		*(acc) ^= *(more);
 8003278:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800327c:	f813 4b01 	ldrb.w	r4, [r3], #1
	for(; len; len--, more++, acc++) {
 8003280:	4295      	cmp	r5, r2
		*(acc) ^= *(more);
 8003282:	ea81 0104 	eor.w	r1, r1, r4
 8003286:	7011      	strb	r1, [r2, #0]
	for(; len; len--, more++, acc++) {
 8003288:	d1f6      	bne.n	8003278 <ae_encrypted_read32+0x3e>

    xor_mixin(data, digest, 32);

    return 0;
}
 800328a:	b00b      	add	sp, #44	; 0x2c
 800328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003290 <ae_encrypted_read>:

// ae_encrypted_read()
//
    int
ae_encrypted_read(int data_slot, int read_kn, const uint8_t read_key[32], uint8_t *data, int len)
{
 8003290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003294:	b08b      	sub	sp, #44	; 0x2c
 8003296:	4607      	mov	r7, r0
 8003298:	9d12      	ldr	r5, [sp, #72]	; 0x48
    // not clear if chip supports 4-byte encrypted reads 
    ASSERT((len == 32) || (len == 72));
 800329a:	2d20      	cmp	r5, #32
{
 800329c:	4688      	mov	r8, r1
 800329e:	4691      	mov	r9, r2
 80032a0:	461e      	mov	r6, r3
    ASSERT((len == 32) || (len == 72));
 80032a2:	d004      	beq.n	80032ae <ae_encrypted_read+0x1e>
 80032a4:	2d48      	cmp	r5, #72	; 0x48
 80032a6:	d002      	beq.n	80032ae <ae_encrypted_read+0x1e>
 80032a8:	4815      	ldr	r0, [pc, #84]	; (8003300 <ae_encrypted_read+0x70>)
 80032aa:	f7fd fbcd 	bl	8000a48 <fatal_error>

    int rv = ae_encrypted_read32(data_slot, 0, read_kn, read_key, data);
 80032ae:	9600      	str	r6, [sp, #0]
 80032b0:	464b      	mov	r3, r9
 80032b2:	4642      	mov	r2, r8
 80032b4:	2100      	movs	r1, #0
 80032b6:	4638      	mov	r0, r7
 80032b8:	f7ff ffbf 	bl	800323a <ae_encrypted_read32>
    RET_IF_BAD(rv);
 80032bc:	4604      	mov	r4, r0
 80032be:	b9d0      	cbnz	r0, 80032f6 <ae_encrypted_read+0x66>

    if(len == 32) return 0;
 80032c0:	2d20      	cmp	r5, #32
 80032c2:	d018      	beq.n	80032f6 <ae_encrypted_read+0x66>

    rv = ae_encrypted_read32(data_slot, 1, read_kn, read_key, data+32);
 80032c4:	f106 0320 	add.w	r3, r6, #32
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4642      	mov	r2, r8
 80032cc:	464b      	mov	r3, r9
 80032ce:	2101      	movs	r1, #1
 80032d0:	4638      	mov	r0, r7
 80032d2:	f7ff ffb2 	bl	800323a <ae_encrypted_read32>
    RET_IF_BAD(rv);
 80032d6:	4604      	mov	r4, r0
 80032d8:	b968      	cbnz	r0, 80032f6 <ae_encrypted_read+0x66>

    uint8_t tmp[32];
    rv = ae_encrypted_read32(data_slot, 2, read_kn, read_key, tmp);
 80032da:	ad02      	add	r5, sp, #8
 80032dc:	9500      	str	r5, [sp, #0]
 80032de:	464b      	mov	r3, r9
 80032e0:	4642      	mov	r2, r8
 80032e2:	2102      	movs	r1, #2
 80032e4:	4638      	mov	r0, r7
 80032e6:	f7ff ffa8 	bl	800323a <ae_encrypted_read32>
    RET_IF_BAD(rv);
 80032ea:	4604      	mov	r4, r0
 80032ec:	b918      	cbnz	r0, 80032f6 <ae_encrypted_read+0x66>

    memcpy(data+64, tmp, 72-64);
 80032ee:	462a      	mov	r2, r5
 80032f0:	ca03      	ldmia	r2!, {r0, r1}
 80032f2:	6430      	str	r0, [r6, #64]	; 0x40
 80032f4:	6471      	str	r1, [r6, #68]	; 0x44

    return 0;
}
 80032f6:	4620      	mov	r0, r4
 80032f8:	b00b      	add	sp, #44	; 0x2c
 80032fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032fe:	bf00      	nop
 8003300:	0800e390 	.word	0x0800e390

08003304 <ae_encrypted_write32>:
// ae_encrypted_write()
//
    int
ae_encrypted_write32(int data_slot, int blk, int write_kn,
                        const uint8_t write_key[32], const uint8_t data[32])
{
 8003304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003308:	b0b8      	sub	sp, #224	; 0xe0
 800330a:	4617      	mov	r7, r2
 800330c:	460d      	mov	r5, r1
 800330e:	9e3e      	ldr	r6, [sp, #248]	; 0xf8
 8003310:	9303      	str	r3, [sp, #12]
 8003312:	4604      	mov	r4, r0
    uint8_t digest[32];

    ae_pair_unlock();
 8003314:	f7ff fd4c 	bl	8002db0 <ae_pair_unlock>

    // generate a hash over shared secret and rng
    int rv = ae_gendig_slot(write_kn, write_key, digest);
 8003318:	9903      	ldr	r1, [sp, #12]
 800331a:	aa0d      	add	r2, sp, #52	; 0x34
 800331c:	4638      	mov	r0, r7
 800331e:	f7ff fe67 	bl	8002ff0 <ae_gendig_slot>
    RET_IF_BAD(rv);
 8003322:	2800      	cmp	r0, #0
 8003324:	d151      	bne.n	80033ca <ae_encrypted_write32+0xc6>
 8003326:	1e72      	subs	r2, r6, #1
 8003328:	af0d      	add	r7, sp, #52	; 0x34
 800332a:	a915      	add	r1, sp, #84	; 0x54
 800332c:	f106 0c1f 	add.w	ip, r6, #31

    // encrypt the data to be written, and append an authenticating MAC
    uint8_t body[32 + 32];

    for(int i=0; i<32; i++) {
        body[i] = data[i] ^ digest[i];
 8003330:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8003334:	f817 0b01 	ldrb.w	r0, [r7], #1
    for(int i=0; i<32; i++) {
 8003338:	4562      	cmp	r2, ip
        body[i] = data[i] ^ digest[i];
 800333a:	ea80 000e 	eor.w	r0, r0, lr
 800333e:	f801 0b01 	strb.w	r0, [r1], #1
    for(int i=0; i<32; i++) {
 8003342:	d1f5      	bne.n	8003330 <ae_encrypted_write32+0x2c>
	//	    + (b'\0'*25)
	//	    + new_value)
	//	assert len(msg) == 32+1+1+2+1+2+25+32
	//		
	SHA256_CTX ctx;
    sha256_init(&ctx);
 8003344:	a825      	add	r0, sp, #148	; 0x94
 8003346:	f002 f895 	bl	8005474 <sha256_init>

    uint8_t p1 = 0x80|2;        // 32 bytes into a data slot
    uint8_t p2_lsb = (data_slot << 3); 
    uint8_t p2_msb = blk;

	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 800334a:	22ee      	movs	r2, #238	; 0xee
 800334c:	f88d 2014 	strb.w	r2, [sp, #20]
 8003350:	2201      	movs	r2, #1
 8003352:	f88d 2015 	strb.w	r2, [sp, #21]
    uint8_t p2_lsb = (data_slot << 3); 
 8003356:	00e4      	lsls	r4, r4, #3
	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 8003358:	2223      	movs	r2, #35	; 0x23
    uint8_t zeros[25] = { 0 };
 800335a:	2100      	movs	r1, #0
    uint8_t p2_lsb = (data_slot << 3); 
 800335c:	b2e4      	uxtb	r4, r4
	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 800335e:	2712      	movs	r7, #18
 8003360:	f04f 0882 	mov.w	r8, #130	; 0x82
 8003364:	f88d 2016 	strb.w	r2, [sp, #22]
    uint8_t zeros[25] = { 0 };
 8003368:	a807      	add	r0, sp, #28
 800336a:	2215      	movs	r2, #21
 800336c:	9106      	str	r1, [sp, #24]
	uint8_t args[7] = { OP_Write, p1, p2_lsb, p2_msb, 0xEE, 0x01, 0x23 };
 800336e:	f88d 7010 	strb.w	r7, [sp, #16]
 8003372:	f88d 8011 	strb.w	r8, [sp, #17]
 8003376:	f88d 4012 	strb.w	r4, [sp, #18]
    uint8_t p2_msb = blk;
 800337a:	f88d 5013 	strb.w	r5, [sp, #19]
    uint8_t zeros[25] = { 0 };
 800337e:	f00a f951 	bl	800d624 <memset>

    sha256_update(&ctx, digest, 32);
 8003382:	2220      	movs	r2, #32
 8003384:	a90d      	add	r1, sp, #52	; 0x34
 8003386:	a825      	add	r0, sp, #148	; 0x94
 8003388:	f002 f882 	bl	8005490 <sha256_update>
    sha256_update(&ctx, args, sizeof(args));
 800338c:	2207      	movs	r2, #7
 800338e:	a904      	add	r1, sp, #16
 8003390:	a825      	add	r0, sp, #148	; 0x94
 8003392:	f002 f87d 	bl	8005490 <sha256_update>
    sha256_update(&ctx, zeros, sizeof(zeros));
 8003396:	2219      	movs	r2, #25
 8003398:	a906      	add	r1, sp, #24
 800339a:	a825      	add	r0, sp, #148	; 0x94
 800339c:	f002 f878 	bl	8005490 <sha256_update>
    sha256_update(&ctx, data, 32);
 80033a0:	2220      	movs	r2, #32
 80033a2:	4631      	mov	r1, r6
 80033a4:	a825      	add	r0, sp, #148	; 0x94
 80033a6:	f002 f873 	bl	8005490 <sha256_update>

    sha256_final(&ctx, &body[32]);
 80033aa:	a91d      	add	r1, sp, #116	; 0x74
 80033ac:	a825      	add	r0, sp, #148	; 0x94
 80033ae:	f002 f8b5 	bl	800551c <sha256_final>

    ae_send_n(OP_Write, p1, (p2_msb << 8) | p2_lsb, body, sizeof(body));
 80033b2:	2140      	movs	r1, #64	; 0x40
 80033b4:	ea44 2205 	orr.w	r2, r4, r5, lsl #8
 80033b8:	b292      	uxth	r2, r2
 80033ba:	9100      	str	r1, [sp, #0]
 80033bc:	ab15      	add	r3, sp, #84	; 0x54
 80033be:	4641      	mov	r1, r8
 80033c0:	4638      	mov	r0, r7
 80033c2:	f7ff fb89 	bl	8002ad8 <ae_send_n>

    return ae_read1();
 80033c6:	f7ff fb31 	bl	8002a2c <ae_read1>
}
 80033ca:	b038      	add	sp, #224	; 0xe0
 80033cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033d0 <ae_encrypted_write>:
// ae_encrypted_write()
//
    int
ae_encrypted_write(int data_slot, int write_kn, const uint8_t write_key[32],
                        const uint8_t *data, int len)
{
 80033d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d4:	b08a      	sub	sp, #40	; 0x28
    ASSERT(data_slot >= 0);
    ASSERT(data_slot <= 15);
 80033d6:	280f      	cmp	r0, #15
{
 80033d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80033da:	4606      	mov	r6, r0
 80033dc:	460f      	mov	r7, r1
 80033de:	4690      	mov	r8, r2
 80033e0:	4699      	mov	r9, r3
    ASSERT(data_slot <= 15);
 80033e2:	d902      	bls.n	80033ea <ae_encrypted_write+0x1a>
    ASSERT(data_slot >= 0);
 80033e4:	4814      	ldr	r0, [pc, #80]	; (8003438 <ae_encrypted_write+0x68>)
 80033e6:	f7fd fb2f 	bl	8000a48 <fatal_error>

    for(int blk=0; blk<3 && len>0; blk++, len-=32) {
 80033ea:	2400      	movs	r4, #0
        int here = MIN(32, len);

        // be nice and don't read past end of input buffer
        uint8_t     tmp[32] = { 0 };
 80033ec:	46a2      	mov	sl, r4
    for(int blk=0; blk<3 && len>0; blk++, len-=32) {
 80033ee:	2d00      	cmp	r5, #0
 80033f0:	dd1d      	ble.n	800342e <ae_encrypted_write+0x5e>
        uint8_t     tmp[32] = { 0 };
 80033f2:	221c      	movs	r2, #28
 80033f4:	2100      	movs	r1, #0
 80033f6:	a803      	add	r0, sp, #12
 80033f8:	f8cd a008 	str.w	sl, [sp, #8]
 80033fc:	f00a f912 	bl	800d624 <memset>
        memcpy(tmp, data+(32*blk), here);
 8003400:	ab02      	add	r3, sp, #8
 8003402:	2d20      	cmp	r5, #32
 8003404:	462a      	mov	r2, r5
 8003406:	eb09 1144 	add.w	r1, r9, r4, lsl #5
 800340a:	bfa8      	it	ge
 800340c:	2220      	movge	r2, #32
 800340e:	4618      	mov	r0, r3
 8003410:	f00a f8e0 	bl	800d5d4 <memcpy>

        int rv = ae_encrypted_write32(data_slot, blk, write_kn, write_key, tmp);
 8003414:	4643      	mov	r3, r8
 8003416:	9000      	str	r0, [sp, #0]
 8003418:	463a      	mov	r2, r7
 800341a:	4621      	mov	r1, r4
 800341c:	4630      	mov	r0, r6
 800341e:	f7ff ff71 	bl	8003304 <ae_encrypted_write32>
        RET_IF_BAD(rv);
 8003422:	b928      	cbnz	r0, 8003430 <ae_encrypted_write+0x60>
    for(int blk=0; blk<3 && len>0; blk++, len-=32) {
 8003424:	3401      	adds	r4, #1
 8003426:	2c03      	cmp	r4, #3
 8003428:	f1a5 0520 	sub.w	r5, r5, #32
 800342c:	d1df      	bne.n	80033ee <ae_encrypted_write+0x1e>
    }

    return 0;
 800342e:	2000      	movs	r0, #0
}
 8003430:	b00a      	add	sp, #40	; 0x28
 8003432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003436:	bf00      	nop
 8003438:	0800e390 	.word	0x0800e390

0800343c <ae_read_data_slot>:

// ae_read_data_slot()
//
    int
ae_read_data_slot(int slot_num, uint8_t *data, int len)
{
 800343c:	b570      	push	{r4, r5, r6, lr}
    ASSERT((len == 4) || (len == 32) || (len == 72));
 800343e:	2a04      	cmp	r2, #4
{
 8003440:	b088      	sub	sp, #32
 8003442:	460d      	mov	r5, r1
 8003444:	4616      	mov	r6, r2
    ASSERT((len == 4) || (len == 32) || (len == 72));
 8003446:	d006      	beq.n	8003456 <ae_read_data_slot+0x1a>
 8003448:	2a20      	cmp	r2, #32
 800344a:	d038      	beq.n	80034be <ae_read_data_slot+0x82>
 800344c:	2a48      	cmp	r2, #72	; 0x48
 800344e:	d036      	beq.n	80034be <ae_read_data_slot+0x82>
 8003450:	481c      	ldr	r0, [pc, #112]	; (80034c4 <ae_read_data_slot+0x88>)
 8003452:	f7fd faf9 	bl	8000a48 <fatal_error>

    // zone => data
    // only reading first block of 32 bytes. ignore the rest
    ae_send(OP_Read, (len == 4 ? 0x00 : 0x80) | 2, (slot_num<<3));
 8003456:	2102      	movs	r1, #2
 8003458:	00c4      	lsls	r4, r0, #3
 800345a:	b2a2      	uxth	r2, r4
 800345c:	2002      	movs	r0, #2
 800345e:	f7ff fb6e 	bl	8002b3e <ae_send>

    int rv = ae_read_n((len == 4) ? 4 : 32, data);
 8003462:	2e04      	cmp	r6, #4
 8003464:	4629      	mov	r1, r5
 8003466:	bf0c      	ite	eq
 8003468:	2004      	moveq	r0, #4
 800346a:	2020      	movne	r0, #32
 800346c:	f7ff fafa 	bl	8002a64 <ae_read_n>
    RET_IF_BAD(rv);
 8003470:	4603      	mov	r3, r0
 8003472:	bb08      	cbnz	r0, 80034b8 <ae_read_data_slot+0x7c>

    if(len == 72) {
 8003474:	2e48      	cmp	r6, #72	; 0x48
 8003476:	d11f      	bne.n	80034b8 <ae_read_data_slot+0x7c>
        // read second block
        ae_send(OP_Read, 0x82, (1<<8) | (slot_num<<3));
 8003478:	b224      	sxth	r4, r4
 800347a:	f444 7280 	orr.w	r2, r4, #256	; 0x100
 800347e:	b292      	uxth	r2, r2
 8003480:	2182      	movs	r1, #130	; 0x82
 8003482:	2002      	movs	r0, #2
 8003484:	f7ff fb5b 	bl	8002b3e <ae_send>

        int rv = ae_read_n(32, data+32);
 8003488:	f105 0120 	add.w	r1, r5, #32
 800348c:	2020      	movs	r0, #32
 800348e:	f7ff fae9 	bl	8002a64 <ae_read_n>
        RET_IF_BAD(rv);
 8003492:	4603      	mov	r3, r0
 8003494:	b980      	cbnz	r0, 80034b8 <ae_read_data_slot+0x7c>

        // read third block, but only using part of it
        uint8_t     tmp[32];
        ae_send(OP_Read, 0x82, (2<<8) | (slot_num<<3));
 8003496:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800349a:	b2a2      	uxth	r2, r4
 800349c:	2182      	movs	r1, #130	; 0x82
 800349e:	2002      	movs	r0, #2
 80034a0:	f7ff fb4d 	bl	8002b3e <ae_send>

        rv = ae_read_n(32, tmp);
 80034a4:	4669      	mov	r1, sp
 80034a6:	2020      	movs	r0, #32
 80034a8:	f7ff fadc 	bl	8002a64 <ae_read_n>
        RET_IF_BAD(rv);
 80034ac:	4603      	mov	r3, r0
 80034ae:	b918      	cbnz	r0, 80034b8 <ae_read_data_slot+0x7c>

        memcpy(data+64, tmp, 72-64);
 80034b0:	466a      	mov	r2, sp
 80034b2:	ca03      	ldmia	r2!, {r0, r1}
 80034b4:	6428      	str	r0, [r5, #64]	; 0x40
 80034b6:	6469      	str	r1, [r5, #68]	; 0x44
    }

    return 0;
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	b008      	add	sp, #32
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
    ae_send(OP_Read, (len == 4 ? 0x00 : 0x80) | 2, (slot_num<<3));
 80034be:	2182      	movs	r1, #130	; 0x82
 80034c0:	e7ca      	b.n	8003458 <ae_read_data_slot+0x1c>
 80034c2:	bf00      	nop
 80034c4:	0800e390 	.word	0x0800e390

080034c8 <ae_set_gpio>:

// ae_set_gpio()
//
    int
ae_set_gpio(int state)
{
 80034c8:	b513      	push	{r0, r1, r4, lr}
    // 1=turn on green, 0=red light (if not yet configured to be secure)
    ae_send(OP_Info, 3, 2 | (!!state));
 80034ca:	1e04      	subs	r4, r0, #0
 80034cc:	bf14      	ite	ne
 80034ce:	2203      	movne	r2, #3
 80034d0:	2202      	moveq	r2, #2
 80034d2:	2103      	movs	r1, #3
 80034d4:	2030      	movs	r0, #48	; 0x30
 80034d6:	f7ff fb32 	bl	8002b3e <ae_send>

    // "Always return the current state in the first byte followed by three bytes of 0x00"
    // - simple 1/0, in LSB.
    uint8_t resp[4];

    int rv = ae_read_n(4, resp);
 80034da:	a901      	add	r1, sp, #4
 80034dc:	2004      	movs	r0, #4
 80034de:	f7ff fac1 	bl	8002a64 <ae_read_n>
	RET_IF_BAD(rv);
 80034e2:	b928      	cbnz	r0, 80034f0 <ae_set_gpio+0x28>

    return (resp[0] != state) ? -1 : 0;
 80034e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80034e8:	1b00      	subs	r0, r0, r4
 80034ea:	bf18      	it	ne
 80034ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
}
 80034f0:	b002      	add	sp, #8
 80034f2:	bd10      	pop	{r4, pc}

080034f4 <ae_set_gpio_secure>:
//
// Set the GPIO using secure hash generated somehow already.
//
    int
ae_set_gpio_secure(uint8_t digest[32])
{
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	4605      	mov	r5, r0
    ae_pair_unlock();
 80034f8:	f7ff fc5a 	bl	8002db0 <ae_pair_unlock>
    ae_checkmac(KEYNUM_firmware, digest);
 80034fc:	4629      	mov	r1, r5
 80034fe:	200e      	movs	r0, #14
 8003500:	f7ff fbd4 	bl	8002cac <ae_checkmac>

    int rv = ae_set_gpio(1);
 8003504:	2001      	movs	r0, #1
 8003506:	f7ff ffdf 	bl	80034c8 <ae_set_gpio>

    if(rv == 0) {
 800350a:	4604      	mov	r4, r0
 800350c:	b940      	cbnz	r0, 8003520 <ae_set_gpio_secure+0x2c>
        // trust that readback, and so do a verify that the chip has 
        // the digest we think it does. If MitM wanted to turn off the output,
        // they can do that anytime regardless. We just don't want them to be
        // able to fake it being set, and therefore bypass the
        // "unsigned firmware" delay and warning.
        ae_pair_unlock();
 800350e:	f7ff fc4f 	bl	8002db0 <ae_pair_unlock>

        if(ae_checkmac_hard(KEYNUM_firmware, digest) != 0) {
 8003512:	4629      	mov	r1, r5
 8003514:	200e      	movs	r0, #14
 8003516:	f7ff fdd9 	bl	80030cc <ae_checkmac_hard>
 800351a:	b108      	cbz	r0, 8003520 <ae_set_gpio_secure+0x2c>
            fatal_mitm();
 800351c:	f7fd fa9e 	bl	8000a5c <fatal_mitm>
        }
    }

    return rv;
}
 8003520:	4620      	mov	r0, r4
 8003522:	bd38      	pop	{r3, r4, r5, pc}

08003524 <ae_get_gpio>:
//
// IMPORTANT: do not trust this result, could be MitM'ed.
//
	uint8_t
ae_get_gpio(void)
{
 8003524:	b507      	push	{r0, r1, r2, lr}
	// not doing error checking here
	ae_send(OP_Info, 0x3, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2103      	movs	r1, #3
 800352a:	2030      	movs	r0, #48	; 0x30
 800352c:	f7ff fb07 	bl	8002b3e <ae_send>

	// note: always returns 4 bytes, but most are garbage and unused.
	uint8_t tmp[4];
	ae_read_n(4, tmp);
 8003530:	a901      	add	r1, sp, #4
 8003532:	2004      	movs	r0, #4
 8003534:	f7ff fa96 	bl	8002a64 <ae_read_n>

	return tmp[0];
}
 8003538:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800353c:	b003      	add	sp, #12
 800353e:	f85d fb04 	ldr.w	pc, [sp], #4

08003542 <ae_read_config_word>:
//
// Read a 4-byte area from config area, or -1 if fail.
//
    int
ae_read_config_word(int offset, uint8_t *dest)
{
 8003542:	b510      	push	{r4, lr}
    offset &= 0x7f;

    // read 32 bits (aligned)
    ae_send(OP_Read, 0x00, offset/4);
 8003544:	f3c0 0284 	ubfx	r2, r0, #2, #5
{
 8003548:	460c      	mov	r4, r1
    ae_send(OP_Read, 0x00, offset/4);
 800354a:	2002      	movs	r0, #2
 800354c:	2100      	movs	r1, #0
 800354e:	f7ff faf6 	bl	8002b3e <ae_send>

	int rv = ae_read_n(4, dest);
 8003552:	4621      	mov	r1, r4
 8003554:	2004      	movs	r0, #4
 8003556:	f7ff fa85 	bl	8002a64 <ae_read_n>
    if(rv) return -1;
 800355a:	3800      	subs	r0, #0
 800355c:	bf18      	it	ne
 800355e:	2001      	movne	r0, #1

    return 0;
}
 8003560:	4240      	negs	r0, r0
 8003562:	bd10      	pop	{r4, pc}

08003564 <ae_read_config_byte>:
{
 8003564:	b513      	push	{r0, r1, r4, lr}
 8003566:	4604      	mov	r4, r0
    ae_read_config_word(offset, tmp);
 8003568:	a901      	add	r1, sp, #4
 800356a:	f7ff ffea 	bl	8003542 <ae_read_config_word>
	return tmp[offset % 4];
 800356e:	4263      	negs	r3, r4
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	f004 0403 	and.w	r4, r4, #3
 8003578:	bf58      	it	pl
 800357a:	425c      	negpl	r4, r3
 800357c:	f104 0308 	add.w	r3, r4, #8
 8003580:	eb0d 0403 	add.w	r4, sp, r3
}
 8003584:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8003588:	b002      	add	sp, #8
 800358a:	bd10      	pop	{r4, pc}

0800358c <ae_destroy_key>:

// ae_destroy_key()
//
    int
ae_destroy_key(int keynum)
{
 800358c:	b510      	push	{r4, lr}
 800358e:	b090      	sub	sp, #64	; 0x40
	uint8_t numin[20];

	// Load tempkey with a known (random) nonce value
	rng_buffer(numin, sizeof(numin));
 8003590:	2114      	movs	r1, #20
{
 8003592:	4604      	mov	r4, r0
	rng_buffer(numin, sizeof(numin));
 8003594:	a803      	add	r0, sp, #12
 8003596:	f7ff f8db 	bl	8002750 <rng_buffer>
    ae_send_n(OP_Nonce, 0, 0, numin, 20);
 800359a:	2314      	movs	r3, #20
 800359c:	2200      	movs	r2, #0
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4611      	mov	r1, r2
 80035a2:	2016      	movs	r0, #22
 80035a4:	ab03      	add	r3, sp, #12
 80035a6:	f7ff fa97 	bl	8002ad8 <ae_send_n>

	// Nonce command returns the RNG result, not contents of TempKey,
    // but since we are destroying, no need to calculate what it is.
	uint8_t randout[32];
	int rv = ae_read_n(32, randout);
 80035aa:	a908      	add	r1, sp, #32
 80035ac:	2020      	movs	r0, #32
 80035ae:	f7ff fa59 	bl	8002a64 <ae_read_n>
	RET_IF_BAD(rv);
 80035b2:	b930      	cbnz	r0, 80035c2 <ae_destroy_key+0x36>

    // do a "DeriveKey" operation, based on that!
	ae_send(OP_DeriveKey, 0x00, keynum);
 80035b4:	4601      	mov	r1, r0
 80035b6:	b2a2      	uxth	r2, r4
 80035b8:	201c      	movs	r0, #28
 80035ba:	f7ff fac0 	bl	8002b3e <ae_send>

    return ae_read1();
 80035be:	f7ff fa35 	bl	8002a2c <ae_read1>
}
 80035c2:	b010      	add	sp, #64	; 0x40
 80035c4:	bd10      	pop	{r4, pc}

080035c6 <ae_config_read>:

// ae_config_read()
//
    int 
ae_config_read(uint8_t config[128])
{
 80035c6:	b538      	push	{r3, r4, r5, lr}
 80035c8:	4605      	mov	r5, r0
    for(int blk=0; blk<4; blk++) {
 80035ca:	2400      	movs	r4, #0
        // read 32 bytes (aligned) from config "zone"
        ae_send(OP_Read, 0x80, blk<<3);
 80035cc:	00e2      	lsls	r2, r4, #3
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	2002      	movs	r0, #2
 80035d2:	b292      	uxth	r2, r2
 80035d4:	f7ff fab3 	bl	8002b3e <ae_send>

        int rv = ae_read_n(32, &config[32*blk]);
 80035d8:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80035dc:	2020      	movs	r0, #32
 80035de:	f7ff fa41 	bl	8002a64 <ae_read_n>
        if(rv) return EIO;
 80035e2:	b918      	cbnz	r0, 80035ec <ae_config_read+0x26>
    for(int blk=0; blk<4; blk++) {
 80035e4:	3401      	adds	r4, #1
 80035e6:	2c04      	cmp	r4, #4
 80035e8:	d1f0      	bne.n	80035cc <ae_config_read+0x6>
    }

    return 0;
}
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
        if(rv) return EIO;
 80035ec:	2005      	movs	r0, #5
 80035ee:	e7fc      	b.n	80035ea <ae_config_read+0x24>

080035f0 <ae_setup_config>:
// us to write the (existing) pairing secret into, they would see the pairing
// secret in cleartext. They could then restore original chip and access freely.
//
    int
ae_setup_config(void)
{
 80035f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f2:	2405      	movs	r4, #5
 80035f4:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
    // Need to wake up AE, since many things happen before this point.
    for(int retry=0; retry<5; retry++) {
        if(!ae_probe()) break;
 80035f8:	f7ff fc6c 	bl	8002ed4 <ae_probe>
 80035fc:	b108      	cbz	r0, 8003602 <ae_setup_config+0x12>
    for(int retry=0; retry<5; retry++) {
 80035fe:	3c01      	subs	r4, #1
 8003600:	d1fa      	bne.n	80035f8 <ae_setup_config+0x8>
    // Is data zone is locked?
    // Allow rest of function to happen if it's not.

#if 1
    //  0x55 = unlocked; 0x00 = locked
    bool data_locked = (ae_read_config_byte(86) != 0x55);
 8003602:	2056      	movs	r0, #86	; 0x56
 8003604:	f7ff ffae 	bl	8003564 <ae_read_config_byte>
    if(data_locked) return 0;       // basically success
 8003608:	2855      	cmp	r0, #85	; 0x55
 800360a:	f040 80df 	bne.w	80037cc <ae_setup_config+0x1dc>

    // To lock, we need a CRC over whole thing, but we
    // only set a few values... plus the serial number is
    // in there, so start with some readout.
    uint8_t config[128];
    int rv = ae_config_read(config);
 800360e:	a838      	add	r0, sp, #224	; 0xe0
 8003610:	f7ff ffd9 	bl	80035c6 <ae_config_read>
    if(rv) return rv;
 8003614:	4604      	mov	r4, r0
 8003616:	2800      	cmp	r0, #0
 8003618:	f040 80d9 	bne.w	80037ce <ae_setup_config+0x1de>
    uint8_t config[128];
    while(ae_config_read(config)) ;
#endif

    // verify some fixed values
    ASSERT(config[0] == 0x01);
 800361c:	f89d 30e0 	ldrb.w	r3, [sp, #224]	; 0xe0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d002      	beq.n	800362a <ae_setup_config+0x3a>
 8003624:	486f      	ldr	r0, [pc, #444]	; (80037e4 <ae_setup_config+0x1f4>)

        ae_keep_alive();

        // lock config zone
        if(ae_lock_config_zone(config)) {
            INCONSISTENT("conf lock");
 8003626:	f7fd fa0f 	bl	8000a48 <fatal_error>
    ASSERT(config[1] == 0x23);
 800362a:	f89d 30e1 	ldrb.w	r3, [sp, #225]	; 0xe1
 800362e:	2b23      	cmp	r3, #35	; 0x23
 8003630:	d1f8      	bne.n	8003624 <ae_setup_config+0x34>
    ASSERT(config[12] == 0xee);
 8003632:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8003636:	2bee      	cmp	r3, #238	; 0xee
 8003638:	d1f4      	bne.n	8003624 <ae_setup_config+0x34>
    int8_t partno = ((config[6]>>4)&0xf);
 800363a:	f89d 30e6 	ldrb.w	r3, [sp, #230]	; 0xe6
    ASSERT(partno == 6);
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	2b06      	cmp	r3, #6
 8003642:	d1ef      	bne.n	8003624 <ae_setup_config+0x34>
	memcpy(serial, &config[0], 4);
 8003644:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8003646:	9303      	str	r3, [sp, #12]
	memcpy(&serial[4], &config[8], 5);
 8003648:	ab3a      	add	r3, sp, #232	; 0xe8
 800364a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800364e:	9004      	str	r0, [sp, #16]
 8003650:	f88d 1014 	strb.w	r1, [sp, #20]
    if(check_all_ones(rom_secrets->ae_serial_number, 9)) {
 8003654:	4864      	ldr	r0, [pc, #400]	; (80037e8 <ae_setup_config+0x1f8>)
 8003656:	2109      	movs	r1, #9
 8003658:	f7ff f812 	bl	8002680 <check_all_ones>
 800365c:	b110      	cbz	r0, 8003664 <ae_setup_config+0x74>
        flash_save_ae_serial(serial);
 800365e:	a803      	add	r0, sp, #12
 8003660:	f7fe fd66 	bl	8002130 <flash_save_ae_serial>
    if(!check_equal(rom_secrets->ae_serial_number, serial, 9)) {
 8003664:	4860      	ldr	r0, [pc, #384]	; (80037e8 <ae_setup_config+0x1f8>)
 8003666:	2209      	movs	r2, #9
 8003668:	a903      	add	r1, sp, #12
 800366a:	f7ff f822 	bl	80026b2 <check_equal>
 800366e:	2800      	cmp	r0, #0
 8003670:	f000 80b6 	beq.w	80037e0 <ae_setup_config+0x1f0>
    if(config[87] == 0x55) {
 8003674:	f89d 3137 	ldrb.w	r3, [sp, #311]	; 0x137
 8003678:	2b55      	cmp	r3, #85	; 0x55
 800367a:	d12b      	bne.n	80036d4 <ae_setup_config+0xe4>
        memcpy(&config[16], config_1, sizeof(config_1));
 800367c:	495b      	ldr	r1, [pc, #364]	; (80037ec <ae_setup_config+0x1fc>)
 800367e:	2244      	movs	r2, #68	; 0x44
 8003680:	a83c      	add	r0, sp, #240	; 0xf0
 8003682:	f009 ffa7 	bl	800d5d4 <memcpy>
        memcpy(&config[90], config_2, sizeof(config_2));
 8003686:	4b5a      	ldr	r3, [pc, #360]	; (80037f0 <ae_setup_config+0x200>)
 8003688:	f50d 729d 	add.w	r2, sp, #314	; 0x13a
 800368c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003690:	f853 0b04 	ldr.w	r0, [r3], #4
 8003694:	f842 0b04 	str.w	r0, [r2], #4
 8003698:	428b      	cmp	r3, r1
 800369a:	d1f9      	bne.n	8003690 <ae_setup_config+0xa0>
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	8013      	strh	r3, [r2, #0]
    for(int n=16; n<128; n+= 4) {
 80036a0:	2510      	movs	r5, #16
        ae_send_n(OP_Write, 0, n/4, &config[n], 4);
 80036a2:	2604      	movs	r6, #4
        if(n == 84) continue;       // that word not writable
 80036a4:	2d54      	cmp	r5, #84	; 0x54
 80036a6:	d130      	bne.n	800370a <ae_setup_config+0x11a>
    for(int n=16; n<128; n+= 4) {
 80036a8:	3504      	adds	r5, #4
 80036aa:	2d80      	cmp	r5, #128	; 0x80
 80036ac:	d1fa      	bne.n	80036a4 <ae_setup_config+0xb4>
	ae_send_idle();
 80036ae:	f7ff f90a 	bl	80028c6 <ae_send_idle>
    uint8_t crc[2] = {0, 0};
 80036b2:	2600      	movs	r6, #0
    crc16_chain(128, config, crc);
 80036b4:	aa58      	add	r2, sp, #352	; 0x160
 80036b6:	a938      	add	r1, sp, #224	; 0xe0
 80036b8:	4628      	mov	r0, r5
    uint8_t crc[2] = {0, 0};
 80036ba:	f8ad 6160 	strh.w	r6, [sp, #352]	; 0x160
    crc16_chain(128, config, crc);
 80036be:	f7ff f8b5 	bl	800282c <crc16_chain>
    ae_send(OP_Lock, 0x0, (crc[1]<<8) | crc[0]);
 80036c2:	f8bd 2160 	ldrh.w	r2, [sp, #352]	; 0x160
 80036c6:	4631      	mov	r1, r6
 80036c8:	2017      	movs	r0, #23
 80036ca:	f7ff fa38 	bl	8002b3e <ae_send>
    return ae_read1();
 80036ce:	f7ff f9ad 	bl	8002a2c <ae_read1>
        if(ae_lock_config_zone(config)) {
 80036d2:	bb38      	cbnz	r0, 8003724 <ae_setup_config+0x134>
    // Load data zone with some known values.
    // The datazone still unlocked, so no encryption needed (nor possible).
    
    // will use zeros for all PIN codes, and customer-defined-secret starting values
    uint8_t     zeros[72];
    memset(zeros, 0, sizeof(zeros));
 80036d4:	2248      	movs	r2, #72	; 0x48
 80036d6:	2100      	movs	r1, #0
 80036d8:	a826      	add	r0, sp, #152	; 0x98
 80036da:	f009 ffa3 	bl	800d624 <memset>
                se2_save_auth_pubkey(pubkey);
                break;
            }

            case 0:
                if(ae_write_data_slot(kn, (const uint8_t *)copyright_msg, 32, true)) {
 80036de:	4e45      	ldr	r6, [pc, #276]	; (80037f4 <ae_setup_config+0x204>)
 80036e0:	f8bd 5138 	ldrh.w	r5, [sp, #312]	; 0x138
                if(ae_write_data_slot(kn, rom_secrets->pairing_secret, 32, false)) {
 80036e4:	4f44      	ldr	r7, [pc, #272]	; (80037f8 <ae_setup_config+0x208>)
	ae_send_idle();
 80036e6:	f7ff f8ee 	bl	80028c6 <ae_send_idle>
        if(!(unlocked & (1<<kn))) {
 80036ea:	fa45 f304 	asr.w	r3, r5, r4
 80036ee:	07db      	lsls	r3, r3, #31
 80036f0:	d55e      	bpl.n	80037b0 <ae_setup_config+0x1c0>
        switch(kn) {
 80036f2:	2c0e      	cmp	r4, #14
 80036f4:	d85c      	bhi.n	80037b0 <ae_setup_config+0x1c0>
 80036f6:	e8df f004 	tbb	[pc, r4]
 80036fa:	176e      	.short	0x176e
 80036fc:	29202920 	.word	0x29202920
 8003700:	2d304c3e 	.word	0x2d304c3e
 8003704:	2d2d2d2d 	.word	0x2d2d2d2d
 8003708:	29          	.byte	0x29
 8003709:	00          	.byte	0x00
        ae_send_n(OP_Write, 0, n/4, &config[n], 4);
 800370a:	ab38      	add	r3, sp, #224	; 0xe0
 800370c:	442b      	add	r3, r5
 800370e:	f3c5 028f 	ubfx	r2, r5, #2, #16
 8003712:	2100      	movs	r1, #0
 8003714:	2012      	movs	r0, #18
 8003716:	9600      	str	r6, [sp, #0]
 8003718:	f7ff f9de 	bl	8002ad8 <ae_send_n>
		int rv = ae_read1();
 800371c:	f7ff f986 	bl	8002a2c <ae_read1>
        if(rv) return rv;
 8003720:	2800      	cmp	r0, #0
 8003722:	d0c1      	beq.n	80036a8 <ae_setup_config+0xb8>
            INCONSISTENT("conf lock");
 8003724:	4835      	ldr	r0, [pc, #212]	; (80037fc <ae_setup_config+0x20c>)
 8003726:	e77e      	b.n	8003626 <ae_setup_config+0x36>
                if(ae_write_data_slot(kn, rom_secrets->pairing_secret, 32, false)) {
 8003728:	2300      	movs	r3, #0
 800372a:	2220      	movs	r2, #32
 800372c:	4639      	mov	r1, r7
 800372e:	2001      	movs	r0, #1
                if(ae_write_data_slot(kn, (const uint8_t *)copyright_msg, 32, true)) {
 8003730:	f7ff fbf4 	bl	8002f1c <ae_write_data_slot>
 8003734:	2800      	cmp	r0, #0
 8003736:	d03b      	beq.n	80037b0 <ae_setup_config+0x1c0>
 8003738:	e7f4      	b.n	8003724 <ae_setup_config+0x134>
                    rng_buffer(tmp, sizeof(tmp));
 800373a:	2120      	movs	r1, #32
 800373c:	a806      	add	r0, sp, #24
 800373e:	f7ff f807 	bl	8002750 <rng_buffer>
                    if(ae_write_data_slot(kn, tmp, 32, true)) {
 8003742:	2301      	movs	r3, #1
 8003744:	2220      	movs	r2, #32
 8003746:	a906      	add	r1, sp, #24
                if(ae_write_data_slot(kn, zeros, 32, false)) {
 8003748:	4620      	mov	r0, r4
 800374a:	e7f1      	b.n	8003730 <ae_setup_config+0x140>
 800374c:	2300      	movs	r3, #0
 800374e:	2220      	movs	r2, #32
 8003750:	a926      	add	r1, sp, #152	; 0x98
 8003752:	e7f9      	b.n	8003748 <ae_setup_config+0x158>
                if(ae_write_data_slot(kn, zeros, 72, false)) {
 8003754:	2300      	movs	r3, #0
 8003756:	2248      	movs	r2, #72	; 0x48
 8003758:	e7fa      	b.n	8003750 <ae_setup_config+0x160>
                uint8_t long_zeros[416] = {0};
 800375a:	2300      	movs	r3, #0
 800375c:	4619      	mov	r1, r3
 800375e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8003762:	a859      	add	r0, sp, #356	; 0x164
 8003764:	9358      	str	r3, [sp, #352]	; 0x160
 8003766:	f009 ff5d 	bl	800d624 <memset>
                if(ae_write_data_slot(kn, long_zeros, 416, false)) {
 800376a:	2300      	movs	r3, #0
 800376c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8003770:	a958      	add	r1, sp, #352	; 0x160
 8003772:	2008      	movs	r0, #8
 8003774:	e7dc      	b.n	8003730 <ae_setup_config+0x140>
                uint32_t     buf[32/4] = { 1024, 1024 };
 8003776:	2218      	movs	r2, #24
 8003778:	2100      	movs	r1, #0
 800377a:	a810      	add	r0, sp, #64	; 0x40
 800377c:	f009 ff52 	bl	800d624 <memset>
 8003780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003784:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
                if(ae_write_data_slot(KEYNUM_match_count, (const uint8_t *)buf,sizeof(buf),false)) {
 8003788:	2220      	movs	r2, #32
 800378a:	2300      	movs	r3, #0
 800378c:	a90e      	add	r1, sp, #56	; 0x38
 800378e:	2006      	movs	r0, #6
 8003790:	e7ce      	b.n	8003730 <ae_setup_config+0x140>
                if(ae_checkmac_hard(KEYNUM_main_pin, zeros) != 0) {
 8003792:	a926      	add	r1, sp, #152	; 0x98
 8003794:	2003      	movs	r0, #3
 8003796:	f7ff fc99 	bl	80030cc <ae_checkmac_hard>
 800379a:	2800      	cmp	r0, #0
 800379c:	d1c2      	bne.n	8003724 <ae_setup_config+0x134>
                if(ae_gen_ecc_key(KEYNUM_joiner_key, pubkey)) {
 800379e:	a916      	add	r1, sp, #88	; 0x58
 80037a0:	2007      	movs	r0, #7
 80037a2:	f7ff fb2b 	bl	8002dfc <ae_gen_ecc_key>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d1bc      	bne.n	8003724 <ae_setup_config+0x134>
                se2_save_auth_pubkey(pubkey);
 80037aa:	a816      	add	r0, sp, #88	; 0x58
 80037ac:	f004 f912 	bl	80079d4 <se2_save_auth_pubkey>
    for(int kn=0; kn<16; kn++) {
 80037b0:	3401      	adds	r4, #1
 80037b2:	2c10      	cmp	r4, #16
 80037b4:	d197      	bne.n	80036e6 <ae_setup_config+0xf6>
	ae_send_idle();
 80037b6:	f7ff f886 	bl	80028c6 <ae_send_idle>
    ae_send(OP_Lock, 0x81, 0x0000);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2181      	movs	r1, #129	; 0x81
 80037be:	2017      	movs	r0, #23
 80037c0:	f7ff f9bd 	bl	8002b3e <ae_send>
    return ae_read1();
 80037c4:	f7ff f932 	bl	8002a2c <ae_read1>
        }
    }

    // lock the data zone and effectively enter normal operation.
    ae_keep_alive();
    if(ae_lock_data_zone()) {
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d1ab      	bne.n	8003724 <ae_setup_config+0x134>
    if(data_locked) return 0;       // basically success
 80037cc:	2400      	movs	r4, #0
        INCONSISTENT("data lock");
    }

    return 0;
}
 80037ce:	4620      	mov	r0, r4
 80037d0:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
 80037d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(ae_write_data_slot(kn, (const uint8_t *)copyright_msg, 32, true)) {
 80037d6:	2301      	movs	r3, #1
 80037d8:	2220      	movs	r2, #32
 80037da:	4631      	mov	r1, r6
 80037dc:	2000      	movs	r0, #0
 80037de:	e7a7      	b.n	8003730 <ae_setup_config+0x140>
        return EPERM;
 80037e0:	2401      	movs	r4, #1
 80037e2:	e7f4      	b.n	80037ce <ae_setup_config+0x1de>
 80037e4:	0800e390 	.word	0x0800e390
 80037e8:	0801c040 	.word	0x0801c040
 80037ec:	0800e63a 	.word	0x0800e63a
 80037f0:	0800e67e 	.word	0x0800e67e
 80037f4:	0800e5f6 	.word	0x0800e5f6
 80037f8:	0801c000 	.word	0x0801c000
 80037fc:	0800d6b0 	.word	0x0800d6b0

08003800 <ae_stretch_iter>:
// - but our time to do each iteration is limited by software SHA256 in ae_pair_unlock
//
    int
ae_stretch_iter(const uint8_t start[32], uint8_t end[32], int iterations)
{
    ASSERT(start != end);           // we can't work inplace
 8003800:	4288      	cmp	r0, r1
{
 8003802:	b570      	push	{r4, r5, r6, lr}
 8003804:	460c      	mov	r4, r1
 8003806:	4615      	mov	r5, r2
    ASSERT(start != end);           // we can't work inplace
 8003808:	d102      	bne.n	8003810 <ae_stretch_iter+0x10>
 800380a:	4810      	ldr	r0, [pc, #64]	; (800384c <ae_stretch_iter+0x4c>)
 800380c:	f7fd f91c 	bl	8000a48 <fatal_error>
    memcpy(end, start, 32);
 8003810:	460b      	mov	r3, r1
 8003812:	f100 0220 	add.w	r2, r0, #32
 8003816:	f850 1b04 	ldr.w	r1, [r0], #4
 800381a:	f843 1b04 	str.w	r1, [r3], #4
 800381e:	4290      	cmp	r0, r2
 8003820:	d1f9      	bne.n	8003816 <ae_stretch_iter+0x16>

    for(int i=0; i<iterations; i++) {
 8003822:	2600      	movs	r6, #0
 8003824:	42ae      	cmp	r6, r5
 8003826:	db01      	blt.n	800382c <ae_stretch_iter+0x2c>

        int rv = ae_hmac32(KEYNUM_pin_stretch, end, end);
        RET_IF_BAD(rv);
    }

    return 0;
 8003828:	2000      	movs	r0, #0
}
 800382a:	bd70      	pop	{r4, r5, r6, pc}
        if(ae_pair_unlock()) return -2;
 800382c:	f7ff fac0 	bl	8002db0 <ae_pair_unlock>
 8003830:	b940      	cbnz	r0, 8003844 <ae_stretch_iter+0x44>
        int rv = ae_hmac32(KEYNUM_pin_stretch, end, end);
 8003832:	4622      	mov	r2, r4
 8003834:	4621      	mov	r1, r4
 8003836:	2002      	movs	r0, #2
 8003838:	f7ff fb02 	bl	8002e40 <ae_hmac32>
        RET_IF_BAD(rv);
 800383c:	2800      	cmp	r0, #0
 800383e:	d1f4      	bne.n	800382a <ae_stretch_iter+0x2a>
    for(int i=0; i<iterations; i++) {
 8003840:	3601      	adds	r6, #1
 8003842:	e7ef      	b.n	8003824 <ae_stretch_iter+0x24>
        if(ae_pair_unlock()) return -2;
 8003844:	f06f 0001 	mvn.w	r0, #1
 8003848:	e7ef      	b.n	800382a <ae_stretch_iter+0x2a>
 800384a:	bf00      	nop
 800384c:	0800e390 	.word	0x0800e390

08003850 <ae_mixin_key>:
// Apply HMAC using secret in chip as a HMAC key, then encrypt
// the result a little because read in clear over bus.
//
    int
ae_mixin_key(uint8_t keynum, const uint8_t start[32], uint8_t end[32])
{
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	b096      	sub	sp, #88	; 0x58
    ASSERT(start != end);           // we can't work inplace
 8003854:	4291      	cmp	r1, r2
{
 8003856:	460e      	mov	r6, r1
 8003858:	4614      	mov	r4, r2
 800385a:	f88d 0007 	strb.w	r0, [sp, #7]
    ASSERT(start != end);           // we can't work inplace
 800385e:	d102      	bne.n	8003866 <ae_mixin_key+0x16>
 8003860:	4818      	ldr	r0, [pc, #96]	; (80038c4 <ae_mixin_key+0x74>)
 8003862:	f7fd f8f1 	bl	8000a48 <fatal_error>

    if(ae_pair_unlock()) return -1;
 8003866:	f7ff faa3 	bl	8002db0 <ae_pair_unlock>
 800386a:	bb40      	cbnz	r0, 80038be <ae_mixin_key+0x6e>

    ASSERT(keynum != 0);
 800386c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003870:	2800      	cmp	r0, #0
 8003872:	d0f5      	beq.n	8003860 <ae_mixin_key+0x10>
    int rv = ae_hmac32(keynum, start, end);
 8003874:	4622      	mov	r2, r4
 8003876:	4631      	mov	r1, r6
 8003878:	f7ff fae2 	bl	8002e40 <ae_hmac32>
    RET_IF_BAD(rv);
 800387c:	4605      	mov	r5, r0
 800387e:	b9d8      	cbnz	r0, 80038b8 <ae_mixin_key+0x68>
    // use the value provided in cleartext[sic--it's not] write back shortly (to test it).
    // Solution: one more SHA256, and to be safe, mixin lots of values!

	SHA256_CTX ctx;

    sha256_init(&ctx);
 8003880:	a803      	add	r0, sp, #12
 8003882:	f001 fdf7 	bl	8005474 <sha256_init>
    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 8003886:	4910      	ldr	r1, [pc, #64]	; (80038c8 <ae_mixin_key+0x78>)
 8003888:	2220      	movs	r2, #32
 800388a:	a803      	add	r0, sp, #12
 800388c:	f001 fe00 	bl	8005490 <sha256_update>
    sha256_update(&ctx, start, 32);
 8003890:	2220      	movs	r2, #32
 8003892:	4631      	mov	r1, r6
 8003894:	a803      	add	r0, sp, #12
 8003896:	f001 fdfb 	bl	8005490 <sha256_update>
    sha256_update(&ctx, &keynum, 1);
 800389a:	2201      	movs	r2, #1
 800389c:	f10d 0107 	add.w	r1, sp, #7
 80038a0:	a803      	add	r0, sp, #12
 80038a2:	f001 fdf5 	bl	8005490 <sha256_update>
    sha256_update(&ctx, end, 32);
 80038a6:	4621      	mov	r1, r4
 80038a8:	a803      	add	r0, sp, #12
 80038aa:	2220      	movs	r2, #32
 80038ac:	f001 fdf0 	bl	8005490 <sha256_update>
    sha256_final(&ctx, end);
 80038b0:	4621      	mov	r1, r4
 80038b2:	a803      	add	r0, sp, #12
 80038b4:	f001 fe32 	bl	800551c <sha256_final>

    return 0;
}
 80038b8:	4628      	mov	r0, r5
 80038ba:	b016      	add	sp, #88	; 0x58
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
    if(ae_pair_unlock()) return -1;
 80038be:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80038c2:	e7f9      	b.n	80038b8 <ae_mixin_key+0x68>
 80038c4:	0800e390 	.word	0x0800e390
 80038c8:	0801c000 	.word	0x0801c000

080038cc <ae_brick_myself>:
// Immediately destroy the pairing secret so that we become
// a useless brick. Ignore errors but retry.
//
    void
ae_brick_myself(void)
{
 80038cc:	b510      	push	{r4, lr}
    for(int retry=0; retry<10; retry++) {
 80038ce:	2400      	movs	r4, #0
        ae_reset_chip();
 80038d0:	f7ff f86a 	bl	80029a8 <ae_reset_chip>

        if(retry) rng_delay();
 80038d4:	b10c      	cbz	r4, 80038da <ae_brick_myself+0xe>
 80038d6:	f7fe ff51 	bl	800277c <rng_delay>

        ae_pair_unlock();
 80038da:	f7ff fa69 	bl	8002db0 <ae_pair_unlock>

        // Concern: MitM could block this by trashing our write
        // - but they have to do it without causing CRC or other comm error
        // - ten times
        int rv = ae_destroy_key(KEYNUM_pairing);
 80038de:	2001      	movs	r0, #1
 80038e0:	f7ff fe54 	bl	800358c <ae_destroy_key>
        if(rv == 0) break;
 80038e4:	b120      	cbz	r0, 80038f0 <ae_brick_myself+0x24>
    for(int retry=0; retry<10; retry++) {
 80038e6:	3401      	adds	r4, #1

        rng_delay();
 80038e8:	f7fe ff48 	bl	800277c <rng_delay>
    for(int retry=0; retry<10; retry++) {
 80038ec:	2c0a      	cmp	r4, #10
 80038ee:	d1ef      	bne.n	80038d0 <ae_brick_myself+0x4>
    }

    ae_reset_chip();
}
 80038f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae_reset_chip();
 80038f4:	f7ff b858 	b.w	80029a8 <ae_reset_chip>

080038f8 <delay_ms>:
//
    void
delay_ms(int ms)
{
    // Clear the COUNTFLAG and reset value to zero
    SysTick->VAL = 0;
 80038f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
    //SysTick->CTRL;  

    // Wait for ticks to happen
    while(ms > 0) {
 8003900:	2800      	cmp	r0, #0
 8003902:	dc00      	bgt.n	8003906 <delay_ms+0xe>
        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
            ms--;
        }
    }
}
 8003904:	4770      	bx	lr
        if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	03d2      	lsls	r2, r2, #15
            ms--;
 800390a:	bf48      	it	mi
 800390c:	f100 30ff 	addmi.w	r0, r0, #4294967295	; 0xffffffff
 8003910:	e7f6      	b.n	8003900 <delay_ms+0x8>

08003912 <HAL_Delay>:
// Replace HAL version which needs interrupts
//
    void
HAL_Delay(uint32_t Delay)
{
    delay_ms(Delay);
 8003912:	f7ff bff1 	b.w	80038f8 <delay_ms>
	...

08003918 <gpio_setup>:
    // NOTES:
    // - try not to limit PCB changes for future revs; leave unused unchanged.
    // - oled_setup() uses pins on PA4 thru PA8

    // enable clock to GPIO's ... we will be using them all at some point
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <gpio_setup+0xe8>)
{
 800391a:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_GPIOE_CLK_ENABLE();

    {   // Onewire bus pins used for ATECC608 comms
        GPIO_InitTypeDef setup = {
 800391e:	4c39      	ldr	r4, [pc, #228]	; (8003a04 <gpio_setup+0xec>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	64da      	str	r2, [r3, #76]	; 0x4c
 8003926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8003928:	b08a      	sub	sp, #40	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	f002 0201 	and.w	r2, r2, #1
 800392e:	9200      	str	r2, [sp, #0]
 8003930:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003934:	f042 0202 	orr.w	r2, r2, #2
 8003938:	64da      	str	r2, [r3, #76]	; 0x4c
 800393a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800393c:	f002 0202 	and.w	r2, r2, #2
 8003940:	9201      	str	r2, [sp, #4]
 8003942:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003946:	f042 0204 	orr.w	r2, r2, #4
 800394a:	64da      	str	r2, [r3, #76]	; 0x4c
 800394c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800394e:	f002 0204 	and.w	r2, r2, #4
 8003952:	9202      	str	r2, [sp, #8]
 8003954:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003958:	f042 0208 	orr.w	r2, r2, #8
 800395c:	64da      	str	r2, [r3, #76]	; 0x4c
 800395e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003960:	f002 0208 	and.w	r2, r2, #8
 8003964:	9203      	str	r2, [sp, #12]
 8003966:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800396a:	f042 0210 	orr.w	r2, r2, #16
 800396e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	9304      	str	r3, [sp, #16]
 8003978:	9b04      	ldr	r3, [sp, #16]
        GPIO_InitTypeDef setup = {
 800397a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397c:	ad05      	add	r5, sp, #20
 800397e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	602b      	str	r3, [r5, #0]
            .Mode = GPIO_MODE_AF_OD,
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_MEDIUM,
            .Alternate = GPIO_AF8_UART4,
        };
        HAL_GPIO_Init(ONEWIRE_PORT, &setup);
 8003984:	a905      	add	r1, sp, #20
 8003986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398a:	f7fd fb41 	bl	8001010 <HAL_GPIO_Init>
    }

    // Bugfix: re-init of console port pins seems to wreck
    // the mpy uart code, so avoid after first time.
    if(USART1->BRR == 0) {
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <gpio_setup+0xf0>)
 8003990:	68de      	ldr	r6, [r3, #12]
 8003992:	b9ae      	cbnz	r6, 80039c0 <gpio_setup+0xa8>
        // debug console: USART1 = PA9=Tx & PA10=Rx
        GPIO_InitTypeDef setup = {
 8003994:	3404      	adds	r4, #4
 8003996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003998:	ad05      	add	r5, sp, #20
 800399a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	602b      	str	r3, [r5, #0]
            .Mode = GPIO_MODE_AF_PP,
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_MEDIUM,
            .Alternate = GPIO_AF7_USART1,
        };
        HAL_GPIO_Init(GPIOA, &setup);
 80039a0:	a905      	add	r1, sp, #20
 80039a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a6:	f7fd fb33 	bl	8001010 <HAL_GPIO_Init>

        setup.Pin = GPIO_PIN_10;
 80039aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
        setup.Mode = GPIO_MODE_INPUT;
 80039ae:	e9cd 3605 	strd	r3, r6, [sp, #20]
        setup.Pull = GPIO_PULLUP;
        HAL_GPIO_Init(GPIOA, &setup);
 80039b2:	a905      	add	r1, sp, #20
        setup.Pull = GPIO_PULLUP;
 80039b4:	2301      	movs	r3, #1
        HAL_GPIO_Init(GPIOA, &setup);
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        setup.Pull = GPIO_PULLUP;
 80039ba:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &setup);
 80039bc:	f7fd fb28 	bl	8001010 <HAL_GPIO_Init>
    }

    // SD active LED: PC7
    // USB active LED: PC6
    {   GPIO_InitTypeDef setup = {
 80039c0:	2400      	movs	r4, #0
 80039c2:	26c0      	movs	r6, #192	; 0xc0
 80039c4:	2501      	movs	r5, #1
            .Pin = GPIO_PIN_7 | GPIO_PIN_6,
            .Mode = GPIO_MODE_OUTPUT_PP,
            .Pull = GPIO_NOPULL,
            .Speed = GPIO_SPEED_FREQ_LOW,
        };
        HAL_GPIO_Init(GPIOC, &setup);
 80039c6:	a905      	add	r1, sp, #20
 80039c8:	4810      	ldr	r0, [pc, #64]	; (8003a0c <gpio_setup+0xf4>)
    {   GPIO_InitTypeDef setup = {
 80039ca:	9409      	str	r4, [sp, #36]	; 0x24
 80039cc:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80039d0:	e9cd 6505 	strd	r6, r5, [sp, #20]
        HAL_GPIO_Init(GPIOC, &setup);
 80039d4:	f7fd fb1c 	bl	8001010 <HAL_GPIO_Init>

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_6, 0);    // turn LEDs off
 80039d8:	4622      	mov	r2, r4
 80039da:	4631      	mov	r1, r6
 80039dc:	480b      	ldr	r0, [pc, #44]	; (8003a0c <gpio_setup+0xf4>)
 80039de:	f7fd fc91 	bl	8001304 <HAL_GPIO_WritePin>
    }

    // SD card detect switch: PC13
    {   GPIO_InitTypeDef setup = {
 80039e2:	2210      	movs	r2, #16
 80039e4:	4621      	mov	r1, r4
 80039e6:	a806      	add	r0, sp, #24
 80039e8:	f009 fe1c 	bl	800d624 <memset>
 80039ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
            .Pin = GPIO_PIN_13,
            .Mode = GPIO_MODE_INPUT,
            .Pull = GPIO_PULLUP,
            .Speed = GPIO_SPEED_FREQ_LOW,
        };
        HAL_GPIO_Init(GPIOC, &setup);
 80039f0:	4806      	ldr	r0, [pc, #24]	; (8003a0c <gpio_setup+0xf4>)
    {   GPIO_InitTypeDef setup = {
 80039f2:	9305      	str	r3, [sp, #20]
        HAL_GPIO_Init(GPIOC, &setup);
 80039f4:	a905      	add	r1, sp, #20
    {   GPIO_InitTypeDef setup = {
 80039f6:	9507      	str	r5, [sp, #28]
        HAL_GPIO_Init(GPIOC, &setup);
 80039f8:	f7fd fb0a 	bl	8001010 <HAL_GPIO_Init>

    // elsewhere...
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
#endif
}
 80039fc:	b00a      	add	sp, #40	; 0x28
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	0800e6a4 	.word	0x0800e6a4
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	48000800 	.word	0x48000800

08003a10 <reboot_nonce>:

// reboot_nonce()
//
    static inline void
reboot_nonce(SHA256_CTX *ctx)
{
 8003a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t    a = CRC->INIT;
 8003a12:	4d09      	ldr	r5, [pc, #36]	; (8003a38 <reboot_nonce+0x28>)
    sha256_update(ctx, (const uint8_t *)&a, 4);
 8003a14:	2204      	movs	r2, #4
    uint32_t    a = CRC->INIT;
 8003a16:	692b      	ldr	r3, [r5, #16]
 8003a18:	9301      	str	r3, [sp, #4]
    sha256_update(ctx, (const uint8_t *)&a, 4);
 8003a1a:	eb0d 0102 	add.w	r1, sp, r2
{
 8003a1e:	4604      	mov	r4, r0
    sha256_update(ctx, (const uint8_t *)&a, 4);
 8003a20:	f001 fd36 	bl	8005490 <sha256_update>

    a = CRC->POL;
    sha256_update(ctx, (const uint8_t *)&a, 4);
 8003a24:	2204      	movs	r2, #4
    a = CRC->POL;
 8003a26:	696b      	ldr	r3, [r5, #20]
 8003a28:	9301      	str	r3, [sp, #4]
    sha256_update(ctx, (const uint8_t *)&a, 4);
 8003a2a:	eb0d 0102 	add.w	r1, sp, r2
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f001 fd2e 	bl	8005490 <sha256_update>
}
 8003a34:	b003      	add	sp, #12
 8003a36:	bd30      	pop	{r4, r5, pc}
 8003a38:	40023000 	.word	0x40023000

08003a3c <pin_hash>:
//
// Hash up a string of digits into 32-bytes of goodness.
//
    static void
pin_hash(const char *pin, int pin_len, uint8_t result[32], uint32_t purpose)
{
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	b096      	sub	sp, #88	; 0x58
    ASSERT(pin_len <= MAX_PIN_LEN);
 8003a40:	2920      	cmp	r1, #32
{
 8003a42:	4606      	mov	r6, r0
 8003a44:	460d      	mov	r5, r1
 8003a46:	4614      	mov	r4, r2
 8003a48:	9301      	str	r3, [sp, #4]
    ASSERT(pin_len <= MAX_PIN_LEN);
 8003a4a:	dd02      	ble.n	8003a52 <pin_hash+0x16>
 8003a4c:	4817      	ldr	r0, [pc, #92]	; (8003aac <pin_hash+0x70>)
 8003a4e:	f7fc fffb 	bl	8000a48 <fatal_error>

    if(pin_len == 0) {
 8003a52:	b929      	cbnz	r1, 8003a60 <pin_hash+0x24>
        // zero-length PIN is considered the "blank" one: all zero
        memset(result, 0, 32);
 8003a54:	2220      	movs	r2, #32
 8003a56:	4620      	mov	r0, r4
 8003a58:	f009 fde4 	bl	800d624 <memset>
    // and run that thru SE2 as well
    se2_pin_hash(result, purpose);

    // and a second-sha256 on that, just in case.
    sha256_single(result, 32, result);
}
 8003a5c:	b016      	add	sp, #88	; 0x58
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
    sha256_init(&ctx);
 8003a60:	a803      	add	r0, sp, #12
 8003a62:	f001 fd07 	bl	8005474 <sha256_init>
    sha256_update(&ctx, rom_secrets->hash_cache_secret, 32);
 8003a66:	a803      	add	r0, sp, #12
 8003a68:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <pin_hash+0x74>)
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f001 fd10 	bl	8005490 <sha256_update>
    sha256_update(&ctx, (uint8_t *)&purpose, 4);
 8003a70:	2204      	movs	r2, #4
 8003a72:	eb0d 0102 	add.w	r1, sp, r2
 8003a76:	a803      	add	r0, sp, #12
 8003a78:	f001 fd0a 	bl	8005490 <sha256_update>
    sha256_update(&ctx, (uint8_t *)pin, pin_len);
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	4631      	mov	r1, r6
 8003a80:	a803      	add	r0, sp, #12
 8003a82:	f001 fd05 	bl	8005490 <sha256_update>
    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 8003a86:	2220      	movs	r2, #32
 8003a88:	a803      	add	r0, sp, #12
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <pin_hash+0x78>)
 8003a8c:	f001 fd00 	bl	8005490 <sha256_update>
    sha256_final(&ctx, result);
 8003a90:	4621      	mov	r1, r4
 8003a92:	a803      	add	r0, sp, #12
 8003a94:	f001 fd42 	bl	800551c <sha256_final>
    se2_pin_hash(result, purpose);
 8003a98:	9901      	ldr	r1, [sp, #4]
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f004 fc0a 	bl	80082b4 <se2_pin_hash>
    sha256_single(result, 32, result);
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f001 fd4d 	bl	8005544 <sha256_single>
 8003aaa:	e7d7      	b.n	8003a5c <pin_hash+0x20>
 8003aac:	0800e390 	.word	0x0800e390
 8003ab0:	0801c070 	.word	0x0801c070
 8003ab4:	0801c000 	.word	0x0801c000

08003ab8 <_hmac_attempt>:
//
// Maybe should be proper HMAC from fips std? Can be changed later.
//
    static void
_hmac_attempt(const pinAttempt_t *args, uint8_t result[32])
{
 8003ab8:	b530      	push	{r4, r5, lr}
 8003aba:	b095      	sub	sp, #84	; 0x54
 8003abc:	4604      	mov	r4, r0
	SHA256_CTX ctx;

    sha256_init(&ctx);
 8003abe:	a801      	add	r0, sp, #4
{
 8003ac0:	460d      	mov	r5, r1
    sha256_init(&ctx);
 8003ac2:	f001 fcd7 	bl	8005474 <sha256_init>
    sha256_update(&ctx, rom_secrets->pairing_secret, 32);
 8003ac6:	4911      	ldr	r1, [pc, #68]	; (8003b0c <_hmac_attempt+0x54>)
 8003ac8:	2220      	movs	r2, #32
 8003aca:	a801      	add	r0, sp, #4
 8003acc:	f001 fce0 	bl	8005490 <sha256_update>
    reboot_nonce(&ctx);
 8003ad0:	a801      	add	r0, sp, #4
 8003ad2:	f7ff ff9d 	bl	8003a10 <reboot_nonce>
    sha256_update(&ctx, (uint8_t *)args, offsetof(pinAttempt_t, hmac));
 8003ad6:	2244      	movs	r2, #68	; 0x44
 8003ad8:	4621      	mov	r1, r4
 8003ada:	a801      	add	r0, sp, #4
 8003adc:	f001 fcd8 	bl	8005490 <sha256_update>

    if(args->magic_value == PA_MAGIC_V2) {
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <_hmac_attempt+0x58>)
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d105      	bne.n	8003af4 <_hmac_attempt+0x3c>
        sha256_update(&ctx, (uint8_t *)args->cached_main_pin,
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8003aee:	a801      	add	r0, sp, #4
 8003af0:	f001 fcce 	bl	8005490 <sha256_update>
                                msizeof(pinAttempt_t, cached_main_pin));
    }

    sha256_final(&ctx, result);
 8003af4:	4629      	mov	r1, r5
 8003af6:	a801      	add	r0, sp, #4
 8003af8:	f001 fd10 	bl	800551c <sha256_final>

    // and a second-sha256 on that, just in case.
    sha256_single(result, 32, result);
 8003afc:	462a      	mov	r2, r5
 8003afe:	2120      	movs	r1, #32
 8003b00:	4628      	mov	r0, r5
 8003b02:	f001 fd1f 	bl	8005544 <sha256_single>
}
 8003b06:	b015      	add	sp, #84	; 0x54
 8003b08:	bd30      	pop	{r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	0801c000 	.word	0x0801c000
 8003b10:	2eaf6312 	.word	0x2eaf6312

08003b14 <_validate_attempt>:

// _validate_attempt()
//
    static int
_validate_attempt(const pinAttempt_t *args, bool first_time)
{
 8003b14:	b510      	push	{r4, lr}
 8003b16:	4604      	mov	r4, r0
 8003b18:	b088      	sub	sp, #32
    if(first_time) {
 8003b1a:	b969      	cbnz	r1, 8003b38 <_validate_attempt+0x24>
        // no hmac needed for setup call
    } else {
        // if hmac is defined, better be right.
        uint8_t     actual[32];

        _hmac_attempt(args, actual);
 8003b1c:	4669      	mov	r1, sp
 8003b1e:	f7ff ffcb 	bl	8003ab8 <_hmac_attempt>

        if(!check_equal(actual, args->hmac, 32)) {
 8003b22:	2220      	movs	r2, #32
 8003b24:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8003b28:	4668      	mov	r0, sp
 8003b2a:	f7fe fdc2 	bl	80026b2 <check_equal>
 8003b2e:	b918      	cbnz	r0, 8003b38 <_validate_attempt+0x24>
            // hmac is wrong?
            return EPIN_HMAC_FAIL;
 8003b30:	f06f 0063 	mvn.w	r0, #99	; 0x63
    if((args->change_flags & CHANGE__MASK) != args->change_flags) return EPIN_RANGE_ERR;

    if((args->is_secondary & 0x1) != args->is_secondary) return EPIN_RANGE_ERR;
        
    return 0;
}
 8003b34:	b008      	add	sp, #32
 8003b36:	bd10      	pop	{r4, pc}
    if(args->magic_value == PA_MAGIC_V2) {
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <_validate_attempt+0x68>)
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d117      	bne.n	8003b70 <_validate_attempt+0x5c>
    if(args->pin_len > MAX_PIN_LEN) return EPIN_RANGE_ERR;
 8003b40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	dc17      	bgt.n	8003b76 <_validate_attempt+0x62>
    if(args->old_pin_len > MAX_PIN_LEN) return EPIN_RANGE_ERR;
 8003b46:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	dc13      	bgt.n	8003b76 <_validate_attempt+0x62>
    if(args->new_pin_len > MAX_PIN_LEN) return EPIN_RANGE_ERR;
 8003b4e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	dc0f      	bgt.n	8003b76 <_validate_attempt+0x62>
    if((args->change_flags & CHANGE__MASK) != args->change_flags) return EPIN_RANGE_ERR;
 8003b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b58:	f640 727f 	movw	r2, #3967	; 0xf7f
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	d10a      	bne.n	8003b76 <_validate_attempt+0x62>
    if((args->is_secondary & 0x1) != args->is_secondary) return EPIN_RANGE_ERR;
 8003b60:	6863      	ldr	r3, [r4, #4]
    return 0;
 8003b62:	f033 0301 	bics.w	r3, r3, #1
 8003b66:	bf14      	ite	ne
 8003b68:	f06f 0066 	mvnne.w	r0, #102	; 0x66
 8003b6c:	2000      	moveq	r0, #0
 8003b6e:	e7e1      	b.n	8003b34 <_validate_attempt+0x20>
        return EPIN_BAD_MAGIC;
 8003b70:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8003b74:	e7de      	b.n	8003b34 <_validate_attempt+0x20>
    if((args->is_secondary & 0x1) != args->is_secondary) return EPIN_RANGE_ERR;
 8003b76:	f06f 0066 	mvn.w	r0, #102	; 0x66
 8003b7a:	e7db      	b.n	8003b34 <_validate_attempt+0x20>
 8003b7c:	2eaf6312 	.word	0x2eaf6312

08003b80 <warmup_ae>:

// warmup_ae()
//
    static int
warmup_ae(void)
{
 8003b80:	b510      	push	{r4, lr}
    ae_setup();
 8003b82:	f7fe ff1f 	bl	80029c4 <ae_setup>
 8003b86:	2405      	movs	r4, #5

    for(int retry=0; retry<5; retry++) {
        if(!ae_probe()) break;
 8003b88:	f7ff f9a4 	bl	8002ed4 <ae_probe>
 8003b8c:	b108      	cbz	r0, 8003b92 <warmup_ae+0x12>
    for(int retry=0; retry<5; retry++) {
 8003b8e:	3c01      	subs	r4, #1
 8003b90:	d1fa      	bne.n	8003b88 <warmup_ae+0x8>
    }

    if(ae_pair_unlock()) return -1;
 8003b92:	f7ff f90d 	bl	8002db0 <ae_pair_unlock>
 8003b96:	4604      	mov	r4, r0
 8003b98:	b918      	cbnz	r0, 8003ba2 <warmup_ae+0x22>

    // reset watchdog timer
    ae_keep_alive();
 8003b9a:	f7fe ff45 	bl	8002a28 <ae_keep_alive>

    return 0;
}
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	bd10      	pop	{r4, pc}
    if(ae_pair_unlock()) return -1;
 8003ba2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ba6:	e7fa      	b.n	8003b9e <warmup_ae+0x1e>

08003ba8 <_read_slot_as_counter>:
{
 8003ba8:	b530      	push	{r4, r5, lr}
 8003baa:	b091      	sub	sp, #68	; 0x44
    uint32_t padded[32/4] = { 0 };
 8003bac:	2220      	movs	r2, #32
{
 8003bae:	4604      	mov	r4, r0
 8003bb0:	460d      	mov	r5, r1
    uint32_t padded[32/4] = { 0 };
 8003bb2:	4668      	mov	r0, sp
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	f009 fd35 	bl	800d624 <memset>
    ae_pair_unlock();
 8003bba:	f7ff f8f9 	bl	8002db0 <ae_pair_unlock>
    if(ae_read_data_slot(slot, (uint8_t *)padded, 32)) return -1;
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	4669      	mov	r1, sp
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff fc3a 	bl	800343c <ae_read_data_slot>
 8003bc8:	b120      	cbz	r0, 8003bd4 <_read_slot_as_counter+0x2c>
 8003bca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8003bce:	4620      	mov	r0, r4
 8003bd0:	b011      	add	sp, #68	; 0x44
 8003bd2:	bd30      	pop	{r4, r5, pc}
    ae_pair_unlock();
 8003bd4:	f7ff f8ec 	bl	8002db0 <ae_pair_unlock>
    if(ae_gendig_slot(slot, (const uint8_t *)padded, tempkey)) return -1;
 8003bd8:	4620      	mov	r0, r4
 8003bda:	aa08      	add	r2, sp, #32
 8003bdc:	4669      	mov	r1, sp
 8003bde:	f7ff fa07 	bl	8002ff0 <ae_gendig_slot>
 8003be2:	4604      	mov	r4, r0
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d1f0      	bne.n	8003bca <_read_slot_as_counter+0x22>
    if(!ae_is_correct_tempkey(tempkey)) fatal_mitm();
 8003be8:	a808      	add	r0, sp, #32
 8003bea:	f7ff f811 	bl	8002c10 <ae_is_correct_tempkey>
 8003bee:	b908      	cbnz	r0, 8003bf4 <_read_slot_as_counter+0x4c>
 8003bf0:	f7fc ff34 	bl	8000a5c <fatal_mitm>
    *dest = padded[0];
 8003bf4:	9b00      	ldr	r3, [sp, #0]
 8003bf6:	602b      	str	r3, [r5, #0]
    return 0;
 8003bf8:	e7e9      	b.n	8003bce <_read_slot_as_counter+0x26>

08003bfa <get_last_success>:
{
 8003bfa:	b530      	push	{r4, r5, lr}
 8003bfc:	b095      	sub	sp, #84	; 0x54
 8003bfe:	4605      	mov	r5, r0
    ae_pair_unlock();
 8003c00:	f7ff f8d6 	bl	8002db0 <ae_pair_unlock>
    uint32_t padded[32/4] = { 0 };
 8003c04:	2220      	movs	r2, #32
 8003c06:	2100      	movs	r1, #0
 8003c08:	a804      	add	r0, sp, #16
 8003c0a:	f009 fd0b 	bl	800d624 <memset>
    if(ae_read_data_slot(slot, (uint8_t *)padded, 32)) return -1;
 8003c0e:	2220      	movs	r2, #32
 8003c10:	a904      	add	r1, sp, #16
 8003c12:	2005      	movs	r0, #5
 8003c14:	f7ff fc12 	bl	800343c <ae_read_data_slot>
 8003c18:	b118      	cbz	r0, 8003c22 <get_last_success+0x28>
 8003c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003c1e:	b015      	add	sp, #84	; 0x54
 8003c20:	bd30      	pop	{r4, r5, pc}
    ae_pair_unlock();
 8003c22:	f7ff f8c5 	bl	8002db0 <ae_pair_unlock>
    if(ae_gendig_slot(slot, (const uint8_t *)padded, tempkey)) return -1;
 8003c26:	aa0c      	add	r2, sp, #48	; 0x30
 8003c28:	a904      	add	r1, sp, #16
 8003c2a:	2005      	movs	r0, #5
 8003c2c:	f7ff f9e0 	bl	8002ff0 <ae_gendig_slot>
 8003c30:	4604      	mov	r4, r0
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d1f1      	bne.n	8003c1a <get_last_success+0x20>
    if(!ae_is_correct_tempkey(tempkey)) fatal_mitm();
 8003c36:	a80c      	add	r0, sp, #48	; 0x30
 8003c38:	f7fe ffea 	bl	8002c10 <ae_is_correct_tempkey>
 8003c3c:	b908      	cbnz	r0, 8003c42 <get_last_success+0x48>
 8003c3e:	f7fc ff0d 	bl	8000a5c <fatal_mitm>
    if(_read_slot_as_counter(KEYNUM_lastgood, &lastgood)) return -1;
 8003c42:	a901      	add	r1, sp, #4
 8003c44:	2005      	movs	r0, #5
    uint32_t lastgood=0, match_count=0, counter=0;
 8003c46:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003c4a:	9403      	str	r4, [sp, #12]
    if(_read_slot_as_counter(KEYNUM_lastgood, &lastgood)) return -1;
 8003c4c:	f7ff ffac 	bl	8003ba8 <_read_slot_as_counter>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d1e2      	bne.n	8003c1a <get_last_success+0x20>
    if(_read_slot_as_counter(KEYNUM_match_count, &match_count)) return -1;
 8003c54:	a902      	add	r1, sp, #8
 8003c56:	2006      	movs	r0, #6
 8003c58:	f7ff ffa6 	bl	8003ba8 <_read_slot_as_counter>
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d1db      	bne.n	8003c1a <get_last_success+0x20>
    if(ae_get_counter(&counter, 0)) return -1;
 8003c62:	a803      	add	r0, sp, #12
 8003c64:	f7ff fa9f 	bl	80031a6 <ae_get_counter>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d1d6      	bne.n	8003c1a <get_last_success+0x20>
    if(lastgood > counter) {
 8003c6c:	9a01      	ldr	r2, [sp, #4]
 8003c6e:	9903      	ldr	r1, [sp, #12]
    match_count &= ~31;
 8003c70:	9b02      	ldr	r3, [sp, #8]
    if(lastgood > counter) {
 8003c72:	428a      	cmp	r2, r1
    match_count &= ~31;
 8003c74:	f023 031f 	bic.w	r3, r3, #31
        args->num_fails = counter - lastgood;
 8003c78:	bf94      	ite	ls
 8003c7a:	1a8a      	subls	r2, r1, r2
        args->num_fails = 99;
 8003c7c:	2263      	movhi	r2, #99	; 0x63
    if(counter < match_count) {
 8003c7e:	4299      	cmp	r1, r3
        args->attempts_left = match_count - counter;
 8003c80:	bf34      	ite	cc
 8003c82:	1a5b      	subcc	r3, r3, r1
        args->attempts_left = 0;
 8003c84:	2300      	movcs	r3, #0
 8003c86:	636a      	str	r2, [r5, #52]	; 0x34
 8003c88:	63ab      	str	r3, [r5, #56]	; 0x38
 8003c8a:	e7c8      	b.n	8003c1e <get_last_success+0x24>

08003c8c <updates_for_good_login>:

// updates_for_good_login()
//
    static int
updates_for_good_login(uint8_t digest[32])
{
 8003c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8e:	b08d      	sub	sp, #52	; 0x34
    // User got the main PIN right: update the attempt counters,
    // to document this (lastgood) and also bump the match counter if needed

    uint32_t count;
    int rv = ae_get_counter(&count, 0);
 8003c90:	2100      	movs	r1, #0
{
 8003c92:	4606      	mov	r6, r0
    int rv = ae_get_counter(&count, 0);
 8003c94:	a802      	add	r0, sp, #8
 8003c96:	f7ff fa86 	bl	80031a6 <ae_get_counter>
    if(rv) goto fail;
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d13b      	bne.n	8003d18 <updates_for_good_login+0x8c>

    // Challenge: Have to update both the counter, and the target match value because
    // no other way to have exact value.

    uint32_t mc = (count + MAX_TARGET_ATTEMPTS + 32) & ~31;
 8003ca0:	9b02      	ldr	r3, [sp, #8]
 8003ca2:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8003ca6:	f024 041f 	bic.w	r4, r4, #31
    ASSERT(mc >= count);
 8003caa:	42a3      	cmp	r3, r4
 8003cac:	d902      	bls.n	8003cb4 <updates_for_good_login+0x28>
 8003cae:	481d      	ldr	r0, [pc, #116]	; (8003d24 <updates_for_good_login+0x98>)
 8003cb0:	f7fc feca 	bl	8000a48 <fatal_error>

    int bump = (mc - MAX_TARGET_ATTEMPTS) - count;
 8003cb4:	1ae3      	subs	r3, r4, r3
 8003cb6:	f1a3 050d 	sub.w	r5, r3, #13
    ASSERT(bump >= 1);
 8003cba:	3b0e      	subs	r3, #14
 8003cbc:	2b1f      	cmp	r3, #31
 8003cbe:	d8f6      	bhi.n	8003cae <updates_for_good_login+0x22>
    // Would rather update the counter first, so that a hostile interruption can't increase
    // attempts (altho the attacker knows the pin at that point?!) .. but chip won't
    // let the counter go past the match value, so that has to be first.

    // set the new "match count"
    {   uint32_t    tmp[32/4] = {mc, mc} ;
 8003cc0:	2218      	movs	r2, #24
 8003cc2:	eb0d 0002 	add.w	r0, sp, r2
        rv = ae_encrypted_write(KEYNUM_match_count, KEYNUM_main_pin, digest, (void *)tmp, 32);
 8003cc6:	2720      	movs	r7, #32
    {   uint32_t    tmp[32/4] = {mc, mc} ;
 8003cc8:	f009 fcac 	bl	800d624 <memset>
        rv = ae_encrypted_write(KEYNUM_match_count, KEYNUM_main_pin, digest, (void *)tmp, 32);
 8003ccc:	2103      	movs	r1, #3
 8003cce:	9700      	str	r7, [sp, #0]
 8003cd0:	ab04      	add	r3, sp, #16
 8003cd2:	4632      	mov	r2, r6
 8003cd4:	2006      	movs	r0, #6
    {   uint32_t    tmp[32/4] = {mc, mc} ;
 8003cd6:	e9cd 4404 	strd	r4, r4, [sp, #16]
        rv = ae_encrypted_write(KEYNUM_match_count, KEYNUM_main_pin, digest, (void *)tmp, 32);
 8003cda:	f7ff fb79 	bl	80033d0 <ae_encrypted_write>
        if(rv) goto fail;
 8003cde:	4601      	mov	r1, r0
 8003ce0:	b9d0      	cbnz	r0, 8003d18 <updates_for_good_login+0x8c>
    }

    // incr the counter a bunch to get to that-13
    uint32_t new_count = 0;
 8003ce2:	9003      	str	r0, [sp, #12]
    rv = ae_add_counter(&new_count, 0, bump);
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	a803      	add	r0, sp, #12
 8003ce8:	f7ff fa7c 	bl	80031e4 <ae_add_counter>
    if(rv) goto fail;
 8003cec:	4601      	mov	r1, r0
 8003cee:	b998      	cbnz	r0, 8003d18 <updates_for_good_login+0x8c>

    ASSERT(new_count == count + bump);
 8003cf0:	9b02      	ldr	r3, [sp, #8]
 8003cf2:	441d      	add	r5, r3
 8003cf4:	9b03      	ldr	r3, [sp, #12]
 8003cf6:	429d      	cmp	r5, r3
 8003cf8:	d1d9      	bne.n	8003cae <updates_for_good_login+0x22>
    ASSERT(mc > new_count);
 8003cfa:	42a5      	cmp	r5, r4
 8003cfc:	d2d7      	bcs.n	8003cae <updates_for_good_login+0x22>

    // Update the "last good" counter
    {   uint32_t    tmp[32/4] = {new_count, 0 };
 8003cfe:	221c      	movs	r2, #28
 8003d00:	a805      	add	r0, sp, #20
 8003d02:	f009 fc8f 	bl	800d624 <memset>
        rv = ae_encrypted_write(KEYNUM_lastgood, KEYNUM_main_pin, digest, (void *)tmp, 32);
 8003d06:	9700      	str	r7, [sp, #0]
 8003d08:	ab04      	add	r3, sp, #16
 8003d0a:	4632      	mov	r2, r6
 8003d0c:	2103      	movs	r1, #3
 8003d0e:	2005      	movs	r0, #5
    {   uint32_t    tmp[32/4] = {new_count, 0 };
 8003d10:	9504      	str	r5, [sp, #16]
        rv = ae_encrypted_write(KEYNUM_lastgood, KEYNUM_main_pin, digest, (void *)tmp, 32);
 8003d12:	f7ff fb5d 	bl	80033d0 <ae_encrypted_write>
        if(rv) goto fail;
 8003d16:	b118      	cbz	r0, 8003d20 <updates_for_good_login+0x94>
    // just be reducing attempts.

    return 0;

fail:
    ae_reset_chip();
 8003d18:	f7fe fe46 	bl	80029a8 <ae_reset_chip>
    return EPIN_AE_FAIL;
 8003d1c:	f06f 0069 	mvn.w	r0, #105	; 0x69
}
 8003d20:	b00d      	add	sp, #52	; 0x34
 8003d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d24:	0800e390 	.word	0x0800e390

08003d28 <pin_hash_attempt>:
{
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	4615      	mov	r5, r2
 8003d2c:	b089      	sub	sp, #36	; 0x24
    if(pin_len == 0) {
 8003d2e:	460c      	mov	r4, r1
 8003d30:	b931      	cbnz	r1, 8003d40 <pin_hash_attempt+0x18>
        memset(result, 0, 32);
 8003d32:	2220      	movs	r2, #32
 8003d34:	4628      	mov	r0, r5
 8003d36:	f009 fc75 	bl	800d624 <memset>
}
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	b009      	add	sp, #36	; 0x24
 8003d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pin_hash(pin, pin_len, tmp, PIN_PURPOSE_NORMAL);
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <pin_hash_attempt+0x58>)
 8003d42:	466a      	mov	r2, sp
 8003d44:	f7ff fe7a 	bl	8003a3c <pin_hash>
    int rv = ae_stretch_iter(tmp, result, KDF_ITER_PIN);
 8003d48:	2208      	movs	r2, #8
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4668      	mov	r0, sp
 8003d4e:	f7ff fd57 	bl	8003800 <ae_stretch_iter>
    if(rv) return EPIN_AE_FAIL;
 8003d52:	4604      	mov	r4, r0
 8003d54:	b988      	cbnz	r0, 8003d7a <pin_hash_attempt+0x52>
    memcpy(tmp, result, 32);
 8003d56:	462b      	mov	r3, r5
 8003d58:	466e      	mov	r6, sp
 8003d5a:	f105 0720 	add.w	r7, r5, #32
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
 8003d62:	4632      	mov	r2, r6
 8003d64:	c203      	stmia	r2!, {r0, r1}
 8003d66:	3308      	adds	r3, #8
 8003d68:	42bb      	cmp	r3, r7
 8003d6a:	4616      	mov	r6, r2
 8003d6c:	d1f7      	bne.n	8003d5e <pin_hash_attempt+0x36>
    ae_mixin_key(KEYNUM_pin_attempt, tmp, result);
 8003d6e:	462a      	mov	r2, r5
 8003d70:	4669      	mov	r1, sp
 8003d72:	2004      	movs	r0, #4
 8003d74:	f7ff fd6c 	bl	8003850 <ae_mixin_key>
    return 0;
 8003d78:	e7df      	b.n	8003d3a <pin_hash_attempt+0x12>
    if(rv) return EPIN_AE_FAIL;
 8003d7a:	f06f 0469 	mvn.w	r4, #105	; 0x69
 8003d7e:	e7dc      	b.n	8003d3a <pin_hash_attempt+0x12>
 8003d80:	334d1858 	.word	0x334d1858

08003d84 <set_is_trick.part.0>:
set_is_trick(pinAttempt_t *args, const trick_slot_t *slot)
 8003d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    args->delay_achieved = slot->tc_arg;
 8003d86:	88cb      	ldrh	r3, [r1, #6]
 8003d88:	62c3      	str	r3, [r0, #44]	; 0x2c
set_is_trick(pinAttempt_t *args, const trick_slot_t *slot)
 8003d8a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
    memcpy(key, &args->private_state, sizeof(args->private_state));
 8003d8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    memcpy(key+4, rom_secrets->hash_cache_secret+4, sizeof(rom_secrets->hash_cache_secret)-4);
 8003d90:	4d0f      	ldr	r5, [pc, #60]	; (8003dd0 <set_is_trick.part.0+0x4c>)
    memcpy(key, &args->private_state, sizeof(args->private_state));
 8003d92:	9303      	str	r3, [sp, #12]
set_is_trick(pinAttempt_t *args, const trick_slot_t *slot)
 8003d94:	4606      	mov	r6, r0
 8003d96:	460f      	mov	r7, r1
    memcpy(key+4, rom_secrets->hash_cache_secret+4, sizeof(rom_secrets->hash_cache_secret)-4);
 8003d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d9a:	ac04      	add	r4, sp, #16
 8003d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    aes_init(&ctx);
 8003da6:	a80b      	add	r0, sp, #44	; 0x2c
 8003da8:	f004 fb32 	bl	8008410 <aes_init>
    aes_add(&ctx, (uint8_t *)slot, 32);
 8003dac:	4639      	mov	r1, r7
 8003dae:	a80b      	add	r0, sp, #44	; 0x2c
 8003db0:	2220      	movs	r2, #32
 8003db2:	f004 fb33 	bl	800841c <aes_add>
    aes_done(&ctx, args->cached_main_pin, 32, key, NULL);
 8003db6:	2300      	movs	r3, #0
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	ab03      	add	r3, sp, #12
 8003dbe:	f106 01f8 	add.w	r1, r6, #248	; 0xf8
 8003dc2:	a80b      	add	r0, sp, #44	; 0x2c
 8003dc4:	f004 fb40 	bl	8008448 <aes_done>
}
 8003dc8:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	0801c074 	.word	0x0801c074

08003dd4 <pin_setup0>:
    __HAL_RCC_CRC_CLK_ENABLE();
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <pin_setup0+0x28>)
 8003dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 8003dd8:	b513      	push	{r0, r1, r4, lr}
    __HAL_RCC_CRC_CLK_ENABLE();
 8003dda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dde:	649a      	str	r2, [r3, #72]	; 0x48
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CRC->INIT = rng_sample();
 8003de2:	4c07      	ldr	r4, [pc, #28]	; (8003e00 <pin_setup0+0x2c>)
    __HAL_RCC_CRC_CLK_ENABLE();
 8003de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	9b01      	ldr	r3, [sp, #4]
    CRC->INIT = rng_sample();
 8003dec:	f7fe fc72 	bl	80026d4 <rng_sample>
 8003df0:	6120      	str	r0, [r4, #16]
    CRC->POL = rng_sample();
 8003df2:	f7fe fc6f 	bl	80026d4 <rng_sample>
 8003df6:	6160      	str	r0, [r4, #20]
}
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd10      	pop	{r4, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40023000 	.word	0x40023000

08003e04 <pin_cache_get_key>:
{
 8003e04:	b510      	push	{r4, lr}
 8003e06:	b094      	sub	sp, #80	; 0x50
 8003e08:	4604      	mov	r4, r0
    sha256_init(&ctx);
 8003e0a:	a801      	add	r0, sp, #4
 8003e0c:	f001 fb32 	bl	8005474 <sha256_init>
    reboot_nonce(&ctx);
 8003e10:	a801      	add	r0, sp, #4
 8003e12:	f7ff fdfd 	bl	8003a10 <reboot_nonce>
    sha256_update(&ctx, rom_secrets->hash_cache_secret, 32);
 8003e16:	2220      	movs	r2, #32
 8003e18:	a801      	add	r0, sp, #4
 8003e1a:	4904      	ldr	r1, [pc, #16]	; (8003e2c <pin_cache_get_key+0x28>)
 8003e1c:	f001 fb38 	bl	8005490 <sha256_update>
    sha256_final(&ctx, key);
 8003e20:	4621      	mov	r1, r4
 8003e22:	a801      	add	r0, sp, #4
 8003e24:	f001 fb7a 	bl	800551c <sha256_final>
}
 8003e28:	b014      	add	sp, #80	; 0x50
 8003e2a:	bd10      	pop	{r4, pc}
 8003e2c:	0801c070 	.word	0x0801c070

08003e30 <pin_cache_save>:
{
 8003e30:	b530      	push	{r4, r5, lr}
 8003e32:	460d      	mov	r5, r1
 8003e34:	b089      	sub	sp, #36	; 0x24
 8003e36:	4604      	mov	r4, r0
    if(!check_all_zeros(digest, 32)) {
 8003e38:	2120      	movs	r1, #32
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f7fe fc2a 	bl	8002694 <check_all_zeros>
 8003e40:	b9a0      	cbnz	r0, 8003e6c <pin_cache_save+0x3c>
        pin_cache_get_key(value);
 8003e42:	4668      	mov	r0, sp
 8003e44:	f7ff ffde 	bl	8003e04 <pin_cache_get_key>
 8003e48:	466b      	mov	r3, sp
 8003e4a:	f105 0120 	add.w	r1, r5, #32
		*(acc) ^= *(more);
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	f815 0b01 	ldrb.w	r0, [r5], #1
 8003e54:	4042      	eors	r2, r0
	for(; len; len--, more++, acc++) {
 8003e56:	428d      	cmp	r5, r1
		*(acc) ^= *(more);
 8003e58:	f803 2b01 	strb.w	r2, [r3], #1
	for(; len; len--, more++, acc++) {
 8003e5c:	d1f7      	bne.n	8003e4e <pin_cache_save+0x1e>
    ASSERT(args->magic_value == PA_MAGIC_V2);
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <pin_cache_save+0x68>)
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d008      	beq.n	8003e78 <pin_cache_save+0x48>
 8003e66:	480d      	ldr	r0, [pc, #52]	; (8003e9c <pin_cache_save+0x6c>)
 8003e68:	f7fc fdee 	bl	8000a48 <fatal_error>
        memset(value, 0, 32);
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4668      	mov	r0, sp
 8003e72:	f009 fbd7 	bl	800d624 <memset>
 8003e76:	e7f2      	b.n	8003e5e <pin_cache_save+0x2e>
    memcpy(args->cached_main_pin, value, 32);
 8003e78:	466b      	mov	r3, sp
 8003e7a:	f104 02f8 	add.w	r2, r4, #248	; 0xf8
 8003e7e:	ad08      	add	r5, sp, #32
 8003e80:	461c      	mov	r4, r3
 8003e82:	cc03      	ldmia	r4!, {r0, r1}
 8003e84:	42ac      	cmp	r4, r5
 8003e86:	6010      	str	r0, [r2, #0]
 8003e88:	6051      	str	r1, [r2, #4]
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	f102 0208 	add.w	r2, r2, #8
 8003e90:	d1f6      	bne.n	8003e80 <pin_cache_save+0x50>
}
 8003e92:	b009      	add	sp, #36	; 0x24
 8003e94:	bd30      	pop	{r4, r5, pc}
 8003e96:	bf00      	nop
 8003e98:	2eaf6312 	.word	0x2eaf6312
 8003e9c:	0800e390 	.word	0x0800e390

08003ea0 <pin_cache_restore>:
{
 8003ea0:	b510      	push	{r4, lr}
    ASSERT(args->magic_value == PA_MAGIC_V2);
 8003ea2:	6802      	ldr	r2, [r0, #0]
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <pin_cache_restore+0x58>)
 8003ea6:	429a      	cmp	r2, r3
{
 8003ea8:	b088      	sub	sp, #32
 8003eaa:	460c      	mov	r4, r1
    ASSERT(args->magic_value == PA_MAGIC_V2);
 8003eac:	d002      	beq.n	8003eb4 <pin_cache_restore+0x14>
 8003eae:	4813      	ldr	r0, [pc, #76]	; (8003efc <pin_cache_restore+0x5c>)
 8003eb0:	f7fc fdca 	bl	8000a48 <fatal_error>
    memcpy(digest, args->cached_main_pin, 32);
 8003eb4:	f100 03f8 	add.w	r3, r0, #248	; 0xf8
 8003eb8:	460a      	mov	r2, r1
 8003eba:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8003ebe:	f853 1b04 	ldr.w	r1, [r3], #4
 8003ec2:	f842 1b04 	str.w	r1, [r2], #4
 8003ec6:	4283      	cmp	r3, r0
 8003ec8:	d1f9      	bne.n	8003ebe <pin_cache_restore+0x1e>
    if(!check_all_zeros(digest, 32)) {
 8003eca:	2120      	movs	r1, #32
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7fe fbe1 	bl	8002694 <check_all_zeros>
 8003ed2:	b970      	cbnz	r0, 8003ef2 <pin_cache_restore+0x52>
        pin_cache_get_key(key);
 8003ed4:	4668      	mov	r0, sp
 8003ed6:	f7ff ff95 	bl	8003e04 <pin_cache_get_key>
 8003eda:	1e62      	subs	r2, r4, #1
 8003edc:	466b      	mov	r3, sp
 8003ede:	341f      	adds	r4, #31
		*(acc) ^= *(more);
 8003ee0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003ee4:	f813 0b01 	ldrb.w	r0, [r3], #1
	for(; len; len--, more++, acc++) {
 8003ee8:	42a2      	cmp	r2, r4
		*(acc) ^= *(more);
 8003eea:	ea81 0100 	eor.w	r1, r1, r0
 8003eee:	7011      	strb	r1, [r2, #0]
	for(; len; len--, more++, acc++) {
 8003ef0:	d1f6      	bne.n	8003ee0 <pin_cache_restore+0x40>
}
 8003ef2:	b008      	add	sp, #32
 8003ef4:	bd10      	pop	{r4, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2eaf6312 	.word	0x2eaf6312
 8003efc:	0800e390 	.word	0x0800e390

08003f00 <pin_prefix_words>:
{
 8003f00:	b530      	push	{r4, r5, lr}
 8003f02:	b091      	sub	sp, #68	; 0x44
    pin_hash(pin_prefix, prefix_len, tmp, PIN_PURPOSE_WORDS);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <pin_prefix_words+0x34>)
{
 8003f06:	4615      	mov	r5, r2
    pin_hash(pin_prefix, prefix_len, tmp, PIN_PURPOSE_WORDS);
 8003f08:	466a      	mov	r2, sp
 8003f0a:	f7ff fd97 	bl	8003a3c <pin_hash>
    ae_setup();
 8003f0e:	f7fe fd59 	bl	80029c4 <ae_setup>
    int rv = ae_stretch_iter(tmp, digest, KDF_ITER_WORDS);
 8003f12:	2206      	movs	r2, #6
 8003f14:	a908      	add	r1, sp, #32
 8003f16:	4668      	mov	r0, sp
 8003f18:	f7ff fc72 	bl	8003800 <ae_stretch_iter>
 8003f1c:	4604      	mov	r4, r0
    ae_reset_chip();
 8003f1e:	f7fe fd43 	bl	80029a8 <ae_reset_chip>
	if(rv) return -1;
 8003f22:	b924      	cbnz	r4, 8003f2e <pin_prefix_words+0x2e>
    memcpy(result, digest, 4);
 8003f24:	9b08      	ldr	r3, [sp, #32]
 8003f26:	602b      	str	r3, [r5, #0]
}
 8003f28:	4620      	mov	r0, r4
 8003f2a:	b011      	add	sp, #68	; 0x44
 8003f2c:	bd30      	pop	{r4, r5, pc}
	if(rv) return -1;
 8003f2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f32:	e7f9      	b.n	8003f28 <pin_prefix_words+0x28>
 8003f34:	2e6d6773 	.word	0x2e6d6773

08003f38 <calc_delay_required>:
}
 8003f38:	2000      	movs	r0, #0
 8003f3a:	4770      	bx	lr

08003f3c <pin_setup_attempt>:
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rv = _validate_attempt(args, true);
 8003f3e:	2101      	movs	r1, #1
{
 8003f40:	b091      	sub	sp, #68	; 0x44
 8003f42:	4605      	mov	r5, r0
    int rv = _validate_attempt(args, true);
 8003f44:	f7ff fde6 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 8003f48:	4604      	mov	r4, r0
 8003f4a:	bb28      	cbnz	r0, 8003f98 <pin_setup_attempt+0x5c>
    if(args->is_secondary) {
 8003f4c:	686b      	ldr	r3, [r5, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d158      	bne.n	8004004 <pin_setup_attempt+0xc8>
    int     pin_len = args->pin_len;
 8003f52:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    memcpy(pin_copy, args->pin, pin_len);
 8003f54:	f105 0608 	add.w	r6, r5, #8
 8003f58:	463a      	mov	r2, r7
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4668      	mov	r0, sp
 8003f5e:	f009 fb39 	bl	800d5d4 <memcpy>
    memset(args, 0, PIN_ATTEMPT_SIZE_V2);
 8003f62:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f009 fb5b 	bl	800d624 <memset>
    args->magic_value = PA_MAGIC_V2;
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <pin_setup_attempt+0xd4>)
 8003f70:	602b      	str	r3, [r5, #0]
    memcpy(args->pin, pin_copy, pin_len);
 8003f72:	463a      	mov	r2, r7
 8003f74:	4669      	mov	r1, sp
    args->pin_len = pin_len;
 8003f76:	62af      	str	r7, [r5, #40]	; 0x28
    memcpy(args->pin, pin_copy, pin_len);
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f009 fb2b 	bl	800d5d4 <memcpy>
    if(warmup_ae()) {
 8003f7e:	f7ff fdff 	bl	8003b80 <warmup_ae>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d141      	bne.n	800400a <pin_setup_attempt+0xce>
    if(get_last_success(args)) {
 8003f86:	4628      	mov	r0, r5
 8003f88:	f7ff fe37 	bl	8003bfa <get_last_success>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	b130      	cbz	r0, 8003f9e <pin_setup_attempt+0x62>
        ae_reset_chip();
 8003f90:	f7fe fd0a 	bl	80029a8 <ae_reset_chip>
        return EPIN_AE_FAIL;
 8003f94:	f06f 0469 	mvn.w	r4, #105	; 0x69
}
 8003f98:	4620      	mov	r0, r4
 8003f9a:	b011      	add	sp, #68	; 0x44
 8003f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t blank[32] = {0};
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	221c      	movs	r2, #28
    args->delay_achieved = 0;
 8003fa2:	e9c5 000b 	strd	r0, r0, [r5, #44]	; 0x2c
    uint8_t blank[32] = {0};
 8003fa6:	9008      	str	r0, [sp, #32]
 8003fa8:	a809      	add	r0, sp, #36	; 0x24
 8003faa:	f009 fb3b 	bl	800d624 <memset>
    ae_reset_chip();
 8003fae:	f7fe fcfb 	bl	80029a8 <ae_reset_chip>
    ae_pair_unlock();
 8003fb2:	f7fe fefd 	bl	8002db0 <ae_pair_unlock>
    int is_blank = (ae_checkmac_hard(keynum, blank) == 0);
 8003fb6:	a908      	add	r1, sp, #32
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f7ff f887 	bl	80030cc <ae_checkmac_hard>
 8003fbe:	4606      	mov	r6, r0
    ae_reset_chip();
 8003fc0:	f7fe fcf2 	bl	80029a8 <ae_reset_chip>
    if(pin_is_blank(KEYNUM_main_pin)) {
 8003fc4:	b9c6      	cbnz	r6, 8003ff8 <pin_setup_attempt+0xbc>
        args->state_flags |= PA_SUCCESSFUL | PA_IS_BLANK;
 8003fc6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        const uint8_t zeros[32] = {0};
 8003fc8:	9408      	str	r4, [sp, #32]
        args->state_flags |= PA_SUCCESSFUL | PA_IS_BLANK;
 8003fca:	f043 0303 	orr.w	r3, r3, #3
 8003fce:	63eb      	str	r3, [r5, #60]	; 0x3c
        const uint8_t zeros[32] = {0};
 8003fd0:	221c      	movs	r2, #28
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	a809      	add	r0, sp, #36	; 0x24
 8003fd6:	f009 fb25 	bl	800d624 <memset>
        pin_cache_save(args, zeros);
 8003fda:	a908      	add	r1, sp, #32
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f7ff ff27 	bl	8003e30 <pin_cache_save>
    args->private_state = ((rng_sample() & ~1) | is_trick_pin) ^ rom_secrets->hash_cache_secret[0];
 8003fe2:	f7fe fb77 	bl	80026d4 <rng_sample>
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <pin_setup_attempt+0xd8>)
 8003fe8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003fec:	f020 0001 	bic.w	r0, r0, #1
        args->delay_achieved = 0;
 8003ff0:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
    args->private_state = ((rng_sample() & ~1) | is_trick_pin) ^ rom_secrets->hash_cache_secret[0];
 8003ff4:	4058      	eors	r0, r3
 8003ff6:	6428      	str	r0, [r5, #64]	; 0x40
    _hmac_attempt(args, args->hmac);
 8003ff8:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f7ff fd5b 	bl	8003ab8 <_hmac_attempt>
}
 8004002:	e7c9      	b.n	8003f98 <pin_setup_attempt+0x5c>
        return EPIN_PRIMARY_ONLY;
 8004004:	f06f 0471 	mvn.w	r4, #113	; 0x71
 8004008:	e7c6      	b.n	8003f98 <pin_setup_attempt+0x5c>
        return EPIN_I_AM_BRICK;
 800400a:	f06f 0468 	mvn.w	r4, #104	; 0x68
 800400e:	e7c3      	b.n	8003f98 <pin_setup_attempt+0x5c>
 8004010:	2eaf6312 	.word	0x2eaf6312
 8004014:	0801c000 	.word	0x0801c000

08004018 <pin_delay>:
}
 8004018:	2000      	movs	r0, #0
 800401a:	4770      	bx	lr

0800401c <pin_login_attempt>:
//
// Do the PIN check, and return a value. Or fail.
//
    int
pin_login_attempt(pinAttempt_t *args)
{
 800401c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bool deltamode = false;
    char tmp_pin[32];

    int rv = _validate_attempt(args, false);
 8004020:	2100      	movs	r1, #0
{
 8004022:	b0c7      	sub	sp, #284	; 0x11c
 8004024:	4604      	mov	r4, r0
    int rv = _validate_attempt(args, false);
 8004026:	f7ff fd75 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 800402a:	4605      	mov	r5, r0
 800402c:	2800      	cmp	r0, #0
 800402e:	d16e      	bne.n	800410e <pin_login_attempt+0xf2>

    if(args->state_flags & PA_SUCCESSFUL) {
 8004030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004032:	07d9      	lsls	r1, r3, #31
 8004034:	f100 80ba 	bmi.w	80041ac <pin_login_attempt+0x190>
    }

    // Mk4: Check SE2 first to see if this is a "trick" pin.
    // - this call may have side-effects, like wiping keys, bricking, etc.
    trick_slot_t    slot;
    bool is_trick = se2_test_trick_pin(args->pin, args->pin_len, &slot, false);
 8004038:	f104 0808 	add.w	r8, r4, #8
 800403c:	4603      	mov	r3, r0
 800403e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004040:	aa26      	add	r2, sp, #152	; 0x98
 8004042:	4640      	mov	r0, r8
 8004044:	f003 fec8 	bl	8007dd8 <se2_test_trick_pin>
    
    if(is_trick) {
 8004048:	4606      	mov	r6, r0
 800404a:	2800      	cmp	r0, #0
 800404c:	d042      	beq.n	80040d4 <pin_login_attempt+0xb8>
        // They gave a trick PIN. Implement it.

        // Mark as success
        args->state_flags = PA_SUCCESSFUL;
 800404e:	2301      	movs	r3, #1
 8004050:	63e3      	str	r3, [r4, #60]	; 0x3c
        args->num_fails = 0;
        args->attempts_left = MAX_TARGET_ATTEMPTS;
 8004052:	230d      	movs	r3, #13
        args->num_fails = 0;
 8004054:	6365      	str	r5, [r4, #52]	; 0x34
        args->attempts_left = MAX_TARGET_ATTEMPTS;
 8004056:	63a3      	str	r3, [r4, #56]	; 0x38

        if(check_all_zeros(slot.xdata, 32) || (slot.tc_flags & TC_WIPE)) {
 8004058:	2120      	movs	r1, #32
 800405a:	a828      	add	r0, sp, #160	; 0xa0
 800405c:	f7fe fb1a 	bl	8002694 <check_all_zeros>
 8004060:	b918      	cbnz	r0, 800406a <pin_login_attempt+0x4e>
 8004062:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 8004066:	2b00      	cmp	r3, #0
 8004068:	da03      	bge.n	8004072 <pin_login_attempt+0x56>
            args->state_flags |= PA_ZERO_SECRET;
 800406a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800406c:	f043 0310 	orr.w	r3, r3, #16
 8004070:	63e3      	str	r3, [r4, #60]	; 0x3c
    args->private_state = ((rng_sample() & ~1) | is_trick_pin) ^ rom_secrets->hash_cache_secret[0];
 8004072:	f7fe fb2f 	bl	80026d4 <rng_sample>
 8004076:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <pin_login_attempt+0x19c>)
 8004078:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800407c:	f040 0001 	orr.w	r0, r0, #1
 8004080:	4058      	eors	r0, r3
    args->delay_required = (slot->tc_flags & ~TC_HIDDEN_MASK);
 8004082:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
    args->private_state = ((rng_sample() & ~1) | is_trick_pin) ^ rom_secrets->hash_cache_secret[0];
 8004086:	6420      	str	r0, [r4, #64]	; 0x40
    args->delay_required = (slot->tc_flags & ~TC_HIDDEN_MASK);
 8004088:	f423 4278 	bic.w	r2, r3, #63488	; 0xf800
 800408c:	6322      	str	r2, [r4, #48]	; 0x30
    if(slot->tc_flags & TC_DELTA_MODE) {
 800408e:	055a      	lsls	r2, r3, #21
 8004090:	d530      	bpl.n	80040f4 <pin_login_attempt+0xd8>
        args->delay_achieved = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	62e3      	str	r3, [r4, #44]	; 0x2c
    memcpy(tmp_pin, pin, pin_len);
 8004096:	6aa7      	ldr	r7, [r4, #40]	; 0x28
            // Thug gave wrong PIN, but we are going to let them 
            // past (by calculating correct PIN, up to 4 digits different),
            // and the mpy firmware can do tricky stuff to protect funds
            // even though the private key is known at that point.
            deltamode = true;
            apply_pin_delta(args->pin, args->pin_len, slot.tc_arg, tmp_pin);
 8004098:	f8bd 909e 	ldrh.w	r9, [sp, #158]	; 0x9e
    memcpy(tmp_pin, pin, pin_len);
 800409c:	ab04      	add	r3, sp, #16
 800409e:	463a      	mov	r2, r7
 80040a0:	4641      	mov	r1, r8
 80040a2:	4618      	mov	r0, r3
 80040a4:	f009 fa96 	bl	800d5d4 <memcpy>
    tmp_pin[pin_len] = 0;
 80040a8:	2200      	movs	r2, #0
 80040aa:	55c2      	strb	r2, [r0, r7]
    char *p = &tmp_pin[pin_len-1];
 80040ac:	1e7a      	subs	r2, r7, #1
 80040ae:	4402      	add	r2, r0
 80040b0:	2104      	movs	r1, #4
        if(*p == '-') p--;
 80040b2:	7813      	ldrb	r3, [r2, #0]
 80040b4:	2b2d      	cmp	r3, #45	; 0x2d
 80040b6:	f009 030f 	and.w	r3, r9, #15
 80040ba:	bf08      	it	eq
 80040bc:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
        if((here >= 0) && (here <= 9)) {
 80040c0:	2b09      	cmp	r3, #9
            *p = '0' + here; 
 80040c2:	bf9c      	itt	ls
 80040c4:	3330      	addls	r3, #48	; 0x30
 80040c6:	7013      	strbls	r3, [r2, #0]
    for(int i=0; i<4; i++, p--) {
 80040c8:	3901      	subs	r1, #1
        replacement >>= 4;
 80040ca:	ea4f 1919 	mov.w	r9, r9, lsr #4
    for(int i=0; i<4; i++, p--) {
 80040ce:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80040d2:	d1ee      	bne.n	80040b2 <pin_login_attempt+0x96>
        return 0;
    }

real_login:
    // unlock the AE chip
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 80040d4:	f7ff fd54 	bl	8003b80 <warmup_ae>
 80040d8:	2800      	cmp	r0, #0
 80040da:	d16a      	bne.n	80041b2 <pin_login_attempt+0x196>

    // hash up the pin now, assuming we'll use it on main PIN
    uint8_t     digest[32];
    rv = pin_hash_attempt(deltamode ? tmp_pin : args->pin, args->pin_len, digest);
 80040dc:	b10e      	cbz	r6, 80040e2 <pin_login_attempt+0xc6>
 80040de:	f10d 0810 	add.w	r8, sp, #16
 80040e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80040e4:	aa0c      	add	r2, sp, #48	; 0x30
 80040e6:	4640      	mov	r0, r8
 80040e8:	f7ff fe1e 	bl	8003d28 <pin_hash_attempt>
    if(rv) return EPIN_AE_FAIL;
 80040ec:	b198      	cbz	r0, 8004116 <pin_login_attempt+0xfa>

        rv = ae_encrypted_read(KEYNUM_secret, KEYNUM_main_pin, digest, ts, AE_SECRET_LEN);
        if(rv) {
            ae_reset_chip();

            return EPIN_AE_FAIL;
 80040ee:	f06f 0569 	mvn.w	r5, #105	; 0x69
 80040f2:	e00c      	b.n	800410e <pin_login_attempt+0xf2>
 80040f4:	a926      	add	r1, sp, #152	; 0x98
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7ff fe44 	bl	8003d84 <set_is_trick.part.0>
        if(slot.tc_flags & TC_DELTA_MODE) {
 80040fc:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8004100:	055b      	lsls	r3, r3, #21
 8004102:	d4c8      	bmi.n	8004096 <pin_login_attempt+0x7a>
    _hmac_attempt(args, args->hmac);
 8004104:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8004108:	4620      	mov	r0, r4
 800410a:	f7ff fcd5 	bl	8003ab8 <_hmac_attempt>
    }

    _sign_attempt(args);

    return 0;
}
 800410e:	4628      	mov	r0, r5
 8004110:	b047      	add	sp, #284	; 0x11c
 8004112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ae_reset_chip();
 8004116:	f7fe fc47 	bl	80029a8 <ae_reset_chip>
    ae_pair_unlock();
 800411a:	f7fe fe49 	bl	8002db0 <ae_pair_unlock>
    return (ae_checkmac_hard(KEYNUM_main_pin, digest) == 0);
 800411e:	a90c      	add	r1, sp, #48	; 0x30
 8004120:	2003      	movs	r0, #3
 8004122:	f7fe ffd3 	bl	80030cc <ae_checkmac_hard>
    if(!is_main_pin(digest)) {
 8004126:	b130      	cbz	r0, 8004136 <pin_login_attempt+0x11a>
        se2_handle_bad_pin(args->num_fails + 1);
 8004128:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800412a:	3001      	adds	r0, #1
 800412c:	f003 ff40 	bl	8007fb0 <se2_handle_bad_pin>
        return EPIN_AUTH_FAIL;
 8004130:	f06f 056f 	mvn.w	r5, #111	; 0x6f
 8004134:	e7eb      	b.n	800410e <pin_login_attempt+0xf2>
    rv = updates_for_good_login(digest);
 8004136:	a80c      	add	r0, sp, #48	; 0x30
 8004138:	f7ff fda8 	bl	8003c8c <updates_for_good_login>
    if(rv) return EPIN_AE_FAIL;
 800413c:	4607      	mov	r7, r0
 800413e:	2800      	cmp	r0, #0
 8004140:	d1d5      	bne.n	80040ee <pin_login_attempt+0xd2>
    pin_cache_save(args, digest);
 8004142:	a90c      	add	r1, sp, #48	; 0x30
 8004144:	4620      	mov	r0, r4
 8004146:	f7ff fe73 	bl	8003e30 <pin_cache_save>
    args->state_flags = PA_SUCCESSFUL;
 800414a:	2301      	movs	r3, #1
 800414c:	63e3      	str	r3, [r4, #60]	; 0x3c
    args->num_fails = 0;
 800414e:	6367      	str	r7, [r4, #52]	; 0x34
    args->attempts_left = MAX_TARGET_ATTEMPTS;
 8004150:	230d      	movs	r3, #13
        rv = ae_encrypted_read(KEYNUM_secret, KEYNUM_main_pin, digest, ts, AE_SECRET_LEN);
 8004152:	2748      	movs	r7, #72	; 0x48
    args->attempts_left = MAX_TARGET_ATTEMPTS;
 8004154:	63a3      	str	r3, [r4, #56]	; 0x38
        rv = ae_encrypted_read(KEYNUM_secret, KEYNUM_main_pin, digest, ts, AE_SECRET_LEN);
 8004156:	9700      	str	r7, [sp, #0]
 8004158:	ab14      	add	r3, sp, #80	; 0x50
 800415a:	aa0c      	add	r2, sp, #48	; 0x30
 800415c:	2103      	movs	r1, #3
 800415e:	2009      	movs	r0, #9
 8004160:	f7ff f896 	bl	8003290 <ae_encrypted_read>
        if(rv) {
 8004164:	b110      	cbz	r0, 800416c <pin_login_attempt+0x150>
            ae_reset_chip();
 8004166:	f7fe fc1f 	bl	80029a8 <ae_reset_chip>
 800416a:	e7c0      	b.n	80040ee <pin_login_attempt+0xd2>
        ae_reset_chip();
 800416c:	f7fe fc1c 	bl	80029a8 <ae_reset_chip>
        mcu_key_get(&mcu_key_valid);
 8004170:	f10d 000f 	add.w	r0, sp, #15
 8004174:	f7fe f950 	bl	8002418 <mcu_key_get>
        if(check_all_zeros(ts, AE_SECRET_LEN) || !mcu_key_valid) {
 8004178:	4639      	mov	r1, r7
 800417a:	a814      	add	r0, sp, #80	; 0x50
 800417c:	f7fe fa8a 	bl	8002694 <check_all_zeros>
 8004180:	b910      	cbnz	r0, 8004188 <pin_login_attempt+0x16c>
 8004182:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004186:	b91b      	cbnz	r3, 8004190 <pin_login_attempt+0x174>
            args->state_flags |= PA_ZERO_SECRET;
 8004188:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800418a:	f043 0310 	orr.w	r3, r3, #16
 800418e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(!deltamode) {
 8004190:	2e00      	cmp	r6, #0
 8004192:	d1b7      	bne.n	8004104 <pin_login_attempt+0xe8>
    args->private_state = ((rng_sample() & ~1) | is_trick_pin) ^ rom_secrets->hash_cache_secret[0];
 8004194:	f7fe fa9e 	bl	80026d4 <rng_sample>
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <pin_login_attempt+0x19c>)
 800419a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800419e:	f020 0001 	bic.w	r0, r0, #1
 80041a2:	4058      	eors	r0, r3
        args->delay_achieved = 0;
 80041a4:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
    args->private_state = ((rng_sample() & ~1) | is_trick_pin) ^ rom_secrets->hash_cache_secret[0];
 80041a8:	6420      	str	r0, [r4, #64]	; 0x40
        return;
 80041aa:	e7ab      	b.n	8004104 <pin_login_attempt+0xe8>
        return EPIN_WRONG_SUCCESS;
 80041ac:	f06f 056c 	mvn.w	r5, #108	; 0x6c
 80041b0:	e7ad      	b.n	800410e <pin_login_attempt+0xf2>
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 80041b2:	f06f 0568 	mvn.w	r5, #104	; 0x68
 80041b6:	e7aa      	b.n	800410e <pin_login_attempt+0xf2>
 80041b8:	0801c000 	.word	0x0801c000

080041bc <pin_check_logged_in>:
//
// Verify we know the main PIN, but don't do anything with it.
//
    int
pin_check_logged_in(const pinAttempt_t *args, bool *is_trick)
{
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	460e      	mov	r6, r1
 80041c0:	b088      	sub	sp, #32
    int rv = _validate_attempt(args, false);
 80041c2:	2100      	movs	r1, #0
{
 80041c4:	4605      	mov	r5, r0
    int rv = _validate_attempt(args, false);
 80041c6:	f7ff fca5 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 80041ca:	4604      	mov	r4, r0
 80041cc:	b980      	cbnz	r0, 80041f0 <pin_check_logged_in+0x34>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 80041ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80041d0:	07da      	lsls	r2, r3, #31
 80041d2:	d520      	bpl.n	8004216 <pin_check_logged_in+0x5a>
    bool is_trick = ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <pin_check_logged_in+0x60>)
 80041d6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80041d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80041dc:	4053      	eors	r3, r2
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
    }

    if(get_is_trick(args, NULL)) {
 80041de:	07db      	lsls	r3, r3, #31
 80041e0:	d509      	bpl.n	80041f6 <pin_check_logged_in+0x3a>
        // they used a trick pin to get this far. Amuse them more.
        *is_trick = true;
 80041e2:	2301      	movs	r3, #1
 80041e4:	7033      	strb	r3, [r6, #0]

        // should calibrate this, but smart money will just look at the bus
        delay_ms(10);
 80041e6:	200a      	movs	r0, #10
 80041e8:	f7ff fb86 	bl	80038f8 <delay_ms>
        rng_delay();
 80041ec:	f7fe fac6 	bl	800277c <rng_delay>
        int rv = ae_checkmac(KEYNUM_main_pin, auth_digest);
        if(rv) return EPIN_AUTH_FAIL;
    }

    return 0;
}
 80041f0:	4620      	mov	r0, r4
 80041f2:	b008      	add	sp, #32
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
        pin_cache_restore(args, auth_digest);
 80041f6:	4669      	mov	r1, sp
        *is_trick = false;
 80041f8:	7030      	strb	r0, [r6, #0]
        pin_cache_restore(args, auth_digest);
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7ff fe50 	bl	8003ea0 <pin_cache_restore>
        ae_pair_unlock();
 8004200:	f7fe fdd6 	bl	8002db0 <ae_pair_unlock>
        int rv = ae_checkmac(KEYNUM_main_pin, auth_digest);
 8004204:	4669      	mov	r1, sp
 8004206:	2003      	movs	r0, #3
 8004208:	f7fe fd50 	bl	8002cac <ae_checkmac>
        if(rv) return EPIN_AUTH_FAIL;
 800420c:	1e04      	subs	r4, r0, #0
 800420e:	bf18      	it	ne
 8004210:	f06f 046f 	mvnne.w	r4, #111	; 0x6f
 8004214:	e7ec      	b.n	80041f0 <pin_check_logged_in+0x34>
        return EPIN_WRONG_SUCCESS;
 8004216:	f06f 046c 	mvn.w	r4, #108	; 0x6c
 800421a:	e7e9      	b.n	80041f0 <pin_check_logged_in+0x34>
 800421c:	0801c000 	.word	0x0801c000

08004220 <pin_change>:
//
// Change the PIN and/or the secret. (Must also know the previous value, or it must be blank)
//
    int
pin_change(pinAttempt_t *args)
{
 8004220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8004224:	2100      	movs	r1, #0
{
 8004226:	b0a4      	sub	sp, #144	; 0x90
 8004228:	4604      	mov	r4, r0
    int rv = _validate_attempt(args, false);
 800422a:	f7ff fc73 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 800422e:	4605      	mov	r5, r0
 8004230:	2800      	cmp	r0, #0
 8004232:	f040 8094 	bne.w	800435e <pin_change+0x13e>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 8004236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004238:	07d9      	lsls	r1, r3, #31
 800423a:	f140 809c 	bpl.w	8004376 <pin_change+0x156>
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
    }

    if(args->state_flags & PA_IS_BLANK) {
 800423e:	079a      	lsls	r2, r3, #30
 8004240:	d502      	bpl.n	8004248 <pin_change+0x28>
        // if blank, must provide blank value
        if(args->pin_len) return EPIN_RANGE_ERR;
 8004242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	d158      	bne.n	80042fa <pin_change+0xda>
    }

    // Look at change flags.
    const uint32_t cf = args->change_flags;

    ASSERT(!args->is_secondary);
 8004248:	6863      	ldr	r3, [r4, #4]
    const uint32_t cf = args->change_flags;
 800424a:	f8d4 9064 	ldr.w	r9, [r4, #100]	; 0x64
    ASSERT(!args->is_secondary);
 800424e:	b113      	cbz	r3, 8004256 <pin_change+0x36>
 8004250:	484c      	ldr	r0, [pc, #304]	; (8004384 <pin_change+0x164>)
 8004252:	f7fc fbf9 	bl	8000a48 <fatal_error>
    if(cf & CHANGE_SECONDARY_WALLET_PIN) {
        // obsolete secondary support, can't support.
        return EPIN_BAD_REQUEST;
    }
    if(cf & (CHANGE_DURESS_PIN | CHANGE_DURESS_SECRET | CHANGE_BRICKME_PIN)) {
 8004256:	f019 0f36 	tst.w	r9, #54	; 0x36
 800425a:	d10b      	bne.n	8004274 <pin_change+0x54>
        // we need some new API for trick PIN lookup/changes. 
        return EPIN_BAD_REQUEST;
    }
    if(!(cf & (CHANGE_WALLET_PIN | CHANGE_SECRET))) {
 800425c:	f019 0f09 	tst.w	r9, #9
 8004260:	d04b      	beq.n	80042fa <pin_change+0xda>
    bool is_trick = ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 8004262:	4b49      	ldr	r3, [pc, #292]	; (8004388 <pin_change+0x168>)
 8004264:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004266:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800426a:	4053      	eors	r3, r2
    // If they authorized w/ a trick PIN, new policy is to wipe ourselves if
    // they try to change PIN code or the secret.
    //  - it's hard to fake them out here, and they may be onto us.
    //  - this protects the seed, but does end the game somewhat
    //  - all trick PINs will still be in effect, and looks like random reset
    if(get_is_trick(args, NULL)) {
 800426c:	07db      	lsls	r3, r3, #31
 800426e:	d504      	bpl.n	800427a <pin_change+0x5a>
        // User is a thug.. kill secret and reboot w/o any notice
        fast_wipe();
 8004270:	f7fe f9e4 	bl	800263c <fast_wipe>
        return EPIN_BAD_REQUEST;
 8004274:	f06f 0567 	mvn.w	r5, #103	; 0x67
 8004278:	e071      	b.n	800435e <pin_change+0x13e>
        // NOT-REACHED
        return EPIN_BAD_REQUEST;
    }

    // unlock the AE chip
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 800427a:	f7ff fc81 	bl	8003b80 <warmup_ae>
 800427e:	4605      	mov	r5, r0
 8004280:	2800      	cmp	r0, #0
 8004282:	d17b      	bne.n	800437c <pin_change+0x15c>
    // If they tricked us to get to this point, doesn't matter as
    // below SE1 validates it all again.

    // Restore cached version of PIN digest: fast
    uint8_t required_digest[32]; 
    pin_cache_restore(args, required_digest);
 8004284:	f10d 0808 	add.w	r8, sp, #8
 8004288:	4641      	mov	r1, r8
 800428a:	4620      	mov	r0, r4
 800428c:	f7ff fe08 	bl	8003ea0 <pin_cache_restore>

    // Calculate new PIN hashed value: will be slow to do
    if(cf & CHANGE_WALLET_PIN) {
 8004290:	f019 0f01 	tst.w	r9, #1
 8004294:	d021      	beq.n	80042da <pin_change+0xba>
        uint8_t new_digest[32]; 
        rv = pin_hash_attempt(args->new_pin, args->new_pin_len, new_digest);
 8004296:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800429a:	aa12      	add	r2, sp, #72	; 0x48
 800429c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80042a0:	f7ff fd42 	bl	8003d28 <pin_hash_attempt>
        if(rv) goto ae_fail;
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d161      	bne.n	800436c <pin_change+0x14c>

        if(ae_encrypted_write(KEYNUM_main_pin, KEYNUM_main_pin, required_digest, new_digest, 32)) {
 80042a8:	2320      	movs	r3, #32
 80042aa:	2103      	movs	r1, #3
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4642      	mov	r2, r8
 80042b0:	ab12      	add	r3, sp, #72	; 0x48
 80042b2:	4608      	mov	r0, r1
 80042b4:	f7ff f88c 	bl	80033d0 <ae_encrypted_write>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d157      	bne.n	800436c <pin_change+0x14c>
            goto ae_fail;
        }

        memcpy(required_digest, new_digest, 32);
 80042bc:	af12      	add	r7, sp, #72	; 0x48
 80042be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80042c0:	4646      	mov	r6, r8
 80042c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80042c4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80042c8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

        // main pin is changing; reset counter to zero (good login) and our cache
        pin_cache_save(args, new_digest);
 80042cc:	4620      	mov	r0, r4
 80042ce:	a912      	add	r1, sp, #72	; 0x48
 80042d0:	f7ff fdae 	bl	8003e30 <pin_cache_save>

        updates_for_good_login(new_digest);
 80042d4:	a812      	add	r0, sp, #72	; 0x48
 80042d6:	f7ff fcd9 	bl	8003c8c <updates_for_good_login>
    }

    // Recording new secret.
    // Note the required_digest might have just changed above.
    if(cf & CHANGE_SECRET) {
 80042da:	f019 0f08 	tst.w	r9, #8
 80042de:	d037      	beq.n	8004350 <pin_change+0x130>
    int which = (args->change_flags >> 8) & 0xf;
 80042e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042e2:	121b      	asrs	r3, r3, #8
    switch(which) {
 80042e4:	f013 020c 	ands.w	r2, r3, #12
 80042e8:	d107      	bne.n	80042fa <pin_change+0xda>
 80042ea:	4928      	ldr	r1, [pc, #160]	; (800438c <pin_change+0x16c>)
    int which = (args->change_flags >> 8) & 0xf;
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	f911 a003 	ldrsb.w	sl, [r1, r3]
        uint8_t     tmp[AE_SECRET_LEN];
        uint8_t     check[32];

        // what slot (key number) are updating? (probably: KEYNUM_secret)
        int         target_slot = keynum_for_secret(args);
        if(target_slot < 0) return EPIN_RANGE_ERR;
 80042f4:	f1ba 0f00 	cmp.w	sl, #0
 80042f8:	da02      	bge.n	8004300 <pin_change+0xe0>
        if(args->pin_len) return EPIN_RANGE_ERR;
 80042fa:	f06f 0566 	mvn.w	r5, #102	; 0x66
 80042fe:	e02e      	b.n	800435e <pin_change+0x13e>

        se2_encrypt_secret(args->secret, AE_SECRET_LEN, 0, tmp, check, required_digest);
 8004300:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
 8004304:	ae0a      	add	r6, sp, #40	; 0x28
 8004306:	ab12      	add	r3, sp, #72	; 0x48
 8004308:	2148      	movs	r1, #72	; 0x48

        // write into two slots
        if(ae_encrypted_write(target_slot, KEYNUM_main_pin,
 800430a:	f04f 0948 	mov.w	r9, #72	; 0x48
        se2_encrypt_secret(args->secret, AE_SECRET_LEN, 0, tmp, check, required_digest);
 800430e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004312:	9600      	str	r6, [sp, #0]
 8004314:	4638      	mov	r0, r7
 8004316:	f003 ff17 	bl	8008148 <se2_encrypt_secret>
        if(ae_encrypted_write(target_slot, KEYNUM_main_pin,
 800431a:	2103      	movs	r1, #3
 800431c:	f8cd 9000 	str.w	r9, [sp]
 8004320:	eb0d 0309 	add.w	r3, sp, r9
 8004324:	4642      	mov	r2, r8
 8004326:	4650      	mov	r0, sl
 8004328:	f7ff f852 	bl	80033d0 <ae_encrypted_write>
 800432c:	4601      	mov	r1, r0
 800432e:	b9e8      	cbnz	r0, 800436c <pin_change+0x14c>
                                        required_digest, tmp, AE_SECRET_LEN)){
            goto ae_fail;
        }
        if(ae_encrypted_write32(KEYNUM_check_secret, 0, KEYNUM_main_pin, required_digest, check)){
 8004330:	9600      	str	r6, [sp, #0]
 8004332:	4643      	mov	r3, r8
 8004334:	2203      	movs	r2, #3
 8004336:	200a      	movs	r0, #10
 8004338:	f7fe ffe4 	bl	8003304 <ae_encrypted_write32>
 800433c:	b9b0      	cbnz	r0, 800436c <pin_change+0x14c>
            goto ae_fail;
        }

        // update the zero-secret flag to be correct.
        if(cf & CHANGE_SECRET) {
            if(check_all_zeros(args->secret, AE_SECRET_LEN)) {
 800433e:	4649      	mov	r1, r9
 8004340:	4638      	mov	r0, r7
 8004342:	f7fe f9a7 	bl	8002694 <check_all_zeros>
 8004346:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004348:	b168      	cbz	r0, 8004366 <pin_change+0x146>
                args->state_flags |= PA_ZERO_SECRET;
 800434a:	f043 0310 	orr.w	r3, r3, #16
 800434e:	63e3      	str	r3, [r4, #60]	; 0x3c
                args->state_flags &= ~PA_ZERO_SECRET;
            }
        }
    }

    ae_reset_chip();
 8004350:	f7fe fb2a 	bl	80029a8 <ae_reset_chip>
    _hmac_attempt(args, args->hmac);
 8004354:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff fbad 	bl	8003ab8 <_hmac_attempt>

ae_fail:
    ae_reset_chip();

    return EPIN_AE_FAIL;
}
 800435e:	4628      	mov	r0, r5
 8004360:	b024      	add	sp, #144	; 0x90
 8004362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                args->state_flags &= ~PA_ZERO_SECRET;
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	e7f0      	b.n	800434e <pin_change+0x12e>
    ae_reset_chip();
 800436c:	f7fe fb1c 	bl	80029a8 <ae_reset_chip>
    return EPIN_AE_FAIL;
 8004370:	f06f 0569 	mvn.w	r5, #105	; 0x69
 8004374:	e7f3      	b.n	800435e <pin_change+0x13e>
        return EPIN_WRONG_SUCCESS;
 8004376:	f06f 056c 	mvn.w	r5, #108	; 0x6c
 800437a:	e7f0      	b.n	800435e <pin_change+0x13e>
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 800437c:	f06f 0568 	mvn.w	r5, #104	; 0x68
 8004380:	e7ed      	b.n	800435e <pin_change+0x13e>
 8004382:	bf00      	nop
 8004384:	0800e390 	.word	0x0800e390
 8004388:	0801c000 	.word	0x0801c000
 800438c:	0800e6cc 	.word	0x0800e6cc

08004390 <pin_fetch_secret>:
// To encourage not keeping the secret in memory, a way to fetch it after you've already
// proven you know the PIN.
//
    int
pin_fetch_secret(pinAttempt_t *args)
{
 8004390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8004394:	2100      	movs	r1, #0
{
 8004396:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 800439a:	4604      	mov	r4, r0
    int rv = _validate_attempt(args, false);
 800439c:	f7ff fbba 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 80043a0:	4605      	mov	r5, r0
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d144      	bne.n	8004430 <pin_fetch_secret+0xa0>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 80043a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043a8:	07db      	lsls	r3, r3, #31
 80043aa:	f140 80e3 	bpl.w	8004574 <pin_fetch_secret+0x1e4>
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
    }
    if(args->change_flags & CHANGE_DURESS_SECRET) {
 80043ae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80043b0:	f015 0510 	ands.w	r5, r5, #16
 80043b4:	f040 80e1 	bne.w	800457a <pin_fetch_secret+0x1ea>

    // fetch the already-hashed pin
    // - no real need to re-prove PIN knowledge.
    // - if they tricked us, doesn't matter as below the SE validates it all again
    uint8_t     digest[32];
    pin_cache_restore(args, digest);
 80043b8:	f10d 081c 	add.w	r8, sp, #28
 80043bc:	4641      	mov	r1, r8
 80043be:	4620      	mov	r0, r4
 80043c0:	f7ff fd6e 	bl	8003ea0 <pin_cache_restore>
    bool is_trick = ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 80043c4:	4b70      	ldr	r3, [pc, #448]	; (8004588 <pin_fetch_secret+0x1f8>)
 80043c6:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80043c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80043cc:	4073      	eors	r3, r6
    if(!slot || !is_trick) return is_trick;
 80043ce:	07df      	lsls	r7, r3, #31
 80043d0:	d577      	bpl.n	80044c2 <pin_fetch_secret+0x132>
    memset(slot, 0, sizeof(trick_slot_t));
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	4629      	mov	r1, r5
 80043d6:	a817      	add	r0, sp, #92	; 0x5c
 80043d8:	f009 f924 	bl	800d624 <memset>
    if(args->delay_required & TC_DELTA_MODE) {
 80043dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043de:	0558      	lsls	r0, r3, #21
 80043e0:	d52b      	bpl.n	800443a <pin_fetch_secret+0xaa>
        slot->tc_flags = args->delay_required;
 80043e2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        slot->slot_num = -1;        // unknown
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ea:	9317      	str	r3, [sp, #92]	; 0x5c

    // determine if we should proceed under duress
    trick_slot_t slot;
    bool is_trick = get_is_trick(args, &slot);

    if(is_trick && !(slot.tc_flags & TC_DELTA_MODE)) {
 80043ec:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
 80043f0:	f416 6180 	ands.w	r1, r6, #1024	; 0x400
 80043f4:	d165      	bne.n	80044c2 <pin_fetch_secret+0x132>
        // emulate a 24-word wallet, or xprv based wallet
        // see stash.py for encoding details
        memset(args->secret, 0, AE_SECRET_LEN);
 80043f6:	2248      	movs	r2, #72	; 0x48
 80043f8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80043fc:	f009 f912 	bl	800d624 <memset>

        if(slot.tc_flags & TC_WORD_WALLET) {
 8004400:	04f1      	lsls	r1, r6, #19
 8004402:	d54c      	bpl.n	800449e <pin_fetch_secret+0x10e>
            if(check_all_zeros(&slot.xdata[16], 16)) {
 8004404:	ae1d      	add	r6, sp, #116	; 0x74
 8004406:	2110      	movs	r1, #16
 8004408:	4630      	mov	r0, r6
 800440a:	f7fe f943 	bl	8002694 <check_all_zeros>
                // 2nd half is zeros, must be 12-word wallet
                args->secret[0] = 0x80;         // 12 word phrase
                memcpy(&args->secret[1], slot.xdata, 16);
 800440e:	f104 03b1 	add.w	r3, r4, #177	; 0xb1
            if(check_all_zeros(&slot.xdata[16], 16)) {
 8004412:	2800      	cmp	r0, #0
 8004414:	d034      	beq.n	8004480 <pin_fetch_secret+0xf0>
                args->secret[0] = 0x80;         // 12 word phrase
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
                memcpy(&args->secret[1], slot.xdata, 16);
 800441c:	ac19      	add	r4, sp, #100	; 0x64
 800441e:	4622      	mov	r2, r4
 8004420:	ca03      	ldmia	r2!, {r0, r1}
 8004422:	42b2      	cmp	r2, r6
 8004424:	6018      	str	r0, [r3, #0]
 8004426:	6059      	str	r1, [r3, #4]
 8004428:	4614      	mov	r4, r2
 800442a:	f103 0308 	add.w	r3, r3, #8
 800442e:	d1f6      	bne.n	800441e <pin_fetch_secret+0x8e>
    ae_reset_chip();

    if(rv) return EPIN_AE_FAIL;

    return 0;
}
 8004430:	4628      	mov	r0, r5
 8004432:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
 8004436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(key+4, rom_secrets->hash_cache_secret+4, sizeof(rom_secrets->hash_cache_secret)-4);
 800443a:	4f54      	ldr	r7, [pc, #336]	; (800458c <pin_fetch_secret+0x1fc>)
    memcpy(key, &args->private_state, sizeof(args->private_state));
 800443c:	960f      	str	r6, [sp, #60]	; 0x3c
    memcpy(key+4, rom_secrets->hash_cache_secret+4, sizeof(rom_secrets->hash_cache_secret)-4);
 800443e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004440:	ae10      	add	r6, sp, #64	; 0x40
 8004442:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004444:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004448:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        aes_init(&ctx);
 800444c:	a837      	add	r0, sp, #220	; 0xdc
 800444e:	f003 ffdf 	bl	8008410 <aes_init>
        aes_add(&ctx, args->cached_main_pin, 32);
 8004452:	2220      	movs	r2, #32
 8004454:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8004458:	a837      	add	r0, sp, #220	; 0xdc
 800445a:	f003 ffdf 	bl	800841c <aes_add>
        aes_done(&ctx, (uint8_t *)slot, 32, key, NULL);
 800445e:	a917      	add	r1, sp, #92	; 0x5c
 8004460:	9500      	str	r5, [sp, #0]
 8004462:	ab0f      	add	r3, sp, #60	; 0x3c
 8004464:	2220      	movs	r2, #32
 8004466:	a837      	add	r0, sp, #220	; 0xdc
 8004468:	f003 ffee 	bl	8008448 <aes_done>
        if(slot->tc_flags & (TC_WORD_WALLET|TC_XPRV_WALLET)) {
 800446c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8004470:	f411 5fc0 	tst.w	r1, #6144	; 0x1800
 8004474:	d0ba      	beq.n	80043ec <pin_fetch_secret+0x5c>
            se2_read_trick_data(slot->slot_num, slot->tc_flags, slot->xdata);
 8004476:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004478:	aa19      	add	r2, sp, #100	; 0x64
 800447a:	f003 fc73 	bl	8007d64 <se2_read_trick_data>
    if(is_trick && !(slot.tc_flags & TC_DELTA_MODE)) {
 800447e:	e7b5      	b.n	80043ec <pin_fetch_secret+0x5c>
                args->secret[0] = 0x82;         // 24 word phrase
 8004480:	2282      	movs	r2, #130	; 0x82
 8004482:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
                memcpy(&args->secret[1], slot.xdata, 32);
 8004486:	ae21      	add	r6, sp, #132	; 0x84
 8004488:	aa19      	add	r2, sp, #100	; 0x64
 800448a:	4614      	mov	r4, r2
 800448c:	cc03      	ldmia	r4!, {r0, r1}
 800448e:	42b4      	cmp	r4, r6
 8004490:	6018      	str	r0, [r3, #0]
 8004492:	6059      	str	r1, [r3, #4]
 8004494:	4622      	mov	r2, r4
 8004496:	f103 0308 	add.w	r3, r3, #8
 800449a:	d1f6      	bne.n	800448a <pin_fetch_secret+0xfa>
 800449c:	e7c8      	b.n	8004430 <pin_fetch_secret+0xa0>
        } else if(slot.tc_flags & TC_XPRV_WALLET) {
 800449e:	0532      	lsls	r2, r6, #20
 80044a0:	d5c6      	bpl.n	8004430 <pin_fetch_secret+0xa0>
            args->secret[0] = 0x01;         // XPRV mode
 80044a2:	2301      	movs	r3, #1
 80044a4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
            memcpy(&args->secret[1], slot.xdata, 64);
 80044a8:	aa19      	add	r2, sp, #100	; 0x64
 80044aa:	34b1      	adds	r4, #177	; 0xb1
 80044ac:	ae29      	add	r6, sp, #164	; 0xa4
 80044ae:	4613      	mov	r3, r2
 80044b0:	cb03      	ldmia	r3!, {r0, r1}
 80044b2:	42b3      	cmp	r3, r6
 80044b4:	6020      	str	r0, [r4, #0]
 80044b6:	6061      	str	r1, [r4, #4]
 80044b8:	461a      	mov	r2, r3
 80044ba:	f104 0408 	add.w	r4, r4, #8
 80044be:	d1f6      	bne.n	80044ae <pin_fetch_secret+0x11e>
 80044c0:	e7b6      	b.n	8004430 <pin_fetch_secret+0xa0>
    int which = (args->change_flags >> 8) & 0xf;
 80044c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044c4:	121b      	asrs	r3, r3, #8
    switch(which) {
 80044c6:	f013 0f0c 	tst.w	r3, #12
 80044ca:	d159      	bne.n	8004580 <pin_fetch_secret+0x1f0>
 80044cc:	4a30      	ldr	r2, [pc, #192]	; (8004590 <pin_fetch_secret+0x200>)
    int which = (args->change_flags >> 8) & 0xf;
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	f912 9003 	ldrsb.w	r9, [r2, r3]
    if(kn < 0) return EPIN_RANGE_ERR;
 80044d6:	f1b9 0f00 	cmp.w	r9, #0
 80044da:	db51      	blt.n	8004580 <pin_fetch_secret+0x1f0>
 80044dc:	2703      	movs	r7, #3
        rv = ae_encrypted_read(kn, KEYNUM_main_pin, digest, tmp, AE_SECRET_LEN);
 80044de:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80044e2:	2103      	movs	r1, #3
 80044e4:	f8cd a000 	str.w	sl, [sp]
 80044e8:	ab37      	add	r3, sp, #220	; 0xdc
 80044ea:	4642      	mov	r2, r8
 80044ec:	4648      	mov	r0, r9
 80044ee:	f7fe fecf 	bl	8003290 <ae_encrypted_read>
        if(rv) continue;
 80044f2:	4601      	mov	r1, r0
 80044f4:	b130      	cbz	r0, 8004504 <pin_fetch_secret+0x174>
    for(int retry=0; retry<3; retry++) {
 80044f6:	3f01      	subs	r7, #1
 80044f8:	d1f3      	bne.n	80044e2 <pin_fetch_secret+0x152>
    ae_reset_chip();
 80044fa:	f7fe fa55 	bl	80029a8 <ae_reset_chip>
    if(rv) return EPIN_AE_FAIL;
 80044fe:	f06f 0569 	mvn.w	r5, #105	; 0x69
 8004502:	e795      	b.n	8004430 <pin_fetch_secret+0xa0>
        rv = ae_encrypted_read32(KEYNUM_check_secret, 0, KEYNUM_main_pin, digest, check);
 8004504:	ae0f      	add	r6, sp, #60	; 0x3c
 8004506:	9600      	str	r6, [sp, #0]
 8004508:	4643      	mov	r3, r8
 800450a:	2203      	movs	r2, #3
 800450c:	200a      	movs	r0, #10
 800450e:	f7fe fe94 	bl	800323a <ae_encrypted_read32>
        if(rv) continue;
 8004512:	4605      	mov	r5, r0
 8004514:	2800      	cmp	r0, #0
 8004516:	d1ee      	bne.n	80044f6 <pin_fetch_secret+0x166>
    se2_decrypt_secret(args->secret, AE_SECRET_LEN, 0, tmp, check, digest, &is_valid);
 8004518:	f10d 071b 	add.w	r7, sp, #27
 800451c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8004520:	ab37      	add	r3, sp, #220	; 0xdc
 8004522:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8004526:	9600      	str	r6, [sp, #0]
 8004528:	462a      	mov	r2, r5
 800452a:	2148      	movs	r1, #72	; 0x48
 800452c:	9005      	str	r0, [sp, #20]
 800452e:	f003 fe61 	bl	80081f4 <se2_decrypt_secret>
    if(!is_valid) {
 8004532:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004536:	9805      	ldr	r0, [sp, #20]
 8004538:	b993      	cbnz	r3, 8004560 <pin_fetch_secret+0x1d0>
        memset(args->secret, 0, AE_SECRET_LEN);
 800453a:	2248      	movs	r2, #72	; 0x48
 800453c:	4629      	mov	r1, r5
 800453e:	f009 f871 	bl	800d624 <memset>
        if(!(args->state_flags & PA_ZERO_SECRET)) {
 8004542:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004544:	06db      	lsls	r3, r3, #27
 8004546:	d408      	bmi.n	800455a <pin_fetch_secret+0x1ca>
            args->state_flags |= PA_ZERO_SECRET;
 8004548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800454a:	f043 0310 	orr.w	r3, r3, #16
 800454e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _hmac_attempt(args, args->hmac);
 8004550:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff faaf 	bl	8003ab8 <_hmac_attempt>
    ae_reset_chip();
 800455a:	f7fe fa25 	bl	80029a8 <ae_reset_chip>
    if(rv) return EPIN_AE_FAIL;
 800455e:	e767      	b.n	8004430 <pin_fetch_secret+0xa0>
        if(!args->secret[0] && check_all_zeros(args->secret, AE_SECRET_LEN)) {
 8004560:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f8      	bne.n	800455a <pin_fetch_secret+0x1ca>
 8004568:	2148      	movs	r1, #72	; 0x48
 800456a:	f7fe f893 	bl	8002694 <check_all_zeros>
 800456e:	2800      	cmp	r0, #0
 8004570:	d0f3      	beq.n	800455a <pin_fetch_secret+0x1ca>
 8004572:	e7e9      	b.n	8004548 <pin_fetch_secret+0x1b8>
        return EPIN_WRONG_SUCCESS;
 8004574:	f06f 056c 	mvn.w	r5, #108	; 0x6c
 8004578:	e75a      	b.n	8004430 <pin_fetch_secret+0xa0>
        return EPIN_BAD_REQUEST;
 800457a:	f06f 0567 	mvn.w	r5, #103	; 0x67
 800457e:	e757      	b.n	8004430 <pin_fetch_secret+0xa0>
    if(kn < 0) return EPIN_RANGE_ERR;
 8004580:	f06f 0566 	mvn.w	r5, #102	; 0x66
 8004584:	e754      	b.n	8004430 <pin_fetch_secret+0xa0>
 8004586:	bf00      	nop
 8004588:	0801c000 	.word	0x0801c000
 800458c:	0801c074 	.word	0x0801c074
 8004590:	0800e6cc 	.word	0x0800e6cc

08004594 <pin_long_secret>:
// - new API so whole thing provided in one shot? encryption issues: provide
//   "dest" and all 416 bytes end up there (read case only).
//
    int
pin_long_secret(pinAttempt_t *args, uint8_t *dest)
{
 8004594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004598:	460f      	mov	r7, r1
 800459a:	b099      	sub	sp, #100	; 0x64
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 800459c:	2100      	movs	r1, #0
{
 800459e:	4606      	mov	r6, r0
    int rv = _validate_attempt(args, false);
 80045a0:	f7ff fab8 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 80045a4:	4604      	mov	r4, r0
 80045a6:	b9b8      	cbnz	r0, 80045d8 <pin_long_secret+0x44>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 80045a8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80045aa:	07da      	lsls	r2, r3, #31
 80045ac:	f140 80a5 	bpl.w	80046fa <pin_long_secret+0x166>
    bool is_trick = ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 80045b0:	4b55      	ldr	r3, [pc, #340]	; (8004708 <pin_long_secret+0x174>)
 80045b2:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80045b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045b8:	4053      	eors	r3, r2
    }

    // determine if we should proceed under duress/in some trick way
    bool is_trick = get_is_trick(args, NULL);

    if(is_trick) {
 80045ba:	07db      	lsls	r3, r3, #31
 80045bc:	d510      	bpl.n	80045e0 <pin_long_secret+0x4c>
        // Not supported in trick mode. Pretend it's all zeros. Accept all writes.
        memset(args->secret, 0, 32);
 80045be:	4601      	mov	r1, r0
 80045c0:	2220      	movs	r2, #32
 80045c2:	f106 00b0 	add.w	r0, r6, #176	; 0xb0
 80045c6:	f009 f82d 	bl	800d624 <memset>
        if(dest) memset(dest, 0, AE_LONG_SECRET_LEN);
 80045ca:	b12f      	cbz	r7, 80045d8 <pin_long_secret+0x44>
 80045cc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80045d0:	4621      	mov	r1, r4
 80045d2:	4638      	mov	r0, r7
 80045d4:	f009 f826 	bl	800d624 <memset>

se2_fail:
    ae_reset_chip();

    return EPIN_SE2_FAIL;
}
 80045d8:	4620      	mov	r0, r4
 80045da:	b019      	add	sp, #100	; 0x64
 80045dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int blk = (args->change_flags >> 8) & 0xf;
 80045e0:	6e73      	ldr	r3, [r6, #100]	; 0x64
 80045e2:	f3c3 2803 	ubfx	r8, r3, #8, #4
    if(blk > 13) return EPIN_RANGE_ERR;
 80045e6:	f1b8 0f0d 	cmp.w	r8, #13
 80045ea:	f300 8089 	bgt.w	8004700 <pin_long_secret+0x16c>
    pin_cache_restore(args, digest);
 80045ee:	a908      	add	r1, sp, #32
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7ff fc55 	bl	8003ea0 <pin_cache_restore>
    if(!(args->change_flags & CHANGE_SECRET)) {
 80045f6:	6e71      	ldr	r1, [r6, #100]	; 0x64
 80045f8:	f011 0908 	ands.w	r9, r1, #8
 80045fc:	d156      	bne.n	80046ac <pin_long_secret+0x118>
        if(!dest) {
 80045fe:	bb27      	cbnz	r7, 800464a <pin_long_secret+0xb6>
            rv = ae_encrypted_read32(KEYNUM_long_secret, blk, KEYNUM_main_pin, digest, tmp);
 8004600:	af10      	add	r7, sp, #64	; 0x40
 8004602:	9700      	str	r7, [sp, #0]
 8004604:	ab08      	add	r3, sp, #32
 8004606:	2203      	movs	r2, #3
 8004608:	4641      	mov	r1, r8
 800460a:	2008      	movs	r0, #8
 800460c:	f7fe fe15 	bl	800323a <ae_encrypted_read32>
            if(rv) goto fail;
 8004610:	4605      	mov	r5, r0
 8004612:	2800      	cmp	r0, #0
 8004614:	d16a      	bne.n	80046ec <pin_long_secret+0x158>
            se2_decrypt_secret(args->secret, 32, blk*32, tmp, NULL, digest, &is_valid);
 8004616:	f10d 031f 	add.w	r3, sp, #31
 800461a:	9302      	str	r3, [sp, #8]
 800461c:	ab08      	add	r3, sp, #32
 800461e:	f106 00b0 	add.w	r0, r6, #176	; 0xb0
 8004622:	e9cd 4300 	strd	r4, r3, [sp]
 8004626:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800462a:	463b      	mov	r3, r7
 800462c:	2120      	movs	r1, #32
 800462e:	9005      	str	r0, [sp, #20]
 8004630:	f003 fde0 	bl	80081f4 <se2_decrypt_secret>
            if(!is_valid) {
 8004634:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004638:	9805      	ldr	r0, [sp, #20]
 800463a:	b91b      	cbnz	r3, 8004644 <pin_long_secret+0xb0>
                memset(args->secret, 0, 32);
 800463c:	2220      	movs	r2, #32
 800463e:	4621      	mov	r1, r4
                memset(dest, 0, AE_LONG_SECRET_LEN);
 8004640:	f008 fff0 	bl	800d624 <memset>
    ae_reset_chip();
 8004644:	f7fe f9b0 	bl	80029a8 <ae_reset_chip>
    if(rv) return EPIN_AE_FAIL;
 8004648:	e7c6      	b.n	80045d8 <pin_long_secret+0x44>
 800464a:	463e      	mov	r6, r7
                rv = ae_encrypted_read32(KEYNUM_long_secret, blk, KEYNUM_main_pin, digest, p);
 800464c:	9600      	str	r6, [sp, #0]
 800464e:	ab08      	add	r3, sp, #32
 8004650:	2203      	movs	r2, #3
 8004652:	4649      	mov	r1, r9
 8004654:	2008      	movs	r0, #8
 8004656:	f7fe fdf0 	bl	800323a <ae_encrypted_read32>
                if(rv) goto fail;
 800465a:	4605      	mov	r5, r0
 800465c:	2800      	cmp	r0, #0
 800465e:	d145      	bne.n	80046ec <pin_long_secret+0x158>
            for(blk=0; blk<13; blk++, p += 32) {
 8004660:	f109 0901 	add.w	r9, r9, #1
 8004664:	f1b9 0f0d 	cmp.w	r9, #13
 8004668:	f106 0620 	add.w	r6, r6, #32
 800466c:	d1ee      	bne.n	800464c <pin_long_secret+0xb8>
            ASSERT(p == dest+AE_LONG_SECRET_LEN);
 800466e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004672:	429e      	cmp	r6, r3
 8004674:	d002      	beq.n	800467c <pin_long_secret+0xe8>
 8004676:	4825      	ldr	r0, [pc, #148]	; (800470c <pin_long_secret+0x178>)
 8004678:	f7fc f9e6 	bl	8000a48 <fatal_error>
            se2_decrypt_secret(dest, AE_LONG_SECRET_LEN, 0, dest, NULL, digest, &is_valid);
 800467c:	ab10      	add	r3, sp, #64	; 0x40
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	ab08      	add	r3, sp, #32
 8004682:	e9cd 0300 	strd	r0, r3, [sp]
 8004686:	4602      	mov	r2, r0
 8004688:	463b      	mov	r3, r7
 800468a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800468e:	4638      	mov	r0, r7
 8004690:	f003 fdb0 	bl	80081f4 <se2_decrypt_secret>
            if(!is_valid) {
 8004694:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8004698:	b924      	cbnz	r4, 80046a4 <pin_long_secret+0x110>
                memset(dest, 0, AE_LONG_SECRET_LEN);
 800469a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800469e:	4621      	mov	r1, r4
 80046a0:	4638      	mov	r0, r7
 80046a2:	e7cd      	b.n	8004640 <pin_long_secret+0xac>
    ae_reset_chip();
 80046a4:	f7fe f980 	bl	80029a8 <ae_reset_chip>
    return 0;
 80046a8:	462c      	mov	r4, r5
 80046aa:	e795      	b.n	80045d8 <pin_long_secret+0x44>
        uint8_t tmp[32] = {0};
 80046ac:	221c      	movs	r2, #28
 80046ae:	4621      	mov	r1, r4
 80046b0:	a811      	add	r0, sp, #68	; 0x44
 80046b2:	9410      	str	r4, [sp, #64]	; 0x40
        if(se2_encrypt_secret(args->secret, 32, blk*32, tmp, NULL, digest)) {
 80046b4:	ad10      	add	r5, sp, #64	; 0x40
        uint8_t tmp[32] = {0};
 80046b6:	f008 ffb5 	bl	800d624 <memset>
        if(se2_encrypt_secret(args->secret, 32, blk*32, tmp, NULL, digest)) {
 80046ba:	ab08      	add	r3, sp, #32
 80046bc:	e9cd 4300 	strd	r4, r3, [sp]
 80046c0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80046c4:	462b      	mov	r3, r5
 80046c6:	2120      	movs	r1, #32
 80046c8:	f106 00b0 	add.w	r0, r6, #176	; 0xb0
 80046cc:	f003 fd3c 	bl	8008148 <se2_encrypt_secret>
 80046d0:	b120      	cbz	r0, 80046dc <pin_long_secret+0x148>
    ae_reset_chip();
 80046d2:	f7fe f969 	bl	80029a8 <ae_reset_chip>
    return EPIN_SE2_FAIL;
 80046d6:	f06f 0472 	mvn.w	r4, #114	; 0x72
 80046da:	e77d      	b.n	80045d8 <pin_long_secret+0x44>
        rv = ae_encrypted_write32(KEYNUM_long_secret, blk, KEYNUM_main_pin, digest, tmp);
 80046dc:	9500      	str	r5, [sp, #0]
 80046de:	ab08      	add	r3, sp, #32
 80046e0:	2203      	movs	r2, #3
 80046e2:	4641      	mov	r1, r8
 80046e4:	2008      	movs	r0, #8
 80046e6:	f7fe fe0d 	bl	8003304 <ae_encrypted_write32>
 80046ea:	4605      	mov	r5, r0
    ae_reset_chip();
 80046ec:	f7fe f95c 	bl	80029a8 <ae_reset_chip>
    if(rv) return EPIN_AE_FAIL;
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	bf18      	it	ne
 80046f4:	f06f 0469 	mvnne.w	r4, #105	; 0x69
 80046f8:	e76e      	b.n	80045d8 <pin_long_secret+0x44>
        return EPIN_WRONG_SUCCESS;
 80046fa:	f06f 046c 	mvn.w	r4, #108	; 0x6c
 80046fe:	e76b      	b.n	80045d8 <pin_long_secret+0x44>
    if(blk > 13) return EPIN_RANGE_ERR;
 8004700:	f06f 0466 	mvn.w	r4, #102	; 0x66
 8004704:	e768      	b.n	80045d8 <pin_long_secret+0x44>
 8004706:	bf00      	nop
 8004708:	0801c000 	.word	0x0801c000
 800470c:	0800e390 	.word	0x0800e390

08004710 <pin_firmware_greenlight>:
//
// Record current flash checksum and make green light go on.
//
    int
pin_firmware_greenlight(pinAttempt_t *args)
{
 8004710:	b530      	push	{r4, r5, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8004712:	2100      	movs	r1, #0
{
 8004714:	b09b      	sub	sp, #108	; 0x6c
 8004716:	4604      	mov	r4, r0
    int rv = _validate_attempt(args, false);
 8004718:	f7ff f9fc 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 800471c:	bb20      	cbnz	r0, 8004768 <pin_firmware_greenlight+0x58>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 800471e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004720:	07da      	lsls	r2, r3, #31
 8004722:	d529      	bpl.n	8004778 <pin_firmware_greenlight+0x68>
        // must come here with a successful PIN login (so it's rate limited nicely)
        return EPIN_WRONG_SUCCESS;
    }

    if(args->is_secondary) {
 8004724:	6865      	ldr	r5, [r4, #4]
 8004726:	bb55      	cbnz	r5, 800477e <pin_firmware_greenlight+0x6e>
        return EPIN_PRIMARY_ONLY;
    }

    // load existing PIN's hash
    uint8_t     digest[32];
    pin_cache_restore(args, digest);
 8004728:	a902      	add	r1, sp, #8
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff fbb8 	bl	8003ea0 <pin_cache_restore>

    // step 1: calc the value to use
    uint8_t fw_check[32], world_check[32];
    checksum_flash(fw_check, world_check, 0);
 8004730:	462a      	mov	r2, r5
 8004732:	a912      	add	r1, sp, #72	; 0x48
 8004734:	a80a      	add	r0, sp, #40	; 0x28
 8004736:	f7fd f97f 	bl	8001a38 <checksum_flash>

    // step 2: write it out to chip.
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 800473a:	f7ff fa21 	bl	8003b80 <warmup_ae>
 800473e:	bb08      	cbnz	r0, 8004784 <pin_firmware_greenlight+0x74>
    bool is_trick = ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 8004740:	4b12      	ldr	r3, [pc, #72]	; (800478c <pin_firmware_greenlight+0x7c>)
 8004742:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004744:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004748:	4053      	eors	r3, r2

    // under duress, we can't fake this, but we go through the motions anyway
    if(!get_is_trick(args, NULL)) {
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d40e      	bmi.n	800476c <pin_firmware_greenlight+0x5c>
        rv = ae_encrypted_write(KEYNUM_firmware, KEYNUM_main_pin, digest, world_check, 32);
 800474e:	2320      	movs	r3, #32
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	aa02      	add	r2, sp, #8
 8004754:	ab12      	add	r3, sp, #72	; 0x48
 8004756:	2103      	movs	r1, #3
 8004758:	200e      	movs	r0, #14
 800475a:	f7fe fe39 	bl	80033d0 <ae_encrypted_write>

        if(rv) {
 800475e:	b128      	cbz	r0, 800476c <pin_firmware_greenlight+0x5c>
            ae_reset_chip();
 8004760:	f7fe f922 	bl	80029a8 <ae_reset_chip>

            return EPIN_AE_FAIL;
 8004764:	f06f 0069 	mvn.w	r0, #105	; 0x69

        return EPIN_AE_FAIL;
    }

    return 0;
}
 8004768:	b01b      	add	sp, #108	; 0x6c
 800476a:	bd30      	pop	{r4, r5, pc}
    rv = ae_set_gpio_secure(world_check);
 800476c:	a812      	add	r0, sp, #72	; 0x48
 800476e:	f7fe fec1 	bl	80034f4 <ae_set_gpio_secure>
    if(rv) {
 8004772:	2800      	cmp	r0, #0
 8004774:	d0f8      	beq.n	8004768 <pin_firmware_greenlight+0x58>
 8004776:	e7f3      	b.n	8004760 <pin_firmware_greenlight+0x50>
        return EPIN_WRONG_SUCCESS;
 8004778:	f06f 006c 	mvn.w	r0, #108	; 0x6c
 800477c:	e7f4      	b.n	8004768 <pin_firmware_greenlight+0x58>
        return EPIN_PRIMARY_ONLY;
 800477e:	f06f 0071 	mvn.w	r0, #113	; 0x71
 8004782:	e7f1      	b.n	8004768 <pin_firmware_greenlight+0x58>
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 8004784:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8004788:	e7ee      	b.n	8004768 <pin_firmware_greenlight+0x58>
 800478a:	bf00      	nop
 800478c:	0801c000 	.word	0x0801c000

08004790 <pin_firmware_upgrade>:
// Update the system firmware via file in PSRAM. Arrange for 
// light to stay green through out process.
//
    int
pin_firmware_upgrade(pinAttempt_t *args)
{
 8004790:	b570      	push	{r4, r5, r6, lr}
    // Validate args and signature
    int rv = _validate_attempt(args, false);
 8004792:	2100      	movs	r1, #0
{
 8004794:	b092      	sub	sp, #72	; 0x48
 8004796:	4604      	mov	r4, r0
    int rv = _validate_attempt(args, false);
 8004798:	f7ff f9bc 	bl	8003b14 <_validate_attempt>
    if(rv) return rv;
 800479c:	2800      	cmp	r0, #0
 800479e:	d14e      	bne.n	800483e <pin_firmware_upgrade+0xae>

    if((args->state_flags & PA_SUCCESSFUL) != PA_SUCCESSFUL) {
 80047a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047a2:	07da      	lsls	r2, r3, #31
 80047a4:	d54d      	bpl.n	8004842 <pin_firmware_upgrade+0xb2>
        // must come here with a successful PIN login
        return EPIN_WRONG_SUCCESS;
    }

    if(args->change_flags != CHANGE_FIRMWARE) {
 80047a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d11c      	bne.n	80047e6 <pin_firmware_upgrade+0x56>
    }

    // expecting start/length relative to psram start
    uint32_t *about = (uint32_t *)args->secret;
    uint32_t start = about[0];
    uint32_t len = about[1];
 80047ac:	e9d4 562c 	ldrd	r5, r6, [r4, #176]	; 0xb0

    if(len < 32768) return EPIN_RANGE_ERR;
 80047b0:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
 80047b4:	f5b3 1ffc 	cmp.w	r3, #2064384	; 0x1f8000
 80047b8:	d846      	bhi.n	8004848 <pin_firmware_upgrade+0xb8>
    if(len > 2<<20) return EPIN_RANGE_ERR;
    if(start+len > PSRAM_SIZE) return EPIN_RANGE_ERR;
 80047ba:	19ab      	adds	r3, r5, r6
 80047bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c0:	d842      	bhi.n	8004848 <pin_firmware_upgrade+0xb8>

    const uint8_t *data = (const uint8_t *)PSRAM_BASE+start;
 80047c2:	f105 4510 	add.w	r5, r5, #2415919104	; 0x90000000

    // verify a firmware image that's in RAM, and calc its digest
    // - also applies watermark policy, etc
    uint8_t world_check[32];
    bool ok = verify_firmware_in_ram(data, len, world_check);
 80047c6:	aa02      	add	r2, sp, #8
 80047c8:	4631      	mov	r1, r6
 80047ca:	4628      	mov	r0, r5
 80047cc:	f7fd fa42 	bl	8001c54 <verify_firmware_in_ram>
    if(!ok) {
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d03c      	beq.n	800484e <pin_firmware_upgrade+0xbe>
    bool is_trick = ((args->private_state ^ rom_secrets->hash_cache_secret[0]) & 0x1);
 80047d4:	4b21      	ldr	r3, [pc, #132]	; (800485c <pin_firmware_upgrade+0xcc>)
 80047d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80047dc:	4053      	eors	r3, r2
        return EPIN_AUTH_FAIL;
    }

    // under duress, we can't fake this, so kill ourselves.
    if(get_is_trick(args, NULL)) {
 80047de:	07db      	lsls	r3, r3, #31
 80047e0:	d504      	bpl.n	80047ec <pin_firmware_upgrade+0x5c>
        // User is a thug.. kill secret and reboot w/o any notice
        fast_wipe();
 80047e2:	f7fd ff2b 	bl	800263c <fast_wipe>
        return EPIN_BAD_REQUEST;
 80047e6:	f06f 0067 	mvn.w	r0, #103	; 0x67
 80047ea:	e028      	b.n	800483e <pin_firmware_upgrade+0xae>
        return EPIN_BAD_REQUEST;
    }

    // load existing PIN's hash
    uint8_t     digest[32];
    pin_cache_restore(args, digest);
 80047ec:	a90a      	add	r1, sp, #40	; 0x28
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff fb56 	bl	8003ea0 <pin_cache_restore>

    // step 1: calc the value to use, see above
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 80047f4:	f7ff f9c4 	bl	8003b80 <warmup_ae>
 80047f8:	bb60      	cbnz	r0, 8004854 <pin_firmware_upgrade+0xc4>

    // step 2: write it out to chip.
    rv = ae_encrypted_write(KEYNUM_firmware, KEYNUM_main_pin, digest, world_check, 32);
 80047fa:	2320      	movs	r3, #32
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	aa0a      	add	r2, sp, #40	; 0x28
 8004800:	ab02      	add	r3, sp, #8
 8004802:	2103      	movs	r1, #3
 8004804:	200e      	movs	r0, #14
 8004806:	f7fe fde3 	bl	80033d0 <ae_encrypted_write>
    if(rv) goto fail;
 800480a:	b9a0      	cbnz	r0, 8004836 <pin_firmware_upgrade+0xa6>

    // this turns on green light
    rv = ae_set_gpio_secure(world_check);
 800480c:	a802      	add	r0, sp, #8
 800480e:	f7fe fe71 	bl	80034f4 <ae_set_gpio_secure>
    if(rv) goto fail;
 8004812:	b980      	cbnz	r0, 8004836 <pin_firmware_upgrade+0xa6>

    // -- point of no return -- 

    // burn it, shows progress
    psram_do_upgrade(data, len);
 8004814:	4631      	mov	r1, r6
 8004816:	4628      	mov	r0, r5
 8004818:	f000 fbf4 	bl	8005004 <psram_do_upgrade>
 800481c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004820:	490f      	ldr	r1, [pc, #60]	; (8004860 <pin_firmware_upgrade+0xd0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <pin_firmware_upgrade+0xd4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004824:	68ca      	ldr	r2, [r1, #12]
 8004826:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800482a:	4313      	orrs	r3, r2
 800482c:	60cb      	str	r3, [r1, #12]
 800482e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004832:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004834:	e7fd      	b.n	8004832 <pin_firmware_upgrade+0xa2>
    NVIC_SystemReset();

    return 0;

fail:
    ae_reset_chip();
 8004836:	f7fe f8b7 	bl	80029a8 <ae_reset_chip>

    return EPIN_AE_FAIL;
 800483a:	f06f 0069 	mvn.w	r0, #105	; 0x69
}
 800483e:	b012      	add	sp, #72	; 0x48
 8004840:	bd70      	pop	{r4, r5, r6, pc}
        return EPIN_WRONG_SUCCESS;
 8004842:	f06f 006c 	mvn.w	r0, #108	; 0x6c
 8004846:	e7fa      	b.n	800483e <pin_firmware_upgrade+0xae>
    if(len < 32768) return EPIN_RANGE_ERR;
 8004848:	f06f 0066 	mvn.w	r0, #102	; 0x66
 800484c:	e7f7      	b.n	800483e <pin_firmware_upgrade+0xae>
        return EPIN_AUTH_FAIL;
 800484e:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8004852:	e7f4      	b.n	800483e <pin_firmware_upgrade+0xae>
    if(warmup_ae()) return EPIN_I_AM_BRICK;
 8004854:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8004858:	e7f1      	b.n	800483e <pin_firmware_upgrade+0xae>
 800485a:	bf00      	nop
 800485c:	0801c000 	.word	0x0801c000
 8004860:	e000ed00 	.word	0xe000ed00
 8004864:	05fa0004 	.word	0x05fa0004

08004868 <strcat_hex>:

// strcat_hex()
//
	void
strcat_hex(char *msg, const void *d, int len)
{
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4616      	mov	r6, r2
 800486c:	4604      	mov	r4, r0
 800486e:	460d      	mov	r5, r1
	char *p = msg+strlen(msg);
 8004870:	f008 ff0b 	bl	800d68a <strlen>
	const uint8_t *h = (const uint8_t *)d;

	for(; len; len--, h++) {
		*(p++) = hexmap[(*h>>4) & 0xf];
 8004874:	4a0b      	ldr	r2, [pc, #44]	; (80048a4 <strcat_hex+0x3c>)
	char *p = msg+strlen(msg);
 8004876:	4420      	add	r0, r4
	for(; len; len--, h++) {
 8004878:	1e69      	subs	r1, r5, #1
 800487a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800487e:	42b0      	cmp	r0, r6
 8004880:	d102      	bne.n	8004888 <strcat_hex+0x20>
		*(p++) = hexmap[(*h>>0) & 0xf];
	}

	*(p++) = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	7003      	strb	r3, [r0, #0]
}
 8004886:	bd70      	pop	{r4, r5, r6, pc}
		*(p++) = hexmap[(*h>>4) & 0xf];
 8004888:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	f800 3b02 	strb.w	r3, [r0], #2
		*(p++) = hexmap[(*h>>0) & 0xf];
 8004894:	780b      	ldrb	r3, [r1, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	5cd3      	ldrb	r3, [r2, r3]
 800489c:	f800 3c01 	strb.w	r3, [r0, #-1]
	for(; len; len--, h++) {
 80048a0:	e7ed      	b.n	800487e <strcat_hex+0x16>
 80048a2:	bf00      	nop
 80048a4:	0800e6fd 	.word	0x0800e6fd

080048a8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the USART handle allocation */
  if (husart == NULL)
 80048aa:	4604      	mov	r4, r0
 80048ac:	b910      	cbnz	r0, 80048b4 <HAL_USART_Init+0xc>
  {
    return HAL_ERROR;
 80048ae:	2501      	movs	r5, #1
  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
}
 80048b0:	4628      	mov	r0, r5
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (husart->State == HAL_USART_STATE_RESET)
 80048b4:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80048b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048bc:	b90b      	cbnz	r3, 80048c2 <HAL_USART_Init+0x1a>
    husart->Lock = HAL_UNLOCKED;
 80048be:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  __HAL_USART_DISABLE(husart);
 80048c2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80048c4:	6921      	ldr	r1, [r4, #16]
  husart->State = HAL_USART_STATE_BUSY;
 80048c6:	2502      	movs	r5, #2
 80048c8:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
  __HAL_USART_DISABLE(husart);
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80048d4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048d6:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80048d8:	430a      	orrs	r2, r1
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048da:	49a9      	ldr	r1, [pc, #676]	; (8004b80 <HAL_USART_Init+0x2d8>)
 80048dc:	4001      	ands	r1, r0
 80048de:	430a      	orrs	r2, r1
 80048e0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80048e2:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e4:	430a      	orrs	r2, r1
 80048e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	6a22      	ldr	r2, [r4, #32]
 80048f0:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80048f4:	f021 0109 	bic.w	r1, r1, #9
 80048f8:	4302      	orrs	r2, r0
 80048fa:	430a      	orrs	r2, r1
 80048fc:	69e1      	ldr	r1, [r4, #28]
 80048fe:	430a      	orrs	r2, r1
 8004900:	68e1      	ldr	r1, [r4, #12]
 8004902:	430a      	orrs	r2, r1
 8004904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004908:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800490a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800490c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800490e:	f021 010f 	bic.w	r1, r1, #15
 8004912:	4311      	orrs	r1, r2
 8004914:	62d9      	str	r1, [r3, #44]	; 0x2c
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004916:	499b      	ldr	r1, [pc, #620]	; (8004b84 <HAL_USART_Init+0x2dc>)
 8004918:	428b      	cmp	r3, r1
 800491a:	d10e      	bne.n	800493a <HAL_USART_Init+0x92>
 800491c:	4b9a      	ldr	r3, [pc, #616]	; (8004b88 <HAL_USART_Init+0x2e0>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	42ab      	cmp	r3, r5
 8004928:	f000 80cd 	beq.w	8004ac6 <HAL_USART_Init+0x21e>
 800492c:	2b03      	cmp	r3, #3
 800492e:	d01a      	beq.n	8004966 <HAL_USART_Init+0xbe>
 8004930:	2b01      	cmp	r3, #1
 8004932:	d153      	bne.n	80049dc <HAL_USART_Init+0x134>
      pclk = HAL_RCC_GetSysClockFreq();
 8004934:	f003 ff22 	bl	800877c <HAL_RCC_GetSysClockFreq>
 8004938:	e052      	b.n	80049e0 <HAL_USART_Init+0x138>
  USART_GETCLOCKSOURCE(husart, clocksource);
 800493a:	4994      	ldr	r1, [pc, #592]	; (8004b8c <HAL_USART_Init+0x2e4>)
 800493c:	428b      	cmp	r3, r1
 800493e:	d13c      	bne.n	80049ba <HAL_USART_Init+0x112>
 8004940:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <HAL_USART_Init+0x2e0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b08      	cmp	r3, #8
 800494c:	f000 80bb 	beq.w	8004ac6 <HAL_USART_Init+0x21e>
 8004950:	d807      	bhi.n	8004962 <HAL_USART_Init+0xba>
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80b4 	beq.w	8004ac0 <HAL_USART_Init+0x218>
 8004958:	2b04      	cmp	r3, #4
 800495a:	d0eb      	beq.n	8004934 <HAL_USART_Init+0x8c>
  uint32_t usartdiv                    = 0x00000000;
 800495c:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 800495e:	2501      	movs	r5, #1
 8004960:	e06e      	b.n	8004a40 <HAL_USART_Init+0x198>
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004962:	2b0c      	cmp	r3, #12
 8004964:	d1fa      	bne.n	800495c <HAL_USART_Init+0xb4>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004966:	2a00      	cmp	r2, #0
 8004968:	f000 80fb 	beq.w	8004b62 <HAL_USART_Init+0x2ba>
 800496c:	2a01      	cmp	r2, #1
 800496e:	f000 80fa 	beq.w	8004b66 <HAL_USART_Init+0x2be>
 8004972:	2a02      	cmp	r2, #2
 8004974:	f000 80f9 	beq.w	8004b6a <HAL_USART_Init+0x2c2>
 8004978:	2a03      	cmp	r2, #3
 800497a:	f000 80f8 	beq.w	8004b6e <HAL_USART_Init+0x2c6>
 800497e:	2a04      	cmp	r2, #4
 8004980:	f000 80f7 	beq.w	8004b72 <HAL_USART_Init+0x2ca>
 8004984:	2a05      	cmp	r2, #5
 8004986:	f000 80f6 	beq.w	8004b76 <HAL_USART_Init+0x2ce>
 800498a:	2a06      	cmp	r2, #6
 800498c:	f000 80f5 	beq.w	8004b7a <HAL_USART_Init+0x2d2>
 8004990:	2a07      	cmp	r2, #7
 8004992:	f000 8101 	beq.w	8004b98 <HAL_USART_Init+0x2f0>
 8004996:	2a08      	cmp	r2, #8
 8004998:	f000 8100 	beq.w	8004b9c <HAL_USART_Init+0x2f4>
 800499c:	2a09      	cmp	r2, #9
 800499e:	f000 80ff 	beq.w	8004ba0 <HAL_USART_Init+0x2f8>
 80049a2:	2a0a      	cmp	r2, #10
 80049a4:	f000 80fe 	beq.w	8004ba4 <HAL_USART_Init+0x2fc>
 80049a8:	2a0b      	cmp	r2, #11
 80049aa:	bf14      	ite	ne
 80049ac:	2201      	movne	r2, #1
 80049ae:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80049b2:	6861      	ldr	r1, [r4, #4]
 80049b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b8:	e0a1      	b.n	8004afe <HAL_USART_Init+0x256>
  USART_GETCLOCKSOURCE(husart, clocksource);
 80049ba:	4975      	ldr	r1, [pc, #468]	; (8004b90 <HAL_USART_Init+0x2e8>)
 80049bc:	428b      	cmp	r3, r1
 80049be:	d1cd      	bne.n	800495c <HAL_USART_Init+0xb4>
 80049c0:	4b71      	ldr	r3, [pc, #452]	; (8004b88 <HAL_USART_Init+0x2e0>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d07b      	beq.n	8004ac6 <HAL_USART_Init+0x21e>
 80049ce:	d803      	bhi.n	80049d8 <HAL_USART_Init+0x130>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d075      	beq.n	8004ac0 <HAL_USART_Init+0x218>
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	e7c0      	b.n	800495a <HAL_USART_Init+0xb2>
 80049d8:	2b30      	cmp	r3, #48	; 0x30
 80049da:	e7c3      	b.n	8004964 <HAL_USART_Init+0xbc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f004 fadc 	bl	8008f98 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80049e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	f000 80a7 	beq.w	8004b36 <HAL_USART_Init+0x28e>
 80049e8:	2a01      	cmp	r2, #1
 80049ea:	f000 80a6 	beq.w	8004b3a <HAL_USART_Init+0x292>
 80049ee:	2a02      	cmp	r2, #2
 80049f0:	f000 80a5 	beq.w	8004b3e <HAL_USART_Init+0x296>
 80049f4:	2a03      	cmp	r2, #3
 80049f6:	f000 80a4 	beq.w	8004b42 <HAL_USART_Init+0x29a>
 80049fa:	2a04      	cmp	r2, #4
 80049fc:	f000 80a3 	beq.w	8004b46 <HAL_USART_Init+0x29e>
 8004a00:	2a05      	cmp	r2, #5
 8004a02:	f000 80a2 	beq.w	8004b4a <HAL_USART_Init+0x2a2>
 8004a06:	2a06      	cmp	r2, #6
 8004a08:	f000 80a1 	beq.w	8004b4e <HAL_USART_Init+0x2a6>
 8004a0c:	2a07      	cmp	r2, #7
 8004a0e:	f000 80a0 	beq.w	8004b52 <HAL_USART_Init+0x2aa>
 8004a12:	2a08      	cmp	r2, #8
 8004a14:	f000 809f 	beq.w	8004b56 <HAL_USART_Init+0x2ae>
 8004a18:	2a09      	cmp	r2, #9
 8004a1a:	f000 809e 	beq.w	8004b5a <HAL_USART_Init+0x2b2>
 8004a1e:	2a0a      	cmp	r2, #10
 8004a20:	f000 809d 	beq.w	8004b5e <HAL_USART_Init+0x2b6>
 8004a24:	2a0b      	cmp	r2, #11
 8004a26:	bf14      	ite	ne
 8004a28:	2201      	movne	r2, #1
 8004a2a:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004a2e:	6861      	ldr	r1, [r4, #4]
 8004a30:	fbb0 f0f2 	udiv	r0, r0, r2
 8004a34:	084b      	lsrs	r3, r1, #1
 8004a36:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  HAL_StatusTypeDef ret                = HAL_OK;
 8004a3a:	2500      	movs	r5, #0
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004a3c:	fbb3 f3f1 	udiv	r3, r3, r1
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8004a40:	f1a3 0110 	sub.w	r1, r3, #16
 8004a44:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004a48:	4291      	cmp	r1, r2
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a4a:	bf9f      	itttt	ls
 8004a4c:	f023 020f 	bicls.w	r2, r3, #15
 8004a50:	b292      	uxthls	r2, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a52:	f3c3 0342 	ubfxls	r3, r3, #1, #3
    husart->Instance->BRR = brrtemp;
 8004a56:	6821      	ldrls	r1, [r4, #0]
 8004a58:	bf9a      	itte	ls
 8004a5a:	4313      	orrls	r3, r2
 8004a5c:	60cb      	strls	r3, [r1, #12]
    ret = HAL_ERROR;
 8004a5e:	2501      	movhi	r5, #1
  husart->NbTxDataToProcess = 1U;
 8004a60:	2301      	movs	r3, #1
  husart->RxISR   = NULL;
 8004a62:	2200      	movs	r2, #0
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004a64:	429d      	cmp	r5, r3
  husart->TxISR   = NULL;
 8004a66:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
  husart->NbTxDataToProcess = 1U;
 8004a6a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8004a6c:	8763      	strh	r3, [r4, #58]	; 0x3a
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004a6e:	f43f af1e 	beq.w	80048ae <HAL_USART_Init+0x6>
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004a7a:	6059      	str	r1, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004a7c:	6899      	ldr	r1, [r3, #8]
 8004a7e:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8004a82:	6099      	str	r1, [r3, #8]
  __HAL_USART_ENABLE(husart);
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	f041 0101 	orr.w	r1, r1, #1
 8004a8a:	6019      	str	r1, [r3, #0]
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004a8c:	65e2      	str	r2, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004a8e:	f002 fb21 	bl	80070d4 <HAL_GetTick>
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004a98:	4607      	mov	r7, r0
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a9a:	f100 8085 	bmi.w	8004ba8 <HAL_USART_Init+0x300>
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	075b      	lsls	r3, r3, #29
 8004aa4:	d505      	bpl.n	8004ab2 <HAL_USART_Init+0x20a>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	69de      	ldr	r6, [r3, #28]
 8004aaa:	f416 0680 	ands.w	r6, r6, #4194304	; 0x400000
 8004aae:	f000 808e 	beq.w	8004bce <HAL_USART_Init+0x326>
  husart->State = HAL_USART_STATE_READY;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(husart);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8004abe:	e6f7      	b.n	80048b0 <HAL_USART_Init+0x8>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f004 fa58 	bl	8008f74 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004ac4:	e78c      	b.n	80049e0 <HAL_USART_Init+0x138>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004ac6:	b302      	cbz	r2, 8004b0a <HAL_USART_Init+0x262>
 8004ac8:	2a01      	cmp	r2, #1
 8004aca:	d020      	beq.n	8004b0e <HAL_USART_Init+0x266>
 8004acc:	2a02      	cmp	r2, #2
 8004ace:	d020      	beq.n	8004b12 <HAL_USART_Init+0x26a>
 8004ad0:	2a03      	cmp	r2, #3
 8004ad2:	d020      	beq.n	8004b16 <HAL_USART_Init+0x26e>
 8004ad4:	2a04      	cmp	r2, #4
 8004ad6:	d020      	beq.n	8004b1a <HAL_USART_Init+0x272>
 8004ad8:	2a05      	cmp	r2, #5
 8004ada:	d020      	beq.n	8004b1e <HAL_USART_Init+0x276>
 8004adc:	2a06      	cmp	r2, #6
 8004ade:	d020      	beq.n	8004b22 <HAL_USART_Init+0x27a>
 8004ae0:	2a07      	cmp	r2, #7
 8004ae2:	d020      	beq.n	8004b26 <HAL_USART_Init+0x27e>
 8004ae4:	2a08      	cmp	r2, #8
 8004ae6:	d020      	beq.n	8004b2a <HAL_USART_Init+0x282>
 8004ae8:	2a09      	cmp	r2, #9
 8004aea:	d020      	beq.n	8004b2e <HAL_USART_Init+0x286>
 8004aec:	2a0a      	cmp	r2, #10
 8004aee:	d020      	beq.n	8004b32 <HAL_USART_Init+0x28a>
 8004af0:	2a0b      	cmp	r2, #11
 8004af2:	bf14      	ite	ne
 8004af4:	2201      	movne	r2, #1
 8004af6:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004afa:	6861      	ldr	r1, [r4, #4]
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <HAL_USART_Init+0x2ec>)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004afe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b02:	084b      	lsrs	r3, r1, #1
 8004b04:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004b08:	e797      	b.n	8004a3a <HAL_USART_Init+0x192>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	e7f5      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b0e:	2202      	movs	r2, #2
 8004b10:	e7f3      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b12:	2204      	movs	r2, #4
 8004b14:	e7f1      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b16:	2206      	movs	r2, #6
 8004b18:	e7ef      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	e7ed      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b1e:	220a      	movs	r2, #10
 8004b20:	e7eb      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b22:	220c      	movs	r2, #12
 8004b24:	e7e9      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b26:	2210      	movs	r2, #16
 8004b28:	e7e7      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	e7e5      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	e7e3      	b.n	8004afa <HAL_USART_Init+0x252>
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	e7e1      	b.n	8004afa <HAL_USART_Init+0x252>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004b36:	2201      	movs	r2, #1
 8004b38:	e779      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	e777      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b3e:	2204      	movs	r2, #4
 8004b40:	e775      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b42:	2206      	movs	r2, #6
 8004b44:	e773      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b46:	2208      	movs	r2, #8
 8004b48:	e771      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b4a:	220a      	movs	r2, #10
 8004b4c:	e76f      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b4e:	220c      	movs	r2, #12
 8004b50:	e76d      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b52:	2210      	movs	r2, #16
 8004b54:	e76b      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b56:	2220      	movs	r2, #32
 8004b58:	e769      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b5a:	2240      	movs	r2, #64	; 0x40
 8004b5c:	e767      	b.n	8004a2e <HAL_USART_Init+0x186>
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	e765      	b.n	8004a2e <HAL_USART_Init+0x186>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8004b62:	2201      	movs	r2, #1
 8004b64:	e725      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b66:	2202      	movs	r2, #2
 8004b68:	e723      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	e721      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b6e:	2206      	movs	r2, #6
 8004b70:	e71f      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b72:	2208      	movs	r2, #8
 8004b74:	e71d      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b76:	220a      	movs	r2, #10
 8004b78:	e71b      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	e719      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b7e:	bf00      	nop
 8004b80:	cfff69f3 	.word	0xcfff69f3
 8004b84:	40013800 	.word	0x40013800
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40004400 	.word	0x40004400
 8004b90:	40004800 	.word	0x40004800
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	2210      	movs	r2, #16
 8004b9a:	e70a      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	e708      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004ba0:	2240      	movs	r2, #64	; 0x40
 8004ba2:	e706      	b.n	80049b2 <HAL_USART_Init+0x10a>
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	e704      	b.n	80049b2 <HAL_USART_Init+0x10a>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	69de      	ldr	r6, [r3, #28]
 8004bac:	f416 1600 	ands.w	r6, r6, #2097152	; 0x200000
 8004bb0:	f47f af75 	bne.w	8004a9e <HAL_USART_Init+0x1f6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb4:	f002 fa8e 	bl	80070d4 <HAL_GetTick>
 8004bb8:	1bc0      	subs	r0, r0, r7
 8004bba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004bbe:	d9f3      	bls.n	8004ba8 <HAL_USART_Init+0x300>
        husart->State = HAL_USART_STATE_READY;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(husart);
 8004bc6:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
      return HAL_TIMEOUT;
 8004bca:	2503      	movs	r5, #3
 8004bcc:	e670      	b.n	80048b0 <HAL_USART_Init+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f002 fa81 	bl	80070d4 <HAL_GetTick>
 8004bd2:	1bc0      	subs	r0, r0, r7
 8004bd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004bd8:	f67f af65 	bls.w	8004aa6 <HAL_USART_Init+0x1fe>
 8004bdc:	e7f0      	b.n	8004bc0 <HAL_USART_Init+0x318>
 8004bde:	bf00      	nop

08004be0 <console_setup>:
    __HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 8004be0:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <console_setup+0x54>)
 8004be2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004be6:	f022 0203 	bic.w	r2, r2, #3
 8004bea:	f042 0201 	orr.w	r2, r2, #1
{
 8004bee:	b513      	push	{r0, r1, r4, lr}
    __HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 8004bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    memset(&con, 0, sizeof(con));
 8004bf6:	4c10      	ldr	r4, [pc, #64]	; (8004c38 <console_setup+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfc:	661a      	str	r2, [r3, #96]	; 0x60
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c04:	9301      	str	r3, [sp, #4]
    memset(&con, 0, sizeof(con));
 8004c06:	2258      	movs	r2, #88	; 0x58
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f104 0008 	add.w	r0, r4, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c0e:	9b01      	ldr	r3, [sp, #4]
    memset(&con, 0, sizeof(con));
 8004c10:	f008 fd08 	bl	800d624 <memset>
    con.Init.BaudRate = 115200;
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <console_setup+0x5c>)
 8004c16:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c1a:	e9c4 2300 	strd	r2, r3, [r4]
    HAL_StatusTypeDef rv = HAL_USART_Init(&con);
 8004c1e:	4620      	mov	r0, r4
    con.Init.Mode = USART_MODE_TX_RX;
 8004c20:	230c      	movs	r3, #12
 8004c22:	6163      	str	r3, [r4, #20]
    HAL_StatusTypeDef rv = HAL_USART_Init(&con);
 8004c24:	f7ff fe40 	bl	80048a8 <HAL_USART_Init>
    ASSERT(rv == HAL_OK);
 8004c28:	b110      	cbz	r0, 8004c30 <console_setup+0x50>
 8004c2a:	4805      	ldr	r0, [pc, #20]	; (8004c40 <console_setup+0x60>)
 8004c2c:	f7fb ff0c 	bl	8000a48 <fatal_error>
}
 8004c30:	b002      	add	sp, #8
 8004c32:	bd10      	pop	{r4, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	2009e1c0 	.word	0x2009e1c0
 8004c3c:	40013800 	.word	0x40013800
 8004c40:	0800e390 	.word	0x0800e390

08004c44 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
    while(Size > 0U) {
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_USART_Transmit+0x30>)
 8004c46:	440a      	add	r2, r1
 8004c48:	4291      	cmp	r1, r2
 8004c4a:	d10b      	bne.n	8004c64 <HAL_USART_Transmit+0x20>
        MY_UART->TDR = *pTxData;
        pTxData++;
        Size --;
    }

    while(!(MY_UART->ISR & UART_FLAG_TC)) {
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	0652      	lsls	r2, r2, #25
 8004c50:	d5fc      	bpl.n	8004c4c <HAL_USART_Transmit+0x8>
        // wait for final byte to be sent
    }

    // Clear Transmission Complete Flag
    MY_UART->ICR = USART_CLEAR_TCF;
 8004c52:	2240      	movs	r2, #64	; 0x40
 8004c54:	621a      	str	r2, [r3, #32]

    // Clear overrun flag and discard the received data
    MY_UART->ICR = USART_CLEAR_OREF;
 8004c56:	2208      	movs	r2, #8
 8004c58:	621a      	str	r2, [r3, #32]
    MY_UART->RQR = USART_RXDATA_FLUSH_REQUEST;
 8004c5a:	831a      	strh	r2, [r3, #24]
    MY_UART->RQR = USART_TXDATA_FLUSH_REQUEST;
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	831a      	strh	r2, [r3, #24]

    return HAL_OK;
}
 8004c60:	2000      	movs	r0, #0
 8004c62:	4770      	bx	lr
        while(!(MY_UART->ISR & UART_FLAG_TXE)) {
 8004c64:	69d8      	ldr	r0, [r3, #28]
 8004c66:	0600      	lsls	r0, r0, #24
 8004c68:	d5fc      	bpl.n	8004c64 <HAL_USART_Transmit+0x20>
        MY_UART->TDR = *pTxData;
 8004c6a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8004c6e:	8518      	strh	r0, [r3, #40]	; 0x28
        Size --;
 8004c70:	e7ea      	b.n	8004c48 <HAL_USART_Transmit+0x4>
 8004c72:	bf00      	nop
 8004c74:	40013800 	.word	0x40013800

08004c78 <puts2>:
{
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	4604      	mov	r4, r0
    rng_delay();
 8004c7c:	f7fd fd7e 	bl	800277c <rng_delay>
    HAL_USART_Transmit(&con, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8004c80:	4620      	mov	r0, r4
 8004c82:	f008 fd02 	bl	800d68a <strlen>
 8004c86:	4621      	mov	r1, r4
 8004c88:	b282      	uxth	r2, r0
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c8e:	4803      	ldr	r0, [pc, #12]	; (8004c9c <puts2+0x24>)
 8004c90:	f7ff ffd8 	bl	8004c44 <HAL_USART_Transmit>
}
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rng_delay();
 8004c98:	f7fd bd70 	b.w	800277c <rng_delay>
 8004c9c:	2009e1c0 	.word	0x2009e1c0

08004ca0 <putchar>:
{
 8004ca0:	b513      	push	{r0, r1, r4, lr}
 8004ca2:	4604      	mov	r4, r0
    uint8_t cb = c;
 8004ca4:	f88d 0007 	strb.w	r0, [sp, #7]
    rng_delay();
 8004ca8:	f7fd fd68 	bl	800277c <rng_delay>
    if(cb != '\n') {
 8004cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
        HAL_USART_Transmit(&con, (uint8_t *)CRLF, 2, HAL_MAX_DELAY);
 8004cb0:	4808      	ldr	r0, [pc, #32]	; (8004cd4 <putchar+0x34>)
    if(cb != '\n') {
 8004cb2:	2b0a      	cmp	r3, #10
        HAL_USART_Transmit(&con, (uint8_t *)CRLF, 2, HAL_MAX_DELAY);
 8004cb4:	bf08      	it	eq
 8004cb6:	4908      	ldreq	r1, [pc, #32]	; (8004cd8 <putchar+0x38>)
        HAL_USART_Transmit(&con, &cb, 1, HAL_MAX_DELAY);
 8004cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cbc:	bf1a      	itte	ne
 8004cbe:	2201      	movne	r2, #1
 8004cc0:	f10d 0107 	addne.w	r1, sp, #7
        HAL_USART_Transmit(&con, (uint8_t *)CRLF, 2, HAL_MAX_DELAY);
 8004cc4:	2202      	moveq	r2, #2
 8004cc6:	f7ff ffbd 	bl	8004c44 <HAL_USART_Transmit>
    rng_delay();
 8004cca:	f7fd fd57 	bl	800277c <rng_delay>
}
 8004cce:	4620      	mov	r0, r4
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd10      	pop	{r4, pc}
 8004cd4:	2009e1c0 	.word	0x2009e1c0
 8004cd8:	0800e6fa 	.word	0x0800e6fa

08004cdc <puthex2>:
{
 8004cdc:	b538      	push	{r3, r4, r5, lr}
	putchar(hexmap[(b>>4) & 0xf]);
 8004cde:	4d06      	ldr	r5, [pc, #24]	; (8004cf8 <puthex2+0x1c>)
 8004ce0:	0903      	lsrs	r3, r0, #4
{
 8004ce2:	4604      	mov	r4, r0
	putchar(hexmap[(b>>0) & 0xf]);
 8004ce4:	f004 040f 	and.w	r4, r4, #15
	putchar(hexmap[(b>>4) & 0xf]);
 8004ce8:	5ce8      	ldrb	r0, [r5, r3]
 8004cea:	f7ff ffd9 	bl	8004ca0 <putchar>
	putchar(hexmap[(b>>0) & 0xf]);
 8004cee:	5d28      	ldrb	r0, [r5, r4]
}
 8004cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	putchar(hexmap[(b>>0) & 0xf]);
 8004cf4:	f7ff bfd4 	b.w	8004ca0 <putchar>
 8004cf8:	0800e6fd 	.word	0x0800e6fd

08004cfc <puthex4>:
{
 8004cfc:	b538      	push	{r3, r4, r5, lr}
	putchar(hexmap[(w>>12) & 0xf]);
 8004cfe:	4d0b      	ldr	r5, [pc, #44]	; (8004d2c <puthex4+0x30>)
 8004d00:	0b03      	lsrs	r3, r0, #12
{
 8004d02:	4604      	mov	r4, r0
	putchar(hexmap[(w>>12) & 0xf]);
 8004d04:	5ce8      	ldrb	r0, [r5, r3]
 8004d06:	f7ff ffcb 	bl	8004ca0 <putchar>
	putchar(hexmap[(w>>8) & 0xf]);
 8004d0a:	f3c4 2303 	ubfx	r3, r4, #8, #4
 8004d0e:	5ce8      	ldrb	r0, [r5, r3]
 8004d10:	f7ff ffc6 	bl	8004ca0 <putchar>
	putchar(hexmap[(w>>4) & 0xf]);
 8004d14:	f3c4 1303 	ubfx	r3, r4, #4, #4
	putchar(hexmap[(w>>0) & 0xf]);
 8004d18:	f004 040f 	and.w	r4, r4, #15
	putchar(hexmap[(w>>4) & 0xf]);
 8004d1c:	5ce8      	ldrb	r0, [r5, r3]
 8004d1e:	f7ff ffbf 	bl	8004ca0 <putchar>
	putchar(hexmap[(w>>0) & 0xf]);
 8004d22:	5d28      	ldrb	r0, [r5, r4]
}
 8004d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	putchar(hexmap[(w>>0) & 0xf]);
 8004d28:	f7ff bfba 	b.w	8004ca0 <putchar>
 8004d2c:	0800e6fd 	.word	0x0800e6fd

08004d30 <puthex8>:
{
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4604      	mov	r4, r0
    puthex4(w >> 16);
 8004d34:	0c00      	lsrs	r0, r0, #16
 8004d36:	f7ff ffe1 	bl	8004cfc <puthex4>
    puthex4(w & 0xffff);
 8004d3a:	b2a0      	uxth	r0, r4
}
 8004d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    puthex4(w & 0xffff);
 8004d40:	f7ff bfdc 	b.w	8004cfc <puthex4>

08004d44 <putdec4>:
{
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	4605      	mov	r5, r0
 8004d48:	2604      	movs	r6, #4
    for(int m=1000; m; m /= 10) {
 8004d4a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
            char n = '0' + ((w / m) % 10);
 8004d4e:	270a      	movs	r7, #10
        if(w >= m) {
 8004d50:	42a5      	cmp	r5, r4
 8004d52:	db09      	blt.n	8004d68 <putdec4+0x24>
            char n = '0' + ((w / m) % 10);
 8004d54:	fb95 f3f4 	sdiv	r3, r5, r4
 8004d58:	fb93 f0f7 	sdiv	r0, r3, r7
 8004d5c:	fb07 3310 	mls	r3, r7, r0, r3
 8004d60:	3330      	adds	r3, #48	; 0x30
            putchar(n);
 8004d62:	b2d8      	uxtb	r0, r3
 8004d64:	f7ff ff9c 	bl	8004ca0 <putchar>
    for(int m=1000; m; m /= 10) {
 8004d68:	fb94 f4f7 	sdiv	r4, r4, r7
 8004d6c:	3e01      	subs	r6, #1
 8004d6e:	d1ef      	bne.n	8004d50 <putdec4+0xc>
}
 8004d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d72 <hex_dump>:
{
 8004d72:	b570      	push	{r4, r5, r6, lr}
 8004d74:	4606      	mov	r6, r0
 8004d76:	460d      	mov	r5, r1
    for(int i=0; i<len; i++) {
 8004d78:	2400      	movs	r4, #0
 8004d7a:	42ac      	cmp	r4, r5
 8004d7c:	db04      	blt.n	8004d88 <hex_dump+0x16>
}
 8004d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    putchar('\n');
 8004d82:	200a      	movs	r0, #10
 8004d84:	f7ff bf8c 	b.w	8004ca0 <putchar>
        puthex2(data[i]);
 8004d88:	5d30      	ldrb	r0, [r6, r4]
 8004d8a:	f7ff ffa7 	bl	8004cdc <puthex2>
    for(int i=0; i<len; i++) {
 8004d8e:	3401      	adds	r4, #1
 8004d90:	e7f3      	b.n	8004d7a <hex_dump+0x8>
	...

08004d94 <puts>:
{
 8004d94:	b513      	push	{r0, r1, r4, lr}
 8004d96:	9001      	str	r0, [sp, #4]
    int ln = strlen(msg);
 8004d98:	f008 fc77 	bl	800d68a <strlen>
 8004d9c:	4604      	mov	r4, r0
    rng_delay();
 8004d9e:	f7fd fced 	bl	800277c <rng_delay>
    if(ln) HAL_USART_Transmit(&con, (uint8_t *)msg, ln, HAL_MAX_DELAY);
 8004da2:	9901      	ldr	r1, [sp, #4]
 8004da4:	b12c      	cbz	r4, 8004db2 <puts+0x1e>
 8004da6:	4809      	ldr	r0, [pc, #36]	; (8004dcc <puts+0x38>)
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dac:	b2a2      	uxth	r2, r4
 8004dae:	f7ff ff49 	bl	8004c44 <HAL_USART_Transmit>
    HAL_USART_Transmit(&con, (uint8_t *)CRLF, 2, HAL_MAX_DELAY);
 8004db2:	4907      	ldr	r1, [pc, #28]	; (8004dd0 <puts+0x3c>)
 8004db4:	4805      	ldr	r0, [pc, #20]	; (8004dcc <puts+0x38>)
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f7ff ff42 	bl	8004c44 <HAL_USART_Transmit>
    rng_delay();
 8004dc0:	f7fd fcdc 	bl	800277c <rng_delay>
}
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	b002      	add	sp, #8
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	bf00      	nop
 8004dcc:	2009e1c0 	.word	0x2009e1c0
 8004dd0:	0800e6fa 	.word	0x0800e6fa

08004dd4 <psram_send_byte>:

// psram_send_byte()
//
    void
psram_send_byte(OSPI_HandleTypeDef  *qh, uint8_t cmd_byte, bool is_quad)
{   
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	b094      	sub	sp, #80	; 0x50
 8004dd8:	4604      	mov	r4, r0
 8004dda:	460e      	mov	r6, r1
 8004ddc:	4615      	mov	r5, r2
    // Send single-byte commands to the PSRAM chip. Quad mode or normal SPI.

    OSPI_RegularCmdTypeDef cmd = {
 8004dde:	2100      	movs	r1, #0
 8004de0:	2250      	movs	r2, #80	; 0x50
 8004de2:	4668      	mov	r0, sp
 8004de4:	f008 fc1e 	bl	800d624 <memset>
        .OperationType = HAL_OSPI_OPTYPE_COMMON_CFG,
        .Instruction = cmd_byte,                    // Exit Quad Mode
        .InstructionMode = is_quad ? HAL_OSPI_INSTRUCTION_4_LINES : HAL_OSPI_INSTRUCTION_1_LINE,
 8004de8:	2d00      	cmp	r5, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2303      	movne	r3, #3
 8004dee:	2301      	moveq	r3, #1
        .DataMode = HAL_OSPI_DATA_NONE,
        .NbData = 0,                        // how much to read in bytes
    };

    // Start and finish a "Indirection functional mode" request
    HAL_OSPI_Command(qh, &cmd, HAL_MAX_DELAY);
 8004df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df4:	4669      	mov	r1, sp
 8004df6:	4620      	mov	r0, r4
    OSPI_RegularCmdTypeDef cmd = {
 8004df8:	9602      	str	r6, [sp, #8]
 8004dfa:	9303      	str	r3, [sp, #12]
    HAL_OSPI_Command(qh, &cmd, HAL_MAX_DELAY);
 8004dfc:	f006 f868 	bl	800aed0 <HAL_OSPI_Command>
}
 8004e00:	b014      	add	sp, #80	; 0x50
 8004e02:	bd70      	pop	{r4, r5, r6, pc}

08004e04 <psram_setup>:

// psram_setup()
//
    void
psram_setup(void)
{
 8004e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e08:	b0c6      	sub	sp, #280	; 0x118
    // Using OSPI1 block
    OSPI_HandleTypeDef  qh = { 0 };
 8004e0a:	2250      	movs	r2, #80	; 0x50
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	a80a      	add	r0, sp, #40	; 0x28
 8004e10:	f008 fc08 	bl	800d624 <memset>

    // enable clocks
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8004e14:	4b6a      	ldr	r3, [pc, #424]	; (8004fc0 <psram_setup+0x1bc>)
    // reset module
    __HAL_RCC_OSPI1_FORCE_RESET();
    __HAL_RCC_OSPI1_RELEASE_RESET();

   // configure pins: Port E PE10-PE15
    GPIO_InitTypeDef setup = {
 8004e16:	4c6b      	ldr	r4, [pc, #428]	; (8004fc4 <psram_setup+0x1c0>)
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8004e18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e22:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004e26:	9201      	str	r2, [sp, #4]
 8004e28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e2c:	f042 0210 	orr.w	r2, r2, #16
 8004e30:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e34:	f002 0210 	and.w	r2, r2, #16
 8004e38:	9202      	str	r2, [sp, #8]
 8004e3a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_OSPI1_FORCE_RESET();
 8004e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_OSPI1_RELEASE_RESET();
 8004e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitTypeDef setup = {
 8004e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e4e:	ad05      	add	r5, sp, #20
 8004e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e52:	6823      	ldr	r3, [r4, #0]
        .Mode = GPIO_MODE_AF_PP,            // not sure
        .Pull = GPIO_NOPULL,                // not sure
        .Speed = GPIO_SPEED_FREQ_VERY_HIGH,
        .Alternate = GPIO_AF10_OCTOSPIM_P1,
    };
    HAL_GPIO_Init(GPIOE, &setup);
 8004e54:	485c      	ldr	r0, [pc, #368]	; (8004fc8 <psram_setup+0x1c4>)
    GPIO_InitTypeDef setup = {
 8004e56:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(GPIOE, &setup);
 8004e58:	a905      	add	r1, sp, #20
 8004e5a:	f7fc f8d9 	bl	8001010 <HAL_GPIO_Init>


    // Config operational values
    qh.Instance = OCTOSPI1;
    qh.Init.FifoThreshold = 1;                          // ?? unused
 8004e5e:	4b5b      	ldr	r3, [pc, #364]	; (8004fcc <psram_setup+0x1c8>)
 8004e60:	2701      	movs	r7, #1
    qh.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
    qh.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;       // want standard mode (but octo only?)
    qh.Init.DeviceSize = 24;                    // assume max size, actual is 8Mbyte
 8004e62:	2218      	movs	r2, #24
    qh.Init.FifoThreshold = 1;                          // ?? unused
 8004e64:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
    qh.Init.ChipSelectHighTime = 1;             // 1, maxed out, seems to work
 8004e68:	e9cd 270e 	strd	r2, r7, [sp, #56]	; 0x38
    qh.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8004e6c:	2300      	movs	r3, #0
    qh.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;       // maybe?
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    qh.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;     // required!
    qh.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;  // low clock between ops (required, see errata)
#if HCLK_FREQUENCY == 80000000
    qh.Init.ClockPrescaler = 1;                 // prescaler (1=>80Mhz, 2=>40Mhz, etc)
#elif HCLK_FREQUENCY == 120000000
    qh.Init.ClockPrescaler = 2;                 // prescaler (1=>120Mhz, 2=>60Mhz, etc)
 8004e72:	f04f 0802 	mov.w	r8, #2
#else
#   error "testing needed"
#endif
    qh.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;        // dont need it?
 8004e76:	f04f 0908 	mov.w	r9, #8
    // - (during reads) 3 => 400ns  4 => 660ns   5+ => 1us 
    // - LATER: Errata 2.8.1 => says shall not use
    qh.Init.ChipSelectBoundary = 0;

    // module init 
    HAL_StatusTypeDef rv = HAL_OSPI_Init(&qh);
 8004e7a:	a80a      	add	r0, sp, #40	; 0x28
    qh.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;       // want standard mode (but octo only?)
 8004e7c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    qh.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;  // low clock between ops (required, see errata)
 8004e80:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
    qh.Init.ChipSelectBoundary = 0;
 8004e84:	e9cd 3915 	strd	r3, r9, [sp, #84]	; 0x54
    qh.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;       // maybe?
 8004e88:	9214      	str	r2, [sp, #80]	; 0x50
    qh.Init.ClockPrescaler = 2;                 // prescaler (1=>120Mhz, 2=>60Mhz, etc)
 8004e8a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    HAL_StatusTypeDef rv = HAL_OSPI_Init(&qh);
 8004e8e:	f005 ffb5 	bl	800adfc <HAL_OSPI_Init>
    ASSERT(rv == HAL_OK);
 8004e92:	4606      	mov	r6, r0
 8004e94:	b110      	cbz	r0, 8004e9c <psram_setup+0x98>
 8004e96:	484e      	ldr	r0, [pc, #312]	; (8004fd0 <psram_setup+0x1cc>)
 8004e98:	f7fb fdd6 	bl	8000a48 <fatal_error>

    // do some SPI commands first

    // Exit Quad mode, to get to a known state, after first power-up
    psram_send_byte(&qh, 0xf5, true);
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	21f5      	movs	r1, #245	; 0xf5
 8004ea0:	a80a      	add	r0, sp, #40	; 0x28
 8004ea2:	f7ff ff97 	bl	8004dd4 <psram_send_byte>

    // Chip Reset sequence
    psram_send_byte(&qh, 0x66, false);      // reset enable
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	2166      	movs	r1, #102	; 0x66
 8004eaa:	a80a      	add	r0, sp, #40	; 0x28
 8004eac:	f7ff ff92 	bl	8004dd4 <psram_send_byte>

    // Read Electronic ID
    // - length not clear from datasheet, but repeats after 8 bytes
    uint8_t psram_chip_eid[8];

    {   OSPI_RegularCmdTypeDef cmd = {
 8004eb0:	ad32      	add	r5, sp, #200	; 0xc8
    psram_send_byte(&qh, 0x99, false);      // reset
 8004eb2:	4632      	mov	r2, r6
 8004eb4:	2199      	movs	r1, #153	; 0x99
 8004eb6:	a80a      	add	r0, sp, #40	; 0x28
 8004eb8:	f7ff ff8c 	bl	8004dd4 <psram_send_byte>
    {   OSPI_RegularCmdTypeDef cmd = {
 8004ebc:	2250      	movs	r2, #80	; 0x50
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f008 fbaf 	bl	800d624 <memset>
 8004ec6:	239f      	movs	r3, #159	; 0x9f
 8004ec8:	e9cd 3734 	strd	r3, r7, [sp, #208]	; 0xd0
 8004ecc:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8004ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ed4:	e9cd 3a39 	strd	r3, sl, [sp, #228]	; 0xe4
            .DataMode = HAL_OSPI_DATA_1_LINE,
            .NbData = sizeof(psram_chip_eid),                        // how much to read in bytes
        };

        // Start a "Indirection functional mode" request
        rv = HAL_OSPI_Command(&qh, &cmd, HAL_MAX_DELAY);
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    {   OSPI_RegularCmdTypeDef cmd = {
 8004edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
        rv = HAL_OSPI_Command(&qh, &cmd, HAL_MAX_DELAY);
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	a80a      	add	r0, sp, #40	; 0x28
    {   OSPI_RegularCmdTypeDef cmd = {
 8004ee4:	e9cd 3940 	strd	r3, r9, [sp, #256]	; 0x100
        rv = HAL_OSPI_Command(&qh, &cmd, HAL_MAX_DELAY);
 8004ee8:	f005 fff2 	bl	800aed0 <HAL_OSPI_Command>
        if(rv != HAL_OK) goto fail;
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d15d      	bne.n	8004fac <psram_setup+0x1a8>

        rv = HAL_OSPI_Receive(&qh, psram_chip_eid, HAL_MAX_DELAY);
 8004ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ef4:	a903      	add	r1, sp, #12
 8004ef6:	a80a      	add	r0, sp, #40	; 0x28
 8004ef8:	f006 f91c 	bl	800b134 <HAL_OSPI_Receive>
        if(rv != HAL_OK) goto fail;
 8004efc:	4606      	mov	r6, r0
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d154      	bne.n	8004fac <psram_setup+0x1a8>
    }

    //puts2("PSRAM EID: "); 
    //hex_dump(psram_chip_eid, sizeof(psram_chip_eid));
    ASSERT(psram_chip_eid[0] == 0x0d);
 8004f02:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004f06:	2b0d      	cmp	r3, #13
 8004f08:	d1c5      	bne.n	8004e96 <psram_setup+0x92>
    ASSERT(psram_chip_eid[1] == 0x5d);
 8004f0a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004f0e:	2b5d      	cmp	r3, #93	; 0x5d
 8004f10:	d1c1      	bne.n	8004e96 <psram_setup+0x92>
    // .. other bits seem pretty similar between devices, they don't claim they are UUID

    // Put into Quad mode
    psram_send_byte(&qh, 0x35, false);  // 0x35 = Enter Quad Mode
 8004f12:	4602      	mov	r2, r0
 8004f14:	2135      	movs	r1, #53	; 0x35
 8004f16:	a80a      	add	r0, sp, #40	; 0x28
 8004f18:	f7ff ff5c 	bl	8004dd4 <psram_send_byte>

    // Configure read/write cycles for mem-mapped mode
    {   OSPI_RegularCmdTypeDef cmd = {
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	224c      	movs	r2, #76	; 0x4c
 8004f20:	a81f      	add	r0, sp, #124	; 0x7c
 8004f22:	f008 fb7f 	bl	800d624 <memset>
 8004f26:	f04f 0903 	mov.w	r9, #3
 8004f2a:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 8004f2e:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
            .DataMode = HAL_OSPI_DATA_4_LINES,
            .NbData = 0,                        // don't care / TBD?
        };

        // Config for write
        rv = HAL_OSPI_Command(&qh, &cmd, HAL_MAX_DELAY);
 8004f32:	a91e      	add	r1, sp, #120	; 0x78
    {   OSPI_RegularCmdTypeDef cmd = {
 8004f34:	f44f 7840 	mov.w	r8, #768	; 0x300
 8004f38:	f04f 7640 	mov.w	r6, #50331648	; 0x3000000
        rv = HAL_OSPI_Command(&qh, &cmd, HAL_MAX_DELAY);
 8004f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f40:	a80a      	add	r0, sp, #40	; 0x28
    {   OSPI_RegularCmdTypeDef cmd = {
 8004f42:	e9cd 8a25 	strd	r8, sl, [sp, #148]	; 0x94
 8004f46:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8004f4a:	962c      	str	r6, [sp, #176]	; 0xb0
        rv = HAL_OSPI_Command(&qh, &cmd, HAL_MAX_DELAY);
 8004f4c:	f005 ffc0 	bl	800aed0 <HAL_OSPI_Command>
        if(rv != HAL_OK) goto fail;
 8004f50:	4601      	mov	r1, r0
 8004f52:	bb58      	cbnz	r0, 8004fac <psram_setup+0x1a8>

        // .. for read
        OSPI_RegularCmdTypeDef cmd2 = {
 8004f54:	224c      	movs	r2, #76	; 0x4c
 8004f56:	a833      	add	r0, sp, #204	; 0xcc
 8004f58:	f008 fb64 	bl	800d624 <memset>
 8004f5c:	23eb      	movs	r3, #235	; 0xeb
 8004f5e:	e9cd 3934 	strd	r3, r9, [sp, #208]	; 0xd0
            .DataMode = HAL_OSPI_DATA_4_LINES,
            .NbData = 0,                        // don't care / TBD?
        };

        // Config for read
        rv = HAL_OSPI_Command(&qh, &cmd2, HAL_MAX_DELAY);
 8004f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        OSPI_RegularCmdTypeDef cmd2 = {
 8004f66:	2306      	movs	r3, #6
        rv = HAL_OSPI_Command(&qh, &cmd2, HAL_MAX_DELAY);
 8004f68:	4629      	mov	r1, r5
 8004f6a:	a80a      	add	r0, sp, #40	; 0x28
        OSPI_RegularCmdTypeDef cmd2 = {
 8004f6c:	e9cd 8a39 	strd	r8, sl, [sp, #228]	; 0xe4
 8004f70:	9732      	str	r7, [sp, #200]	; 0xc8
 8004f72:	9640      	str	r6, [sp, #256]	; 0x100
 8004f74:	9343      	str	r3, [sp, #268]	; 0x10c
        rv = HAL_OSPI_Command(&qh, &cmd2, HAL_MAX_DELAY);
 8004f76:	f005 ffab 	bl	800aed0 <HAL_OSPI_Command>
        if(rv != HAL_OK) goto fail;
 8004f7a:	b9b8      	cbnz	r0, 8004fac <psram_setup+0x1a8>
    }

    // config for memmap
    {   OSPI_MemoryMappedTypeDef mmap = {
 8004f7c:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8004f80:	e885 0003 	stmia.w	r5, {r0, r1}
           // Need this so that CS lines returns to inactive sometimes.
          .TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_ENABLE,
          .TimeOutPeriod = 16,          // no idea, max value 0xffff
        };

        rv = HAL_OSPI_MemoryMapped(&qh, &mmap);
 8004f84:	4629      	mov	r1, r5
 8004f86:	a80a      	add	r0, sp, #40	; 0x28
 8004f88:	f006 f9ba 	bl	800b300 <HAL_OSPI_MemoryMapped>
        if(rv != HAL_OK) goto fail;
 8004f8c:	b970      	cbnz	r0, 8004fac <psram_setup+0x1a8>
#else
    // Only a quick operational check only here. Non-destructive.
    {   __IO uint32_t    *ptr = (uint32_t *)(PSRAM_BASE+PSRAM_SIZE-4);
        uint32_t    tmp;

        tmp = *ptr;
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <psram_setup+0x1d0>)
        *ptr = 0x55aa1234;
 8004f90:	4a11      	ldr	r2, [pc, #68]	; (8004fd8 <psram_setup+0x1d4>)
        tmp = *ptr;
 8004f92:	f8d3 1ffc 	ldr.w	r1, [r3, #4092]	; 0xffc
        *ptr = 0x55aa1234;
 8004f96:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
        if(*ptr != 0x55aa1234) goto fail;
 8004f9a:	f8d3 0ffc 	ldr.w	r0, [r3, #4092]	; 0xffc
 8004f9e:	4290      	cmp	r0, r2
 8004fa0:	d104      	bne.n	8004fac <psram_setup+0x1a8>
        *ptr = tmp;
 8004fa2:	f8c3 1ffc 	str.w	r1, [r3, #4092]	; 0xffc

    oled_setup();
    oled_show(screen_fatal);

    LOCKUP_FOREVER();
}
 8004fa6:	b046      	add	sp, #280	; 0x118
 8004fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    puts("PSRAM fail");
 8004fac:	480b      	ldr	r0, [pc, #44]	; (8004fdc <psram_setup+0x1d8>)
 8004fae:	f7ff fef1 	bl	8004d94 <puts>
    oled_setup();
 8004fb2:	f7fb feb7 	bl	8000d24 <oled_setup>
    oled_show(screen_fatal);
 8004fb6:	480a      	ldr	r0, [pc, #40]	; (8004fe0 <psram_setup+0x1dc>)
 8004fb8:	f7fb ff44 	bl	8000e44 <oled_show>
    LOCKUP_FOREVER();
 8004fbc:	bf30      	wfi
 8004fbe:	e7fd      	b.n	8004fbc <psram_setup+0x1b8>
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	0800e73c 	.word	0x0800e73c
 8004fc8:	48001000 	.word	0x48001000
 8004fcc:	a0001000 	.word	0xa0001000
 8004fd0:	0800e390 	.word	0x0800e390
 8004fd4:	907ff000 	.word	0x907ff000
 8004fd8:	55aa1234 	.word	0x55aa1234
 8004fdc:	0800e70d 	.word	0x0800e70d
 8004fe0:	0800db02 	.word	0x0800db02

08004fe4 <psram_wipe>:

// psram_wipe()
//
    void
psram_wipe(void)
{
 8004fe4:	b508      	push	{r3, lr}
    if(OCTOSPI1->CR == 0) return;       // PSRAM not enabled (yet?)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <psram_wipe+0x1c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	b143      	cbz	r3, 8004ffe <psram_wipe+0x1a>

    // Fast! But real; maybe 150ms
    //puts2("PSRAM Wipe: ");
    memset4((uint32_t *)PSRAM_BASE, rng_sample(), PSRAM_SIZE);
 8004fec:	f7fd fb72 	bl	80026d4 <rng_sample>
 8004ff0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
        *dest = value;
 8004ff4:	f843 0b04 	str.w	r0, [r3], #4
    for(; byte_len; byte_len-=4, dest++) {
 8004ff8:	f113 4fdf 	cmn.w	r3, #1870659584	; 0x6f800000
 8004ffc:	d1fa      	bne.n	8004ff4 <psram_wipe+0x10>
    //puts("done");
}
 8004ffe:	bd08      	pop	{r3, pc}
 8005000:	a0001000 	.word	0xa0001000

08005004 <psram_do_upgrade>:
// NOTE: Incoming start address is typically not aligned.
//
    void
psram_do_upgrade(const uint8_t *start, uint32_t size)
{
    ASSERT(size >= FW_MIN_LENGTH);
 8005004:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
{
 8005008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800500c:	4606      	mov	r6, r0
 800500e:	460d      	mov	r5, r1
    ASSERT(size >= FW_MIN_LENGTH);
 8005010:	d202      	bcs.n	8005018 <psram_do_upgrade+0x14>
 8005012:	481e      	ldr	r0, [pc, #120]	; (800508c <psram_do_upgrade+0x88>)
 8005014:	f7fb fd18 	bl	8000a48 <fatal_error>

    // In case of reset/crash, we can recover, so save
    // what we need for that -- yes, we will re-verify signatures
    volatile recovery_header_t   *h = RECHDR_POS;
    h->start = start;
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <psram_do_upgrade+0x8c>)
    h->size = size;
    h->magic1 = RECHDR_MAGIC1;
 800501a:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <psram_do_upgrade+0x90>)
    h->start = start;
 800501c:	6058      	str	r0, [r3, #4]
    h->size = size;
 800501e:	6099      	str	r1, [r3, #8]
    h->magic1 = RECHDR_MAGIC1;
 8005020:	601a      	str	r2, [r3, #0]
    h->magic2 = RECHDR_MAGIC2;
 8005022:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <psram_do_upgrade+0x94>)
 8005024:	60da      	str	r2, [r3, #12]

    flash_setup0();
 8005026:	f7fc ffcf 	bl	8001fc8 <flash_setup0>
    flash_unlock();
 800502a:	f7fc fff1 	bl	8002010 <flash_unlock>
    for(uint32_t pos=0; pos < size; pos += 8) {
        uint32_t dest = FIRMWARE_START+pos;

        if(dest % (4*FLASH_ERASE_SIZE) == 0) {
            // show some progress
            oled_show_progress(screen_upgrading, pos*100/size);
 800502e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800509c <psram_do_upgrade+0x98>
    for(uint32_t pos=0; pos < size; pos += 8) {
 8005032:	2400      	movs	r4, #0
            oled_show_progress(screen_upgrading, pos*100/size);
 8005034:	f04f 0864 	mov.w	r8, #100	; 0x64
        uint32_t dest = FIRMWARE_START+pos;
 8005038:	f104 6700 	add.w	r7, r4, #134217728	; 0x8000000
        if(dest % (4*FLASH_ERASE_SIZE) == 0) {
 800503c:	f3c4 030d 	ubfx	r3, r4, #0, #14
 8005040:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 8005044:	b933      	cbnz	r3, 8005054 <psram_do_upgrade+0x50>
            oled_show_progress(screen_upgrading, pos*100/size);
 8005046:	fb08 f104 	mul.w	r1, r8, r4
 800504a:	4648      	mov	r0, r9
 800504c:	fbb1 f1f5 	udiv	r1, r1, r5
 8005050:	f7fb ff3a 	bl	8000ec8 <oled_show_progress>
        }

        if(dest % FLASH_ERASE_SIZE == 0) {
 8005054:	f3c7 030b 	ubfx	r3, r7, #0, #12
 8005058:	b923      	cbnz	r3, 8005064 <psram_do_upgrade+0x60>
            // page erase as we go
            rv = flash_page_erase(dest);
 800505a:	4638      	mov	r0, r7
 800505c:	f008 fb24 	bl	800d6a8 <__flash_page_erase_veneer>
                puts2("erase rv=");
                puthex2(rv);
                putchar('\n');
            }
#endif
            ASSERT(rv == 0);
 8005060:	2800      	cmp	r0, #0
 8005062:	d1d6      	bne.n	8005012 <psram_do_upgrade+0xe>
        }

        memcpy(&tmp, start+pos, 8);
 8005064:	1932      	adds	r2, r6, r4
 8005066:	5930      	ldr	r0, [r6, r4]
 8005068:	6851      	ldr	r1, [r2, #4]
 800506a:	466b      	mov	r3, sp
 800506c:	c303      	stmia	r3!, {r0, r1}
        rv = flash_burn(dest, tmp);
 800506e:	4638      	mov	r0, r7
 8005070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005074:	f008 fb14 	bl	800d6a0 <__flash_burn_veneer>
            puts2(" addr=");
            puthex8(dest);
            putchar('\n');
        }
#endif
        ASSERT(rv == 0);
 8005078:	2800      	cmp	r0, #0
 800507a:	d1ca      	bne.n	8005012 <psram_do_upgrade+0xe>
    for(uint32_t pos=0; pos < size; pos += 8) {
 800507c:	3408      	adds	r4, #8
 800507e:	42a5      	cmp	r5, r4
 8005080:	d8da      	bhi.n	8005038 <psram_do_upgrade+0x34>
    }

    flash_lock();
}
 8005082:	b003      	add	sp, #12
 8005084:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    flash_lock();
 8005088:	f7fc bfba 	b.w	8002000 <flash_lock>
 800508c:	0800e390 	.word	0x0800e390
 8005090:	907ff800 	.word	0x907ff800
 8005094:	dbcc8350 	.word	0xdbcc8350
 8005098:	bafcfba3 	.word	0xbafcfba3
 800509c:	0800e13b 	.word	0x0800e13b

080050a0 <psram_recover_firmware>:
{
 80050a0:	b510      	push	{r4, lr}
    if(    (h->magic1 != RECHDR_MAGIC1)
 80050a2:	4c1f      	ldr	r4, [pc, #124]	; (8005120 <psram_recover_firmware+0x80>)
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <psram_recover_firmware+0x84>)
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	429a      	cmp	r2, r3
{
 80050aa:	b088      	sub	sp, #32
    if(    (h->magic1 != RECHDR_MAGIC1)
 80050ac:	d113      	bne.n	80050d6 <psram_recover_firmware+0x36>
        || (h->magic2 != RECHDR_MAGIC2)
 80050ae:	68e2      	ldr	r2, [r4, #12]
 80050b0:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <psram_recover_firmware+0x88>)
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d10f      	bne.n	80050d6 <psram_recover_firmware+0x36>
        || ((uint32_t)h->start < PSRAM_BASE) 
 80050b6:	6863      	ldr	r3, [r4, #4]
 80050b8:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 80050bc:	d30b      	bcc.n	80050d6 <psram_recover_firmware+0x36>
        || ((uint32_t)h->start >= PSRAM_BASE+(PSRAM_SIZE/2)) 
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	4b1a      	ldr	r3, [pc, #104]	; (800512c <psram_recover_firmware+0x8c>)
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d807      	bhi.n	80050d6 <psram_recover_firmware+0x36>
        || (h->size > FW_MAX_LENGTH_MK4) 
 80050c6:	68a3      	ldr	r3, [r4, #8]
 80050c8:	f5b3 1ff0 	cmp.w	r3, #1966080	; 0x1e0000
 80050cc:	d803      	bhi.n	80050d6 <psram_recover_firmware+0x36>
        || (h->size < FW_MIN_LENGTH)
 80050ce:	68a3      	ldr	r3, [r4, #8]
 80050d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050d4:	d205      	bcs.n	80050e2 <psram_recover_firmware+0x42>
        puts("PSR: nada");
 80050d6:	4816      	ldr	r0, [pc, #88]	; (8005130 <psram_recover_firmware+0x90>)
        puts("PSR: version");
 80050d8:	f7ff fe5c 	bl	8004d94 <puts>
}
 80050dc:	2000      	movs	r0, #0
 80050de:	b008      	add	sp, #32
 80050e0:	bd10      	pop	{r4, pc}
    bool ok = verify_firmware_in_ram(h->start, h->size, world_check);
 80050e2:	6860      	ldr	r0, [r4, #4]
 80050e4:	68a1      	ldr	r1, [r4, #8]
 80050e6:	466a      	mov	r2, sp
 80050e8:	f7fc fdb4 	bl	8001c54 <verify_firmware_in_ram>
    if(!ok) {
 80050ec:	b908      	cbnz	r0, 80050f2 <psram_recover_firmware+0x52>
        puts("PSR: !check");
 80050ee:	4811      	ldr	r0, [pc, #68]	; (8005134 <psram_recover_firmware+0x94>)
 80050f0:	e7f2      	b.n	80050d8 <psram_recover_firmware+0x38>
    if(!verify_world_checksum(world_check)) {
 80050f2:	4668      	mov	r0, sp
 80050f4:	f7fc fe02 	bl	8001cfc <verify_world_checksum>
 80050f8:	b908      	cbnz	r0, 80050fe <psram_recover_firmware+0x5e>
        puts("PSR: version");
 80050fa:	480f      	ldr	r0, [pc, #60]	; (8005138 <psram_recover_firmware+0x98>)
 80050fc:	e7ec      	b.n	80050d8 <psram_recover_firmware+0x38>
    psram_do_upgrade(h->start, h->size);
 80050fe:	6860      	ldr	r0, [r4, #4]
 8005100:	68a1      	ldr	r1, [r4, #8]
 8005102:	f7ff ff7f 	bl	8005004 <psram_do_upgrade>
 8005106:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800510a:	490c      	ldr	r1, [pc, #48]	; (800513c <psram_recover_firmware+0x9c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <psram_recover_firmware+0xa0>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800510e:	68ca      	ldr	r2, [r1, #12]
 8005110:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005114:	4313      	orrs	r3, r2
 8005116:	60cb      	str	r3, [r1, #12]
 8005118:	f3bf 8f4f 	dsb	sy
    __NOP();
 800511c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800511e:	e7fd      	b.n	800511c <psram_recover_firmware+0x7c>
 8005120:	907ff800 	.word	0x907ff800
 8005124:	dbcc8350 	.word	0xdbcc8350
 8005128:	bafcfba3 	.word	0xbafcfba3
 800512c:	903fffff 	.word	0x903fffff
 8005130:	0800e718 	.word	0x0800e718
 8005134:	0800e722 	.word	0x0800e722
 8005138:	0800e72e 	.word	0x0800e72e
 800513c:	e000ed00 	.word	0xe000ed00
 8005140:	05fa0004 	.word	0x05fa0004

08005144 <sdcard_light>:

// sdcard_light()
//
    void inline
sdcard_light(bool on)
{
 8005144:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, !!on);    // turn LED off
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <sdcard_light+0xc>)
 800514a:	f7fc b8db 	b.w	8001304 <HAL_GPIO_WritePin>
 800514e:	bf00      	nop
 8005150:	48000800 	.word	0x48000800

08005154 <sdcard_is_inserted>:

// sdcard_is_inserted()
//
    bool
sdcard_is_inserted(void)
{
 8005154:	b508      	push	{r3, lr}
#ifdef FOR_Q1_ONLY
    return !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);        // PD3 - inserted when low (Q)
#else
    return !!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);      // PC13 - inserted when high (Mk4)
 8005156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800515a:	4803      	ldr	r0, [pc, #12]	; (8005168 <sdcard_is_inserted+0x14>)
 800515c:	f7fc f8cc 	bl	80012f8 <HAL_GPIO_ReadPin>
#endif
}
 8005160:	3800      	subs	r0, #0
 8005162:	bf18      	it	ne
 8005164:	2001      	movne	r0, #1
 8005166:	bd08      	pop	{r3, pc}
 8005168:	48000800 	.word	0x48000800

0800516c <sdcard_try_file>:

// sdcard_try_file()
//
    void
sdcard_try_file(uint32_t blk_pos)
{
 800516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005170:	4606      	mov	r6, r0
 8005172:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
    oled_show(screen_verify);
 8005176:	4832      	ldr	r0, [pc, #200]	; (8005240 <sdcard_try_file+0xd4>)
    uint8_t *ps = (uint8_t *)PSRAM_BASE;
    //uint8_t buf[512*8];      // half of all our SRAM 0x00002000
    uint8_t buf[512];      // slower, but works.
    
    for(uint32_t off = 0; off < FW_MAX_LENGTH_MK4; off += sizeof(buf)) {
        int rv = HAL_SD_ReadBlocks(&hsd, buf, blk_pos+(off/512), sizeof(buf)/512, 60000);
 8005178:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8005260 <sdcard_try_file+0xf4>
    oled_show(screen_verify);
 800517c:	f7fb fe62 	bl	8000e44 <oled_show>
    for(uint32_t off = 0; off < FW_MAX_LENGTH_MK4; off += sizeof(buf)) {
 8005180:	2500      	movs	r5, #0
        int rv = HAL_SD_ReadBlocks(&hsd, buf, blk_pos+(off/512), sizeof(buf)/512, 60000);
 8005182:	f64e 2760 	movw	r7, #60000	; 0xea60
 8005186:	9700      	str	r7, [sp, #0]
 8005188:	2301      	movs	r3, #1
 800518a:	eb06 2255 	add.w	r2, r6, r5, lsr #9
 800518e:	a90a      	add	r1, sp, #40	; 0x28
 8005190:	4640      	mov	r0, r8
 8005192:	f006 fe31 	bl	800bdf8 <HAL_SD_ReadBlocks>
        if(rv != HAL_OK) {
 8005196:	4604      	mov	r4, r0
 8005198:	b130      	cbz	r0, 80051a8 <sdcard_try_file+0x3c>
            puts("long read fail");
 800519a:	482a      	ldr	r0, [pc, #168]	; (8005244 <sdcard_try_file+0xd8>)

    // Check we have the **right** firmware, based on the world check sum
    // but don't set the light at this point.
    // - this includes check over bootrom (ourselves)
    if(!verify_world_checksum(world_check)) {
        puts("wrong world");
 800519c:	f7ff fdfa 	bl	8004d94 <puts>
    // Do the upgrade, using PSRAM data.
    psram_do_upgrade(start, len);

    // done
    NVIC_SystemReset();
}
 80051a0:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
 80051a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(ps + off, buf, sizeof(buf));
 80051a8:	f105 4010 	add.w	r0, r5, #2415919104	; 0x90000000
 80051ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b0:	a90a      	add	r1, sp, #40	; 0x28
    for(uint32_t off = 0; off < FW_MAX_LENGTH_MK4; off += sizeof(buf)) {
 80051b2:	f505 7500 	add.w	r5, r5, #512	; 0x200
        memcpy(ps + off, buf, sizeof(buf));
 80051b6:	f008 fa0d 	bl	800d5d4 <memcpy>
    for(uint32_t off = 0; off < FW_MAX_LENGTH_MK4; off += sizeof(buf)) {
 80051ba:	f5b5 1ff0 	cmp.w	r5, #1966080	; 0x1e0000
 80051be:	d1e2      	bne.n	8005186 <sdcard_try_file+0x1a>
    for(int idx=0; idx<file->targets; idx++) {
 80051c0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
            if(elem->addr == FIRMWARE_START) {
 80051c4:	4d20      	ldr	r5, [pc, #128]	; (8005248 <sdcard_try_file+0xdc>)
    for(int idx=0; idx<file->targets; idx++) {
 80051c6:	7a99      	ldrb	r1, [r3, #10]
 80051c8:	4620      	mov	r0, r4
    ptr += sizeof(DFUFile_t);
 80051ca:	330b      	adds	r3, #11
    for(int idx=0; idx<file->targets; idx++) {
 80051cc:	4288      	cmp	r0, r1
 80051ce:	db01      	blt.n	80051d4 <sdcard_try_file+0x68>
    puts("DFU parse fail");
 80051d0:	481e      	ldr	r0, [pc, #120]	; (800524c <sdcard_try_file+0xe0>)
 80051d2:	e7e3      	b.n	800519c <sdcard_try_file+0x30>
        for(int ei=0; ei<target->elements; ei++) {
 80051d4:	f8d3 610e 	ldr.w	r6, [r3, #270]	; 0x10e
 80051d8:	2200      	movs	r2, #0
        ptr += sizeof(DFUTarget_t);
 80051da:	f503 7389 	add.w	r3, r3, #274	; 0x112
        for(int ei=0; ei<target->elements; ei++) {
 80051de:	42b2      	cmp	r2, r6
 80051e0:	d101      	bne.n	80051e6 <sdcard_try_file+0x7a>
    for(int idx=0; idx<file->targets; idx++) {
 80051e2:	3001      	adds	r0, #1
 80051e4:	e7f2      	b.n	80051cc <sdcard_try_file+0x60>
            ptr += sizeof(DFUElement_t);
 80051e6:	461c      	mov	r4, r3
            if(elem->addr == FIRMWARE_START) {
 80051e8:	f854 7b08 	ldr.w	r7, [r4], #8
 80051ec:	42af      	cmp	r7, r5
 80051ee:	d110      	bne.n	8005212 <sdcard_try_file+0xa6>
                *target_size = elem->size;
 80051f0:	685d      	ldr	r5, [r3, #4]
    bool ok = verify_firmware_in_ram(start, len, world_check);
 80051f2:	aa02      	add	r2, sp, #8
 80051f4:	4629      	mov	r1, r5
 80051f6:	4620      	mov	r0, r4
 80051f8:	f7fc fd2c 	bl	8001c54 <verify_firmware_in_ram>
    if(!ok) return;
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d0cf      	beq.n	80051a0 <sdcard_try_file+0x34>
    puts("good firmware");
 8005200:	4813      	ldr	r0, [pc, #76]	; (8005250 <sdcard_try_file+0xe4>)
 8005202:	f7ff fdc7 	bl	8004d94 <puts>
    if(!verify_world_checksum(world_check)) {
 8005206:	a802      	add	r0, sp, #8
 8005208:	f7fc fd78 	bl	8001cfc <verify_world_checksum>
 800520c:	b920      	cbnz	r0, 8005218 <sdcard_try_file+0xac>
        puts("wrong world");
 800520e:	4811      	ldr	r0, [pc, #68]	; (8005254 <sdcard_try_file+0xe8>)
 8005210:	e7c4      	b.n	800519c <sdcard_try_file+0x30>
        for(int ei=0; ei<target->elements; ei++) {
 8005212:	3201      	adds	r2, #1
            ptr += sizeof(DFUElement_t);
 8005214:	4623      	mov	r3, r4
 8005216:	e7e2      	b.n	80051de <sdcard_try_file+0x72>
    sdcard_light(false);
 8005218:	2000      	movs	r0, #0
 800521a:	f7ff ff93 	bl	8005144 <sdcard_light>
    psram_do_upgrade(start, len);
 800521e:	4629      	mov	r1, r5
 8005220:	4620      	mov	r0, r4
 8005222:	f7ff feef 	bl	8005004 <psram_do_upgrade>
 8005226:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800522a:	490b      	ldr	r1, [pc, #44]	; (8005258 <sdcard_try_file+0xec>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <sdcard_try_file+0xf0>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800522e:	68ca      	ldr	r2, [r1, #12]
 8005230:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005234:	4313      	orrs	r3, r2
 8005236:	60cb      	str	r3, [r1, #12]
 8005238:	f3bf 8f4f 	dsb	sy
    __NOP();
 800523c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800523e:	e7fd      	b.n	800523c <sdcard_try_file+0xd0>
 8005240:	0800e1f2 	.word	0x0800e1f2
 8005244:	0800e758 	.word	0x0800e758
 8005248:	08020000 	.word	0x08020000
 800524c:	0800e767 	.word	0x0800e767
 8005250:	0800e776 	.word	0x0800e776
 8005254:	0800e784 	.word	0x0800e784
 8005258:	e000ed00 	.word	0xe000ed00
 800525c:	05fa0004 	.word	0x05fa0004
 8005260:	2009e220 	.word	0x2009e220

08005264 <sdcard_search>:

// sdcard_search()
//
    void
sdcard_search(void)
{
 8005264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    oled_show(screen_search);
 8005268:	4854      	ldr	r0, [pc, #336]	; (80053bc <sdcard_search+0x158>)
{
 800526a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
    oled_show(screen_search);
 800526e:	f7fb fde9 	bl	8000e44 <oled_show>

    if(!sdcard_is_inserted()) return;
 8005272:	f7ff ff6f 	bl	8005154 <sdcard_is_inserted>
 8005276:	2800      	cmp	r0, #0
 8005278:	d07a      	beq.n	8005370 <sdcard_search+0x10c>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800527a:	4f51      	ldr	r7, [pc, #324]	; (80053c0 <sdcard_search+0x15c>)

    uint32_t num_blocks;

    // open card (power it) and get details, do setup
    puts2("sdcard_search: ");
 800527c:	4851      	ldr	r0, [pc, #324]	; (80053c4 <sdcard_search+0x160>)
    {   GPIO_InitTypeDef setup = {
 800527e:	4c52      	ldr	r4, [pc, #328]	; (80053c8 <sdcard_search+0x164>)
    puts2("sdcard_search: ");
 8005280:	f7ff fcfa 	bl	8004c78 <puts2>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800528a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	9b03      	ldr	r3, [sp, #12]
    {   GPIO_InitTypeDef setup = {
 8005296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005298:	ad04      	add	r5, sp, #16
 800529a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529c:	f854 3b04 	ldr.w	r3, [r4], #4
 80052a0:	602b      	str	r3, [r5, #0]
        HAL_GPIO_Init(GPIOC, &setup);
 80052a2:	484a      	ldr	r0, [pc, #296]	; (80053cc <sdcard_search+0x168>)
 80052a4:	a904      	add	r1, sp, #16
 80052a6:	f7fb feb3 	bl	8001010 <HAL_GPIO_Init>
    {   GPIO_InitTypeDef setup = {
 80052aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ac:	ae04      	add	r6, sp, #16
 80052ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	602b      	str	r3, [r5, #0]
        HAL_GPIO_Init(GPIOD, &setup);
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	4846      	ldr	r0, [pc, #280]	; (80053d0 <sdcard_search+0x16c>)
    memset(&hsd, 0, sizeof(SD_HandleTypeDef));
 80052b8:	4d46      	ldr	r5, [pc, #280]	; (80053d4 <sdcard_search+0x170>)
        HAL_GPIO_Init(GPIOD, &setup);
 80052ba:	f7fb fea9 	bl	8001010 <HAL_GPIO_Init>
    __HAL_RCC_SDMMC1_FORCE_RESET();
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __HAL_RCC_SDMMC1_RELEASE_RESET();
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    sdcard_setup();
    delay_ms(100);
 80052ce:	2064      	movs	r0, #100	; 0x64
 80052d0:	f7fe fb12 	bl	80038f8 <delay_ms>
    memset(&hsd, 0, sizeof(SD_HandleTypeDef));
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	2100      	movs	r1, #0
 80052d8:	4628      	mov	r0, r5
 80052da:	f008 f9a3 	bl	800d624 <memset>
    puts2("sdcard_probe: ");
 80052de:	483e      	ldr	r0, [pc, #248]	; (80053d8 <sdcard_search+0x174>)
 80052e0:	f7ff fcca 	bl	8004c78 <puts2>
    hsd.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80052e4:	4a3d      	ldr	r2, [pc, #244]	; (80053dc <sdcard_search+0x178>)
 80052e6:	2300      	movs	r3, #0
 80052e8:	e9c5 2300 	strd	r2, r3, [r5]
    hsd.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 80052ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hsd.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80052f0:	e9c5 2302 	strd	r2, r3, [r5, #8]
    hsd.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80052f4:	612b      	str	r3, [r5, #16]
    int rv = HAL_SD_Init(&hsd);
 80052f6:	4628      	mov	r0, r5
    hsd.Init.ClockDiv = SDMMC_TRANSFER_CLK_DIV;
 80052f8:	2303      	movs	r3, #3
 80052fa:	616b      	str	r3, [r5, #20]
    int rv = HAL_SD_Init(&hsd);
 80052fc:	f007 faf6 	bl	800c8ec <HAL_SD_Init>
    if(rv != HAL_OK) {
 8005300:	4604      	mov	r4, r0
 8005302:	b130      	cbz	r0, 8005312 <sdcard_search+0xae>
        puts("init fail");
 8005304:	4836      	ldr	r0, [pc, #216]	; (80053e0 <sdcard_search+0x17c>)
            oled_show_progress(screen_search, pos*100 / num_blocks);
            sdcard_light(true);
        }
    }

}
 8005306:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 800530a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        puts("bsize?");
 800530e:	f7ff bd41 	b.w	8004d94 <puts>
    sdcard_light(true);
 8005312:	2001      	movs	r0, #1
 8005314:	f7ff ff16 	bl	8005144 <sdcard_light>
    rv = HAL_SD_ConfigSpeedBusOperation(&hsd, SDMMC_SPEED_MODE_AUTO);
 8005318:	4621      	mov	r1, r4
 800531a:	4628      	mov	r0, r5
 800531c:	f007 fbbe 	bl	800ca9c <HAL_SD_ConfigSpeedBusOperation>
    if(rv != HAL_OK) {
 8005320:	b108      	cbz	r0, 8005326 <sdcard_search+0xc2>
        puts("speed");
 8005322:	4830      	ldr	r0, [pc, #192]	; (80053e4 <sdcard_search+0x180>)
 8005324:	e7ef      	b.n	8005306 <sdcard_search+0xa2>
    rv = HAL_SD_ConfigWideBusOperation(&hsd, SDMMC_BUS_WIDE_4B);
 8005326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800532a:	4628      	mov	r0, r5
 800532c:	f007 fa08 	bl	800c740 <HAL_SD_ConfigWideBusOperation>
    if(rv != HAL_OK) {
 8005330:	4604      	mov	r4, r0
 8005332:	b108      	cbz	r0, 8005338 <sdcard_search+0xd4>
        puts("wide");
 8005334:	482c      	ldr	r0, [pc, #176]	; (80053e8 <sdcard_search+0x184>)
 8005336:	e7e6      	b.n	8005306 <sdcard_search+0xa2>
    if(hsd.SdCard.BlockSize != 512) {
 8005338:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800533a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533e:	d001      	beq.n	8005344 <sdcard_search+0xe0>
        puts("bsize?");
 8005340:	482a      	ldr	r0, [pc, #168]	; (80053ec <sdcard_search+0x188>)
 8005342:	e7e0      	b.n	8005306 <sdcard_search+0xa2>
    puts("ok");
 8005344:	482a      	ldr	r0, [pc, #168]	; (80053f0 <sdcard_search+0x18c>)
    *num_blocks = hsd.SdCard.BlockNbr;
 8005346:	6cee      	ldr	r6, [r5, #76]	; 0x4c
        if(memcmp(blk, "DfuSe", 5) == 0) {
 8005348:	4f2a      	ldr	r7, [pc, #168]	; (80053f4 <sdcard_search+0x190>)
            oled_show_progress(screen_search, pos*100 / num_blocks);
 800534a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80053bc <sdcard_search+0x158>
    puts("ok");
 800534e:	f7ff fd21 	bl	8004d94 <puts>
    for(int pos=0; pos<num_blocks; pos += 1) {
 8005352:	42b4      	cmp	r4, r6
 8005354:	d00c      	beq.n	8005370 <sdcard_search+0x10c>
        int rv = HAL_SD_ReadBlocks(&hsd, blk, pos, 1, 60000);
 8005356:	f64e 2360 	movw	r3, #60000	; 0xea60
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4622      	mov	r2, r4
 800535e:	2301      	movs	r3, #1
 8005360:	a904      	add	r1, sp, #16
 8005362:	4628      	mov	r0, r5
 8005364:	f006 fd48 	bl	800bdf8 <HAL_SD_ReadBlocks>
        if(rv != HAL_OK) {
 8005368:	b130      	cbz	r0, 8005378 <sdcard_search+0x114>
            puts("fail read");
 800536a:	4823      	ldr	r0, [pc, #140]	; (80053f8 <sdcard_search+0x194>)
 800536c:	f7ff fd12 	bl	8004d94 <puts>
}
 8005370:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(memcmp(blk, "DfuSe", 5) == 0) {
 8005378:	2205      	movs	r2, #5
 800537a:	4639      	mov	r1, r7
 800537c:	a804      	add	r0, sp, #16
 800537e:	f008 f919 	bl	800d5b4 <memcmp>
 8005382:	b9b0      	cbnz	r0, 80053b2 <sdcard_search+0x14e>
            puts2("found @ ");
 8005384:	481d      	ldr	r0, [pc, #116]	; (80053fc <sdcard_search+0x198>)
 8005386:	f7ff fc77 	bl	8004c78 <puts2>
            puthex8(pos);
 800538a:	4620      	mov	r0, r4
 800538c:	f7ff fcd0 	bl	8004d30 <puthex8>
            putchar('\n');
 8005390:	200a      	movs	r0, #10
 8005392:	f7ff fc85 	bl	8004ca0 <putchar>
            sdcard_try_file(pos);
 8005396:	4620      	mov	r0, r4
 8005398:	f7ff fee8 	bl	800516c <sdcard_try_file>
            oled_show_progress(screen_search, pos*100 / num_blocks);
 800539c:	2164      	movs	r1, #100	; 0x64
 800539e:	4640      	mov	r0, r8
 80053a0:	4361      	muls	r1, r4
 80053a2:	fbb1 f1f6 	udiv	r1, r1, r6
 80053a6:	f7fb fd8f 	bl	8000ec8 <oled_show_progress>
            sdcard_light(true);
 80053aa:	2001      	movs	r0, #1
 80053ac:	f7ff feca 	bl	8005144 <sdcard_light>
 80053b0:	e001      	b.n	80053b6 <sdcard_search+0x152>
        if(pos % 128 == 0) {
 80053b2:	0663      	lsls	r3, r4, #25
 80053b4:	d0f2      	beq.n	800539c <sdcard_search+0x138>
    for(int pos=0; pos<num_blocks; pos += 1) {
 80053b6:	3401      	adds	r4, #1
 80053b8:	e7cb      	b.n	8005352 <sdcard_search+0xee>
 80053ba:	bf00      	nop
 80053bc:	0800e029 	.word	0x0800e029
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0800e790 	.word	0x0800e790
 80053c8:	0800e7f8 	.word	0x0800e7f8
 80053cc:	48000800 	.word	0x48000800
 80053d0:	48000c00 	.word	0x48000c00
 80053d4:	2009e220 	.word	0x2009e220
 80053d8:	0800e7a0 	.word	0x0800e7a0
 80053dc:	50062400 	.word	0x50062400
 80053e0:	0800e7af 	.word	0x0800e7af
 80053e4:	0800e7b9 	.word	0x0800e7b9
 80053e8:	0800e7bf 	.word	0x0800e7bf
 80053ec:	0800e7c4 	.word	0x0800e7c4
 80053f0:	0800e7cb 	.word	0x0800e7cb
 80053f4:	0800e7d8 	.word	0x0800e7d8
 80053f8:	0800e7ce 	.word	0x0800e7ce
 80053fc:	0800e7de 	.word	0x0800e7de

08005400 <sdcard_recovery>:

// sdcard_recovery()
//
    void
sdcard_recovery(void)
{
 8005400:	b508      	push	{r3, lr}
    // Use SDCard to recover. Must be precise version they tried to
    // install before, and will be slow AF.

    puts("Recovery mode.");
 8005402:	480b      	ldr	r0, [pc, #44]	; (8005430 <sdcard_recovery+0x30>)
    while(1) {
        // .. need them to insert a card
        
        sdcard_light(false);
        while(!sdcard_is_inserted()) {
            oled_show(screen_recovery);
 8005404:	4c0b      	ldr	r4, [pc, #44]	; (8005434 <sdcard_recovery+0x34>)
    puts("Recovery mode.");
 8005406:	f7ff fcc5 	bl	8004d94 <puts>
        sdcard_light(false);
 800540a:	2000      	movs	r0, #0
 800540c:	f7ff fe9a 	bl	8005144 <sdcard_light>
        while(!sdcard_is_inserted()) {
 8005410:	f7ff fea0 	bl	8005154 <sdcard_is_inserted>
 8005414:	b128      	cbz	r0, 8005422 <sdcard_recovery+0x22>
            delay_ms(200);
        }
            
        // look for binary, will reset system if successful
        sdcard_light(true);
 8005416:	2001      	movs	r0, #1
 8005418:	f7ff fe94 	bl	8005144 <sdcard_light>
        sdcard_search();
 800541c:	f7ff ff22 	bl	8005264 <sdcard_search>
        sdcard_light(false);
 8005420:	e7f3      	b.n	800540a <sdcard_recovery+0xa>
            oled_show(screen_recovery);
 8005422:	4620      	mov	r0, r4
 8005424:	f7fb fd0e 	bl	8000e44 <oled_show>
            delay_ms(200);
 8005428:	20c8      	movs	r0, #200	; 0xc8
 800542a:	f7fe fa65 	bl	80038f8 <delay_ms>
 800542e:	e7ef      	b.n	8005410 <sdcard_recovery+0x10>
 8005430:	0800e7e7 	.word	0x0800e7e7
 8005434:	0800dc28 	.word	0x0800dc28

08005438 <HAL_HASHEx_SHA256_Accmlt>:
#include <string.h>

// so we don't need stm32l4xx_hal_hash_ex.c
HAL_StatusTypeDef HAL_HASHEx_SHA256_Accmlt(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
  return HASH_Accumulate(hhash, pInBuffer, Size,HASH_ALGOSELECTION_SHA256);
 8005438:	4b01      	ldr	r3, [pc, #4]	; (8005440 <HAL_HASHEx_SHA256_Accmlt+0x8>)
 800543a:	f005 ba25 	b.w	800a888 <HASH_Accumulate>
 800543e:	bf00      	nop
 8005440:	00040080 	.word	0x00040080

08005444 <HAL_HASHEx_SHA256_Start>:
}

HAL_StatusTypeDef HAL_HASHEx_SHA256_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout)
{
 8005444:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA256);
 8005446:	4c04      	ldr	r4, [pc, #16]	; (8005458 <HAL_HASHEx_SHA256_Start+0x14>)
 8005448:	9401      	str	r4, [sp, #4]
 800544a:	9c04      	ldr	r4, [sp, #16]
 800544c:	9400      	str	r4, [sp, #0]
 800544e:	f005 f977 	bl	800a740 <HASH_Start>
}
 8005452:	b002      	add	sp, #8
 8005454:	bd10      	pop	{r4, pc}
 8005456:	bf00      	nop
 8005458:	00040080 	.word	0x00040080

0800545c <HAL_HMACEx_SHA256_Start>:

HAL_StatusTypeDef HAL_HMACEx_SHA256_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout)
{
 800545c:	b513      	push	{r0, r1, r4, lr}
  return HMAC_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA256);
 800545e:	4c04      	ldr	r4, [pc, #16]	; (8005470 <HAL_HMACEx_SHA256_Start+0x14>)
 8005460:	9401      	str	r4, [sp, #4]
 8005462:	9c04      	ldr	r4, [sp, #16]
 8005464:	9400      	str	r4, [sp, #0]
 8005466:	f005 fbad 	bl	800abc4 <HMAC_Start>
}
 800546a:	b002      	add	sp, #8
 800546c:	bd10      	pop	{r4, pc}
 800546e:	bf00      	nop
 8005470:	00040080 	.word	0x00040080

08005474 <sha256_init>:

void sha256_init(SHA256_CTX *ctx)
{
 8005474:	b510      	push	{r4, lr}
    memset(ctx, 0, sizeof(SHA256_CTX));
 8005476:	2248      	movs	r2, #72	; 0x48
{
 8005478:	4604      	mov	r4, r0
    memset(ctx, 0, sizeof(SHA256_CTX));
 800547a:	2100      	movs	r1, #0
 800547c:	3004      	adds	r0, #4
 800547e:	f008 f8d1 	bl	800d624 <memset>

#if 1
    ctx->num_pending = 0;
    ctx->hh.Init.DataType = HASH_DATATYPE_8B;
 8005482:	2320      	movs	r3, #32
 8005484:	6023      	str	r3, [r4, #0]
    HAL_HASH_Init(&ctx->hh);
 8005486:	4620      	mov	r0, r4
    __HAL_HASH_RESET_MDMAT();

    MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT,
            HASH_ALGOSELECTION_SHA256 | HASH_CR_INIT);
#endif
}
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_HASH_Init(&ctx->hh);
 800548c:	f004 bfe6 	b.w	800a45c <HAL_HASH_Init>

08005490 <sha256_update>:

void sha256_update(SHA256_CTX *ctx, const uint8_t data[], uint32_t len)
{
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_StatusTypeDef rv;

    // clear out any pending bytes
    if(ctx->num_pending + len >= 4) {
 8005492:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8005496:	4413      	add	r3, r2
 8005498:	2b03      	cmp	r3, #3
{
 800549a:	4605      	mov	r5, r0
 800549c:	460e      	mov	r6, r1
 800549e:	4614      	mov	r4, r2
    if(ctx->num_pending + len >= 4) {
 80054a0:	d818      	bhi.n	80054d4 <sha256_update+0x44>
        }
    }

    // write full blocks
    uint32_t blocks = len / 4;
    if(blocks) {
 80054a2:	2c03      	cmp	r4, #3
 80054a4:	d926      	bls.n	80054f4 <sha256_update+0x64>
#if 1
        rv = HAL_HASHEx_SHA256_Accumulate(&ctx->hh, (uint8_t *)data, blocks*4);
 80054a6:	f024 0703 	bic.w	r7, r4, #3
 80054aa:	463a      	mov	r2, r7
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7ff ffc2 	bl	8005438 <HAL_HASHEx_SHA256_Accmlt>
        ASSERT(rv == HAL_OK);
 80054b4:	b9c8      	cbnz	r0, 80054ea <sha256_update+0x5a>
            uint32_t    tmp;
            memcpy(&tmp, data, 4);
            HASH->DIN = tmp;
        }
#endif
        len -= blocks*4;
 80054b6:	f004 0403 	and.w	r4, r4, #3
        data += blocks*4;
 80054ba:	443e      	add	r6, r7
 80054bc:	e01a      	b.n	80054f4 <sha256_update+0x64>
            ctx->pending[ctx->num_pending++] = *data;
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
 80054c6:	442b      	add	r3, r5
 80054c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80054cc:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
            if(!len) break;
 80054d0:	3c01      	subs	r4, #1
 80054d2:	d00d      	beq.n	80054f0 <sha256_update+0x60>
        while(ctx->num_pending != 4) {
 80054d4:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d1f0      	bne.n	80054be <sha256_update+0x2e>
            rv = HAL_HASHEx_SHA256_Accumulate(&ctx->hh, ctx->pending, 4);
 80054dc:	2204      	movs	r2, #4
 80054de:	f105 0144 	add.w	r1, r5, #68	; 0x44
 80054e2:	4628      	mov	r0, r5
 80054e4:	f7ff ffa8 	bl	8005438 <HAL_HASHEx_SHA256_Accmlt>
            ASSERT(rv == HAL_OK);
 80054e8:	b140      	cbz	r0, 80054fc <sha256_update+0x6c>
 80054ea:	480b      	ldr	r0, [pc, #44]	; (8005518 <sha256_update+0x88>)
 80054ec:	f7fb faac 	bl	8000a48 <fatal_error>
        if(ctx->num_pending == 4) {
 80054f0:	2a04      	cmp	r2, #4
 80054f2:	d0f3      	beq.n	80054dc <sha256_update+0x4c>
 80054f4:	4434      	add	r4, r6
    }

    // save runt for later
    ASSERT(len <= 3);
    while(len) {
 80054f6:	42b4      	cmp	r4, r6
 80054f8:	d103      	bne.n	8005502 <sha256_update+0x72>
        ctx->pending[ctx->num_pending++] = *data;
        data++;
        len--;
    }
}
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ctx->num_pending = 0;
 80054fc:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
 8005500:	e7cf      	b.n	80054a2 <sha256_update+0x12>
        ctx->pending[ctx->num_pending++] = *data;
 8005502:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
 800550c:	442b      	add	r3, r5
 800550e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        len--;
 8005516:	e7ee      	b.n	80054f6 <sha256_update+0x66>
 8005518:	0800e390 	.word	0x0800e390

0800551c <sha256_final>:

void sha256_final(SHA256_CTX *ctx, uint8_t digest[32])
{
 800551c:	b513      	push	{r0, r1, r4, lr}
    // Do final 0-3 bytes, pad and return digest.
#if 1
    HAL_StatusTypeDef rv = HAL_HASHEx_SHA256_Start(&ctx->hh,
 800551e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005522:	9200      	str	r2, [sp, #0]
{
 8005524:	460b      	mov	r3, r1
    HAL_StatusTypeDef rv = HAL_HASHEx_SHA256_Start(&ctx->hh,
 8005526:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 800552a:	f100 0144 	add.w	r1, r0, #68	; 0x44
 800552e:	f7ff ff89 	bl	8005444 <HAL_HASHEx_SHA256_Start>
                                ctx->pending, ctx->num_pending, digest, HAL_MAX_DELAY);
    ASSERT(rv == HAL_OK);
 8005532:	b110      	cbz	r0, 800553a <sha256_final+0x1e>
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <sha256_final+0x24>)
 8005536:	f7fb fa87 	bl	8000a48 <fatal_error>
    tmp = __REV(HASH_DIGEST->HR[6]);
    memcpy(out, &tmp, 4); out += 4;
    tmp = __REV(HASH_DIGEST->HR[7]);
    memcpy(out, &tmp, 4);
#endif
}
 800553a:	b002      	add	sp, #8
 800553c:	bd10      	pop	{r4, pc}
 800553e:	bf00      	nop
 8005540:	0800e390 	.word	0x0800e390

08005544 <sha256_single>:
//
// single-shot version (best)
//
    void
sha256_single(const uint8_t data[], uint32_t len, uint8_t digest[32])
{
 8005544:	b530      	push	{r4, r5, lr}
 8005546:	b097      	sub	sp, #92	; 0x5c
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
 800554c:	9203      	str	r2, [sp, #12]
    HASH_HandleTypeDef  hh = {0};
 800554e:	2100      	movs	r1, #0
 8005550:	2240      	movs	r2, #64	; 0x40
 8005552:	a806      	add	r0, sp, #24
 8005554:	f008 f866 	bl	800d624 <memset>

    hh.Init.DataType = HASH_DATATYPE_8B;
 8005558:	2220      	movs	r2, #32

    HAL_HASH_Init(&hh);
 800555a:	a805      	add	r0, sp, #20
    hh.Init.DataType = HASH_DATATYPE_8B;
 800555c:	9205      	str	r2, [sp, #20]
    HAL_HASH_Init(&hh);
 800555e:	f004 ff7d 	bl	800a45c <HAL_HASH_Init>

    // It's called "Start" but it handles the runt packet, so really can only
    // be used once at end of message, or for whole message.
    HAL_StatusTypeDef rv = HAL_HASHEx_SHA256_Start(&hh, (uint8_t *)data, len,
 8005562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005566:	9200      	str	r2, [sp, #0]
 8005568:	9b03      	ldr	r3, [sp, #12]
 800556a:	462a      	mov	r2, r5
 800556c:	4621      	mov	r1, r4
 800556e:	a805      	add	r0, sp, #20
 8005570:	f7ff ff68 	bl	8005444 <HAL_HASHEx_SHA256_Start>
                                                    digest, HAL_MAX_DELAY);
    ASSERT(rv == HAL_OK);
 8005574:	b110      	cbz	r0, 800557c <sha256_single+0x38>
 8005576:	4802      	ldr	r0, [pc, #8]	; (8005580 <sha256_single+0x3c>)
 8005578:	f7fb fa66 	bl	8000a48 <fatal_error>
}
 800557c:	b017      	add	sp, #92	; 0x5c
 800557e:	bd30      	pop	{r4, r5, pc}
 8005580:	0800e390 	.word	0x0800e390

08005584 <hmac_sha256_init>:
// hmac_sha256_init()
//
    void
hmac_sha256_init(HMAC_CTX *ctx)
{
    memset(ctx, 0, sizeof(HMAC_CTX));
 8005584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005588:	2100      	movs	r1, #0
 800558a:	f008 b84b 	b.w	800d624 <memset>
	...

08005590 <hmac_sha256_update>:

// hmac_sha256_update()
//
    void
hmac_sha256_update(HMAC_CTX *ctx, const uint8_t data[], uint32_t len)
{
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4604      	mov	r4, r0
    // simple append
    ASSERT(ctx->num_pending + len < sizeof(ctx->pending));
 8005594:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8005598:	1883      	adds	r3, r0, r2
 800559a:	2bff      	cmp	r3, #255	; 0xff
{
 800559c:	4615      	mov	r5, r2
    ASSERT(ctx->num_pending + len < sizeof(ctx->pending));
 800559e:	d902      	bls.n	80055a6 <hmac_sha256_update+0x16>
 80055a0:	4805      	ldr	r0, [pc, #20]	; (80055b8 <hmac_sha256_update+0x28>)
 80055a2:	f7fb fa51 	bl	8000a48 <fatal_error>

    memcpy(ctx->pending+ctx->num_pending, data, len);
 80055a6:	4420      	add	r0, r4
 80055a8:	f008 f814 	bl	800d5d4 <memcpy>

    ctx->num_pending += len;
 80055ac:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80055b0:	442a      	add	r2, r5
 80055b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
}
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	0800e390 	.word	0x0800e390

080055bc <hmac_sha256_final>:

// hmac_sha256_final()
//
    void
hmac_sha256_final(HMAC_CTX *ctx, const uint8_t key[32], uint8_t digest[32])
{
 80055bc:	b530      	push	{r4, r5, lr}
 80055be:	b097      	sub	sp, #92	; 0x5c
 80055c0:	4604      	mov	r4, r0
 80055c2:	460d      	mov	r5, r1
 80055c4:	9203      	str	r2, [sp, #12]
    HASH_HandleTypeDef  hh = {0};
 80055c6:	2100      	movs	r1, #0
 80055c8:	2238      	movs	r2, #56	; 0x38
 80055ca:	a808      	add	r0, sp, #32
 80055cc:	f008 f82a 	bl	800d624 <memset>

    hh.Init.DataType = HASH_DATATYPE_8B;
 80055d0:	2220      	movs	r2, #32
    hh.Init.pKey = (uint8_t *)key;      // const viol due to API dumbness
    hh.Init.KeySize = 32;

    HAL_HASH_Init(&hh);
 80055d2:	a805      	add	r0, sp, #20
    hh.Init.KeySize = 32;
 80055d4:	e9cd 2506 	strd	r2, r5, [sp, #24]
    hh.Init.DataType = HASH_DATATYPE_8B;
 80055d8:	9205      	str	r2, [sp, #20]
    HAL_HASH_Init(&hh);
 80055da:	f004 ff3f 	bl	800a45c <HAL_HASH_Init>

    HAL_StatusTypeDef rv = HAL_HMACEx_SHA256_Start(&hh,
 80055de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055e2:	9200      	str	r2, [sp, #0]
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80055ea:	4621      	mov	r1, r4
 80055ec:	a805      	add	r0, sp, #20
 80055ee:	f7ff ff35 	bl	800545c <HAL_HMACEx_SHA256_Start>
                                ctx->pending, ctx->num_pending, digest, HAL_MAX_DELAY);
    ASSERT(rv == HAL_OK);
 80055f2:	b110      	cbz	r0, 80055fa <hmac_sha256_final+0x3e>
 80055f4:	4802      	ldr	r0, [pc, #8]	; (8005600 <hmac_sha256_final+0x44>)
 80055f6:	f7fb fa27 	bl	8000a48 <fatal_error>
}
 80055fa:	b017      	add	sp, #92	; 0x5c
 80055fc:	bd30      	pop	{r4, r5, pc}
 80055fe:	bf00      	nop
 8005600:	0800e390 	.word	0x0800e390

08005604 <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
 8005604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    );
    
#else /* Thumb-1 */
    uint32_t r4, r5, r6, r7;

    __asm__ volatile (
 8005608:	3b01      	subs	r3, #1
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4698      	mov	r8, r3
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	4699      	mov	r9, r3
 8005612:	2300      	movs	r3, #0
 8005614:	2400      	movs	r4, #0
 8005616:	2500      	movs	r5, #0
 8005618:	2600      	movs	r6, #0
 800561a:	b401      	push	{r0}
 800561c:	2700      	movs	r7, #0
 800561e:	e002      	b.n	8005626 <uECC_vli_mult+0x22>
 8005620:	0037      	movs	r7, r6
 8005622:	4640      	mov	r0, r8
 8005624:	1a3f      	subs	r7, r7, r0
 8005626:	b478      	push	{r3, r4, r5, r6}
 8005628:	1bf0      	subs	r0, r6, r7
 800562a:	5814      	ldr	r4, [r2, r0]
 800562c:	59c8      	ldr	r0, [r1, r7]
 800562e:	0c03      	lsrs	r3, r0, #16
 8005630:	b280      	uxth	r0, r0
 8005632:	0c25      	lsrs	r5, r4, #16
 8005634:	b2a4      	uxth	r4, r4
 8005636:	001e      	movs	r6, r3
 8005638:	436e      	muls	r6, r5
 800563a:	4363      	muls	r3, r4
 800563c:	4345      	muls	r5, r0
 800563e:	4360      	muls	r0, r4
 8005640:	2400      	movs	r4, #0
 8005642:	195b      	adds	r3, r3, r5
 8005644:	4164      	adcs	r4, r4
 8005646:	0424      	lsls	r4, r4, #16
 8005648:	1936      	adds	r6, r6, r4
 800564a:	041c      	lsls	r4, r3, #16
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	1900      	adds	r0, r0, r4
 8005650:	415e      	adcs	r6, r3
 8005652:	bc38      	pop	{r3, r4, r5}
 8005654:	181b      	adds	r3, r3, r0
 8005656:	4174      	adcs	r4, r6
 8005658:	2000      	movs	r0, #0
 800565a:	4145      	adcs	r5, r0
 800565c:	bc40      	pop	{r6}
 800565e:	3704      	adds	r7, #4
 8005660:	4547      	cmp	r7, r8
 8005662:	dc01      	bgt.n	8005668 <uECC_vli_mult+0x64>
 8005664:	42b7      	cmp	r7, r6
 8005666:	ddde      	ble.n	8005626 <uECC_vli_mult+0x22>
 8005668:	9800      	ldr	r0, [sp, #0]
 800566a:	5183      	str	r3, [r0, r6]
 800566c:	4623      	mov	r3, r4
 800566e:	462c      	mov	r4, r5
 8005670:	2500      	movs	r5, #0
 8005672:	3604      	adds	r6, #4
 8005674:	4546      	cmp	r6, r8
 8005676:	ddd1      	ble.n	800561c <uECC_vli_mult+0x18>
 8005678:	454e      	cmp	r6, r9
 800567a:	ddd1      	ble.n	8005620 <uECC_vli_mult+0x1c>
 800567c:	5183      	str	r3, [r0, r6]
 800567e:	bc01      	pop	{r0}
          [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
        : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
        : "r8", "r9", "cc", "memory"
    );
#endif
}
 8005680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005684 <uECC_vli_clear>:

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
        vli[i] = 0;
 8005684:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005688:	008a      	lsls	r2, r1, #2
 800568a:	2100      	movs	r1, #0
 800568c:	f007 bfca 	b.w	800d624 <memset>

08005690 <uECC_vli_isZero>:
}
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 8005690:	b510      	push	{r4, lr}
    uECC_word_t bits = 0;
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 8005692:	2300      	movs	r3, #0
    uECC_word_t bits = 0;
 8005694:	461a      	mov	r2, r3
    for (i = 0; i < num_words; ++i) {
 8005696:	b25c      	sxtb	r4, r3
 8005698:	42a1      	cmp	r1, r4
 800569a:	dc03      	bgt.n	80056a4 <uECC_vli_isZero+0x14>
        bits |= vli[i];
    }
    return (bits == 0);
}
 800569c:	fab2 f082 	clz	r0, r2
 80056a0:	0940      	lsrs	r0, r0, #5
 80056a2:	bd10      	pop	{r4, pc}
        bits |= vli[i];
 80056a4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80056a8:	3301      	adds	r3, #1
 80056aa:	4322      	orrs	r2, r4
    for (i = 0; i < num_words; ++i) {
 80056ac:	e7f3      	b.n	8005696 <uECC_vli_isZero+0x6>

080056ae <uECC_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80056ae:	114a      	asrs	r2, r1, #5
 80056b0:	2301      	movs	r3, #1
 80056b2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80056b6:	f001 011f 	and.w	r1, r1, #31
 80056ba:	fa03 f101 	lsl.w	r1, r3, r1
}
 80056be:	4008      	ands	r0, r1
 80056c0:	4770      	bx	lr

080056c2 <uECC_vli_numBits>:
/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
    wordcount_t i;
    /* Search from the end until we find a non-zero digit.
       We do it in reverse because we expect that most digits will be nonzero. */
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80056c2:	3901      	subs	r1, #1

    return (i + 1);
}

/* Counts the number of bits required to represent vli. */
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 80056c4:	b510      	push	{r4, lr}
 80056c6:	b249      	sxtb	r1, r1
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80056c8:	1d04      	adds	r4, r0, #4
 80056ca:	060a      	lsls	r2, r1, #24
 80056cc:	b2cb      	uxtb	r3, r1
 80056ce:	d404      	bmi.n	80056da <uECC_vli_numBits+0x18>
 80056d0:	3901      	subs	r1, #1
 80056d2:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	d0f7      	beq.n	80056ca <uECC_vli_numBits+0x8>
    return (i + 1);
 80056da:	3301      	adds	r3, #1
 80056dc:	b25b      	sxtb	r3, r3
    uECC_word_t i;
    uECC_word_t digit;

    wordcount_t num_digits = vli_numDigits(vli, max_words);
    if (num_digits == 0) {
 80056de:	b173      	cbz	r3, 80056fe <uECC_vli_numBits+0x3c>
        return 0;
    }

    digit = vli[num_digits - 1];
 80056e0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80056e4:	3a01      	subs	r2, #1
 80056e6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    for (i = 0; digit; ++i) {
 80056ea:	2000      	movs	r0, #0
 80056ec:	b922      	cbnz	r2, 80056f8 <uECC_vli_numBits+0x36>
        digit >>= 1;
    }

    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 80056ee:	3b01      	subs	r3, #1
 80056f0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80056f4:	b218      	sxth	r0, r3
}
 80056f6:	bd10      	pop	{r4, pc}
        digit >>= 1;
 80056f8:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
 80056fa:	3001      	adds	r0, #1
 80056fc:	e7f6      	b.n	80056ec <uECC_vli_numBits+0x2a>
        return 0;
 80056fe:	4618      	mov	r0, r3
 8005700:	e7f9      	b.n	80056f6 <uECC_vli_numBits+0x34>

08005702 <uECC_vli_set>:

/* Sets dest = src. */
#if !asm_set
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 8005702:	b510      	push	{r4, lr}
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 8005704:	2300      	movs	r3, #0
 8005706:	b25c      	sxtb	r4, r3
 8005708:	42a2      	cmp	r2, r4
 800570a:	dc00      	bgt.n	800570e <uECC_vli_set+0xc>
        dest[i] = src[i];
    }
}
 800570c:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
 800570e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005712:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i = 0; i < num_words; ++i) {
 8005716:	3301      	adds	r3, #1
 8005718:	e7f5      	b.n	8005706 <uECC_vli_set+0x4>

0800571a <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 800571a:	b510      	push	{r4, lr}
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 800571c:	3a01      	subs	r2, #1
 800571e:	b252      	sxtb	r2, r2
 8005720:	0613      	lsls	r3, r2, #24
 8005722:	d501      	bpl.n	8005728 <uECC_vli_cmp_unsafe+0xe>
            return 1;
        } else if (left[i] < right[i]) {
            return -1;
        }
    }
    return 0;
 8005724:	2000      	movs	r0, #0
}
 8005726:	bd10      	pop	{r4, pc}
        if (left[i] > right[i]) {
 8005728:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800572c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8005730:	429c      	cmp	r4, r3
 8005732:	d805      	bhi.n	8005740 <uECC_vli_cmp_unsafe+0x26>
        } else if (left[i] < right[i]) {
 8005734:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005738:	d2f2      	bcs.n	8005720 <uECC_vli_cmp_unsafe+0x6>
            return -1;
 800573a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800573e:	e7f2      	b.n	8005726 <uECC_vli_cmp_unsafe+0xc>
            return 1;
 8005740:	2001      	movs	r0, #1
 8005742:	e7f0      	b.n	8005726 <uECC_vli_cmp_unsafe+0xc>

08005744 <uECC_vli_rshift1>:
#if !asm_rshift1
uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {
    uECC_word_t *end = vli;
    uECC_word_t carry = 0;
    
    vli += num_words;
 8005744:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    uECC_word_t carry = 0;
 8005748:	2300      	movs	r3, #0
    while (vli-- > end) {
 800574a:	4288      	cmp	r0, r1
 800574c:	d300      	bcc.n	8005750 <uECC_vli_rshift1+0xc>
        uECC_word_t temp = *vli;
        *vli = (temp >> 1) | carry;
        carry = temp << (uECC_WORD_BITS - 1);
    }
}
 800574e:	4770      	bx	lr
        uECC_word_t temp = *vli;
 8005750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
        *vli = (temp >> 1) | carry;
 8005754:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8005758:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 800575a:	07d3      	lsls	r3, r2, #31
 800575c:	e7f5      	b.n	800574a <uECC_vli_rshift1+0x6>

0800575e <uECC_vli_modMult>:
/* Computes result = (left * right) % mod. */
uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result,
                                   const uECC_word_t *left,
                                   const uECC_word_t *right,
                                   const uECC_word_t *mod,
                                   wordcount_t num_words) {
 800575e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005762:	b0b5      	sub	sp, #212	; 0xd4
 8005764:	461f      	mov	r7, r3
 8005766:	f99d 50f8 	ldrsb.w	r5, [sp, #248]	; 0xf8
 800576a:	4680      	mov	r8, r0
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, num_words);
 800576c:	462b      	mov	r3, r5
 800576e:	a804      	add	r0, sp, #16
 8005770:	f7ff ff48 	bl	8005604 <uECC_vli_mult>
    uECC_word_t *v[2] = {tmp, product};
 8005774:	ab24      	add	r3, sp, #144	; 0x90
 8005776:	e9cd 3002 	strd	r3, r0, [sp, #8]
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 800577a:	4629      	mov	r1, r5
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ffa0 	bl	80056c2 <uECC_vli_numBits>
 8005782:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
 8005786:	b204      	sxth	r4, r0
    wordcount_t word_shift = shift / uECC_WORD_BITS;
 8005788:	2c00      	cmp	r4, #0
 800578a:	4626      	mov	r6, r4
 800578c:	bfb8      	it	lt
 800578e:	f104 061f 	addlt.w	r6, r4, #31
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8005792:	4263      	negs	r3, r4
    wordcount_t word_shift = shift / uECC_WORD_BITS;
 8005794:	f346 1647 	sbfx	r6, r6, #5, #8
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	f004 091f 	and.w	r9, r4, #31
    uECC_vli_clear(mod_multiple, word_shift);
 80057a0:	4631      	mov	r1, r6
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 80057a2:	bf58      	it	pl
 80057a4:	f1c3 0900 	rsbpl	r9, r3, #0
    uECC_vli_clear(mod_multiple, word_shift);
 80057a8:	a814      	add	r0, sp, #80	; 0x50
 80057aa:	f7ff ff6b 	bl	8005684 <uECC_vli_clear>
    if (bit_shift > 0) {
 80057ae:	f1b9 0f00 	cmp.w	r9, #0
 80057b2:	b236      	sxth	r6, r6
 80057b4:	dd2b      	ble.n	800580e <uECC_vli_modMult+0xb0>
 80057b6:	ab14      	add	r3, sp, #80	; 0x50
    uECC_word_t carry = 0;
 80057b8:	2200      	movs	r2, #0
 80057ba:	eb03 0686 	add.w	r6, r3, r6, lsl #2
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 80057be:	f1c9 0c20 	rsb	ip, r9, #32
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 80057c2:	4613      	mov	r3, r2
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	d317      	bcc.n	80057f8 <uECC_vli_modMult+0x9a>
        for (i = 0; i < num_words * 2; ++i) {
 80057c8:	006b      	lsls	r3, r5, #1
 80057ca:	9301      	str	r3, [sp, #4]
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80057cc:	ab14      	add	r3, sp, #80	; 0x50
 80057ce:	eb03 0985 	add.w	r9, r3, r5, lsl #2
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 80057d2:	1e6f      	subs	r7, r5, #1
 80057d4:	ab34      	add	r3, sp, #208	; 0xd0
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80057d6:	2601      	movs	r6, #1
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 80057d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    for (index = 1; shift >= 0; --shift) {
 80057dc:	2c00      	cmp	r4, #0
 80057de:	da54      	bge.n	800588a <uECC_vli_modMult+0x12c>
    uECC_vli_set(result, v[index], num_words);
 80057e0:	ab34      	add	r3, sp, #208	; 0xd0
 80057e2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80057e6:	462a      	mov	r2, r5
 80057e8:	f856 1cc8 	ldr.w	r1, [r6, #-200]
 80057ec:	4640      	mov	r0, r8
 80057ee:	f7ff ff88 	bl	8005702 <uECC_vli_set>
    uECC_vli_mmod(result, product, mod, num_words);
}
 80057f2:	b035      	add	sp, #212	; 0xd4
 80057f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 80057f8:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80057fc:	fa00 f109 	lsl.w	r1, r0, r9
 8005800:	430a      	orrs	r2, r1
 8005802:	f846 2b04 	str.w	r2, [r6], #4
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8005806:	3301      	adds	r3, #1
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8005808:	fa20 f20c 	lsr.w	r2, r0, ip
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 800580c:	e7da      	b.n	80057c4 <uECC_vli_modMult+0x66>
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 800580e:	ab14      	add	r3, sp, #80	; 0x50
 8005810:	462a      	mov	r2, r5
 8005812:	4639      	mov	r1, r7
 8005814:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005818:	f7ff ff73 	bl	8005702 <uECC_vli_set>
 800581c:	e7d4      	b.n	80057c8 <uECC_vli_modMult+0x6a>
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 800581e:	fa0f fe82 	sxth.w	lr, r2
 8005822:	f85a 3cc8 	ldr.w	r3, [sl, #-200]
 8005826:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
 800582a:	ab34      	add	r3, sp, #208	; 0xd0
 800582c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005830:	3001      	adds	r0, #1
 8005832:	f852 3c80 	ldr.w	r3, [r2, #-128]
 8005836:	440b      	add	r3, r1
 8005838:	ebbb 0303 	subs.w	r3, fp, r3
 800583c:	bf34      	ite	cc
 800583e:	2201      	movcc	r2, #1
 8005840:	2200      	movcs	r2, #0
            if (diff != v[index][i]) {
 8005842:	459b      	cmp	fp, r3
                borrow = (diff > v[index][i]);
 8005844:	bf18      	it	ne
 8005846:	4611      	movne	r1, r2
            v[1 - index][i] = diff;
 8005848:	f85c 2cc8 	ldr.w	r2, [ip, #-200]
 800584c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
        for (i = 0; i < num_words * 2; ++i) {
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	b242      	sxtb	r2, r0
 8005854:	429a      	cmp	r2, r3
 8005856:	dbe2      	blt.n	800581e <uECC_vli_modMult+0xc0>
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8005858:	1a73      	subs	r3, r6, r1
 800585a:	425e      	negs	r6, r3
        uECC_vli_rshift1(mod_multiple, num_words);
 800585c:	4629      	mov	r1, r5
 800585e:	a814      	add	r0, sp, #80	; 0x50
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8005860:	415e      	adcs	r6, r3
        uECC_vli_rshift1(mod_multiple, num_words);
 8005862:	f7ff ff6f 	bl	8005744 <uECC_vli_rshift1>
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 8005866:	ab34      	add	r3, sp, #208	; 0xd0
 8005868:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 800586c:	4629      	mov	r1, r5
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 800586e:	f853 2c80 	ldr.w	r2, [r3, #-128]
 8005872:	f857 3c80 	ldr.w	r3, [r7, #-128]
 8005876:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800587a:	f847 3c80 	str.w	r3, [r7, #-128]
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 800587e:	4648      	mov	r0, r9
 8005880:	3c01      	subs	r4, #1
 8005882:	f7ff ff5f 	bl	8005744 <uECC_vli_rshift1>
    for (index = 1; shift >= 0; --shift) {
 8005886:	b224      	sxth	r4, r4
 8005888:	e7a8      	b.n	80057dc <uECC_vli_modMult+0x7e>
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 800588a:	ab34      	add	r3, sp, #208	; 0xd0
 800588c:	2000      	movs	r0, #0
            v[1 - index][i] = diff;
 800588e:	f1c6 0c01 	rsb	ip, r6, #1
        uECC_word_t borrow = 0;
 8005892:	4601      	mov	r1, r0
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8005894:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
            v[1 - index][i] = diff;
 8005898:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800589c:	e7d8      	b.n	8005850 <uECC_vli_modMult+0xf2>

0800589e <uECC_vli_modMult_fast>:

uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,
                                        const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        uECC_Curve curve) {
 800589e:	b530      	push	{r4, r5, lr}
 80058a0:	461c      	mov	r4, r3
 80058a2:	b091      	sub	sp, #68	; 0x44
 80058a4:	4605      	mov	r5, r0
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, curve->num_words);
 80058a6:	f993 3000 	ldrsb.w	r3, [r3]
 80058aa:	4668      	mov	r0, sp
 80058ac:	f7ff feaa 	bl	8005604 <uECC_vli_mult>
#if (uECC_OPTIMIZATION_LEVEL > 0)
    curve->mmod_fast(result, product);
 80058b0:	4601      	mov	r1, r0
 80058b2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80058b6:	4628      	mov	r0, r5
 80058b8:	4798      	blx	r3
#else
    uECC_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 80058ba:	b011      	add	sp, #68	; 0x44
 80058bc:	bd30      	pop	{r4, r5, pc}

080058be <uECC_vli_modSquare_fast>:
}
#endif /* uECC_ENABLE_VLI_API */

uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
                                          const uECC_word_t *left,
                                          uECC_Curve curve) {
 80058be:	4613      	mov	r3, r2
    uECC_vli_modMult_fast(result, left, left, curve);
 80058c0:	460a      	mov	r2, r1
 80058c2:	f7ff bfec 	b.w	800589e <uECC_vli_modMult_fast>

080058c6 <apply_z>:

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * X1,
                    uECC_word_t * Y1,
                    const uECC_word_t * const Z,
                    uECC_Curve curve) {
 80058c6:	b570      	push	{r4, r5, r6, lr}
 80058c8:	4614      	mov	r4, r2
 80058ca:	b08a      	sub	sp, #40	; 0x28
 80058cc:	4606      	mov	r6, r0
 80058ce:	460d      	mov	r5, r1
    uECC_word_t t1[uECC_MAX_WORDS];

    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 80058d0:	461a      	mov	r2, r3
 80058d2:	4621      	mov	r1, r4
 80058d4:	a802      	add	r0, sp, #8
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	f7ff fff1 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 80058dc:	9b01      	ldr	r3, [sp, #4]
 80058de:	aa02      	add	r2, sp, #8
 80058e0:	4631      	mov	r1, r6
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff ffdb 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 80058e8:	a902      	add	r1, sp, #8
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	4622      	mov	r2, r4
 80058ee:	4608      	mov	r0, r1
 80058f0:	f7ff ffd5 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 80058f4:	9b01      	ldr	r3, [sp, #4]
 80058f6:	aa02      	add	r2, sp, #8
 80058f8:	4629      	mov	r1, r5
 80058fa:	4628      	mov	r0, r5
 80058fc:	f7ff ffcf 	bl	800589e <uECC_vli_modMult_fast>
}
 8005900:	b00a      	add	sp, #40	; 0x28
 8005902:	bd70      	pop	{r4, r5, r6, pc}

08005904 <uECC_vli_nativeToBytes>:

#else

uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes,
                                         int num_bytes,
                                         const uECC_word_t *native) {
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
    wordcount_t i;
    for (i = 0; i < num_bytes; ++i) {
 8005906:	2500      	movs	r5, #0
        unsigned b = num_bytes - 1 - i;
 8005908:	1e4f      	subs	r7, r1, #1
 800590a:	b26c      	sxtb	r4, r5
    for (i = 0; i < num_bytes; ++i) {
 800590c:	428c      	cmp	r4, r1
 800590e:	f105 0501 	add.w	r5, r5, #1
 8005912:	db00      	blt.n	8005916 <uECC_vli_nativeToBytes+0x12>
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    }
}
 8005914:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned b = num_bytes - 1 - i;
 8005916:	1b3b      	subs	r3, r7, r4
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 8005918:	f023 0603 	bic.w	r6, r3, #3
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	5996      	ldr	r6, [r2, r6]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	fa26 f303 	lsr.w	r3, r6, r3
 8005928:	5503      	strb	r3, [r0, r4]
    for (i = 0; i < num_bytes; ++i) {
 800592a:	e7ee      	b.n	800590a <uECC_vli_nativeToBytes+0x6>

0800592c <uECC_vli_bytesToNative>:

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	460e      	mov	r6, r1
    wordcount_t i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8005930:	1cd1      	adds	r1, r2, #3
 8005932:	bf48      	it	mi
 8005934:	1d91      	addmi	r1, r2, #6
                                         int num_bytes) {
 8005936:	4614      	mov	r4, r2
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8005938:	f341 0187 	sbfx	r1, r1, #2, #8
                                         int num_bytes) {
 800593c:	4605      	mov	r5, r0
    for (i = 0; i < num_bytes; ++i) {
        unsigned b = num_bytes - 1 - i;
 800593e:	1e67      	subs	r7, r4, #1
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8005940:	f7ff fea0 	bl	8005684 <uECC_vli_clear>
    for (i = 0; i < num_bytes; ++i) {
 8005944:	2000      	movs	r0, #0
 8005946:	b242      	sxtb	r2, r0
 8005948:	42a2      	cmp	r2, r4
 800594a:	f100 0001 	add.w	r0, r0, #1
 800594e:	db00      	blt.n	8005952 <uECC_vli_bytesToNative+0x26>
        native[b / uECC_WORD_SIZE] |= 
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    }
}
 8005950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        unsigned b = num_bytes - 1 - i;
 8005952:	1abb      	subs	r3, r7, r2
        native[b / uECC_WORD_SIZE] |= 
 8005954:	f023 0103 	bic.w	r1, r3, #3
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 8005958:	5cb2      	ldrb	r2, [r6, r2]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
        native[b / uECC_WORD_SIZE] |= 
 8005964:	586a      	ldr	r2, [r5, r1]
 8005966:	431a      	orrs	r2, r3
 8005968:	506a      	str	r2, [r5, r1]
    for (i = 0; i < num_bytes; ++i) {
 800596a:	e7ec      	b.n	8005946 <uECC_vli_bytesToNative+0x1a>

0800596c <HMAC_init>:
    return 0;
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(uECC_HashContext *hash_context, const uint8_t *K) {
 800596c:	b570      	push	{r4, r5, r6, lr}
    uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 800596e:	e9d0 3504 	ldrd	r3, r5, [r0, #16]
static void HMAC_init(uECC_HashContext *hash_context, const uint8_t *K) {
 8005972:	4604      	mov	r4, r0
    uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 8005974:	eb05 0543 	add.w	r5, r5, r3, lsl #1
    unsigned i;
    for (i = 0; i < hash_context->result_size; ++i)
 8005978:	2300      	movs	r3, #0
 800597a:	6922      	ldr	r2, [r4, #16]
 800597c:	429a      	cmp	r2, r3
 800597e:	d80d      	bhi.n	800599c <HMAC_init+0x30>
        pad[i] = K[i] ^ 0x36;
    for (; i < hash_context->block_size; ++i)
        pad[i] = 0x36;
 8005980:	2136      	movs	r1, #54	; 0x36
    for (; i < hash_context->block_size; ++i)
 8005982:	68e2      	ldr	r2, [r4, #12]
 8005984:	429a      	cmp	r2, r3
 8005986:	d80f      	bhi.n	80059a8 <HMAC_init+0x3c>

    hash_context->init_hash(hash_context);
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	4620      	mov	r0, r4
 800598c:	4798      	blx	r3
    hash_context->update_hash(hash_context, pad, hash_context->block_size);
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	68e2      	ldr	r2, [r4, #12]
 8005992:	4629      	mov	r1, r5
 8005994:	4620      	mov	r0, r4
}
 8005996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hash_context->update_hash(hash_context, pad, hash_context->block_size);
 800599a:	4718      	bx	r3
        pad[i] = K[i] ^ 0x36;
 800599c:	5cca      	ldrb	r2, [r1, r3]
 800599e:	f082 0236 	eor.w	r2, r2, #54	; 0x36
 80059a2:	54ea      	strb	r2, [r5, r3]
    for (i = 0; i < hash_context->result_size; ++i)
 80059a4:	3301      	adds	r3, #1
 80059a6:	e7e8      	b.n	800597a <HMAC_init+0xe>
        pad[i] = 0x36;
 80059a8:	54e9      	strb	r1, [r5, r3]
    for (; i < hash_context->block_size; ++i)
 80059aa:	3301      	adds	r3, #1
 80059ac:	e7e9      	b.n	8005982 <HMAC_init+0x16>

080059ae <HMAC_update>:

static void HMAC_update(uECC_HashContext *hash_context,
                        const uint8_t *message,
                        unsigned message_size) {
    hash_context->update_hash(hash_context, message, message_size);
 80059ae:	6843      	ldr	r3, [r0, #4]
 80059b0:	4718      	bx	r3

080059b2 <HMAC_finish>:
}

static void HMAC_finish(uECC_HashContext *hash_context, const uint8_t *K, uint8_t *result) {
 80059b2:	b570      	push	{r4, r5, r6, lr}
    uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 80059b4:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
static void HMAC_finish(uECC_HashContext *hash_context, const uint8_t *K, uint8_t *result) {
 80059b8:	4604      	mov	r4, r0
    uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 80059ba:	eb06 0643 	add.w	r6, r6, r3, lsl #1
static void HMAC_finish(uECC_HashContext *hash_context, const uint8_t *K, uint8_t *result) {
 80059be:	4615      	mov	r5, r2
    unsigned i;
    for (i = 0; i < hash_context->result_size; ++i)
 80059c0:	2300      	movs	r3, #0
 80059c2:	6922      	ldr	r2, [r4, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d81a      	bhi.n	80059fe <HMAC_finish+0x4c>
        pad[i] = K[i] ^ 0x5c;
    for (; i < hash_context->block_size; ++i)
        pad[i] = 0x5c;
 80059c8:	215c      	movs	r1, #92	; 0x5c
    for (; i < hash_context->block_size; ++i)
 80059ca:	68e2      	ldr	r2, [r4, #12]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d81c      	bhi.n	8005a0a <HMAC_finish+0x58>

    hash_context->finish_hash(hash_context, result);
 80059d0:	4629      	mov	r1, r5
 80059d2:	68a3      	ldr	r3, [r4, #8]
 80059d4:	4620      	mov	r0, r4
 80059d6:	4798      	blx	r3

    hash_context->init_hash(hash_context);
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	4620      	mov	r0, r4
 80059dc:	4798      	blx	r3
    hash_context->update_hash(hash_context, pad, hash_context->block_size);
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	68e2      	ldr	r2, [r4, #12]
 80059e2:	4631      	mov	r1, r6
 80059e4:	4620      	mov	r0, r4
 80059e6:	4798      	blx	r3
    hash_context->update_hash(hash_context, result, hash_context->result_size);
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	6922      	ldr	r2, [r4, #16]
 80059ec:	4629      	mov	r1, r5
 80059ee:	4620      	mov	r0, r4
 80059f0:	4798      	blx	r3
    hash_context->finish_hash(hash_context, result);
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	4629      	mov	r1, r5
 80059f6:	4620      	mov	r0, r4
}
 80059f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hash_context->finish_hash(hash_context, result);
 80059fc:	4718      	bx	r3
        pad[i] = K[i] ^ 0x5c;
 80059fe:	5cca      	ldrb	r2, [r1, r3]
 8005a00:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
 8005a04:	54f2      	strb	r2, [r6, r3]
    for (i = 0; i < hash_context->result_size; ++i)
 8005a06:	3301      	adds	r3, #1
 8005a08:	e7db      	b.n	80059c2 <HMAC_finish+0x10>
        pad[i] = 0x5c;
 8005a0a:	54f1      	strb	r1, [r6, r3]
    for (; i < hash_context->block_size; ++i)
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	e7dc      	b.n	80059ca <HMAC_finish+0x18>

08005a10 <update_V>:

/* V = HMAC_K(V) */
static void update_V(uECC_HashContext *hash_context, uint8_t *K, uint8_t *V) {
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	4604      	mov	r4, r0
 8005a14:	4615      	mov	r5, r2
 8005a16:	460e      	mov	r6, r1
    HMAC_init(hash_context, K);
 8005a18:	f7ff ffa8 	bl	800596c <HMAC_init>
    HMAC_update(hash_context, V, hash_context->result_size);
 8005a1c:	6922      	ldr	r2, [r4, #16]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	4620      	mov	r0, r4
 8005a22:	f7ff ffc4 	bl	80059ae <HMAC_update>
    HMAC_finish(hash_context, K, V);
 8005a26:	462a      	mov	r2, r5
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4620      	mov	r0, r4
}
 8005a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HMAC_finish(hash_context, K, V);
 8005a30:	f7ff bfbf 	b.w	80059b2 <HMAC_finish>

08005a34 <uECC_vli_sub.constprop.0>:
uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
 8005a34:	b530      	push	{r4, r5, lr}
    __asm__ volatile (
 8005a36:	2300      	movs	r3, #0
 8005a38:	c910      	ldmia	r1!, {r4}
 8005a3a:	ca20      	ldmia	r2!, {r5}
 8005a3c:	1b64      	subs	r4, r4, r5
 8005a3e:	c010      	stmia	r0!, {r4}
 8005a40:	c910      	ldmia	r1!, {r4}
 8005a42:	ca20      	ldmia	r2!, {r5}
 8005a44:	41ac      	sbcs	r4, r5
 8005a46:	c010      	stmia	r0!, {r4}
 8005a48:	c910      	ldmia	r1!, {r4}
 8005a4a:	ca20      	ldmia	r2!, {r5}
 8005a4c:	41ac      	sbcs	r4, r5
 8005a4e:	c010      	stmia	r0!, {r4}
 8005a50:	c910      	ldmia	r1!, {r4}
 8005a52:	ca20      	ldmia	r2!, {r5}
 8005a54:	41ac      	sbcs	r4, r5
 8005a56:	c010      	stmia	r0!, {r4}
 8005a58:	c910      	ldmia	r1!, {r4}
 8005a5a:	ca20      	ldmia	r2!, {r5}
 8005a5c:	41ac      	sbcs	r4, r5
 8005a5e:	c010      	stmia	r0!, {r4}
 8005a60:	c910      	ldmia	r1!, {r4}
 8005a62:	ca20      	ldmia	r2!, {r5}
 8005a64:	41ac      	sbcs	r4, r5
 8005a66:	c010      	stmia	r0!, {r4}
 8005a68:	c910      	ldmia	r1!, {r4}
 8005a6a:	ca20      	ldmia	r2!, {r5}
 8005a6c:	41ac      	sbcs	r4, r5
 8005a6e:	c010      	stmia	r0!, {r4}
 8005a70:	c910      	ldmia	r1!, {r4}
 8005a72:	ca20      	ldmia	r2!, {r5}
 8005a74:	41ac      	sbcs	r4, r5
 8005a76:	c010      	stmia	r0!, {r4}
 8005a78:	415b      	adcs	r3, r3
}
 8005a7a:	fab3 f083 	clz	r0, r3
 8005a7e:	0940      	lsrs	r0, r0, #5
 8005a80:	bd30      	pop	{r4, r5, pc}

08005a82 <bits2int>:
                     uECC_Curve curve) {
 8005a82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a86:	4698      	mov	r8, r3
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8005a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8005a8c:	f113 041f 	adds.w	r4, r3, #31
 8005a90:	bf48      	it	mi
 8005a92:	f103 043e 	addmi.w	r4, r3, #62	; 0x3e
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8005a96:	1ddd      	adds	r5, r3, #7
 8005a98:	bf48      	it	mi
 8005a9a:	f103 050e 	addmi.w	r5, r3, #14
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8005a9e:	1166      	asrs	r6, r4, #5
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 8005aa0:	10ec      	asrs	r4, r5, #3
 8005aa2:	4294      	cmp	r4, r2
    uECC_vli_clear(native, num_n_words);
 8005aa4:	b275      	sxtb	r5, r6
 8005aa6:	bf28      	it	cs
 8005aa8:	4614      	movcs	r4, r2
                     uECC_Curve curve) {
 8005aaa:	4607      	mov	r7, r0
 8005aac:	4689      	mov	r9, r1
    uECC_vli_clear(native, num_n_words);
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7ff fde8 	bl	8005684 <uECC_vli_clear>
    uECC_vli_bytesToNative(native, bits, bits_size);
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff ff37 	bl	800592c <uECC_vli_bytesToNative>
    if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 8005abe:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8005ac2:	ebb2 0fc4 	cmp.w	r2, r4, lsl #3
 8005ac6:	ea4f 03c4 	mov.w	r3, r4, lsl #3
 8005aca:	d21f      	bcs.n	8005b0c <bits2int+0x8a>
    int shift = bits_size * 8 - curve->num_n_bits;
 8005acc:	1a9b      	subs	r3, r3, r2
    uECC_word_t *ptr = native + num_n_words;
 8005ace:	eb07 0486 	add.w	r4, r7, r6, lsl #2
    uECC_word_t carry = 0;
 8005ad2:	2100      	movs	r1, #0
        carry = temp << (uECC_WORD_BITS - shift);
 8005ad4:	f1c3 0620 	rsb	r6, r3, #32
    while (ptr-- > native) {
 8005ad8:	42a7      	cmp	r7, r4
 8005ada:	d30e      	bcc.n	8005afa <bits2int+0x78>
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 8005adc:	f108 0824 	add.w	r8, r8, #36	; 0x24
 8005ae0:	462a      	mov	r2, r5
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	f7ff fe18 	bl	800571a <uECC_vli_cmp_unsafe>
 8005aea:	2801      	cmp	r0, #1
 8005aec:	d00e      	beq.n	8005b0c <bits2int+0x8a>
        uECC_vli_sub(native, native, curve->n, num_n_words);
 8005aee:	4642      	mov	r2, r8
 8005af0:	4638      	mov	r0, r7
}
 8005af2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        uECC_vli_sub(native, native, curve->n, num_n_words);
 8005af6:	f7ff bf9d 	b.w	8005a34 <uECC_vli_sub.constprop.0>
        uECC_word_t temp = *ptr;
 8005afa:	f854 0d04 	ldr.w	r0, [r4, #-4]!
        *ptr = (temp >> shift) | carry;
 8005afe:	fa20 f203 	lsr.w	r2, r0, r3
 8005b02:	430a      	orrs	r2, r1
 8005b04:	6022      	str	r2, [r4, #0]
        carry = temp << (uECC_WORD_BITS - shift);
 8005b06:	fa00 f106 	lsl.w	r1, r0, r6
 8005b0a:	e7e5      	b.n	8005ad8 <bits2int+0x56>
}
 8005b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005b10 <uECC_vli_cmp>:
                                      wordcount_t num_words) {
 8005b10:	b530      	push	{r4, r5, lr}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	4615      	mov	r5, r2
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8005b16:	460a      	mov	r2, r1
 8005b18:	4601      	mov	r1, r0
 8005b1a:	4668      	mov	r0, sp
 8005b1c:	f7ff ff8a 	bl	8005a34 <uECC_vli_sub.constprop.0>
    uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 8005b20:	4629      	mov	r1, r5
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8005b22:	4604      	mov	r4, r0
    uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 8005b24:	4668      	mov	r0, sp
 8005b26:	f7ff fdb3 	bl	8005690 <uECC_vli_isZero>
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 8005b2a:	3c00      	subs	r4, #0
 8005b2c:	bf18      	it	ne
 8005b2e:	2401      	movne	r4, #1
    return (!equal - 2 * neg);
 8005b30:	0064      	lsls	r4, r4, #1
}
 8005b32:	2800      	cmp	r0, #0
 8005b34:	bf14      	ite	ne
 8005b36:	4260      	negne	r0, r4
 8005b38:	f1c4 0001 	rsbeq	r0, r4, #1
 8005b3c:	b009      	add	sp, #36	; 0x24
 8005b3e:	bd30      	pop	{r4, r5, pc}

08005b40 <uECC_generate_random_int>:
                                          wordcount_t num_words) {
 8005b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	460f      	mov	r7, r1
    if (!g_rng_function) {
 8005b46:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8005bb4 <uECC_generate_random_int+0x74>
                                          wordcount_t num_words) {
 8005b4a:	4606      	mov	r6, r0
    bitcount_t num_bits = uECC_vli_numBits(top, num_words);
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4638      	mov	r0, r7
                                          wordcount_t num_words) {
 8005b50:	4614      	mov	r4, r2
    bitcount_t num_bits = uECC_vli_numBits(top, num_words);
 8005b52:	f7ff fdb6 	bl	80056c2 <uECC_vli_numBits>
    if (!g_rng_function) {
 8005b56:	f8da 3000 	ldr.w	r3, [sl]
 8005b5a:	b303      	cbz	r3, 8005b9e <uECC_generate_random_int+0x5e>
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 8005b5c:	2504      	movs	r5, #4
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 8005b5e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 8005b62:	fb14 fb05 	smulbb	fp, r4, r5
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 8005b66:	b200      	sxth	r0, r0
 8005b68:	fb05 6504 	mla	r5, r5, r4, r6
 8005b6c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005b70:	3d04      	subs	r5, #4
 8005b72:	fa28 f800 	lsr.w	r8, r8, r0
 8005b76:	f04f 0940 	mov.w	r9, #64	; 0x40
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 8005b7a:	f8da 3000 	ldr.w	r3, [sl]
 8005b7e:	4659      	mov	r1, fp
 8005b80:	4630      	mov	r0, r6
 8005b82:	4798      	blx	r3
 8005b84:	b158      	cbz	r0, 8005b9e <uECC_generate_random_int+0x5e>
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	ea03 0308 	and.w	r3, r3, r8
 8005b8c:	602b      	str	r3, [r5, #0]
        if (!uECC_vli_isZero(random, num_words) &&
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4630      	mov	r0, r6
 8005b92:	f7ff fd7d 	bl	8005690 <uECC_vli_isZero>
 8005b96:	b120      	cbz	r0, 8005ba2 <uECC_generate_random_int+0x62>
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8005b98:	f1b9 0901 	subs.w	r9, r9, #1
 8005b9c:	d1ed      	bne.n	8005b7a <uECC_generate_random_int+0x3a>
        return 0;
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e006      	b.n	8005bb0 <uECC_generate_random_int+0x70>
		        uECC_vli_cmp(top, random, num_words) == 1) {
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	f7ff ffb2 	bl	8005b10 <uECC_vli_cmp>
        if (!uECC_vli_isZero(random, num_words) &&
 8005bac:	2801      	cmp	r0, #1
 8005bae:	d1f3      	bne.n	8005b98 <uECC_generate_random_int+0x58>
}
 8005bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb4:	2009e2a0 	.word	0x2009e2a0

08005bb8 <uECC_vli_add.constprop.0>:
uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
 8005bb8:	b530      	push	{r4, r5, lr}
    __asm__ volatile (
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	c910      	ldmia	r1!, {r4}
 8005bc0:	ca20      	ldmia	r2!, {r5}
 8005bc2:	1964      	adds	r4, r4, r5
 8005bc4:	c310      	stmia	r3!, {r4}
 8005bc6:	c910      	ldmia	r1!, {r4}
 8005bc8:	ca20      	ldmia	r2!, {r5}
 8005bca:	416c      	adcs	r4, r5
 8005bcc:	c310      	stmia	r3!, {r4}
 8005bce:	c910      	ldmia	r1!, {r4}
 8005bd0:	ca20      	ldmia	r2!, {r5}
 8005bd2:	416c      	adcs	r4, r5
 8005bd4:	c310      	stmia	r3!, {r4}
 8005bd6:	c910      	ldmia	r1!, {r4}
 8005bd8:	ca20      	ldmia	r2!, {r5}
 8005bda:	416c      	adcs	r4, r5
 8005bdc:	c310      	stmia	r3!, {r4}
 8005bde:	c910      	ldmia	r1!, {r4}
 8005be0:	ca20      	ldmia	r2!, {r5}
 8005be2:	416c      	adcs	r4, r5
 8005be4:	c310      	stmia	r3!, {r4}
 8005be6:	c910      	ldmia	r1!, {r4}
 8005be8:	ca20      	ldmia	r2!, {r5}
 8005bea:	416c      	adcs	r4, r5
 8005bec:	c310      	stmia	r3!, {r4}
 8005bee:	c910      	ldmia	r1!, {r4}
 8005bf0:	ca20      	ldmia	r2!, {r5}
 8005bf2:	416c      	adcs	r4, r5
 8005bf4:	c310      	stmia	r3!, {r4}
 8005bf6:	c910      	ldmia	r1!, {r4}
 8005bf8:	ca20      	ldmia	r2!, {r5}
 8005bfa:	416c      	adcs	r4, r5
 8005bfc:	c310      	stmia	r3!, {r4}
 8005bfe:	4140      	adcs	r0, r0
}
 8005c00:	bd30      	pop	{r4, r5, pc}

08005c02 <regularize_k>:
                                uECC_Curve curve) {
 8005c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c04:	460d      	mov	r5, r1
 8005c06:	4616      	mov	r6, r2
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8005c08:	4601      	mov	r1, r0
 8005c0a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005c0e:	4628      	mov	r0, r5
 8005c10:	9201      	str	r2, [sp, #4]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8005c12:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8005c16:	f7ff ffcf 	bl	8005bb8 <uECC_vli_add.constprop.0>
 8005c1a:	9a01      	ldr	r2, [sp, #4]
 8005c1c:	b9c8      	cbnz	r0, 8005c52 <regularize_k+0x50>
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8005c1e:	f114 031f 	adds.w	r3, r4, #31
 8005c22:	bf48      	it	mi
 8005c24:	f104 033e 	addmi.w	r3, r4, #62	; 0x3e
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8005c28:	f343 1347 	sbfx	r3, r3, #5, #8
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8005c2c:	ebb4 1f43 	cmp.w	r4, r3, lsl #5
 8005c30:	da11      	bge.n	8005c56 <regularize_k+0x54>
         uECC_vli_testBit(k0, num_n_bits));
 8005c32:	4621      	mov	r1, r4
 8005c34:	4628      	mov	r0, r5
 8005c36:	9201      	str	r2, [sp, #4]
 8005c38:	f7ff fd39 	bl	80056ae <uECC_vli_testBit>
 8005c3c:	9a01      	ldr	r2, [sp, #4]
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8005c3e:	1e04      	subs	r4, r0, #0
 8005c40:	bf18      	it	ne
 8005c42:	2401      	movne	r4, #1
    uECC_vli_add(k1, k0, curve->n, num_n_words);
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff ffb6 	bl	8005bb8 <uECC_vli_add.constprop.0>
}
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8005c52:	2401      	movs	r4, #1
 8005c54:	e7f6      	b.n	8005c44 <regularize_k+0x42>
 8005c56:	2400      	movs	r4, #0
 8005c58:	e7f4      	b.n	8005c44 <regularize_k+0x42>

08005c5a <omega_mult_secp256k1>:
    /* add the 2^32 multiple */
    result[4 + num_words_secp256k1] =
        uECC_vli_add(result + 4, result + 4, right, num_words_secp256k1); 
}
#elif uECC_WORD_SIZE == 4
static void omega_mult_secp256k1(uint32_t * result, const uint32_t * right) {
 8005c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5c:	460a      	mov	r2, r1
    /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
    uint32_t carry = 0;
 8005c5e:	2300      	movs	r3, #0
static void omega_mult_secp256k1(uint32_t * result, const uint32_t * right) {
 8005c60:	4604      	mov	r4, r0
 8005c62:	3904      	subs	r1, #4
 8005c64:	3804      	subs	r0, #4
 8005c66:	f102 071c 	add.w	r7, r2, #28
    wordcount_t k;
    
    for (k = 0; k < num_words_secp256k1; ++k) {
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
 8005c6a:	469e      	mov	lr, r3
 8005c6c:	f240 35d1 	movw	r5, #977	; 0x3d1
 8005c70:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8005c74:	46f4      	mov	ip, lr
 8005c76:	fbe6 3c05 	umlal	r3, ip, r6, r5
    for (k = 0; k < num_words_secp256k1; ++k) {
 8005c7a:	428f      	cmp	r7, r1
        result[k] = p;
 8005c7c:	f840 3f04 	str.w	r3, [r0, #4]!
        carry = p >> 32;
 8005c80:	4663      	mov	r3, ip
    for (k = 0; k < num_words_secp256k1; ++k) {
 8005c82:	d1f5      	bne.n	8005c70 <omega_mult_secp256k1+0x16>
    }
    result[num_words_secp256k1] = carry;
    /* add the 2^32 multiple */
    result[1 + num_words_secp256k1] =
        uECC_vli_add(result + 1, result + 1, right, num_words_secp256k1); 
 8005c84:	1d21      	adds	r1, r4, #4
    result[num_words_secp256k1] = carry;
 8005c86:	f8c4 c020 	str.w	ip, [r4, #32]
        uECC_vli_add(result + 1, result + 1, right, num_words_secp256k1); 
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	f7ff ff94 	bl	8005bb8 <uECC_vli_add.constprop.0>
    result[1 + num_words_secp256k1] =
 8005c90:	6260      	str	r0, [r4, #36]	; 0x24
}
 8005c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c94 <vli_mmod_fast_secp256k1>:
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	b090      	sub	sp, #64	; 0x40
 8005c98:	460e      	mov	r6, r1
 8005c9a:	4604      	mov	r4, r0
    uECC_vli_clear(tmp, num_words_secp256k1);
 8005c9c:	2108      	movs	r1, #8
 8005c9e:	4668      	mov	r0, sp
 8005ca0:	f7ff fcf0 	bl	8005684 <uECC_vli_clear>
    uECC_vli_clear(tmp + num_words_secp256k1, num_words_secp256k1);
 8005ca4:	2108      	movs	r1, #8
 8005ca6:	a808      	add	r0, sp, #32
 8005ca8:	f7ff fcec 	bl	8005684 <uECC_vli_clear>
    omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
 8005cac:	f106 0120 	add.w	r1, r6, #32
 8005cb0:	4668      	mov	r0, sp
 8005cb2:	f7ff ffd2 	bl	8005c5a <omega_mult_secp256k1>
    carry = uECC_vli_add(result, product, tmp, num_words_secp256k1); /* (C, r) = r + q       */
 8005cb6:	466a      	mov	r2, sp
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f7ff ff7c 	bl	8005bb8 <uECC_vli_add.constprop.0>
    uECC_vli_clear(product, num_words_secp256k1);
 8005cc0:	2108      	movs	r1, #8
    carry = uECC_vli_add(result, product, tmp, num_words_secp256k1); /* (C, r) = r + q       */
 8005cc2:	4605      	mov	r5, r0
    uECC_vli_clear(product, num_words_secp256k1);
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f7ff fcdd 	bl	8005684 <uECC_vli_clear>
    omega_mult_secp256k1(product, tmp + num_words_secp256k1); /* Rq*c */
 8005cca:	4630      	mov	r0, r6
 8005ccc:	a908      	add	r1, sp, #32
 8005cce:	f7ff ffc4 	bl	8005c5a <omega_mult_secp256k1>
    carry += uECC_vli_add(result, result, product, num_words_secp256k1); /* (C1, r) = r + Rq*c */
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff ff6e 	bl	8005bb8 <uECC_vli_add.constprop.0>
        uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 8005cdc:	4e0b      	ldr	r6, [pc, #44]	; (8005d0c <vli_mmod_fast_secp256k1+0x78>)
    carry += uECC_vli_add(result, result, product, num_words_secp256k1); /* (C1, r) = r + Rq*c */
 8005cde:	4405      	add	r5, r0
    while (carry > 0) {
 8005ce0:	b96d      	cbnz	r5, 8005cfe <vli_mmod_fast_secp256k1+0x6a>
    if (uECC_vli_cmp_unsafe(result, curve_secp256k1.p, num_words_secp256k1) > 0) {
 8005ce2:	490a      	ldr	r1, [pc, #40]	; (8005d0c <vli_mmod_fast_secp256k1+0x78>)
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff fd17 	bl	800571a <uECC_vli_cmp_unsafe>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	dd04      	ble.n	8005cfa <vli_mmod_fast_secp256k1+0x66>
        uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 8005cf0:	460a      	mov	r2, r1
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	f7ff fe9d 	bl	8005a34 <uECC_vli_sub.constprop.0>
}
 8005cfa:	b010      	add	sp, #64	; 0x40
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
        uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 8005cfe:	4632      	mov	r2, r6
 8005d00:	4621      	mov	r1, r4
 8005d02:	4620      	mov	r0, r4
        --carry;
 8005d04:	3d01      	subs	r5, #1
        uECC_vli_sub(result, result, curve_secp256k1.p, num_words_secp256k1);
 8005d06:	f7ff fe95 	bl	8005a34 <uECC_vli_sub.constprop.0>
 8005d0a:	e7e9      	b.n	8005ce0 <vli_mmod_fast_secp256k1+0x4c>
 8005d0c:	0800e824 	.word	0x0800e824

08005d10 <vli_mmod_fast_secp256r1>:
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8005d10:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
    uECC_vli_set(result, product, num_words_secp256r1);
 8005d14:	2208      	movs	r2, #8
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8005d16:	b088      	sub	sp, #32
    uECC_vli_set(result, product, num_words_secp256r1);
 8005d18:	f7ff fcf3 	bl	8005702 <uECC_vli_set>
    tmp[3] = product[11];
 8005d1c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005d1e:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
 8005d20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8005d22:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
 8005d24:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005d26:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
 8005d28:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8005d2a:	9306      	str	r3, [sp, #24]
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	4682      	mov	sl, r0
    tmp[0] = tmp[1] = tmp[2] = 0;
 8005d30:	2700      	movs	r7, #0
    tmp[7] = product[15];
 8005d32:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005d34:	9307      	str	r3, [sp, #28]
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8005d36:	466a      	mov	r2, sp
 8005d38:	4669      	mov	r1, sp
 8005d3a:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
 8005d3c:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8005d40:	9700      	str	r7, [sp, #0]
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8005d42:	f7ff ff39 	bl	8005bb8 <uECC_vli_add.constprop.0>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d46:	466a      	mov	r2, sp
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8005d48:	4605      	mov	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	f7ff ff33 	bl	8005bb8 <uECC_vli_add.constprop.0>
    tmp[3] = product[12];
 8005d52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d54:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
 8005d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d58:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
 8005d5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d5c:	9305      	str	r3, [sp, #20]
    tmp[6] = product[15];
 8005d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d60:	4405      	add	r5, r0
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8005d62:	466a      	mov	r2, sp
 8005d64:	4669      	mov	r1, sp
 8005d66:	4668      	mov	r0, sp
    tmp[7] = 0;
 8005d68:	e9cd 3706 	strd	r3, r7, [sp, #24]
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8005d6c:	f7ff ff24 	bl	8005bb8 <uECC_vli_add.constprop.0>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d70:	466a      	mov	r2, sp
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8005d72:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d74:	4651      	mov	r1, sl
 8005d76:	4650      	mov	r0, sl
 8005d78:	f7ff ff1e 	bl	8005bb8 <uECC_vli_add.constprop.0>
    tmp[0] = product[8];
 8005d7c:	6a23      	ldr	r3, [r4, #32]
 8005d7e:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
 8005d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d82:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
 8005d84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d86:	9302      	str	r3, [sp, #8]
    tmp[6] = product[14];
 8005d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d8a:	9306      	str	r3, [sp, #24]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d8c:	4405      	add	r5, r0
    tmp[7] = product[15];
 8005d8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d90:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d92:	466a      	mov	r2, sp
 8005d94:	4651      	mov	r1, sl
 8005d96:	4650      	mov	r0, sl
    tmp[3] = tmp[4] = tmp[5] = 0;
 8005d98:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8005d9c:	9703      	str	r7, [sp, #12]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005d9e:	f7ff ff0b 	bl	8005bb8 <uECC_vli_add.constprop.0>
    tmp[0] = product[9];
 8005da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da4:	9300      	str	r3, [sp, #0]
    tmp[1] = product[10];
 8005da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp[4] = product[14];
 8005da8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp[1] = product[10];
 8005daa:	9301      	str	r3, [sp, #4]
    tmp[2] = product[11];
 8005dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dae:	9302      	str	r3, [sp, #8]
    tmp[4] = product[14];
 8005db0:	9204      	str	r2, [sp, #16]
    tmp[3] = product[13];
 8005db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmp[5] = product[15];
 8005db4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    tmp[3] = product[13];
 8005db6:	9303      	str	r3, [sp, #12]
    tmp[6] = product[13];
 8005db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005dbc:	182e      	adds	r6, r5, r0
    tmp[7] = product[8];
 8005dbe:	6a23      	ldr	r3, [r4, #32]
 8005dc0:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005dc2:	466a      	mov	r2, sp
 8005dc4:	4651      	mov	r1, sl
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	f7ff fef6 	bl	8005bb8 <uECC_vli_add.constprop.0>
    tmp[0] = product[11];
 8005dcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dce:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
 8005dd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005dd2:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
 8005dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dd6:	9302      	str	r3, [sp, #8]
    tmp[6] = product[8];
 8005dd8:	6a23      	ldr	r3, [r4, #32]
 8005dda:	9306      	str	r3, [sp, #24]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8005ddc:	1835      	adds	r5, r6, r0
    tmp[7] = product[10];
 8005dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005de0:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005de2:	466a      	mov	r2, sp
 8005de4:	4651      	mov	r1, sl
 8005de6:	4650      	mov	r0, sl
    tmp[3] = tmp[4] = tmp[5] = 0;
 8005de8:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8005dec:	9703      	str	r7, [sp, #12]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005dee:	f7ff fe21 	bl	8005a34 <uECC_vli_sub.constprop.0>
    tmp[0] = product[12];
 8005df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005df4:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
 8005df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005df8:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
 8005dfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dfc:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
 8005dfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e00:	9303      	str	r3, [sp, #12]
    tmp[6] = product[9];
 8005e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e04:	9306      	str	r3, [sp, #24]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e06:	1a2e      	subs	r6, r5, r0
    tmp[7] = product[11];
 8005e08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e0a:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e0c:	466a      	mov	r2, sp
 8005e0e:	4651      	mov	r1, sl
 8005e10:	4650      	mov	r0, sl
    tmp[4] = tmp[5] = 0;
 8005e12:	e9cd 7704 	strd	r7, r7, [sp, #16]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e16:	f7ff fe0d 	bl	8005a34 <uECC_vli_sub.constprop.0>
    tmp[0] = product[13];
 8005e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e1c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
 8005e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e20:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
 8005e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e24:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
 8005e26:	6a23      	ldr	r3, [r4, #32]
 8005e28:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
 8005e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e2c:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
 8005e2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e30:	1a36      	subs	r6, r6, r0
    tmp[6] = 0;
 8005e32:	e9cd 3705 	strd	r3, r7, [sp, #20]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e36:	466a      	mov	r2, sp
    tmp[7] = product[12];
 8005e38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e3a:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	4650      	mov	r0, sl
 8005e40:	f7ff fdf8 	bl	8005a34 <uECC_vli_sub.constprop.0>
    tmp[0] = product[14];
 8005e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e46:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
 8005e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmp[2] = 0;
 8005e4a:	e9cd 3701 	strd	r3, r7, [sp, #4]
    tmp[3] = product[9];
 8005e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e50:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
 8005e52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e54:	9304      	str	r3, [sp, #16]
    tmp[5] = product[11];
 8005e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e58:	1a36      	subs	r6, r6, r0
    tmp[6] = 0;
 8005e5a:	e9cd 3705 	strd	r3, r7, [sp, #20]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e5e:	466a      	mov	r2, sp
    tmp[7] = product[13];
 8005e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e62:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8005e64:	4651      	mov	r1, sl
 8005e66:	4650      	mov	r0, sl
 8005e68:	f7ff fde4 	bl	8005a34 <uECC_vli_sub.constprop.0>
    if (carry < 0) {
 8005e6c:	1a36      	subs	r6, r6, r0
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 8005e6e:	4c0d      	ldr	r4, [pc, #52]	; (8005ea4 <vli_mmod_fast_secp256r1+0x194>)
    if (carry < 0) {
 8005e70:	d40e      	bmi.n	8005e90 <vli_mmod_fast_secp256r1+0x180>
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 8005e72:	b936      	cbnz	r6, 8005e82 <vli_mmod_fast_secp256r1+0x172>
 8005e74:	2208      	movs	r2, #8
 8005e76:	4651      	mov	r1, sl
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f7ff fc4e 	bl	800571a <uECC_vli_cmp_unsafe>
 8005e7e:	2801      	cmp	r0, #1
 8005e80:	d00d      	beq.n	8005e9e <vli_mmod_fast_secp256r1+0x18e>
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 8005e82:	4622      	mov	r2, r4
 8005e84:	4651      	mov	r1, sl
 8005e86:	4650      	mov	r0, sl
 8005e88:	f7ff fdd4 	bl	8005a34 <uECC_vli_sub.constprop.0>
 8005e8c:	1a36      	subs	r6, r6, r0
 8005e8e:	e7f0      	b.n	8005e72 <vli_mmod_fast_secp256r1+0x162>
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 8005e90:	4622      	mov	r2, r4
 8005e92:	4651      	mov	r1, sl
 8005e94:	4650      	mov	r0, sl
 8005e96:	f7ff fe8f 	bl	8005bb8 <uECC_vli_add.constprop.0>
        } while (carry < 0);
 8005e9a:	1836      	adds	r6, r6, r0
 8005e9c:	d4f8      	bmi.n	8005e90 <vli_mmod_fast_secp256r1+0x180>
}
 8005e9e:	b008      	add	sp, #32
 8005ea0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
 8005ea4:	0800e8d8 	.word	0x0800e8d8

08005ea8 <mod_sqrt_default>:
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8005ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eaa:	b091      	sub	sp, #68	; 0x44
 8005eac:	460d      	mov	r5, r1
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8005eae:	221c      	movs	r2, #28
 8005eb0:	2100      	movs	r1, #0
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8005eb2:	4606      	mov	r6, r0
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8005eb4:	a801      	add	r0, sp, #4
 8005eb6:	f007 fbb5 	bl	800d624 <memset>
 8005eba:	2401      	movs	r4, #1
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8005ebc:	221c      	movs	r2, #28
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	a809      	add	r0, sp, #36	; 0x24
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8005ec2:	9400      	str	r4, [sp, #0]
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8005ec4:	f007 fbae 	bl	800d624 <memset>
    wordcount_t num_words = curve->num_words;
 8005ec8:	4629      	mov	r1, r5
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8005eca:	466a      	mov	r2, sp
    wordcount_t num_words = curve->num_words;
 8005ecc:	f911 7b04 	ldrsb.w	r7, [r1], #4
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8005ed0:	9408      	str	r4, [sp, #32]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8005ed2:	4668      	mov	r0, sp
 8005ed4:	f7ff fe70 	bl	8005bb8 <uECC_vli_add.constprop.0>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8005ed8:	4639      	mov	r1, r7
 8005eda:	4668      	mov	r0, sp
 8005edc:	f7ff fbf1 	bl	80056c2 <uECC_vli_numBits>
 8005ee0:	1e44      	subs	r4, r0, #1
 8005ee2:	b224      	sxth	r4, r4
 8005ee4:	2c01      	cmp	r4, #1
 8005ee6:	dc06      	bgt.n	8005ef6 <mod_sqrt_default+0x4e>
    uECC_vli_set(a, l_result, num_words);
 8005ee8:	463a      	mov	r2, r7
 8005eea:	a908      	add	r1, sp, #32
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff fc08 	bl	8005702 <uECC_vli_set>
}
 8005ef2:	b011      	add	sp, #68	; 0x44
 8005ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 8005ef6:	a908      	add	r1, sp, #32
 8005ef8:	4608      	mov	r0, r1
 8005efa:	462a      	mov	r2, r5
 8005efc:	f7ff fcdf 	bl	80058be <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 8005f00:	4621      	mov	r1, r4
 8005f02:	4668      	mov	r0, sp
 8005f04:	f7ff fbd3 	bl	80056ae <uECC_vli_testBit>
 8005f08:	b128      	cbz	r0, 8005f16 <mod_sqrt_default+0x6e>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 8005f0a:	a908      	add	r1, sp, #32
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	4632      	mov	r2, r6
 8005f10:	4608      	mov	r0, r1
 8005f12:	f7ff fcc4 	bl	800589e <uECC_vli_modMult_fast>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8005f16:	3c01      	subs	r4, #1
 8005f18:	e7e3      	b.n	8005ee2 <mod_sqrt_default+0x3a>

08005f1a <vli_modInv_update>:
    if (!EVEN(uv)) {
 8005f1a:	6803      	ldr	r3, [r0, #0]
                              wordcount_t num_words) {
 8005f1c:	b570      	push	{r4, r5, r6, lr}
    if (!EVEN(uv)) {
 8005f1e:	f013 0601 	ands.w	r6, r3, #1
                              wordcount_t num_words) {
 8005f22:	4605      	mov	r5, r0
 8005f24:	4614      	mov	r4, r2
    if (!EVEN(uv)) {
 8005f26:	d004      	beq.n	8005f32 <vli_modInv_update+0x18>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 8005f28:	460a      	mov	r2, r1
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	f7ff fe44 	bl	8005bb8 <uECC_vli_add.constprop.0>
 8005f30:	4606      	mov	r6, r0
    uECC_vli_rshift1(uv, num_words);
 8005f32:	4621      	mov	r1, r4
 8005f34:	4628      	mov	r0, r5
 8005f36:	f7ff fc05 	bl	8005744 <uECC_vli_rshift1>
    if (carry) {
 8005f3a:	b146      	cbz	r6, 8005f4e <vli_modInv_update+0x34>
        uv[num_words - 1] |= HIGH_BIT_SET;
 8005f3c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8005f40:	3a01      	subs	r2, #1
 8005f42:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8005f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f4a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}

08005f50 <uECC_vli_modInv>:
                                  wordcount_t num_words) {
 8005f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f52:	460f      	mov	r7, r1
 8005f54:	b0a1      	sub	sp, #132	; 0x84
 8005f56:	4606      	mov	r6, r0
    if (uECC_vli_isZero(input, num_words)) {
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4638      	mov	r0, r7
                                  wordcount_t num_words) {
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	461c      	mov	r4, r3
    if (uECC_vli_isZero(input, num_words)) {
 8005f60:	f7ff fb96 	bl	8005690 <uECC_vli_isZero>
 8005f64:	b128      	cbz	r0, 8005f72 <uECC_vli_modInv+0x22>
        uECC_vli_clear(result, num_words);
 8005f66:	4630      	mov	r0, r6
}
 8005f68:	b021      	add	sp, #132	; 0x84
 8005f6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        uECC_vli_clear(result, num_words);
 8005f6e:	f7ff bb89 	b.w	8005684 <uECC_vli_clear>
    uECC_vli_set(a, input, num_words);
 8005f72:	4622      	mov	r2, r4
 8005f74:	4639      	mov	r1, r7
 8005f76:	4668      	mov	r0, sp
 8005f78:	f7ff fbc3 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	a808      	add	r0, sp, #32
 8005f80:	f7ff fbbf 	bl	8005702 <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 8005f84:	4621      	mov	r1, r4
 8005f86:	a810      	add	r0, sp, #64	; 0x40
 8005f88:	f7ff fb7c 	bl	8005684 <uECC_vli_clear>
    u[0] = 1;
 8005f8c:	2301      	movs	r3, #1
    uECC_vli_clear(v, num_words);
 8005f8e:	4621      	mov	r1, r4
 8005f90:	a818      	add	r0, sp, #96	; 0x60
    u[0] = 1;
 8005f92:	9310      	str	r3, [sp, #64]	; 0x40
    uECC_vli_clear(v, num_words);
 8005f94:	f7ff fb76 	bl	8005684 <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8005f98:	4622      	mov	r2, r4
 8005f9a:	a908      	add	r1, sp, #32
 8005f9c:	4668      	mov	r0, sp
 8005f9e:	f7ff fbbc 	bl	800571a <uECC_vli_cmp_unsafe>
 8005fa2:	b930      	cbnz	r0, 8005fb2 <uECC_vli_modInv+0x62>
    uECC_vli_set(result, u, num_words);
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	a910      	add	r1, sp, #64	; 0x40
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff fbaa 	bl	8005702 <uECC_vli_set>
}
 8005fae:	b021      	add	sp, #132	; 0x84
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (EVEN(a)) {
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	07da      	lsls	r2, r3, #31
 8005fb6:	d409      	bmi.n	8005fcc <uECC_vli_modInv+0x7c>
            uECC_vli_rshift1(a, num_words);
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4668      	mov	r0, sp
 8005fbc:	f7ff fbc2 	bl	8005744 <uECC_vli_rshift1>
            vli_modInv_update(u, mod, num_words);
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	a810      	add	r0, sp, #64	; 0x40
            vli_modInv_update(v, mod, num_words);
 8005fc6:	f7ff ffa8 	bl	8005f1a <vli_modInv_update>
 8005fca:	e7e5      	b.n	8005f98 <uECC_vli_modInv+0x48>
        } else if (EVEN(b)) {
 8005fcc:	9b08      	ldr	r3, [sp, #32]
 8005fce:	07db      	lsls	r3, r3, #31
 8005fd0:	d407      	bmi.n	8005fe2 <uECC_vli_modInv+0x92>
            uECC_vli_rshift1(b, num_words);
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	a808      	add	r0, sp, #32
 8005fd6:	f7ff fbb5 	bl	8005744 <uECC_vli_rshift1>
            vli_modInv_update(v, mod, num_words);
 8005fda:	4622      	mov	r2, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	a818      	add	r0, sp, #96	; 0x60
 8005fe0:	e7f1      	b.n	8005fc6 <uECC_vli_modInv+0x76>
        } else if (cmpResult > 0) {
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	dd1a      	ble.n	800601c <uECC_vli_modInv+0xcc>
            uECC_vli_sub(a, a, b, num_words);
 8005fe6:	aa08      	add	r2, sp, #32
 8005fe8:	4669      	mov	r1, sp
 8005fea:	4668      	mov	r0, sp
 8005fec:	f7ff fd22 	bl	8005a34 <uECC_vli_sub.constprop.0>
            uECC_vli_rshift1(a, num_words);
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4668      	mov	r0, sp
 8005ff4:	f7ff fba6 	bl	8005744 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	a918      	add	r1, sp, #96	; 0x60
 8005ffc:	a810      	add	r0, sp, #64	; 0x40
 8005ffe:	f7ff fb8c 	bl	800571a <uECC_vli_cmp_unsafe>
 8006002:	2800      	cmp	r0, #0
 8006004:	da04      	bge.n	8006010 <uECC_vli_modInv+0xc0>
                uECC_vli_add(u, u, mod, num_words);
 8006006:	a910      	add	r1, sp, #64	; 0x40
 8006008:	462a      	mov	r2, r5
 800600a:	4608      	mov	r0, r1
 800600c:	f7ff fdd4 	bl	8005bb8 <uECC_vli_add.constprop.0>
            uECC_vli_sub(u, u, v, num_words);
 8006010:	a910      	add	r1, sp, #64	; 0x40
 8006012:	aa18      	add	r2, sp, #96	; 0x60
 8006014:	4608      	mov	r0, r1
 8006016:	f7ff fd0d 	bl	8005a34 <uECC_vli_sub.constprop.0>
 800601a:	e7d1      	b.n	8005fc0 <uECC_vli_modInv+0x70>
            uECC_vli_sub(b, b, a, num_words);
 800601c:	466a      	mov	r2, sp
 800601e:	a808      	add	r0, sp, #32
 8006020:	f7ff fd08 	bl	8005a34 <uECC_vli_sub.constprop.0>
            uECC_vli_rshift1(b, num_words);
 8006024:	4621      	mov	r1, r4
 8006026:	a808      	add	r0, sp, #32
 8006028:	f7ff fb8c 	bl	8005744 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 800602c:	4622      	mov	r2, r4
 800602e:	a910      	add	r1, sp, #64	; 0x40
 8006030:	a818      	add	r0, sp, #96	; 0x60
 8006032:	f7ff fb72 	bl	800571a <uECC_vli_cmp_unsafe>
 8006036:	2800      	cmp	r0, #0
 8006038:	da04      	bge.n	8006044 <uECC_vli_modInv+0xf4>
                uECC_vli_add(v, v, mod, num_words);
 800603a:	a918      	add	r1, sp, #96	; 0x60
 800603c:	462a      	mov	r2, r5
 800603e:	4608      	mov	r0, r1
 8006040:	f7ff fdba 	bl	8005bb8 <uECC_vli_add.constprop.0>
            uECC_vli_sub(v, v, u, num_words);
 8006044:	a918      	add	r1, sp, #96	; 0x60
 8006046:	aa10      	add	r2, sp, #64	; 0x40
 8006048:	4608      	mov	r0, r1
 800604a:	f7ff fcf3 	bl	8005a34 <uECC_vli_sub.constprop.0>
 800604e:	e7c4      	b.n	8005fda <uECC_vli_modInv+0x8a>

08006050 <uECC_vli_modAdd>:
                                  wordcount_t num_words) {
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	4604      	mov	r4, r0
 8006054:	f99d 6010 	ldrsb.w	r6, [sp, #16]
 8006058:	461d      	mov	r5, r3
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 800605a:	f7ff fdad 	bl	8005bb8 <uECC_vli_add.constprop.0>
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 800605e:	b930      	cbnz	r0, 800606e <uECC_vli_modAdd+0x1e>
 8006060:	4632      	mov	r2, r6
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	f7ff fb58 	bl	800571a <uECC_vli_cmp_unsafe>
 800606a:	2801      	cmp	r0, #1
 800606c:	d006      	beq.n	800607c <uECC_vli_modAdd+0x2c>
        uECC_vli_sub(result, result, mod, num_words);
 800606e:	462a      	mov	r2, r5
 8006070:	4621      	mov	r1, r4
 8006072:	4620      	mov	r0, r4
}
 8006074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        uECC_vli_sub(result, result, mod, num_words);
 8006078:	f7ff bcdc 	b.w	8005a34 <uECC_vli_sub.constprop.0>
}
 800607c:	bd70      	pop	{r4, r5, r6, pc}

0800607e <x_side_secp256k1>:
static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 800607e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006080:	4604      	mov	r4, r0
 8006082:	4615      	mov	r5, r2
 8006084:	460e      	mov	r6, r1
    uECC_vli_modSquare_fast(result, x, curve);                                /* r = x^2 */
 8006086:	f7ff fc1a 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(result, result, x, curve);                          /* r = x^3 */
 800608a:	462b      	mov	r3, r5
 800608c:	4632      	mov	r2, r6
 800608e:	4621      	mov	r1, r4
 8006090:	4620      	mov	r0, r4
 8006092:	f7ff fc04 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words_secp256k1); /* r = x^3 + b */
 8006096:	2308      	movs	r3, #8
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	f105 0284 	add.w	r2, r5, #132	; 0x84
 800609e:	1d2b      	adds	r3, r5, #4
 80060a0:	4621      	mov	r1, r4
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff ffd4 	bl	8006050 <uECC_vli_modAdd>
}
 80060a8:	b002      	add	sp, #8
 80060aa:	bd70      	pop	{r4, r5, r6, pc}

080060ac <uECC_vli_modSub.isra.0>:
uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result,
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4604      	mov	r4, r0
 80060b0:	461d      	mov	r5, r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 80060b2:	f7ff fcbf 	bl	8005a34 <uECC_vli_sub.constprop.0>
    if (l_borrow) {
 80060b6:	b130      	cbz	r0, 80060c6 <uECC_vli_modSub.isra.0+0x1a>
        uECC_vli_add(result, result, mod, num_words);
 80060b8:	462a      	mov	r2, r5
 80060ba:	4621      	mov	r1, r4
 80060bc:	4620      	mov	r0, r4
}
 80060be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        uECC_vli_add(result, result, mod, num_words);
 80060c2:	f7ff bd79 	b.w	8005bb8 <uECC_vli_add.constprop.0>
}
 80060c6:	bd38      	pop	{r3, r4, r5, pc}

080060c8 <XYcZ_addC>:
                      uECC_Curve curve) {
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	b09a      	sub	sp, #104	; 0x68
 80060ce:	4615      	mov	r5, r2
 80060d0:	9f22      	ldr	r7, [sp, #136]	; 0x88
    wordcount_t num_words = curve->num_words;
 80060d2:	463c      	mov	r4, r7
                      uECC_Curve curve) {
 80060d4:	4698      	mov	r8, r3
    wordcount_t num_words = curve->num_words;
 80060d6:	f914 ab04 	ldrsb.w	sl, [r4], #4
                      uECC_Curve curve) {
 80060da:	4606      	mov	r6, r0
 80060dc:	4689      	mov	r9, r1
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80060de:	4623      	mov	r3, r4
 80060e0:	4602      	mov	r2, r0
 80060e2:	4629      	mov	r1, r5
 80060e4:	a802      	add	r0, sp, #8
 80060e6:	f7ff ffe1 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 80060ea:	a902      	add	r1, sp, #8
 80060ec:	463a      	mov	r2, r7
 80060ee:	4608      	mov	r0, r1
 80060f0:	f7ff fbe5 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 80060f4:	463b      	mov	r3, r7
 80060f6:	aa02      	add	r2, sp, #8
 80060f8:	4631      	mov	r1, r6
 80060fa:	4630      	mov	r0, r6
 80060fc:	f7ff fbcf 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 8006100:	463b      	mov	r3, r7
 8006102:	aa02      	add	r2, sp, #8
 8006104:	4629      	mov	r1, r5
 8006106:	4628      	mov	r0, r5
 8006108:	f7ff fbc9 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 800610c:	4623      	mov	r3, r4
 800610e:	464a      	mov	r2, r9
 8006110:	4641      	mov	r1, r8
 8006112:	a802      	add	r0, sp, #8
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	f7ff ff9a 	bl	8006050 <uECC_vli_modAdd>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 800611c:	4623      	mov	r3, r4
 800611e:	464a      	mov	r2, r9
 8006120:	4641      	mov	r1, r8
 8006122:	4640      	mov	r0, r8
 8006124:	f7ff ffc2 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8006128:	4623      	mov	r3, r4
 800612a:	4632      	mov	r2, r6
 800612c:	4629      	mov	r1, r5
 800612e:	a80a      	add	r0, sp, #40	; 0x28
 8006130:	f7ff ffbc 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(Y1, Y1, t6, curve);                /* t2 = y1 * (C - B) = E */
 8006134:	463b      	mov	r3, r7
 8006136:	aa0a      	add	r2, sp, #40	; 0x28
 8006138:	4649      	mov	r1, r9
 800613a:	4648      	mov	r0, r9
 800613c:	f7ff fbaf 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8006140:	4623      	mov	r3, r4
 8006142:	462a      	mov	r2, r5
 8006144:	4631      	mov	r1, r6
 8006146:	a80a      	add	r0, sp, #40	; 0x28
 8006148:	f8cd a000 	str.w	sl, [sp]
 800614c:	f7ff ff80 	bl	8006050 <uECC_vli_modAdd>
    uECC_vli_modSquare_fast(X2, Y2, curve);                  /* t3 = (y2 - y1)^2 = D */
 8006150:	463a      	mov	r2, r7
 8006152:	4641      	mov	r1, r8
 8006154:	4628      	mov	r0, r5
 8006156:	f7ff fbb2 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 800615a:	4623      	mov	r3, r4
 800615c:	aa0a      	add	r2, sp, #40	; 0x28
 800615e:	4629      	mov	r1, r5
 8006160:	4628      	mov	r0, r5
 8006162:	f7ff ffa3 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8006166:	4623      	mov	r3, r4
 8006168:	462a      	mov	r2, r5
 800616a:	4631      	mov	r1, r6
 800616c:	a812      	add	r0, sp, #72	; 0x48
 800616e:	f7ff ff9d 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(Y2, Y2, t7, curve);                /* t4 = (y2 - y1)*(B - x3) */
 8006172:	463b      	mov	r3, r7
 8006174:	aa12      	add	r2, sp, #72	; 0x48
 8006176:	4641      	mov	r1, r8
 8006178:	4640      	mov	r0, r8
 800617a:	f7ff fb90 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */
 800617e:	4623      	mov	r3, r4
 8006180:	464a      	mov	r2, r9
 8006182:	4641      	mov	r1, r8
 8006184:	4640      	mov	r0, r8
 8006186:	f7ff ff91 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSquare_fast(t7, t5, curve);                  /* t7 = (y2 + y1)^2 = F */
 800618a:	463a      	mov	r2, r7
 800618c:	a902      	add	r1, sp, #8
 800618e:	a812      	add	r0, sp, #72	; 0x48
 8006190:	f7ff fb95 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 8006194:	a912      	add	r1, sp, #72	; 0x48
 8006196:	4623      	mov	r3, r4
 8006198:	aa0a      	add	r2, sp, #40	; 0x28
 800619a:	4608      	mov	r0, r1
 800619c:	f7ff ff86 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 80061a0:	4623      	mov	r3, r4
 80061a2:	4632      	mov	r2, r6
 80061a4:	a912      	add	r1, sp, #72	; 0x48
 80061a6:	a80a      	add	r0, sp, #40	; 0x28
 80061a8:	f7ff ff80 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(t6, t6, t5, curve);                /* t6 = (y2+y1)*(x3' - B) */
 80061ac:	a90a      	add	r1, sp, #40	; 0x28
 80061ae:	463b      	mov	r3, r7
 80061b0:	aa02      	add	r2, sp, #8
 80061b2:	4608      	mov	r0, r1
 80061b4:	f7ff fb73 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */
 80061b8:	4623      	mov	r3, r4
 80061ba:	464a      	mov	r2, r9
 80061bc:	a90a      	add	r1, sp, #40	; 0x28
 80061be:	4648      	mov	r0, r9
 80061c0:	f7ff ff74 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_set(X1, t7, num_words);
 80061c4:	4652      	mov	r2, sl
 80061c6:	a912      	add	r1, sp, #72	; 0x48
 80061c8:	4630      	mov	r0, r6
 80061ca:	f7ff fa9a 	bl	8005702 <uECC_vli_set>
}
 80061ce:	b01a      	add	sp, #104	; 0x68
 80061d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080061d4 <XYcZ_add>:
                     uECC_Curve curve) {
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	b088      	sub	sp, #32
 80061da:	4614      	mov	r4, r2
 80061dc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    wordcount_t num_words = curve->num_words;
 80061e0:	4645      	mov	r5, r8
                     uECC_Curve curve) {
 80061e2:	461e      	mov	r6, r3
    wordcount_t num_words = curve->num_words;
 80061e4:	f915 ab04 	ldrsb.w	sl, [r5], #4
                     uECC_Curve curve) {
 80061e8:	4607      	mov	r7, r0
 80061ea:	4689      	mov	r9, r1
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80061ec:	462b      	mov	r3, r5
 80061ee:	4602      	mov	r2, r0
 80061f0:	4621      	mov	r1, r4
 80061f2:	4668      	mov	r0, sp
 80061f4:	f7ff ff5a 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 80061f8:	4642      	mov	r2, r8
 80061fa:	4669      	mov	r1, sp
 80061fc:	4668      	mov	r0, sp
 80061fe:	f7ff fb5e 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 8006202:	4643      	mov	r3, r8
 8006204:	466a      	mov	r2, sp
 8006206:	4639      	mov	r1, r7
 8006208:	4638      	mov	r0, r7
 800620a:	f7ff fb48 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 800620e:	4643      	mov	r3, r8
 8006210:	466a      	mov	r2, sp
 8006212:	4621      	mov	r1, r4
 8006214:	4620      	mov	r0, r4
 8006216:	f7ff fb42 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 800621a:	462b      	mov	r3, r5
 800621c:	464a      	mov	r2, r9
 800621e:	4631      	mov	r1, r6
 8006220:	4630      	mov	r0, r6
 8006222:	f7ff ff43 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 8006226:	4642      	mov	r2, r8
 8006228:	4631      	mov	r1, r6
 800622a:	4668      	mov	r0, sp
 800622c:	f7ff fb47 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8006230:	462b      	mov	r3, r5
 8006232:	463a      	mov	r2, r7
 8006234:	4669      	mov	r1, sp
 8006236:	4668      	mov	r0, sp
 8006238:	f7ff ff38 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 800623c:	462b      	mov	r3, r5
 800623e:	4622      	mov	r2, r4
 8006240:	4669      	mov	r1, sp
 8006242:	4668      	mov	r0, sp
 8006244:	f7ff ff32 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 8006248:	462b      	mov	r3, r5
 800624a:	463a      	mov	r2, r7
 800624c:	4621      	mov	r1, r4
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff ff2c 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 8006254:	4643      	mov	r3, r8
 8006256:	4622      	mov	r2, r4
 8006258:	4649      	mov	r1, r9
 800625a:	4648      	mov	r0, r9
 800625c:	f7ff fb1f 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8006260:	462b      	mov	r3, r5
 8006262:	466a      	mov	r2, sp
 8006264:	4639      	mov	r1, r7
 8006266:	4620      	mov	r0, r4
 8006268:	f7ff ff20 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 800626c:	4643      	mov	r3, r8
 800626e:	4622      	mov	r2, r4
 8006270:	4631      	mov	r1, r6
 8006272:	4630      	mov	r0, r6
 8006274:	f7ff fb13 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8006278:	462b      	mov	r3, r5
 800627a:	464a      	mov	r2, r9
 800627c:	4631      	mov	r1, r6
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ff14 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_set(X2, t5, num_words);
 8006284:	4652      	mov	r2, sl
 8006286:	4669      	mov	r1, sp
 8006288:	4620      	mov	r0, r4
 800628a:	f7ff fa3a 	bl	8005702 <uECC_vli_set>
}
 800628e:	b008      	add	sp, #32
 8006290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006294 <EccPoint_mult>:
                          uECC_Curve curve) {
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	b0b1      	sub	sp, #196	; 0xc4
 800629a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629e:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 80062a0:	9204      	str	r2, [sp, #16]
    wordcount_t num_words = curve->num_words;
 80062a2:	f994 9000 	ldrsb.w	r9, [r4]
    uECC_vli_set(Rx[1], point, num_words);
 80062a6:	a818      	add	r0, sp, #96	; 0x60
 80062a8:	464a      	mov	r2, r9
                          uECC_Curve curve) {
 80062aa:	461d      	mov	r5, r3
    uECC_vli_set(Rx[1], point, num_words);
 80062ac:	f7ff fa29 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(Ry[1], point + num_words, num_words);
 80062b0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80062b4:	9305      	str	r3, [sp, #20]
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 80062bc:	4651      	mov	r1, sl
 80062be:	a828      	add	r0, sp, #160	; 0xa0
 80062c0:	f7ff fa1f 	bl	8005702 <uECC_vli_set>
    wordcount_t num_words = curve->num_words;
 80062c4:	f994 2000 	ldrsb.w	r2, [r4]
    if (initial_Z) {
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	f000 8082 	beq.w	80063d2 <EccPoint_mult+0x13e>
        uECC_vli_set(z, initial_Z, num_words);
 80062ce:	4629      	mov	r1, r5
 80062d0:	a808      	add	r0, sp, #32
 80062d2:	f7ff fa16 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(X2, X1, num_words);
 80062d6:	af10      	add	r7, sp, #64	; 0x40
 80062d8:	a918      	add	r1, sp, #96	; 0x60
 80062da:	4638      	mov	r0, r7
    uECC_vli_set(Y2, Y1, num_words);
 80062dc:	f10d 0880 	add.w	r8, sp, #128	; 0x80
    uECC_vli_set(X2, X1, num_words);
 80062e0:	f7ff fa0f 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(Y2, Y1, num_words);
 80062e4:	a928      	add	r1, sp, #160	; 0xa0
 80062e6:	4640      	mov	r0, r8
 80062e8:	f7ff fa0b 	bl	8005702 <uECC_vli_set>
    apply_z(X1, Y1, z, curve);
 80062ec:	4623      	mov	r3, r4
 80062ee:	aa08      	add	r2, sp, #32
 80062f0:	a818      	add	r0, sp, #96	; 0x60
 80062f2:	f7ff fae8 	bl	80058c6 <apply_z>
    curve->double_jacobian(X1, Y1, z, curve);
 80062f6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 80062fa:	4623      	mov	r3, r4
 80062fc:	aa08      	add	r2, sp, #32
 80062fe:	a928      	add	r1, sp, #160	; 0xa0
 8006300:	a818      	add	r0, sp, #96	; 0x60
 8006302:	47a8      	blx	r5
    apply_z(X2, Y2, z, curve);
 8006304:	4623      	mov	r3, r4
 8006306:	aa08      	add	r2, sp, #32
 8006308:	4641      	mov	r1, r8
 800630a:	4638      	mov	r0, r7
 800630c:	f7ff fadb 	bl	80058c6 <apply_z>
    for (i = num_bits - 2; i > 0; --i) {
 8006310:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
 8006314:	3d02      	subs	r5, #2
 8006316:	b22d      	sxth	r5, r5
 8006318:	2d00      	cmp	r5, #0
 800631a:	dc63      	bgt.n	80063e4 <EccPoint_mult+0x150>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 800631c:	9b04      	ldr	r3, [sp, #16]
 800631e:	681d      	ldr	r5, [r3, #0]
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8006320:	9400      	str	r4, [sp, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8006322:	f005 0601 	and.w	r6, r5, #1
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8006326:	ab10      	add	r3, sp, #64	; 0x40
 8006328:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 800632c:	43ed      	mvns	r5, r5
 800632e:	ab20      	add	r3, sp, #128	; 0x80
 8006330:	eb03 1646 	add.w	r6, r3, r6, lsl #5
 8006334:	f005 0501 	and.w	r5, r5, #1
 8006338:	ab10      	add	r3, sp, #64	; 0x40
 800633a:	eb03 1845 	add.w	r8, r3, r5, lsl #5
 800633e:	ab20      	add	r3, sp, #128	; 0x80
 8006340:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8006344:	462b      	mov	r3, r5
 8006346:	4642      	mov	r2, r8
 8006348:	4631      	mov	r1, r6
 800634a:	4638      	mov	r0, r7
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 800634c:	f104 0b04 	add.w	fp, r4, #4
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8006350:	f7ff feba 	bl	80060c8 <XYcZ_addC>
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8006354:	465b      	mov	r3, fp
 8006356:	aa10      	add	r2, sp, #64	; 0x40
 8006358:	a918      	add	r1, sp, #96	; 0x60
 800635a:	a808      	add	r0, sp, #32
 800635c:	f7ff fea6 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve);               /* Yb * (X1 - X0) */
 8006360:	a908      	add	r1, sp, #32
 8006362:	4623      	mov	r3, r4
 8006364:	4632      	mov	r2, r6
 8006366:	4608      	mov	r0, r1
 8006368:	f7ff fa99 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, point, curve);                    /* xP * Yb * (X1 - X0) */
 800636c:	a908      	add	r1, sp, #32
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	4623      	mov	r3, r4
 8006372:	4608      	mov	r0, r1
 8006374:	f7ff fa93 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modInv(z, z, curve->p, num_words);            /* 1 / (xP * Yb * (X1 - X0)) */
 8006378:	a908      	add	r1, sp, #32
 800637a:	464b      	mov	r3, r9
 800637c:	465a      	mov	r2, fp
 800637e:	4608      	mov	r0, r1
 8006380:	f7ff fde6 	bl	8005f50 <uECC_vli_modInv>
    uECC_vli_modMult_fast(z, z, point + num_words, curve); 
 8006384:	a908      	add	r1, sp, #32
 8006386:	4623      	mov	r3, r4
 8006388:	4652      	mov	r2, sl
 800638a:	4608      	mov	r0, r1
 800638c:	f7ff fa87 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
 8006390:	a908      	add	r1, sp, #32
 8006392:	4623      	mov	r3, r4
 8006394:	463a      	mov	r2, r7
 8006396:	4608      	mov	r0, r1
 8006398:	f7ff fa81 	bl	800589e <uECC_vli_modMult_fast>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 800639c:	4633      	mov	r3, r6
 800639e:	463a      	mov	r2, r7
 80063a0:	4629      	mov	r1, r5
 80063a2:	4640      	mov	r0, r8
 80063a4:	9400      	str	r4, [sp, #0]
 80063a6:	f7ff ff15 	bl	80061d4 <XYcZ_add>
    apply_z(Rx[0], Ry[0], z, curve);
 80063aa:	4623      	mov	r3, r4
 80063ac:	aa08      	add	r2, sp, #32
 80063ae:	a920      	add	r1, sp, #128	; 0x80
 80063b0:	a810      	add	r0, sp, #64	; 0x40
 80063b2:	f7ff fa88 	bl	80058c6 <apply_z>
    uECC_vli_set(result, Rx[0], num_words);
 80063b6:	9802      	ldr	r0, [sp, #8]
 80063b8:	464a      	mov	r2, r9
 80063ba:	a910      	add	r1, sp, #64	; 0x40
 80063bc:	f7ff f9a1 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(result + num_words, Ry[0], num_words);
 80063c0:	9802      	ldr	r0, [sp, #8]
 80063c2:	9b05      	ldr	r3, [sp, #20]
 80063c4:	a920      	add	r1, sp, #128	; 0x80
 80063c6:	4418      	add	r0, r3
 80063c8:	f7ff f99b 	bl	8005702 <uECC_vli_set>
}
 80063cc:	b031      	add	sp, #196	; 0xc4
 80063ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uECC_vli_clear(z, num_words);
 80063d2:	4611      	mov	r1, r2
 80063d4:	a808      	add	r0, sp, #32
 80063d6:	9206      	str	r2, [sp, #24]
 80063d8:	f7ff f954 	bl	8005684 <uECC_vli_clear>
        z[0] = 1;
 80063dc:	2301      	movs	r3, #1
 80063de:	9a06      	ldr	r2, [sp, #24]
 80063e0:	9308      	str	r3, [sp, #32]
 80063e2:	e778      	b.n	80062d6 <EccPoint_mult+0x42>
        nb = !uECC_vli_testBit(scalar, i);
 80063e4:	4629      	mov	r1, r5
 80063e6:	9804      	ldr	r0, [sp, #16]
 80063e8:	f7ff f961 	bl	80056ae <uECC_vli_testBit>
 80063ec:	fab0 f680 	clz	r6, r0
 80063f0:	0976      	lsrs	r6, r6, #5
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80063f2:	f1c6 0101 	rsb	r1, r6, #1
 80063f6:	eb07 1b46 	add.w	fp, r7, r6, lsl #5
 80063fa:	eb08 1646 	add.w	r6, r8, r6, lsl #5
 80063fe:	eb07 1041 	add.w	r0, r7, r1, lsl #5
 8006402:	4633      	mov	r3, r6
 8006404:	eb08 1141 	add.w	r1, r8, r1, lsl #5
 8006408:	465a      	mov	r2, fp
 800640a:	9400      	str	r4, [sp, #0]
 800640c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006410:	f7ff fe5a 	bl	80060c8 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8006414:	9907      	ldr	r1, [sp, #28]
 8006416:	9806      	ldr	r0, [sp, #24]
 8006418:	9400      	str	r4, [sp, #0]
 800641a:	460b      	mov	r3, r1
 800641c:	4602      	mov	r2, r0
 800641e:	4631      	mov	r1, r6
 8006420:	4658      	mov	r0, fp
 8006422:	f7ff fed7 	bl	80061d4 <XYcZ_add>
    for (i = num_bits - 2; i > 0; --i) {
 8006426:	3d01      	subs	r5, #1
 8006428:	e775      	b.n	8006316 <EccPoint_mult+0x82>

0800642a <EccPoint_compute_public_key>:
                                               uECC_Curve curve) {
 800642a:	b530      	push	{r4, r5, lr}
 800642c:	4614      	mov	r4, r2
 800642e:	b095      	sub	sp, #84	; 0x54
 8006430:	4605      	mov	r5, r0
    uECC_word_t *p2[2] = {tmp1, tmp2};
 8006432:	aa0c      	add	r2, sp, #48	; 0x30
    carry = regularize_k(private, tmp1, tmp2, curve);
 8006434:	4623      	mov	r3, r4
                                               uECC_Curve curve) {
 8006436:	4608      	mov	r0, r1
    uECC_word_t *p2[2] = {tmp1, tmp2};
 8006438:	a904      	add	r1, sp, #16
 800643a:	9102      	str	r1, [sp, #8]
 800643c:	9203      	str	r2, [sp, #12]
    carry = regularize_k(private, tmp1, tmp2, curve);
 800643e:	f7ff fbe0 	bl	8005c02 <regularize_k>
    EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
 8006442:	fab0 f380 	clz	r3, r0
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	aa14      	add	r2, sp, #80	; 0x50
 800644a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800644e:	8863      	ldrh	r3, [r4, #2]
 8006450:	9401      	str	r4, [sp, #4]
 8006452:	3301      	adds	r3, #1
 8006454:	b21b      	sxth	r3, r3
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	f852 2c48 	ldr.w	r2, [r2, #-72]
 800645c:	2300      	movs	r3, #0
 800645e:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8006462:	4628      	mov	r0, r5
 8006464:	f7ff ff16 	bl	8006294 <EccPoint_mult>
    if (EccPoint_isZero(result, curve)) {
 8006468:	7821      	ldrb	r1, [r4, #0]
 800646a:	0049      	lsls	r1, r1, #1
 800646c:	b249      	sxtb	r1, r1
 800646e:	4628      	mov	r0, r5
 8006470:	f7ff f90e 	bl	8005690 <uECC_vli_isZero>
}
 8006474:	fab0 f080 	clz	r0, r0
 8006478:	0940      	lsrs	r0, r0, #5
 800647a:	b015      	add	sp, #84	; 0x54
 800647c:	bd30      	pop	{r4, r5, pc}
	...

08006480 <uECC_sign_with_k>:
                            uECC_Curve curve) {
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	ed2d 8b02 	vpush	{d8}
 8006488:	b0a7      	sub	sp, #156	; 0x9c
 800648a:	461e      	mov	r6, r3
 800648c:	9d33      	ldr	r5, [sp, #204]	; 0xcc
    wordcount_t num_words = curve->num_words;
 800648e:	f995 a000 	ldrsb.w	sl, [r5]
                            uECC_Curve curve) {
 8006492:	ee08 1a10 	vmov	s16, r1
 8006496:	4683      	mov	fp, r0
    uECC_word_t *k2[2] = {tmp, s};
 8006498:	f10d 0918 	add.w	r9, sp, #24
 800649c:	ab0e      	add	r3, sp, #56	; 0x38
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 800649e:	4651      	mov	r1, sl
 80064a0:	4630      	mov	r0, r6
                            uECC_Curve curve) {
 80064a2:	ee08 2a90 	vmov	s17, r2
    uECC_word_t *k2[2] = {tmp, s};
 80064a6:	f8cd 9010 	str.w	r9, [sp, #16]
 80064aa:	9305      	str	r3, [sp, #20]
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 80064ac:	f7ff f8f0 	bl	8005690 <uECC_vli_isZero>
 80064b0:	b128      	cbz	r0, 80064be <uECC_sign_with_k+0x3e>
        return 0;
 80064b2:	2000      	movs	r0, #0
}
 80064b4:	b027      	add	sp, #156	; 0x9c
 80064b6:	ecbd 8b02 	vpop	{d8}
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80064be:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 80064c2:	f118 041f 	adds.w	r4, r8, #31
 80064c6:	bf48      	it	mi
 80064c8:	f108 043e 	addmi.w	r4, r8, #62	; 0x3e
 80064cc:	f344 1447 	sbfx	r4, r4, #5, #8
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 80064d0:	f105 0724 	add.w	r7, r5, #36	; 0x24
 80064d4:	4622      	mov	r2, r4
 80064d6:	4631      	mov	r1, r6
 80064d8:	4638      	mov	r0, r7
 80064da:	f7ff fb19 	bl	8005b10 <uECC_vli_cmp>
 80064de:	2801      	cmp	r0, #1
 80064e0:	9003      	str	r0, [sp, #12]
 80064e2:	d1e6      	bne.n	80064b2 <uECC_sign_with_k+0x32>
    carry = regularize_k(k, tmp, s, curve);
 80064e4:	462b      	mov	r3, r5
 80064e6:	aa0e      	add	r2, sp, #56	; 0x38
 80064e8:	4649      	mov	r1, r9
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff fb89 	bl	8005c02 <regularize_k>
    EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);
 80064f0:	fab0 f080 	clz	r0, r0
 80064f4:	ab26      	add	r3, sp, #152	; 0x98
 80064f6:	0940      	lsrs	r0, r0, #5
 80064f8:	f108 0801 	add.w	r8, r8, #1
 80064fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006500:	fa0f f388 	sxth.w	r3, r8
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	9501      	str	r5, [sp, #4]
 8006508:	f850 2c88 	ldr.w	r2, [r0, #-136]
 800650c:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8006510:	a816      	add	r0, sp, #88	; 0x58
 8006512:	2300      	movs	r3, #0
 8006514:	f7ff febe 	bl	8006294 <EccPoint_mult>
    if (uECC_vli_isZero(p, num_words)) {
 8006518:	4651      	mov	r1, sl
 800651a:	a816      	add	r0, sp, #88	; 0x58
 800651c:	f7ff f8b8 	bl	8005690 <uECC_vli_isZero>
 8006520:	2800      	cmp	r0, #0
 8006522:	d1c6      	bne.n	80064b2 <uECC_sign_with_k+0x32>
	uECC_recid = (p[curve->num_words] & 0x01);
 8006524:	f995 3000 	ldrsb.w	r3, [r5]
 8006528:	aa26      	add	r2, sp, #152	; 0x98
 800652a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800652e:	4a3b      	ldr	r2, [pc, #236]	; (800661c <uECC_sign_with_k+0x19c>)
 8006530:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	7013      	strb	r3, [r2, #0]
    if (!g_rng_function) {
 800653a:	4b39      	ldr	r3, [pc, #228]	; (8006620 <uECC_sign_with_k+0x1a0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d163      	bne.n	800660a <uECC_sign_with_k+0x18a>
        uECC_vli_clear(tmp, num_n_words);
 8006542:	4621      	mov	r1, r4
 8006544:	4648      	mov	r0, r9
 8006546:	f7ff f89d 	bl	8005684 <uECC_vli_clear>
        tmp[0] = 1;
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	9306      	str	r3, [sp, #24]
    uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 800654e:	463b      	mov	r3, r7
 8006550:	aa06      	add	r2, sp, #24
 8006552:	4631      	mov	r1, r6
 8006554:	4630      	mov	r0, r6
 8006556:	9400      	str	r4, [sp, #0]
 8006558:	f7ff f901 	bl	800575e <uECC_vli_modMult>
    uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 800655c:	4623      	mov	r3, r4
 800655e:	463a      	mov	r2, r7
 8006560:	4631      	mov	r1, r6
 8006562:	4630      	mov	r0, r6
 8006564:	f7ff fcf4 	bl	8005f50 <uECC_vli_modInv>
    uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 8006568:	463b      	mov	r3, r7
 800656a:	aa06      	add	r2, sp, #24
 800656c:	4631      	mov	r1, r6
 800656e:	4630      	mov	r0, r6
 8006570:	9400      	str	r4, [sp, #0]
 8006572:	f7ff f8f4 	bl	800575e <uECC_vli_modMult>
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8006576:	f995 1001 	ldrsb.w	r1, [r5, #1]
 800657a:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800657c:	aa16      	add	r2, sp, #88	; 0x58
 800657e:	f7ff f9c1 	bl	8005904 <uECC_vli_nativeToBytes>
    uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 8006582:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8006586:	1dda      	adds	r2, r3, #7
 8006588:	bf48      	it	mi
 800658a:	f103 020e 	addmi.w	r2, r3, #14
 800658e:	10d2      	asrs	r2, r2, #3
 8006590:	4659      	mov	r1, fp
 8006592:	a806      	add	r0, sp, #24
 8006594:	f7ff f9ca 	bl	800592c <uECC_vli_bytesToNative>
    s[num_n_words - 1] = 0;
 8006598:	aa26      	add	r2, sp, #152	; 0x98
 800659a:	1e63      	subs	r3, r4, #1
 800659c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065a0:	2200      	movs	r2, #0
    uECC_vli_set(s, p, num_words);
 80065a2:	a80e      	add	r0, sp, #56	; 0x38
    s[num_n_words - 1] = 0;
 80065a4:	f843 2c60 	str.w	r2, [r3, #-96]
    uECC_vli_set(s, p, num_words);
 80065a8:	a916      	add	r1, sp, #88	; 0x58
 80065aa:	4652      	mov	r2, sl
 80065ac:	f7ff f8a9 	bl	8005702 <uECC_vli_set>
    uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 80065b0:	4602      	mov	r2, r0
 80065b2:	463b      	mov	r3, r7
 80065b4:	a906      	add	r1, sp, #24
 80065b6:	9400      	str	r4, [sp, #0]
 80065b8:	f7ff f8d1 	bl	800575e <uECC_vli_modMult>
    bits2int(tmp, message_hash, hash_size, curve);
 80065bc:	ee18 2a90 	vmov	r2, s17
 80065c0:	ee18 1a10 	vmov	r1, s16
 80065c4:	462b      	mov	r3, r5
 80065c6:	a806      	add	r0, sp, #24
 80065c8:	f7ff fa5b 	bl	8005a82 <bits2int>
    uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 80065cc:	aa0e      	add	r2, sp, #56	; 0x38
 80065ce:	4610      	mov	r0, r2
 80065d0:	463b      	mov	r3, r7
 80065d2:	a906      	add	r1, sp, #24
 80065d4:	9400      	str	r4, [sp, #0]
 80065d6:	f7ff fd3b 	bl	8006050 <uECC_vli_modAdd>
    uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 80065da:	a90e      	add	r1, sp, #56	; 0x38
 80065dc:	4608      	mov	r0, r1
 80065de:	463b      	mov	r3, r7
 80065e0:	4632      	mov	r2, r6
 80065e2:	9400      	str	r4, [sp, #0]
 80065e4:	f7ff f8bb 	bl	800575e <uECC_vli_modMult>
    if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
 80065e8:	4621      	mov	r1, r4
 80065ea:	a80e      	add	r0, sp, #56	; 0x38
 80065ec:	f7ff f869 	bl	80056c2 <uECC_vli_numBits>
 80065f0:	f995 1001 	ldrsb.w	r1, [r5, #1]
 80065f4:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 80065f8:	f73f af5b 	bgt.w	80064b2 <uECC_sign_with_k+0x32>
    uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 80065fc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80065fe:	aa0e      	add	r2, sp, #56	; 0x38
 8006600:	1858      	adds	r0, r3, r1
 8006602:	f7ff f97f 	bl	8005904 <uECC_vli_nativeToBytes>
    return 1;
 8006606:	2001      	movs	r0, #1
 8006608:	e754      	b.n	80064b4 <uECC_sign_with_k+0x34>
    } else if (!uECC_generate_random_int(tmp, curve->n, num_n_words)) {
 800660a:	4622      	mov	r2, r4
 800660c:	4639      	mov	r1, r7
 800660e:	4648      	mov	r0, r9
 8006610:	f7ff fa96 	bl	8005b40 <uECC_generate_random_int>
 8006614:	2800      	cmp	r0, #0
 8006616:	d19a      	bne.n	800654e <uECC_sign_with_k+0xce>
 8006618:	e74b      	b.n	80064b2 <uECC_sign_with_k+0x32>
 800661a:	bf00      	nop
 800661c:	2009e2a4 	.word	0x2009e2a4
 8006620:	2009e2a0 	.word	0x2009e2a0

08006624 <double_jacobian_secp256k1>:
                                      uECC_Curve curve) {
 8006624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006628:	4605      	mov	r5, r0
 800662a:	b093      	sub	sp, #76	; 0x4c
 800662c:	460c      	mov	r4, r1
    if (uECC_vli_isZero(Z1, num_words_secp256k1)) {
 800662e:	4610      	mov	r0, r2
 8006630:	2108      	movs	r1, #8
                                      uECC_Curve curve) {
 8006632:	4617      	mov	r7, r2
 8006634:	461e      	mov	r6, r3
    if (uECC_vli_isZero(Z1, num_words_secp256k1)) {
 8006636:	f7ff f82b 	bl	8005690 <uECC_vli_isZero>
 800663a:	2800      	cmp	r0, #0
 800663c:	d161      	bne.n	8006702 <double_jacobian_secp256k1+0xde>
    uECC_vli_modSquare_fast(t5, Y1, curve);   /* t5 = y1^2 */
 800663e:	4632      	mov	r2, r6
 8006640:	4621      	mov	r1, r4
 8006642:	a80a      	add	r0, sp, #40	; 0x28
 8006644:	f7ff f93b 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t4, X1, t5, curve); /* t4 = x1*y1^2 = A */
 8006648:	4633      	mov	r3, r6
 800664a:	aa0a      	add	r2, sp, #40	; 0x28
 800664c:	4629      	mov	r1, r5
 800664e:	a802      	add	r0, sp, #8
 8006650:	f7ff f925 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(X1, X1, curve);   /* t1 = x1^2 */
 8006654:	4632      	mov	r2, r6
 8006656:	4629      	mov	r1, r5
 8006658:	4628      	mov	r0, r5
 800665a:	f7ff f930 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modSquare_fast(t5, t5, curve);   /* t5 = y1^4 */
 800665e:	a90a      	add	r1, sp, #40	; 0x28
 8006660:	4608      	mov	r0, r1
 8006662:	4632      	mov	r2, r6
 8006664:	f7ff f92b 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
 8006668:	f04f 0808 	mov.w	r8, #8
    uECC_vli_modMult_fast(Z1, Y1, Z1, curve); /* t3 = y1*z1 = z3 */
 800666c:	463a      	mov	r2, r7
 800666e:	4638      	mov	r0, r7
 8006670:	4633      	mov	r3, r6
 8006672:	4621      	mov	r1, r4
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
 8006674:	1d37      	adds	r7, r6, #4
    uECC_vli_modMult_fast(Z1, Y1, Z1, curve); /* t3 = y1*z1 = z3 */
 8006676:	f7ff f912 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
 800667a:	463b      	mov	r3, r7
 800667c:	462a      	mov	r2, r5
 800667e:	4629      	mov	r1, r5
 8006680:	4620      	mov	r0, r4
 8006682:	f8cd 8000 	str.w	r8, [sp]
 8006686:	f7ff fce3 	bl	8006050 <uECC_vli_modAdd>
    uECC_vli_modAdd(Y1, Y1, X1, curve->p, num_words_secp256k1); /* t2 = 3*x1^2 */
 800668a:	463b      	mov	r3, r7
 800668c:	f8cd 8000 	str.w	r8, [sp]
 8006690:	462a      	mov	r2, r5
 8006692:	4621      	mov	r1, r4
 8006694:	4620      	mov	r0, r4
 8006696:	f7ff fcdb 	bl	8006050 <uECC_vli_modAdd>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 800669a:	6823      	ldr	r3, [r4, #0]
    if (uECC_vli_testBit(Y1, 0)) {
 800669c:	07db      	lsls	r3, r3, #31
 800669e:	d533      	bpl.n	8006708 <double_jacobian_secp256k1+0xe4>
        uECC_word_t carry = uECC_vli_add(Y1, Y1, curve->p, num_words_secp256k1);
 80066a0:	463a      	mov	r2, r7
 80066a2:	4621      	mov	r1, r4
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7ff fa87 	bl	8005bb8 <uECC_vli_add.constprop.0>
        uECC_vli_rshift1(Y1, num_words_secp256k1);
 80066aa:	4641      	mov	r1, r8
        uECC_word_t carry = uECC_vli_add(Y1, Y1, curve->p, num_words_secp256k1);
 80066ac:	4681      	mov	r9, r0
        uECC_vli_rshift1(Y1, num_words_secp256k1);
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7ff f848 	bl	8005744 <uECC_vli_rshift1>
        Y1[num_words_secp256k1 - 1] |= carry << (uECC_WORD_BITS - 1);
 80066b4:	69e3      	ldr	r3, [r4, #28]
 80066b6:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
 80066ba:	61e3      	str	r3, [r4, #28]
    uECC_vli_modSquare_fast(X1, Y1, curve);                     /* t1 = B^2 */
 80066bc:	4632      	mov	r2, r6
 80066be:	4621      	mov	r1, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f7ff f8fc 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modSub(X1, X1, t4, curve->p, num_words_secp256k1); /* t1 = B^2 - A */
 80066c6:	463b      	mov	r3, r7
 80066c8:	aa02      	add	r2, sp, #8
 80066ca:	4629      	mov	r1, r5
 80066cc:	4628      	mov	r0, r5
 80066ce:	f7ff fced 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(X1, X1, t4, curve->p, num_words_secp256k1); /* t1 = B^2 - 2A = x3 */
 80066d2:	463b      	mov	r3, r7
 80066d4:	aa02      	add	r2, sp, #8
 80066d6:	4629      	mov	r1, r5
 80066d8:	4628      	mov	r0, r5
 80066da:	f7ff fce7 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(t4, t4, X1, curve->p, num_words_secp256k1); /* t4 = A - x3 */
 80066de:	a902      	add	r1, sp, #8
 80066e0:	4608      	mov	r0, r1
 80066e2:	463b      	mov	r3, r7
 80066e4:	462a      	mov	r2, r5
 80066e6:	f7ff fce1 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
 80066ea:	4633      	mov	r3, r6
 80066ec:	aa02      	add	r2, sp, #8
 80066ee:	4621      	mov	r1, r4
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7ff f8d4 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y1, Y1, t5, curve->p, num_words_secp256k1); /* t2 = B * (A - x3) - y1^4 = y3 */
 80066f6:	463b      	mov	r3, r7
 80066f8:	aa0a      	add	r2, sp, #40	; 0x28
 80066fa:	4621      	mov	r1, r4
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7ff fcd5 	bl	80060ac <uECC_vli_modSub.isra.0>
}
 8006702:	b013      	add	sp, #76	; 0x4c
 8006704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uECC_vli_rshift1(Y1, num_words_secp256k1);
 8006708:	4641      	mov	r1, r8
 800670a:	4620      	mov	r0, r4
 800670c:	f7ff f81a 	bl	8005744 <uECC_vli_rshift1>
 8006710:	e7d4      	b.n	80066bc <double_jacobian_secp256k1+0x98>

08006712 <x_side_default>:
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 8006712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006716:	b08a      	sub	sp, #40	; 0x28
 8006718:	4604      	mov	r4, r0
 800671a:	4615      	mov	r5, r2
 800671c:	460e      	mov	r6, r1
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 800671e:	221c      	movs	r2, #28
 8006720:	2100      	movs	r1, #0
 8006722:	a803      	add	r0, sp, #12
 8006724:	f006 ff7e 	bl	800d624 <memset>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 8006728:	1d2f      	adds	r7, r5, #4
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 800672a:	2303      	movs	r3, #3
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 800672c:	462a      	mov	r2, r5
 800672e:	4631      	mov	r1, r6
 8006730:	4620      	mov	r0, r4
    wordcount_t num_words = curve->num_words;
 8006732:	f995 8000 	ldrsb.w	r8, [r5]
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8006736:	9302      	str	r3, [sp, #8]
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 8006738:	f7ff f8c1 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 800673c:	463b      	mov	r3, r7
 800673e:	aa02      	add	r2, sp, #8
 8006740:	4621      	mov	r1, r4
 8006742:	4620      	mov	r0, r4
 8006744:	f7ff fcb2 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 8006748:	462b      	mov	r3, r5
 800674a:	4632      	mov	r2, r6
 800674c:	4621      	mov	r1, r4
 800674e:	4620      	mov	r0, r4
 8006750:	f7ff f8a5 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 8006754:	f8cd 8000 	str.w	r8, [sp]
 8006758:	463b      	mov	r3, r7
 800675a:	f105 0284 	add.w	r2, r5, #132	; 0x84
 800675e:	4621      	mov	r1, r4
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff fc75 	bl	8006050 <uECC_vli_modAdd>
}
 8006766:	b00a      	add	sp, #40	; 0x28
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800676c <double_jacobian_default>:
                                    uECC_Curve curve) {
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    wordcount_t num_words = curve->num_words;
 8006770:	f993 8000 	ldrsb.w	r8, [r3]
                                    uECC_Curve curve) {
 8006774:	b092      	sub	sp, #72	; 0x48
 8006776:	4604      	mov	r4, r0
 8006778:	4689      	mov	r9, r1
    if (uECC_vli_isZero(Z1, num_words)) {
 800677a:	4610      	mov	r0, r2
 800677c:	4641      	mov	r1, r8
                                    uECC_Curve curve) {
 800677e:	4615      	mov	r5, r2
 8006780:	461e      	mov	r6, r3
    if (uECC_vli_isZero(Z1, num_words)) {
 8006782:	f7fe ff85 	bl	8005690 <uECC_vli_isZero>
 8006786:	2800      	cmp	r0, #0
 8006788:	f040 808e 	bne.w	80068a8 <double_jacobian_default+0x13c>
    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 800678c:	4632      	mov	r2, r6
 800678e:	4649      	mov	r1, r9
 8006790:	a802      	add	r0, sp, #8
 8006792:	f7ff f894 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8006796:	4633      	mov	r3, r6
 8006798:	aa02      	add	r2, sp, #8
 800679a:	4621      	mov	r1, r4
 800679c:	a80a      	add	r0, sp, #40	; 0x28
 800679e:	f7ff f87e 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 80067a2:	a902      	add	r1, sp, #8
 80067a4:	4608      	mov	r0, r1
 80067a6:	4632      	mov	r2, r6
 80067a8:	f7ff f889 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 80067ac:	4633      	mov	r3, r6
 80067ae:	462a      	mov	r2, r5
 80067b0:	4649      	mov	r1, r9
 80067b2:	4648      	mov	r0, r9
 80067b4:	f7ff f873 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 80067b8:	1d37      	adds	r7, r6, #4
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 80067ba:	4632      	mov	r2, r6
 80067bc:	4629      	mov	r1, r5
 80067be:	4628      	mov	r0, r5
 80067c0:	f7ff f87d 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 80067c4:	463b      	mov	r3, r7
 80067c6:	462a      	mov	r2, r5
 80067c8:	4621      	mov	r1, r4
 80067ca:	4620      	mov	r0, r4
 80067cc:	f8cd 8000 	str.w	r8, [sp]
 80067d0:	f7ff fc3e 	bl	8006050 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 80067d4:	463b      	mov	r3, r7
 80067d6:	462a      	mov	r2, r5
 80067d8:	4629      	mov	r1, r5
 80067da:	4628      	mov	r0, r5
 80067dc:	f8cd 8000 	str.w	r8, [sp]
 80067e0:	f7ff fc36 	bl	8006050 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 80067e4:	463b      	mov	r3, r7
 80067e6:	462a      	mov	r2, r5
 80067e8:	4621      	mov	r1, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f7ff fc5e 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 80067f0:	4633      	mov	r3, r6
 80067f2:	462a      	mov	r2, r5
 80067f4:	4621      	mov	r1, r4
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7ff f851 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 80067fc:	463b      	mov	r3, r7
 80067fe:	4622      	mov	r2, r4
 8006800:	4621      	mov	r1, r4
 8006802:	4628      	mov	r0, r5
 8006804:	f8cd 8000 	str.w	r8, [sp]
 8006808:	f7ff fc22 	bl	8006050 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 800680c:	463b      	mov	r3, r7
 800680e:	f8cd 8000 	str.w	r8, [sp]
 8006812:	462a      	mov	r2, r5
 8006814:	4621      	mov	r1, r4
 8006816:	4620      	mov	r0, r4
 8006818:	f7ff fc1a 	bl	8006050 <uECC_vli_modAdd>
 800681c:	6823      	ldr	r3, [r4, #0]
    if (uECC_vli_testBit(X1, 0)) {
 800681e:	07db      	lsls	r3, r3, #31
 8006820:	d545      	bpl.n	80068ae <double_jacobian_default+0x142>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8006822:	463a      	mov	r2, r7
 8006824:	4621      	mov	r1, r4
 8006826:	4620      	mov	r0, r4
 8006828:	f7ff f9c6 	bl	8005bb8 <uECC_vli_add.constprop.0>
        uECC_vli_rshift1(X1, num_words);
 800682c:	4641      	mov	r1, r8
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 800682e:	4682      	mov	sl, r0
        uECC_vli_rshift1(X1, num_words);
 8006830:	4620      	mov	r0, r4
 8006832:	f7fe ff87 	bl	8005744 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 8006836:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 800683a:	3b01      	subs	r3, #1
 800683c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8006840:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
 8006844:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 8006848:	4632      	mov	r2, r6
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	f7ff f836 	bl	80058be <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8006852:	463b      	mov	r3, r7
 8006854:	aa0a      	add	r2, sp, #40	; 0x28
 8006856:	4629      	mov	r1, r5
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff fc27 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 800685e:	463b      	mov	r3, r7
 8006860:	aa0a      	add	r2, sp, #40	; 0x28
 8006862:	4629      	mov	r1, r5
 8006864:	4628      	mov	r0, r5
 8006866:	f7ff fc21 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 800686a:	a90a      	add	r1, sp, #40	; 0x28
 800686c:	4608      	mov	r0, r1
 800686e:	463b      	mov	r3, r7
 8006870:	462a      	mov	r2, r5
 8006872:	f7ff fc1b 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 8006876:	4633      	mov	r3, r6
 8006878:	aa0a      	add	r2, sp, #40	; 0x28
 800687a:	4621      	mov	r1, r4
 800687c:	4620      	mov	r0, r4
 800687e:	f7ff f80e 	bl	800589e <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 8006882:	aa02      	add	r2, sp, #8
 8006884:	463b      	mov	r3, r7
 8006886:	4610      	mov	r0, r2
 8006888:	4621      	mov	r1, r4
 800688a:	f7ff fc0f 	bl	80060ac <uECC_vli_modSub.isra.0>
    uECC_vli_set(X1, Z1, num_words);
 800688e:	4642      	mov	r2, r8
 8006890:	4629      	mov	r1, r5
 8006892:	4620      	mov	r0, r4
 8006894:	f7fe ff35 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 8006898:	4649      	mov	r1, r9
 800689a:	4628      	mov	r0, r5
 800689c:	f7fe ff31 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 80068a0:	a902      	add	r1, sp, #8
 80068a2:	4648      	mov	r0, r9
 80068a4:	f7fe ff2d 	bl	8005702 <uECC_vli_set>
}
 80068a8:	b012      	add	sp, #72	; 0x48
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uECC_vli_rshift1(X1, num_words);
 80068ae:	4641      	mov	r1, r8
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7fe ff47 	bl	8005744 <uECC_vli_rshift1>
 80068b6:	e7c7      	b.n	8006848 <double_jacobian_default+0xdc>

080068b8 <uECC_set_rng>:
    g_rng_function = rng_function;
 80068b8:	4b01      	ldr	r3, [pc, #4]	; (80068c0 <uECC_set_rng+0x8>)
 80068ba:	6018      	str	r0, [r3, #0]
}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	2009e2a0 	.word	0x2009e2a0

080068c4 <uECC_secp256r1>:
uECC_Curve uECC_secp256r1(void) { return &curve_secp256r1; }
 80068c4:	4800      	ldr	r0, [pc, #0]	; (80068c8 <uECC_secp256r1+0x4>)
 80068c6:	4770      	bx	lr
 80068c8:	0800e8d4 	.word	0x0800e8d4

080068cc <uECC_secp256k1>:
uECC_Curve uECC_secp256k1(void) { return &curve_secp256k1; }
 80068cc:	4800      	ldr	r0, [pc, #0]	; (80068d0 <uECC_secp256k1+0x4>)
 80068ce:	4770      	bx	lr
 80068d0:	0800e820 	.word	0x0800e820

080068d4 <uECC_make_key>:
                  uECC_Curve curve) {
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	4605      	mov	r5, r0
 80068da:	b098      	sub	sp, #96	; 0x60
 80068dc:	460f      	mov	r7, r1
 80068de:	4614      	mov	r4, r2
 80068e0:	2640      	movs	r6, #64	; 0x40
        if (!uECC_generate_random_int(private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 80068e2:	f102 0824 	add.w	r8, r2, #36	; 0x24
 80068e6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80068ea:	f113 021f 	adds.w	r2, r3, #31
 80068ee:	bf48      	it	mi
 80068f0:	f103 023e 	addmi.w	r2, r3, #62	; 0x3e
 80068f4:	f342 1247 	sbfx	r2, r2, #5, #8
 80068f8:	4641      	mov	r1, r8
 80068fa:	4668      	mov	r0, sp
 80068fc:	f7ff f920 	bl	8005b40 <uECC_generate_random_int>
 8006900:	b330      	cbz	r0, 8006950 <uECC_make_key+0x7c>
        if (EccPoint_compute_public_key(public, private, curve)) {
 8006902:	4622      	mov	r2, r4
 8006904:	4669      	mov	r1, sp
 8006906:	a808      	add	r0, sp, #32
 8006908:	f7ff fd8f 	bl	800642a <EccPoint_compute_public_key>
 800690c:	b1f0      	cbz	r0, 800694c <uECC_make_key+0x78>
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), private);
 800690e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8006912:	1dd9      	adds	r1, r3, #7
 8006914:	bf48      	it	mi
 8006916:	f103 010e 	addmi.w	r1, r3, #14
 800691a:	466a      	mov	r2, sp
 800691c:	10c9      	asrs	r1, r1, #3
 800691e:	4638      	mov	r0, r7
 8006920:	f7fe fff0 	bl	8005904 <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, public);
 8006924:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8006928:	aa08      	add	r2, sp, #32
 800692a:	4628      	mov	r0, r5
 800692c:	f7fe ffea 	bl	8005904 <uECC_vli_nativeToBytes>
                public_key + curve->num_bytes, curve->num_bytes, public + curve->num_words);
 8006930:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8006934:	f994 2000 	ldrsb.w	r2, [r4]
            uECC_vli_nativeToBytes(
 8006938:	ab08      	add	r3, sp, #32
 800693a:	1868      	adds	r0, r5, r1
 800693c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006940:	f7fe ffe0 	bl	8005904 <uECC_vli_nativeToBytes>
            return 1;
 8006944:	2001      	movs	r0, #1
}
 8006946:	b018      	add	sp, #96	; 0x60
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 800694c:	3e01      	subs	r6, #1
 800694e:	d1ca      	bne.n	80068e6 <uECC_make_key+0x12>
            return 0;
 8006950:	2000      	movs	r0, #0
 8006952:	e7f8      	b.n	8006946 <uECC_make_key+0x72>

08006954 <uECC_shared_secret>:
                       uECC_Curve curve) {
 8006954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	461c      	mov	r4, r3
    wordcount_t num_bytes = curve->num_bytes;
 800695a:	f993 6001 	ldrsb.w	r6, [r3, #1]
    wordcount_t num_words = curve->num_words;
 800695e:	f993 9000 	ldrsb.w	r9, [r3]
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8006962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                       uECC_Curve curve) {
 8006966:	b0a6      	sub	sp, #152	; 0x98
 8006968:	4617      	mov	r7, r2
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 800696a:	1dda      	adds	r2, r3, #7
 800696c:	bf48      	it	mi
 800696e:	f103 020e 	addmi.w	r2, r3, #14
    uECC_word_t *p2[2] = {private, tmp};
 8006972:	f10d 0818 	add.w	r8, sp, #24
                       uECC_Curve curve) {
 8006976:	4605      	mov	r5, r0
    uECC_word_t *p2[2] = {private, tmp};
 8006978:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 800697c:	10d2      	asrs	r2, r2, #3
 800697e:	4640      	mov	r0, r8
    uECC_word_t *p2[2] = {private, tmp};
 8006980:	f8cd 8010 	str.w	r8, [sp, #16]
 8006984:	f8cd a014 	str.w	sl, [sp, #20]
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8006988:	f7fe ffd0 	bl	800592c <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(public, public_key, num_bytes);
 800698c:	4629      	mov	r1, r5
 800698e:	4632      	mov	r2, r6
 8006990:	a816      	add	r0, sp, #88	; 0x58
 8006992:	f7fe ffcb 	bl	800592c <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(public + num_words, public_key + num_bytes, num_bytes);
 8006996:	ab16      	add	r3, sp, #88	; 0x58
 8006998:	19a9      	adds	r1, r5, r6
 800699a:	eb03 0089 	add.w	r0, r3, r9, lsl #2
 800699e:	4632      	mov	r2, r6
 80069a0:	f7fe ffc4 	bl	800592c <uECC_vli_bytesToNative>
    carry = regularize_k(private, private, tmp, curve);
 80069a4:	4623      	mov	r3, r4
 80069a6:	4652      	mov	r2, sl
 80069a8:	4641      	mov	r1, r8
 80069aa:	4640      	mov	r0, r8
 80069ac:	f7ff f929 	bl	8005c02 <regularize_k>
    if (g_rng_function) {
 80069b0:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <uECC_shared_secret+0xc4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
    carry = regularize_k(private, private, tmp, curve);
 80069b4:	4605      	mov	r5, r0
    if (g_rng_function) {
 80069b6:	b163      	cbz	r3, 80069d2 <uECC_shared_secret+0x7e>
        if (!uECC_generate_random_int(p2[carry], curve->p, num_words)) {
 80069b8:	ab26      	add	r3, sp, #152	; 0x98
 80069ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80069be:	464a      	mov	r2, r9
 80069c0:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80069c4:	9303      	str	r3, [sp, #12]
 80069c6:	4618      	mov	r0, r3
 80069c8:	1d21      	adds	r1, r4, #4
 80069ca:	f7ff f8b9 	bl	8005b40 <uECC_generate_random_int>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	b1f0      	cbz	r0, 8006a10 <uECC_shared_secret+0xbc>
    EccPoint_mult(public, public, p2[!carry], initial_Z, curve->num_n_bits + 1, curve);
 80069d2:	fab5 f185 	clz	r1, r5
 80069d6:	aa26      	add	r2, sp, #152	; 0x98
 80069d8:	0949      	lsrs	r1, r1, #5
 80069da:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80069de:	8862      	ldrh	r2, [r4, #2]
 80069e0:	9401      	str	r4, [sp, #4]
 80069e2:	3201      	adds	r2, #1
 80069e4:	b212      	sxth	r2, r2
 80069e6:	9200      	str	r2, [sp, #0]
 80069e8:	f851 2c88 	ldr.w	r2, [r1, #-136]
 80069ec:	a916      	add	r1, sp, #88	; 0x58
 80069ee:	4608      	mov	r0, r1
 80069f0:	f7ff fc50 	bl	8006294 <EccPoint_mult>
    uECC_vli_nativeToBytes(secret, num_bytes, public);
 80069f4:	aa16      	add	r2, sp, #88	; 0x58
 80069f6:	4631      	mov	r1, r6
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7fe ff83 	bl	8005904 <uECC_vli_nativeToBytes>
    return !EccPoint_isZero(public, curve);
 80069fe:	7821      	ldrb	r1, [r4, #0]
 8006a00:	0049      	lsls	r1, r1, #1
 8006a02:	b249      	sxtb	r1, r1
 8006a04:	4610      	mov	r0, r2
 8006a06:	f7fe fe43 	bl	8005690 <uECC_vli_isZero>
 8006a0a:	fab0 f080 	clz	r0, r0
 8006a0e:	0940      	lsrs	r0, r0, #5
}
 8006a10:	b026      	add	sp, #152	; 0x98
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	bf00      	nop
 8006a18:	2009e2a0 	.word	0x2009e2a0

08006a1c <uECC_compress>:
void uECC_compress(const uint8_t *public_key, uint8_t *compressed, uECC_Curve curve) {
 8006a1c:	b530      	push	{r4, r5, lr}
    for (i = 0; i < curve->num_bytes; ++i) {
 8006a1e:	2400      	movs	r4, #0
 8006a20:	f992 5001 	ldrsb.w	r5, [r2, #1]
 8006a24:	b263      	sxtb	r3, r4
 8006a26:	429d      	cmp	r5, r3
 8006a28:	dc08      	bgt.n	8006a3c <uECC_compress+0x20>
    compressed[0] = 2 + (public_key[curve->num_bytes * 2 - 1] & 0x01);
 8006a2a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 8006a2e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	3302      	adds	r3, #2
 8006a38:	700b      	strb	r3, [r1, #0]
}
 8006a3a:	bd30      	pop	{r4, r5, pc}
        compressed[i+1] = public_key[i];
 8006a3c:	5cc5      	ldrb	r5, [r0, r3]
 8006a3e:	440b      	add	r3, r1
 8006a40:	3401      	adds	r4, #1
 8006a42:	705d      	strb	r5, [r3, #1]
    for (i = 0; i < curve->num_bytes; ++i) {
 8006a44:	e7ec      	b.n	8006a20 <uECC_compress+0x4>

08006a46 <uECC_decompress>:
void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve) {
 8006a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uECC_word_t *y = point + curve->num_words;
 8006a4a:	f992 8000 	ldrsb.w	r8, [r2]
void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve) {
 8006a4e:	b090      	sub	sp, #64	; 0x40
 8006a50:	4614      	mov	r4, r2
 8006a52:	4607      	mov	r7, r0
    uECC_vli_bytesToNative(point, compressed + 1, curve->num_bytes);
 8006a54:	f992 2001 	ldrsb.w	r2, [r2, #1]
    uECC_word_t *y = point + curve->num_words;
 8006a58:	eb0d 0588 	add.w	r5, sp, r8, lsl #2
void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve) {
 8006a5c:	460e      	mov	r6, r1
    uECC_vli_bytesToNative(point, compressed + 1, curve->num_bytes);
 8006a5e:	1c41      	adds	r1, r0, #1
 8006a60:	4668      	mov	r0, sp
 8006a62:	f7fe ff63 	bl	800592c <uECC_vli_bytesToNative>
    curve->x_side(y, point, curve);
 8006a66:	4622      	mov	r2, r4
 8006a68:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006a6c:	4669      	mov	r1, sp
 8006a6e:	4628      	mov	r0, r5
 8006a70:	4798      	blx	r3
    curve->mod_sqrt(y, curve);
 8006a72:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8006a76:	4621      	mov	r1, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	4798      	blx	r3
    if ((y[0] & 0x01) != (compressed[0] & 0x01)) {
 8006a7c:	783b      	ldrb	r3, [r7, #0]
 8006a7e:	f85d 2028 	ldr.w	r2, [sp, r8, lsl #2]
 8006a82:	4053      	eors	r3, r2
 8006a84:	07db      	lsls	r3, r3, #31
 8006a86:	d504      	bpl.n	8006a92 <uECC_decompress+0x4c>
        uECC_vli_sub(y, curve->p, y, curve->num_words);
 8006a88:	462a      	mov	r2, r5
 8006a8a:	1d21      	adds	r1, r4, #4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7fe ffd1 	bl	8005a34 <uECC_vli_sub.constprop.0>
    uECC_vli_nativeToBytes(public_key, curve->num_bytes, point);
 8006a92:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8006a96:	466a      	mov	r2, sp
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f7fe ff33 	bl	8005904 <uECC_vli_nativeToBytes>
    uECC_vli_nativeToBytes(public_key + curve->num_bytes, curve->num_bytes, y);
 8006a9e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	1870      	adds	r0, r6, r1
 8006aa6:	f7fe ff2d 	bl	8005904 <uECC_vli_nativeToBytes>
}
 8006aaa:	b010      	add	sp, #64	; 0x40
 8006aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ab0 <uECC_valid_point>:
int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve) {
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (EccPoint_isZero(point, curve)) {
 8006ab4:	780d      	ldrb	r5, [r1, #0]
    wordcount_t num_words = curve->num_words;
 8006ab6:	f991 2000 	ldrsb.w	r2, [r1]
int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve) {
 8006aba:	b092      	sub	sp, #72	; 0x48
 8006abc:	460e      	mov	r6, r1
    if (EccPoint_isZero(point, curve)) {
 8006abe:	0069      	lsls	r1, r5, #1
 8006ac0:	b249      	sxtb	r1, r1
int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve) {
 8006ac2:	4607      	mov	r7, r0
    wordcount_t num_words = curve->num_words;
 8006ac4:	9201      	str	r2, [sp, #4]
    if (EccPoint_isZero(point, curve)) {
 8006ac6:	f7fe fde3 	bl	8005690 <uECC_vli_isZero>
 8006aca:	4604      	mov	r4, r0
 8006acc:	bb80      	cbnz	r0, 8006b30 <uECC_valid_point+0x80>
    if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
 8006ace:	f106 0804 	add.w	r8, r6, #4
 8006ad2:	9a01      	ldr	r2, [sp, #4]
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	f7fe fe1f 	bl	800571a <uECC_vli_cmp_unsafe>
 8006adc:	2801      	cmp	r0, #1
 8006ade:	d11a      	bne.n	8006b16 <uECC_valid_point+0x66>
            uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
 8006ae0:	9a01      	ldr	r2, [sp, #4]
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 8006ae8:	f7fe fe17 	bl	800571a <uECC_vli_cmp_unsafe>
    if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
 8006aec:	2801      	cmp	r0, #1
 8006aee:	d112      	bne.n	8006b16 <uECC_valid_point+0x66>
    uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
 8006af0:	4632      	mov	r2, r6
 8006af2:	a802      	add	r0, sp, #8
    curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
 8006af4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
 8006af8:	f7fe fee1 	bl	80058be <uECC_vli_modSquare_fast>
    curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
 8006afc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8006b00:	4632      	mov	r2, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	4640      	mov	r0, r8
 8006b06:	4798      	blx	r3
    for (i = num_words - 1; i >= 0; --i) {
 8006b08:	1e6b      	subs	r3, r5, #1
 8006b0a:	b25b      	sxtb	r3, r3
 8006b0c:	061a      	lsls	r2, r3, #24
 8006b0e:	d506      	bpl.n	8006b1e <uECC_valid_point+0x6e>
    return (diff == 0);
 8006b10:	fab4 f484 	clz	r4, r4
 8006b14:	0964      	lsrs	r4, r4, #5
}
 8006b16:	4620      	mov	r0, r4
 8006b18:	b012      	add	sp, #72	; 0x48
 8006b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        diff |= (left[i] ^ right[i]);
 8006b1e:	aa02      	add	r2, sp, #8
 8006b20:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8006b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b28:	404a      	eors	r2, r1
 8006b2a:	4314      	orrs	r4, r2
    for (i = num_words - 1; i >= 0; --i) {
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	e7ed      	b.n	8006b0c <uECC_valid_point+0x5c>
        return 0;
 8006b30:	2400      	movs	r4, #0
 8006b32:	e7f0      	b.n	8006b16 <uECC_valid_point+0x66>

08006b34 <uECC_valid_public_key>:
int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve) {
 8006b34:	b530      	push	{r4, r5, lr}
 8006b36:	460c      	mov	r4, r1
 8006b38:	b091      	sub	sp, #68	; 0x44
    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
 8006b3a:	f991 2001 	ldrsb.w	r2, [r1, #1]
int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve) {
 8006b3e:	4605      	mov	r5, r0
    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
 8006b40:	4601      	mov	r1, r0
 8006b42:	4668      	mov	r0, sp
 8006b44:	f7fe fef2 	bl	800592c <uECC_vli_bytesToNative>
        public + curve->num_words, public_key + curve->num_bytes, curve->num_bytes);
 8006b48:	f994 2001 	ldrsb.w	r2, [r4, #1]
 8006b4c:	f994 0000 	ldrsb.w	r0, [r4]
    uECC_vli_bytesToNative(
 8006b50:	18a9      	adds	r1, r5, r2
 8006b52:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
 8006b56:	f7fe fee9 	bl	800592c <uECC_vli_bytesToNative>
    return uECC_valid_point(public, curve);
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4668      	mov	r0, sp
 8006b5e:	f7ff ffa7 	bl	8006ab0 <uECC_valid_point>
}
 8006b62:	b011      	add	sp, #68	; 0x44
 8006b64:	bd30      	pop	{r4, r5, pc}

08006b66 <uECC_compute_public_key>:
int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key, uECC_Curve curve) {
 8006b66:	b570      	push	{r4, r5, r6, lr}
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8006b68:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key, uECC_Curve curve) {
 8006b6c:	4614      	mov	r4, r2
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8006b6e:	1dda      	adds	r2, r3, #7
 8006b70:	bf48      	it	mi
 8006b72:	f103 020e 	addmi.w	r2, r3, #14
int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key, uECC_Curve curve) {
 8006b76:	b098      	sub	sp, #96	; 0x60
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8006b78:	10d2      	asrs	r2, r2, #3
int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key, uECC_Curve curve) {
 8006b7a:	460e      	mov	r6, r1
    uECC_vli_bytesToNative(private, private_key, BITS_TO_BYTES(curve->num_n_bits));
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	4668      	mov	r0, sp
 8006b80:	f7fe fed4 	bl	800592c <uECC_vli_bytesToNative>
    if (uECC_vli_isZero(private, BITS_TO_WORDS(curve->num_n_bits))) {
 8006b84:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8006b88:	f113 021f 	adds.w	r2, r3, #31
 8006b8c:	bf48      	it	mi
 8006b8e:	f103 023e 	addmi.w	r2, r3, #62	; 0x3e
 8006b92:	f342 1147 	sbfx	r1, r2, #5, #8
 8006b96:	4668      	mov	r0, sp
 8006b98:	f7fe fd7a 	bl	8005690 <uECC_vli_isZero>
 8006b9c:	b110      	cbz	r0, 8006ba4 <uECC_compute_public_key+0x3e>
        return 0;
 8006b9e:	2000      	movs	r0, #0
}
 8006ba0:	b018      	add	sp, #96	; 0x60
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
    if (uECC_vli_cmp(curve->n, private, BITS_TO_WORDS(curve->num_n_bits)) != 1) {
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006baa:	4669      	mov	r1, sp
 8006bac:	f7fe ffb0 	bl	8005b10 <uECC_vli_cmp>
 8006bb0:	2801      	cmp	r0, #1
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	d1f3      	bne.n	8006b9e <uECC_compute_public_key+0x38>
    if (!EccPoint_compute_public_key(public, private, curve)) {
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4669      	mov	r1, sp
 8006bba:	a808      	add	r0, sp, #32
 8006bbc:	f7ff fc35 	bl	800642a <EccPoint_compute_public_key>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d0ec      	beq.n	8006b9e <uECC_compute_public_key+0x38>
    uECC_vli_nativeToBytes(public_key, curve->num_bytes, public);
 8006bc4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8006bc8:	aa08      	add	r2, sp, #32
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7fe fe9a 	bl	8005904 <uECC_vli_nativeToBytes>
        public_key + curve->num_bytes, curve->num_bytes, public + curve->num_words);
 8006bd0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8006bd4:	f994 2000 	ldrsb.w	r2, [r4]
    uECC_vli_nativeToBytes(
 8006bd8:	ab08      	add	r3, sp, #32
 8006bda:	1870      	adds	r0, r6, r1
 8006bdc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006be0:	f7fe fe90 	bl	8005904 <uECC_vli_nativeToBytes>
    return 1;
 8006be4:	4628      	mov	r0, r5
 8006be6:	e7db      	b.n	8006ba0 <uECC_compute_public_key+0x3a>

08006be8 <uECC_sign>:
              uECC_Curve curve) {
 8006be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	b08a      	sub	sp, #40	; 0x28
 8006bee:	4605      	mov	r5, r0
 8006bf0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8006bf4:	460e      	mov	r6, r1
 8006bf6:	4617      	mov	r7, r2
 8006bf8:	4698      	mov	r8, r3
 8006bfa:	2440      	movs	r4, #64	; 0x40
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 8006bfc:	f109 0a24 	add.w	sl, r9, #36	; 0x24
 8006c00:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8006c04:	f113 021f 	adds.w	r2, r3, #31
 8006c08:	bf48      	it	mi
 8006c0a:	f103 023e 	addmi.w	r2, r3, #62	; 0x3e
 8006c0e:	f342 1247 	sbfx	r2, r2, #5, #8
 8006c12:	4651      	mov	r1, sl
 8006c14:	a802      	add	r0, sp, #8
 8006c16:	f7fe ff93 	bl	8005b40 <uECC_generate_random_int>
 8006c1a:	b150      	cbz	r0, 8006c32 <uECC_sign+0x4a>
        if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
 8006c1c:	e9cd 8900 	strd	r8, r9, [sp]
 8006c20:	ab02      	add	r3, sp, #8
 8006c22:	463a      	mov	r2, r7
 8006c24:	4631      	mov	r1, r6
 8006c26:	4628      	mov	r0, r5
 8006c28:	f7ff fc2a 	bl	8006480 <uECC_sign_with_k>
 8006c2c:	b928      	cbnz	r0, 8006c3a <uECC_sign+0x52>
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8006c2e:	3c01      	subs	r4, #1
 8006c30:	d1e6      	bne.n	8006c00 <uECC_sign+0x18>
            return 0;
 8006c32:	2000      	movs	r0, #0
}
 8006c34:	b00a      	add	sp, #40	; 0x28
 8006c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 1;
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	e7fa      	b.n	8006c34 <uECC_sign+0x4c>

08006c3e <uECC_sign_deterministic>:
int uECC_sign_deterministic(const uint8_t *private_key,
                            const uint8_t *message_hash,
                            unsigned hash_size,
                            uECC_HashContext *hash_context,
                            uint8_t *signature,
                            uECC_Curve curve) {
 8006c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c42:	b091      	sub	sp, #68	; 0x44
 8006c44:	4693      	mov	fp, r2
    uint8_t *K = hash_context->tmp;
    uint8_t *V = K + hash_context->result_size;
    wordcount_t num_bytes = curve->num_bytes;
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8006c46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006c48:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
    uint8_t *V = K + hash_context->result_size;
 8006c4c:	e9d3 6504 	ldrd	r6, r5, [r3, #16]
                            uECC_Curve curve) {
 8006c50:	461c      	mov	r4, r3
    wordcount_t num_bytes = curve->num_bytes;
 8006c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8006c54:	f118 071f 	adds.w	r7, r8, #31
 8006c58:	bf48      	it	mi
 8006c5a:	f108 073e 	addmi.w	r7, r8, #62	; 0x3e
    bitcount_t num_n_bits = curve->num_n_bits;
    uECC_word_t tries;
    unsigned i;
    for (i = 0; i < hash_context->result_size; ++i) {
 8006c5e:	2200      	movs	r2, #0
    wordcount_t num_bytes = curve->num_bytes;
 8006c60:	f993 3001 	ldrsb.w	r3, [r3, #1]
                            uECC_Curve curve) {
 8006c64:	4681      	mov	r9, r0
 8006c66:	468a      	mov	sl, r1
    uint8_t *V = K + hash_context->result_size;
 8006c68:	442e      	add	r6, r5
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8006c6a:	f347 1747 	sbfx	r7, r7, #5, #8
        V[i] = 0x01;
 8006c6e:	2001      	movs	r0, #1
        K[i] = 0;
 8006c70:	4694      	mov	ip, r2
    for (i = 0; i < hash_context->result_size; ++i) {
 8006c72:	6921      	ldr	r1, [r4, #16]
 8006c74:	4291      	cmp	r1, r2
 8006c76:	f200 8086 	bhi.w	8006d86 <uECC_sign_deterministic+0x148>
    }
    
    /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
    HMAC_init(hash_context, K);
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	9303      	str	r3, [sp, #12]
 8006c80:	f7fe fe74 	bl	800596c <HMAC_init>
    V[hash_context->result_size] = 0x00;
 8006c84:	6922      	ldr	r2, [r4, #16]
 8006c86:	2100      	movs	r1, #0
 8006c88:	54b1      	strb	r1, [r6, r2]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 8006c8a:	6922      	ldr	r2, [r4, #16]
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	3201      	adds	r2, #1
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7fe fe8c 	bl	80059ae <HMAC_update>
    HMAC_update(hash_context, private_key, num_bytes);
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	4649      	mov	r1, r9
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f7fe fe86 	bl	80059ae <HMAC_update>
    HMAC_update(hash_context, message_hash, hash_size);
 8006ca2:	465a      	mov	r2, fp
 8006ca4:	4651      	mov	r1, sl
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7fe fe81 	bl	80059ae <HMAC_update>
    HMAC_finish(hash_context, K, K);
 8006cac:	462a      	mov	r2, r5
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7fe fe7e 	bl	80059b2 <HMAC_finish>

    update_V(hash_context, K, V);
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7fe fea8 	bl	8005a10 <update_V>
    
    /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
    HMAC_init(hash_context, K);
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f7fe fe52 	bl	800596c <HMAC_init>
    V[hash_context->result_size] = 0x01;
 8006cc8:	6922      	ldr	r2, [r4, #16]
 8006cca:	2101      	movs	r1, #1
 8006ccc:	54b1      	strb	r1, [r6, r2]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 8006cce:	6922      	ldr	r2, [r4, #16]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	440a      	add	r2, r1
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	f7fe fe6a 	bl	80059ae <HMAC_update>
    HMAC_update(hash_context, private_key, num_bytes);
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	4649      	mov	r1, r9
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7fe fe64 	bl	80059ae <HMAC_update>
    HMAC_update(hash_context, message_hash, hash_size);
 8006ce6:	465a      	mov	r2, fp
 8006ce8:	4651      	mov	r1, sl
 8006cea:	4620      	mov	r0, r4
 8006cec:	f7fe fe5f 	bl	80059ae <HMAC_update>
    HMAC_finish(hash_context, K, K);
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7fe fe5c 	bl	80059b2 <HMAC_finish>

    update_V(hash_context, K, V);
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7fe fe86 	bl	8005a10 <update_V>
        wordcount_t T_bytes = 0;
        for (;;) {
            update_V(hash_context, K, V);
            for (i = 0; i < hash_context->result_size; ++i) {
                T_ptr[T_bytes++] = V[i];
                if (T_bytes >= num_n_words * uECC_WORD_SIZE) {
 8006d04:	00bb      	lsls	r3, r7, #2
 8006d06:	9304      	str	r3, [sp, #16]
                    goto filled;
                }
            }
        }
    filled:
        if ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8 > num_n_bits) {
 8006d08:	017b      	lsls	r3, r7, #5
 8006d0a:	9305      	str	r3, [sp, #20]
            uECC_word_t mask = (uECC_word_t)-1;
            T[num_n_words - 1] &=
                mask >> ((bitcount_t)(num_n_words * uECC_WORD_SIZE * 8 - num_n_bits));
 8006d0c:	ebc8 1347 	rsb	r3, r8, r7, lsl #5
 8006d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d14:	b21b      	sxth	r3, r3
 8006d16:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1a:	9306      	str	r3, [sp, #24]
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	9303      	str	r3, [sp, #12]
            T[num_n_words - 1] &=
 8006d20:	4417      	add	r7, r2
 8006d22:	446b      	add	r3, sp
 8006d24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
        wordcount_t T_bytes = 0;
 8006d28:	2300      	movs	r3, #0
            update_V(hash_context, K, V);
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	9307      	str	r3, [sp, #28]
 8006d32:	f7fe fe6d 	bl	8005a10 <update_V>
            for (i = 0; i < hash_context->result_size; ++i) {
 8006d36:	6920      	ldr	r0, [r4, #16]
 8006d38:	9b07      	ldr	r3, [sp, #28]
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4430      	add	r0, r6
 8006d3e:	461a      	mov	r2, r3
                T_ptr[T_bytes++] = V[i];
 8006d40:	ab08      	add	r3, sp, #32
 8006d42:	eb03 0c02 	add.w	ip, r3, r2
            for (i = 0; i < hash_context->result_size; ++i) {
 8006d46:	4288      	cmp	r0, r1
 8006d48:	4613      	mov	r3, r2
 8006d4a:	f102 0201 	add.w	r2, r2, #1
 8006d4e:	b252      	sxtb	r2, r2
 8006d50:	d0eb      	beq.n	8006d2a <uECC_sign_deterministic+0xec>
                T_ptr[T_bytes++] = V[i];
 8006d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d56:	f88c 3000 	strb.w	r3, [ip]
                if (T_bytes >= num_n_words * uECC_WORD_SIZE) {
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	dcef      	bgt.n	8006d40 <uECC_sign_deterministic+0x102>
        if ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8 > num_n_bits) {
 8006d60:	9b05      	ldr	r3, [sp, #20]
 8006d62:	4598      	cmp	r8, r3
 8006d64:	db14      	blt.n	8006d90 <uECC_sign_deterministic+0x152>
        }
    
        if (uECC_sign_with_k(private_key, message_hash, hash_size, T, signature, curve)) {
 8006d66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	465a      	mov	r2, fp
 8006d70:	ab08      	add	r3, sp, #32
 8006d72:	4651      	mov	r1, sl
 8006d74:	4648      	mov	r0, r9
 8006d76:	f7ff fb83 	bl	8006480 <uECC_sign_with_k>
 8006d7a:	b180      	cbz	r0, 8006d9e <uECC_sign_deterministic+0x160>
            return 1;
 8006d7c:	2301      	movs	r3, #1
        HMAC_finish(hash_context, K, K);

        update_V(hash_context, K, V);
    }
    return 0;
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	b011      	add	sp, #68	; 0x44
 8006d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        V[i] = 0x01;
 8006d86:	54b0      	strb	r0, [r6, r2]
        K[i] = 0;
 8006d88:	f805 c002 	strb.w	ip, [r5, r2]
    for (i = 0; i < hash_context->result_size; ++i) {
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	e770      	b.n	8006c72 <uECC_sign_deterministic+0x34>
            T[num_n_words - 1] &=
 8006d90:	f857 3c20 	ldr.w	r3, [r7, #-32]
 8006d94:	9a06      	ldr	r2, [sp, #24]
 8006d96:	4013      	ands	r3, r2
 8006d98:	f847 3c20 	str.w	r3, [r7, #-32]
 8006d9c:	e7e3      	b.n	8006d66 <uECC_sign_deterministic+0x128>
 8006d9e:	9007      	str	r0, [sp, #28]
        HMAC_init(hash_context, K);
 8006da0:	4629      	mov	r1, r5
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7fe fde2 	bl	800596c <HMAC_init>
        V[hash_context->result_size] = 0x00;
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	9b07      	ldr	r3, [sp, #28]
 8006dac:	54b3      	strb	r3, [r6, r2]
        HMAC_update(hash_context, V, hash_context->result_size + 1);
 8006dae:	6922      	ldr	r2, [r4, #16]
 8006db0:	4631      	mov	r1, r6
 8006db2:	3201      	adds	r2, #1
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7fe fdfa 	bl	80059ae <HMAC_update>
        HMAC_finish(hash_context, K, K);
 8006dba:	462a      	mov	r2, r5
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7fe fdf7 	bl	80059b2 <HMAC_finish>
        update_V(hash_context, K, V);
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7fe fe21 	bl	8005a10 <update_V>
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	9b07      	ldr	r3, [sp, #28]
 8006dd6:	d1a7      	bne.n	8006d28 <uECC_sign_deterministic+0xea>
 8006dd8:	e7d1      	b.n	8006d7e <uECC_sign_deterministic+0x140>

08006dda <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
 8006dda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dde:	ed2d 8b02 	vpush	{d8}
 8006de2:	b0fb      	sub	sp, #492	; 0x1ec
 8006de4:	461c      	mov	r4, r3
 8006de6:	9d86      	ldr	r5, [sp, #536]	; 0x218
    const uECC_word_t *point;
    bitcount_t num_bits;
    bitcount_t i;
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8006de8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    wordcount_t num_words = curve->num_words;
 8006dec:	f995 8000 	ldrsb.w	r8, [r5]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8006df0:	f113 061f 	adds.w	r6, r3, #31
 8006df4:	bf48      	it	mi
 8006df6:	f103 063e 	addmi.w	r6, r3, #62	; 0x3e
 8006dfa:	f346 1647 	sbfx	r6, r6, #5, #8
    
    rx[num_n_words - 1] = 0;
 8006dfe:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
                uECC_Curve curve) {
 8006e02:	4691      	mov	r9, r2
    rx[num_n_words - 1] = 0;
 8006e04:	aa22      	add	r2, sp, #136	; 0x88
 8006e06:	2300      	movs	r3, #0
 8006e08:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
    r[num_n_words - 1] = 0;
 8006e0c:	aa7a      	add	r2, sp, #488	; 0x1e8
 8006e0e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
                uECC_Curve curve) {
 8006e12:	4607      	mov	r7, r0
    r[num_n_words - 1] = 0;
 8006e14:	f842 3cc0 	str.w	r3, [r2, #-192]
    s[num_n_words - 1] = 0;
 8006e18:	f842 3ca0 	str.w	r3, [r2, #-160]
                uECC_Curve curve) {
 8006e1c:	ee08 1a90 	vmov	s17, r1

    uECC_vli_bytesToNative(public, public_key, curve->num_bytes);
 8006e20:	f995 2001 	ldrsb.w	r2, [r5, #1]
 8006e24:	4601      	mov	r1, r0
 8006e26:	a85a      	add	r0, sp, #360	; 0x168
 8006e28:	f7fe fd80 	bl	800592c <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(
        public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 8006e2c:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8006e30:	f995 2001 	ldrsb.w	r2, [r5, #1]
 8006e34:	9304      	str	r3, [sp, #16]
    uECC_vli_bytesToNative(
 8006e36:	ab5a      	add	r3, sp, #360	; 0x168
 8006e38:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	18b9      	adds	r1, r7, r2
 8006e40:	ee08 3a10 	vmov	s16, r3
 8006e44:	f7fe fd72 	bl	800592c <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 8006e48:	4621      	mov	r1, r4
 8006e4a:	f995 2001 	ldrsb.w	r2, [r5, #1]
 8006e4e:	a84a      	add	r0, sp, #296	; 0x128
 8006e50:	f7fe fd6c 	bl	800592c <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 8006e54:	f995 2001 	ldrsb.w	r2, [r5, #1]
 8006e58:	a852      	add	r0, sp, #328	; 0x148
 8006e5a:	18a1      	adds	r1, r4, r2
 8006e5c:	f7fe fd66 	bl	800592c <uECC_vli_bytesToNative>
    
    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 8006e60:	4641      	mov	r1, r8
 8006e62:	a84a      	add	r0, sp, #296	; 0x128
 8006e64:	f7fe fc14 	bl	8005690 <uECC_vli_isZero>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f040 812b 	bne.w	80070c8 <uECC_verify+0x2ee>
 8006e72:	a852      	add	r0, sp, #328	; 0x148
 8006e74:	f7fe fc0c 	bl	8005690 <uECC_vli_isZero>
 8006e78:	9002      	str	r0, [sp, #8]
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f040 8126 	bne.w	80070cc <uECC_verify+0x2f2>
        return 0;
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8006e80:	f105 0b24 	add.w	fp, r5, #36	; 0x24
 8006e84:	4632      	mov	r2, r6
 8006e86:	a94a      	add	r1, sp, #296	; 0x128
 8006e88:	4658      	mov	r0, fp
 8006e8a:	f7fe fc46 	bl	800571a <uECC_vli_cmp_unsafe>
 8006e8e:	2801      	cmp	r0, #1
 8006e90:	f040 811e 	bne.w	80070d0 <uECC_verify+0x2f6>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8006e94:	4632      	mov	r2, r6
 8006e96:	a952      	add	r1, sp, #328	; 0x148
 8006e98:	4658      	mov	r0, fp
 8006e9a:	f7fe fc3e 	bl	800571a <uECC_vli_cmp_unsafe>
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8006e9e:	2801      	cmp	r0, #1
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8006ea0:	9005      	str	r0, [sp, #20]
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8006ea2:	f040 8115 	bne.w	80070d0 <uECC_verify+0x2f6>
        return 0;
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8006ea6:	ac1a      	add	r4, sp, #104	; 0x68
    u1[num_n_words - 1] = 0;
 8006ea8:	af0a      	add	r7, sp, #40	; 0x28
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8006eaa:	4633      	mov	r3, r6
 8006eac:	465a      	mov	r2, fp
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f7ff f84e 	bl	8005f50 <uECC_vli_modInv>
    u1[num_n_words - 1] = 0;
 8006eb4:	9b02      	ldr	r3, [sp, #8]
 8006eb6:	f847 302a 	str.w	r3, [r7, sl, lsl #2]
    bits2int(u1, message_hash, hash_size, curve);
 8006eba:	464a      	mov	r2, r9
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	ee18 1a90 	vmov	r1, s17
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	f7fe fddd 	bl	8005a82 <bits2int>
    uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8006ec8:	4639      	mov	r1, r7
 8006eca:	4638      	mov	r0, r7
 8006ecc:	465b      	mov	r3, fp
 8006ece:	4622      	mov	r2, r4
 8006ed0:	9600      	str	r6, [sp, #0]
 8006ed2:	f7fe fc44 	bl	800575e <uECC_vli_modMult>
    uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
    
    /* Calculate sum = G + Q. */
    uECC_vli_set(sum, public, num_words);
 8006ed6:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
    uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 8006eda:	465b      	mov	r3, fp
 8006edc:	4622      	mov	r2, r4
 8006ede:	a94a      	add	r1, sp, #296	; 0x128
 8006ee0:	a812      	add	r0, sp, #72	; 0x48
 8006ee2:	9600      	str	r6, [sp, #0]
 8006ee4:	f7fe fc3b 	bl	800575e <uECC_vli_modMult>
    uECC_vli_set(sum, public, num_words);
 8006ee8:	4642      	mov	r2, r8
 8006eea:	4650      	mov	r0, sl
 8006eec:	a95a      	add	r1, sp, #360	; 0x168
 8006eee:	f7fe fc08 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(sum + num_words, public + num_words, num_words);
 8006ef2:	9b04      	ldr	r3, [sp, #16]
 8006ef4:	eb0a 0903 	add.w	r9, sl, r3
 8006ef8:	ee18 1a10 	vmov	r1, s16
 8006efc:	4648      	mov	r0, r9
 8006efe:	f7fe fc00 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(tx, curve->G, num_words);
 8006f02:	f105 0344 	add.w	r3, r5, #68	; 0x44
 8006f06:	4619      	mov	r1, r3
 8006f08:	a832      	add	r0, sp, #200	; 0xc8
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	f7fe fbf9 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(ty, curve->G + num_words, num_words);
 8006f10:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 8006f14:	a83a      	add	r0, sp, #232	; 0xe8
 8006f16:	1859      	adds	r1, r3, r1
 8006f18:	f7fe fbf3 	bl	8005702 <uECC_vli_set>
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8006f1c:	1d2b      	adds	r3, r5, #4
 8006f1e:	ee08 3a10 	vmov	s16, r3
 8006f22:	4651      	mov	r1, sl
 8006f24:	aa32      	add	r2, sp, #200	; 0xc8
 8006f26:	4620      	mov	r0, r4
 8006f28:	f7ff f8c0 	bl	80060ac <uECC_vli_modSub.isra.0>
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	4652      	mov	r2, sl
 8006f30:	a93a      	add	r1, sp, #232	; 0xe8
 8006f32:	a832      	add	r0, sp, #200	; 0xc8
 8006f34:	9500      	str	r5, [sp, #0]
 8006f36:	f7ff f94d 	bl	80061d4 <XYcZ_add>
    uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8006f3a:	ee18 2a10 	vmov	r2, s16
 8006f3e:	4643      	mov	r3, r8
 8006f40:	4621      	mov	r1, r4
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff f804 	bl	8005f50 <uECC_vli_modInv>
    apply_z(sum, sum + num_words, z, curve);
 8006f48:	462b      	mov	r3, r5
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	4650      	mov	r0, sl
 8006f4e:	4622      	mov	r2, r4
 8006f50:	f7fe fcb9 	bl	80058c6 <apply_z>
    
    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
 8006f54:	9a02      	ldr	r2, [sp, #8]
 8006f56:	9206      	str	r2, [sp, #24]
    points[1] = curve->G;
 8006f58:	9a03      	ldr	r2, [sp, #12]
 8006f5a:	9207      	str	r2, [sp, #28]
    points[2] = public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 8006f5c:	4631      	mov	r1, r6
    points[2] = public;
 8006f5e:	aa5a      	add	r2, sp, #360	; 0x168
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 8006f60:	4638      	mov	r0, r7
    points[3] = sum;
 8006f62:	e9cd 2a08 	strd	r2, sl, [sp, #32]
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 8006f66:	f7fe fbac 	bl	80056c2 <uECC_vli_numBits>
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	a812      	add	r0, sp, #72	; 0x48
 8006f70:	f7fe fba7 	bl	80056c2 <uECC_vli_numBits>
    return (a > b ? a : b);
 8006f74:	4550      	cmp	r0, sl
 8006f76:	bfb8      	it	lt
 8006f78:	4650      	movlt	r0, sl
                    uECC_vli_numBits(u2, num_n_words));
    
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8006f7a:	fa1f f980 	uxth.w	r9, r0
 8006f7e:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8006f82:	b209      	sxth	r1, r1
 8006f84:	4638      	mov	r0, r7
 8006f86:	9103      	str	r1, [sp, #12]
 8006f88:	f7fe fb91 	bl	80056ae <uECC_vli_testBit>
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 8006f8c:	9903      	ldr	r1, [sp, #12]
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8006f8e:	1e07      	subs	r7, r0, #0
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 8006f90:	a812      	add	r0, sp, #72	; 0x48
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8006f92:	bf18      	it	ne
 8006f94:	2701      	movne	r7, #1
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 8006f96:	f7fe fb8a 	bl	80056ae <uECC_vli_testBit>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	bf14      	ite	ne
 8006f9e:	2002      	movne	r0, #2
 8006fa0:	2000      	moveq	r0, #0
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8006fa2:	ab06      	add	r3, sp, #24
 8006fa4:	4307      	orrs	r7, r0
    uECC_vli_set(rx, point, num_words);
 8006fa6:	4642      	mov	r2, r8
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 8006fa8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    uECC_vli_set(rx, point, num_words);
 8006fac:	a822      	add	r0, sp, #136	; 0x88
 8006fae:	f7fe fba8 	bl	8005702 <uECC_vli_set>
    uECC_vli_set(ry, point + num_words, num_words);
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8006fb8:	4419      	add	r1, r3
 8006fba:	4650      	mov	r0, sl
 8006fbc:	f7fe fba1 	bl	8005702 <uECC_vli_set>
    uECC_vli_clear(z, num_words);
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f7fe fb5e 	bl	8005684 <uECC_vli_clear>
    z[0] = 1;
 8006fc8:	9b05      	ldr	r3, [sp, #20]
 8006fca:	6023      	str	r3, [r4, #0]

    for (i = num_bits - 2; i >= 0; --i) {
 8006fcc:	f1a9 0902 	sub.w	r9, r9, #2
 8006fd0:	ab22      	add	r3, sp, #136	; 0x88
 8006fd2:	fa0f f989 	sxth.w	r9, r9
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	da26      	bge.n	800702c <uECC_verify+0x252>
            XYcZ_add(tx, ty, rx, ry, curve);
            uECC_vli_modMult_fast(z, z, tz, curve);
        }
    }

    uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8006fde:	ee18 2a10 	vmov	r2, s16
 8006fe2:	4643      	mov	r3, r8
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7fe ffb2 	bl	8005f50 <uECC_vli_modInv>
    apply_z(rx, ry, z, curve);
 8006fec:	9803      	ldr	r0, [sp, #12]
 8006fee:	462b      	mov	r3, r5
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4651      	mov	r1, sl
 8006ff4:	f7fe fc67 	bl	80058c6 <apply_z>
    
    /* v = x1 (mod n) */
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8006ff8:	9903      	ldr	r1, [sp, #12]
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	4658      	mov	r0, fp
 8006ffe:	f7fe fb8c 	bl	800571a <uECC_vli_cmp_unsafe>
 8007002:	2801      	cmp	r0, #1
 8007004:	d003      	beq.n	800700e <uECC_verify+0x234>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
 8007006:	465a      	mov	r2, fp
 8007008:	4608      	mov	r0, r1
 800700a:	f7fe fd13 	bl	8005a34 <uECC_vli_sub.constprop.0>
    for (i = num_words - 1; i >= 0; --i) {
 800700e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8007012:	b25b      	sxtb	r3, r3
        diff |= (left[i] ^ right[i]);
 8007014:	a94a      	add	r1, sp, #296	; 0x128
    for (i = num_words - 1; i >= 0; --i) {
 8007016:	061a      	lsls	r2, r3, #24
 8007018:	d54b      	bpl.n	80070b2 <uECC_verify+0x2d8>
    return (diff == 0);
 800701a:	9b02      	ldr	r3, [sp, #8]
 800701c:	fab3 f083 	clz	r0, r3
 8007020:	0940      	lsrs	r0, r0, #5
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
}
 8007022:	b07b      	add	sp, #492	; 0x1ec
 8007024:	ecbd 8b02 	vpop	{d8}
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        curve->double_jacobian(rx, ry, z, curve);
 800702c:	462b      	mov	r3, r5
 800702e:	4622      	mov	r2, r4
 8007030:	f8d5 70a4 	ldr.w	r7, [r5, #164]	; 0xa4
 8007034:	9803      	ldr	r0, [sp, #12]
 8007036:	4651      	mov	r1, sl
 8007038:	47b8      	blx	r7
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 800703a:	4649      	mov	r1, r9
 800703c:	a80a      	add	r0, sp, #40	; 0x28
 800703e:	f7fe fb36 	bl	80056ae <uECC_vli_testBit>
 8007042:	4649      	mov	r1, r9
 8007044:	1e07      	subs	r7, r0, #0
 8007046:	a812      	add	r0, sp, #72	; 0x48
 8007048:	bf18      	it	ne
 800704a:	2701      	movne	r7, #1
 800704c:	f7fe fb2f 	bl	80056ae <uECC_vli_testBit>
 8007050:	2800      	cmp	r0, #0
 8007052:	bf14      	ite	ne
 8007054:	2002      	movne	r0, #2
 8007056:	2000      	moveq	r0, #0
 8007058:	4307      	orrs	r7, r0
        point = points[index];
 800705a:	ab06      	add	r3, sp, #24
 800705c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
        if (point) {
 8007060:	b311      	cbz	r1, 80070a8 <uECC_verify+0x2ce>
            uECC_vli_set(tx, point, num_words);
 8007062:	4642      	mov	r2, r8
 8007064:	a832      	add	r0, sp, #200	; 0xc8
 8007066:	f7fe fb4c 	bl	8005702 <uECC_vli_set>
            uECC_vli_set(ty, point + num_words, num_words);
 800706a:	9b04      	ldr	r3, [sp, #16]
 800706c:	a83a      	add	r0, sp, #232	; 0xe8
 800706e:	4419      	add	r1, r3
 8007070:	f7fe fb47 	bl	8005702 <uECC_vli_set>
            apply_z(tx, ty, z, curve);
 8007074:	4601      	mov	r1, r0
 8007076:	462b      	mov	r3, r5
 8007078:	4622      	mov	r2, r4
 800707a:	a832      	add	r0, sp, #200	; 0xc8
 800707c:	f7fe fc23 	bl	80058c6 <apply_z>
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8007080:	ee18 3a10 	vmov	r3, s16
 8007084:	9903      	ldr	r1, [sp, #12]
 8007086:	aa32      	add	r2, sp, #200	; 0xc8
 8007088:	a842      	add	r0, sp, #264	; 0x108
 800708a:	f7ff f80f 	bl	80060ac <uECC_vli_modSub.isra.0>
            XYcZ_add(tx, ty, rx, ry, curve);
 800708e:	9a03      	ldr	r2, [sp, #12]
 8007090:	9500      	str	r5, [sp, #0]
 8007092:	4653      	mov	r3, sl
 8007094:	a93a      	add	r1, sp, #232	; 0xe8
 8007096:	a832      	add	r0, sp, #200	; 0xc8
 8007098:	f7ff f89c 	bl	80061d4 <XYcZ_add>
            uECC_vli_modMult_fast(z, z, tz, curve);
 800709c:	462b      	mov	r3, r5
 800709e:	aa42      	add	r2, sp, #264	; 0x108
 80070a0:	4621      	mov	r1, r4
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7fe fbfb 	bl	800589e <uECC_vli_modMult_fast>
    for (i = num_bits - 2; i >= 0; --i) {
 80070a8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80070ac:	fa0f f989 	sxth.w	r9, r9
 80070b0:	e792      	b.n	8006fd8 <uECC_verify+0x1fe>
        diff |= (left[i] ^ right[i]);
 80070b2:	9a03      	ldr	r2, [sp, #12]
 80070b4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80070b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070bc:	4042      	eors	r2, r0
 80070be:	9802      	ldr	r0, [sp, #8]
 80070c0:	4310      	orrs	r0, r2
 80070c2:	9002      	str	r0, [sp, #8]
    for (i = num_words - 1; i >= 0; --i) {
 80070c4:	3b01      	subs	r3, #1
 80070c6:	e7a6      	b.n	8007016 <uECC_verify+0x23c>
        return 0;
 80070c8:	4618      	mov	r0, r3
 80070ca:	e7aa      	b.n	8007022 <uECC_verify+0x248>
 80070cc:	4620      	mov	r0, r4
 80070ce:	e7a8      	b.n	8007022 <uECC_verify+0x248>
 80070d0:	9802      	ldr	r0, [sp, #8]
 80070d2:	e7a6      	b.n	8007022 <uECC_verify+0x248>

080070d4 <HAL_GetTick>:
const uint32_t MSIRangeTable[12] = {100000, 200000, 400000, 800000, 1000000, 2000000, \
                                  4000000, 8000000, 16000000, 24000000, 32000000, 48000000};
uint32_t SystemCoreClock;

// TODO: cleanup HAL stuff to not use this
uint32_t HAL_GetTick(void) { return 53; }
 80070d4:	2035      	movs	r0, #53	; 0x35
 80070d6:	4770      	bx	lr

080070d8 <HAL_InitTick>:
uint32_t uwTickPrio = 0;            /* (1UL << __NVIC_PRIO_BITS); * Invalid priority */

// unwanted junk from stm32l4xx_hal_rcc.c
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority) { return 0; }
 80070d8:	2000      	movs	r0, #0
 80070da:	4770      	bx	lr

080070dc <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070dc:	4b07      	ldr	r3, [pc, #28]	; (80070fc <HAL_PWREx_GetVoltageRange+0x20>)
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80070e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80070e8:	d006      	beq.n	80070f8 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80070ea:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80070ee:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80070f2:	bf18      	it	ne
 80070f4:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40007000 	.word	0x40007000

08007100 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007100:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007102:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007104:	bb30      	cbnz	r0, 8007154 <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007106:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800710a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800710e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800711a:	d11a      	bne.n	8007152 <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8007122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007126:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007128:	4a20      	ldr	r2, [pc, #128]	; (80071ac <HAL_PWREx_ControlVoltageScaling+0xac>)
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	2132      	movs	r1, #50	; 0x32
 800712e:	434a      	muls	r2, r1
 8007130:	491f      	ldr	r1, [pc, #124]	; (80071b0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007132:	fbb2 f2f1 	udiv	r2, r2, r1
 8007136:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007138:	6959      	ldr	r1, [r3, #20]
 800713a:	0549      	lsls	r1, r1, #21
 800713c:	d500      	bpl.n	8007140 <HAL_PWREx_ControlVoltageScaling+0x40>
 800713e:	b922      	cbnz	r2, 800714a <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	0558      	lsls	r0, r3, #21
 8007144:	d403      	bmi.n	800714e <HAL_PWREx_ControlVoltageScaling+0x4e>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007146:	2000      	movs	r0, #0
}
 8007148:	4770      	bx	lr
        wait_loop_index--;
 800714a:	3a01      	subs	r2, #1
 800714c:	e7f4      	b.n	8007138 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 800714e:	2003      	movs	r0, #3
 8007150:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007152:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007154:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007158:	d11f      	bne.n	800719a <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800715a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800715e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007162:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800716a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800716e:	d1ea      	bne.n	8007146 <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8007176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717a:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800717c:	4a0b      	ldr	r2, [pc, #44]	; (80071ac <HAL_PWREx_ControlVoltageScaling+0xac>)
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	2132      	movs	r1, #50	; 0x32
 8007182:	434a      	muls	r2, r1
 8007184:	490a      	ldr	r1, [pc, #40]	; (80071b0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8007186:	fbb2 f2f1 	udiv	r2, r2, r1
 800718a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800718c:	6959      	ldr	r1, [r3, #20]
 800718e:	0549      	lsls	r1, r1, #21
 8007190:	d5d6      	bpl.n	8007140 <HAL_PWREx_ControlVoltageScaling+0x40>
 8007192:	2a00      	cmp	r2, #0
 8007194:	d0d4      	beq.n	8007140 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8007196:	3a01      	subs	r2, #1
 8007198:	e7f8      	b.n	800718c <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800719a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800719e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e7cf      	b.n	8007146 <HAL_PWREx_ControlVoltageScaling+0x46>
 80071a6:	bf00      	nop
 80071a8:	40007000 	.word	0x40007000
 80071ac:	2009e2a8 	.word	0x2009e2a8
 80071b0:	000f4240 	.word	0x000f4240

080071b4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:

__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
    // unused?
}
 80071b4:	4770      	bx	lr

080071b6 <xor_mixin>:
{
 80071b6:	b510      	push	{r4, lr}
 80071b8:	3801      	subs	r0, #1
 80071ba:	440a      	add	r2, r1
		*(acc) ^= *(more);
 80071bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	for(; len; len--, more++, acc++) {
 80071c4:	4291      	cmp	r1, r2
		*(acc) ^= *(more);
 80071c6:	ea83 0304 	eor.w	r3, r3, r4
 80071ca:	7003      	strb	r3, [r0, #0]
	for(; len; len--, more++, acc++) {
 80071cc:	d1f6      	bne.n	80071bc <xor_mixin+0x6>
	}
}
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <se2_write1>:

// se2_write1()
//
    static bool
se2_write1(uint8_t cmd, uint8_t arg)
{
 80071d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[3] = { cmd, 1, arg };
 80071d2:	2301      	movs	r3, #1
 80071d4:	f88d 300d 	strb.w	r3, [sp, #13]

    HAL_StatusTypeDef rv = HAL_I2C_Master_Transmit(&i2c_port, I2C_ADDR, 
 80071d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    uint8_t data[3] = { cmd, 1, arg };
 80071dc:	f88d 000c 	strb.w	r0, [sp, #12]
 80071e0:	f88d 100e 	strb.w	r1, [sp, #14]
    HAL_StatusTypeDef rv = HAL_I2C_Master_Transmit(&i2c_port, I2C_ADDR, 
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	aa03      	add	r2, sp, #12
 80071e8:	2303      	movs	r3, #3
 80071ea:	2136      	movs	r1, #54	; 0x36
 80071ec:	4804      	ldr	r0, [pc, #16]	; (8007200 <se2_write1+0x30>)
 80071ee:	f004 fb77 	bl	800b8e0 <HAL_I2C_Master_Transmit>
                                                    data, sizeof(data), HAL_MAX_DELAY);

    return (rv != HAL_OK);
}
 80071f2:	3800      	subs	r0, #0
 80071f4:	bf18      	it	ne
 80071f6:	2001      	movne	r0, #1
 80071f8:	b005      	add	sp, #20
 80071fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80071fe:	bf00      	nop
 8007200:	2009e3ec 	.word	0x2009e3ec

08007204 <se2_write2>:

// se2_write2()
//
    static bool
se2_write2(uint8_t cmd, uint8_t arg1, uint8_t arg2)
{
 8007204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[4] = { cmd, 2, arg1, arg2 };
 8007206:	2302      	movs	r3, #2
 8007208:	f88d 300d 	strb.w	r3, [sp, #13]

    HAL_StatusTypeDef rv = HAL_I2C_Master_Transmit(&i2c_port, I2C_ADDR,
 800720c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    uint8_t data[4] = { cmd, 2, arg1, arg2 };
 8007210:	f88d 000c 	strb.w	r0, [sp, #12]
 8007214:	f88d 100e 	strb.w	r1, [sp, #14]
 8007218:	f88d 200f 	strb.w	r2, [sp, #15]
    HAL_StatusTypeDef rv = HAL_I2C_Master_Transmit(&i2c_port, I2C_ADDR,
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	aa03      	add	r2, sp, #12
 8007220:	2304      	movs	r3, #4
 8007222:	2136      	movs	r1, #54	; 0x36
 8007224:	4804      	ldr	r0, [pc, #16]	; (8007238 <se2_write2+0x34>)
 8007226:	f004 fb5b 	bl	800b8e0 <HAL_I2C_Master_Transmit>
                                                    data, sizeof(data), HAL_MAX_DELAY);

    return (rv != HAL_OK);
}
 800722a:	3800      	subs	r0, #0
 800722c:	bf18      	it	ne
 800722e:	2001      	movne	r0, #1
 8007230:	b005      	add	sp, #20
 8007232:	f85d fb04 	ldr.w	pc, [sp], #4
 8007236:	bf00      	nop
 8007238:	2009e3ec 	.word	0x2009e3ec

0800723c <se2_write_n>:

// se2_write_n()
//
    static bool
se2_write_n(uint8_t cmd, uint8_t *param1, const uint8_t *data_in, uint8_t len)
{
 800723c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723e:	460d      	mov	r5, r1
    uint8_t data[2 + (param1?1:0) + len], *p = data;
 8007240:	2d00      	cmp	r5, #0
 8007242:	bf14      	ite	ne
 8007244:	2403      	movne	r4, #3
 8007246:	2402      	moveq	r4, #2
 8007248:	441c      	add	r4, r3
{
 800724a:	4611      	mov	r1, r2
    uint8_t data[2 + (param1?1:0) + len], *p = data;
 800724c:	f104 0207 	add.w	r2, r4, #7
{
 8007250:	b083      	sub	sp, #12
    uint8_t data[2 + (param1?1:0) + len], *p = data;
 8007252:	f402 727e 	and.w	r2, r2, #1016	; 0x3f8
{
 8007256:	af02      	add	r7, sp, #8
    uint8_t data[2 + (param1?1:0) + len], *p = data;
 8007258:	ebad 0d02 	sub.w	sp, sp, r2
 800725c:	ae02      	add	r6, sp, #8

    *(p++) = cmd;
    *(p++) = sizeof(data) - 2;
 800725e:	f1a4 0202 	sub.w	r2, r4, #2
    *(p++) = cmd;
 8007262:	f88d 0008 	strb.w	r0, [sp, #8]
    *(p++) = sizeof(data) - 2;
 8007266:	7072      	strb	r2, [r6, #1]
    if(param1) {
        *(p++) = *param1;
 8007268:	bf1b      	ittet	ne
 800726a:	782a      	ldrbne	r2, [r5, #0]
 800726c:	70b2      	strbne	r2, [r6, #2]
    *(p++) = sizeof(data) - 2;
 800726e:	f10d 000a 	addeq.w	r0, sp, #10
        *(p++) = *param1;
 8007272:	f10d 000b 	addne.w	r0, sp, #11
    }
    if(len) {
 8007276:	b113      	cbz	r3, 800727e <se2_write_n+0x42>
        memcpy(p, data_in, len);
 8007278:	461a      	mov	r2, r3
 800727a:	f006 f9ab 	bl	800d5d4 <memcpy>
    }

    HAL_StatusTypeDef rv = HAL_I2C_Master_Transmit(&i2c_port, I2C_ADDR,
 800727e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4632      	mov	r2, r6
 8007286:	4623      	mov	r3, r4
 8007288:	2136      	movs	r1, #54	; 0x36
 800728a:	4804      	ldr	r0, [pc, #16]	; (800729c <se2_write_n+0x60>)
 800728c:	f004 fb28 	bl	800b8e0 <HAL_I2C_Master_Transmit>
                                                    data, sizeof(data), HAL_MAX_DELAY);

    return (rv != HAL_OK);
}
 8007290:	3800      	subs	r0, #0
 8007292:	bf18      	it	ne
 8007294:	2001      	movne	r0, #1
 8007296:	3704      	adds	r7, #4
 8007298:	46bd      	mov	sp, r7
 800729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729c:	2009e3ec 	.word	0x2009e3ec

080072a0 <rng_for_uECC>:

// rng_for_uECC()
//
    static int
rng_for_uECC(uint8_t *dest, unsigned size)
{
 80072a0:	b508      	push	{r3, lr}
    'dest' was filled with random data, or 0 if the random data could not be generated.
    The filled-in values should be either truly random, or from a cryptographically-secure PRNG.

    typedef int (*uECC_RNG_Function)(uint8_t *dest, unsigned size);
    */
    rng_buffer(dest, size);
 80072a2:	f7fb fa55 	bl	8002750 <rng_buffer>

    return 1;
}
 80072a6:	2001      	movs	r0, #1
 80072a8:	bd08      	pop	{r3, pc}
	...

080072ac <se2_write_buffer>:
{
 80072ac:	b508      	push	{r3, lr}
 80072ae:	4602      	mov	r2, r0
    CALL_CHECK(se2_write_n(0x87, NULL, data, len));
 80072b0:	b2cb      	uxtb	r3, r1
 80072b2:	2087      	movs	r0, #135	; 0x87
 80072b4:	2100      	movs	r1, #0
 80072b6:	f7ff ffc1 	bl	800723c <se2_write_n>
 80072ba:	b118      	cbz	r0, 80072c4 <se2_write_buffer+0x18>
 80072bc:	4802      	ldr	r0, [pc, #8]	; (80072c8 <se2_write_buffer+0x1c>)
 80072be:	21c1      	movs	r1, #193	; 0xc1
 80072c0:	f006 f9be 	bl	800d640 <longjmp>
}
 80072c4:	bd08      	pop	{r3, pc}
 80072c6:	bf00      	nop
 80072c8:	2009e390 	.word	0x2009e390

080072cc <se2_read_n>:
{
 80072cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        HAL_StatusTypeDef rv = HAL_I2C_Master_Receive(&i2c_port, I2C_ADDR, rx, len, HAL_MAX_DELAY);
 80072d0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8007318 <se2_read_n+0x4c>
{
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	f44f 7696 	mov.w	r6, #300	; 0x12c
        HAL_StatusTypeDef rv = HAL_I2C_Master_Receive(&i2c_port, I2C_ADDR, rx, len, HAL_MAX_DELAY);
 80072dc:	b287      	uxth	r7, r0
 80072de:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80072e2:	f8cd 8000 	str.w	r8, [sp]
 80072e6:	463b      	mov	r3, r7
 80072e8:	462a      	mov	r2, r5
 80072ea:	2136      	movs	r1, #54	; 0x36
 80072ec:	4648      	mov	r0, r9
 80072ee:	f004 fbab 	bl	800ba48 <HAL_I2C_Master_Receive>
        if(rv == HAL_OK) {
 80072f2:	b938      	cbnz	r0, 8007304 <se2_read_n+0x38>
            if(rx[0] != len-1) {
 80072f4:	782b      	ldrb	r3, [r5, #0]
 80072f6:	3c01      	subs	r4, #1
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d10a      	bne.n	8007312 <se2_read_n+0x46>
            return rx[1];
 80072fc:	7868      	ldrb	r0, [r5, #1]
}
 80072fe:	b003      	add	sp, #12
 8007300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        delay_ms(1);
 8007304:	2001      	movs	r0, #1
 8007306:	f7fc faf7 	bl	80038f8 <delay_ms>
    for(int tries=0; tries<300; tries++) {
 800730a:	3e01      	subs	r6, #1
 800730c:	d1e9      	bne.n	80072e2 <se2_read_n+0x16>
    return RC_NO_ACK;
 800730e:	200f      	movs	r0, #15
 8007310:	e7f5      	b.n	80072fe <se2_read_n+0x32>
                return RC_WRONG_SIZE;
 8007312:	201f      	movs	r0, #31
 8007314:	e7f3      	b.n	80072fe <se2_read_n+0x32>
 8007316:	bf00      	nop
 8007318:	2009e3ec 	.word	0x2009e3ec

0800731c <se2_read1>:
{
 800731c:	b507      	push	{r0, r1, r2, lr}
    return se2_read_n(2, rx);
 800731e:	2002      	movs	r0, #2
 8007320:	a901      	add	r1, sp, #4
 8007322:	f7ff ffd3 	bl	80072cc <se2_read_n>
}
 8007326:	b003      	add	sp, #12
 8007328:	f85d fb04 	ldr.w	pc, [sp], #4

0800732c <se2_write_page>:
{
 800732c:	b507      	push	{r0, r1, r2, lr}
    CALL_CHECK(se2_write_n(0x96, &page_num, data, 32));
 800732e:	2320      	movs	r3, #32
{
 8007330:	460a      	mov	r2, r1
 8007332:	f88d 0007 	strb.w	r0, [sp, #7]
    CALL_CHECK(se2_write_n(0x96, &page_num, data, 32));
 8007336:	f10d 0107 	add.w	r1, sp, #7
 800733a:	2096      	movs	r0, #150	; 0x96
 800733c:	f7ff ff7e 	bl	800723c <se2_write_n>
 8007340:	b118      	cbz	r0, 800734a <se2_write_page+0x1e>
 8007342:	21cb      	movs	r1, #203	; 0xcb
    CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 8007344:	4805      	ldr	r0, [pc, #20]	; (800735c <se2_write_page+0x30>)
 8007346:	f006 f97b 	bl	800d640 <longjmp>
 800734a:	f7ff ffe7 	bl	800731c <se2_read1>
 800734e:	28aa      	cmp	r0, #170	; 0xaa
 8007350:	d001      	beq.n	8007356 <se2_write_page+0x2a>
 8007352:	21cd      	movs	r1, #205	; 0xcd
 8007354:	e7f6      	b.n	8007344 <se2_write_page+0x18>
}
 8007356:	b003      	add	sp, #12
 8007358:	f85d fb04 	ldr.w	pc, [sp], #4
 800735c:	2009e390 	.word	0x2009e390

08007360 <se2_pick_keypair>:
    ASSERT(pubkey_num < 2);
 8007360:	2801      	cmp	r0, #1
{
 8007362:	b508      	push	{r3, lr}
    ASSERT(pubkey_num < 2);
 8007364:	d902      	bls.n	800736c <se2_pick_keypair+0xc>
 8007366:	480a      	ldr	r0, [pc, #40]	; (8007390 <se2_pick_keypair+0x30>)
 8007368:	f7f9 fb6e 	bl	8000a48 <fatal_error>
    CALL_CHECK(se2_write1(0xcb, (wpe <<6) | pubkey_num));
 800736c:	ea40 1181 	orr.w	r1, r0, r1, lsl #6
 8007370:	b2c9      	uxtb	r1, r1
 8007372:	20cb      	movs	r0, #203	; 0xcb
 8007374:	f7ff ff2c 	bl	80071d0 <se2_write1>
 8007378:	b118      	cbz	r0, 8007382 <se2_pick_keypair+0x22>
 800737a:	21d9      	movs	r1, #217	; 0xd9
    CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 800737c:	4805      	ldr	r0, [pc, #20]	; (8007394 <se2_pick_keypair+0x34>)
 800737e:	f006 f95f 	bl	800d640 <longjmp>
 8007382:	f7ff ffcb 	bl	800731c <se2_read1>
 8007386:	28aa      	cmp	r0, #170	; 0xaa
 8007388:	d001      	beq.n	800738e <se2_pick_keypair+0x2e>
 800738a:	21db      	movs	r1, #219	; 0xdb
 800738c:	e7f6      	b.n	800737c <se2_pick_keypair+0x1c>
}
 800738e:	bd08      	pop	{r3, pc}
 8007390:	0800e390 	.word	0x0800e390
 8007394:	2009e390 	.word	0x2009e390

08007398 <se2_verify_page>:
{
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	b0dc      	sub	sp, #368	; 0x170
 800739c:	460d      	mov	r5, r1
 800739e:	f88d 0007 	strb.w	r0, [sp, #7]
    rng_buffer(chal, sizeof(chal));
 80073a2:	2120      	movs	r1, #32
 80073a4:	a802      	add	r0, sp, #8
{
 80073a6:	4616      	mov	r6, r2
 80073a8:	461c      	mov	r4, r3
    rng_buffer(chal, sizeof(chal));
 80073aa:	f7fb f9d1 	bl	8002750 <rng_buffer>
    se2_write_buffer(chal, sizeof(chal));
 80073ae:	2120      	movs	r1, #32
 80073b0:	a802      	add	r0, sp, #8
 80073b2:	f7ff ff7b 	bl	80072ac <se2_write_buffer>
    CALL_CHECK(se2_write1(0xa5, (keynum<<5) | page_num));
 80073b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80073ba:	ea43 1146 	orr.w	r1, r3, r6, lsl #5
 80073be:	b2c9      	uxtb	r1, r1
 80073c0:	20a5      	movs	r0, #165	; 0xa5
 80073c2:	f7ff ff05 	bl	80071d0 <se2_write1>
 80073c6:	b118      	cbz	r0, 80073d0 <se2_verify_page+0x38>
 80073c8:	21eb      	movs	r1, #235	; 0xeb
    CHECK_RIGHT(se2_read_n(sizeof(check), check) == RC_SUCCESS);
 80073ca:	481e      	ldr	r0, [pc, #120]	; (8007444 <se2_verify_page+0xac>)
 80073cc:	f006 f938 	bl	800d640 <longjmp>
 80073d0:	a912      	add	r1, sp, #72	; 0x48
 80073d2:	2022      	movs	r0, #34	; 0x22
 80073d4:	f7ff ff7a 	bl	80072cc <se2_read_n>
 80073d8:	28aa      	cmp	r0, #170	; 0xaa
 80073da:	d001      	beq.n	80073e0 <se2_verify_page+0x48>
 80073dc:	21ee      	movs	r1, #238	; 0xee
 80073de:	e7f4      	b.n	80073ca <se2_verify_page+0x32>
    hmac_sha256_init(&ctx);
 80073e0:	a81b      	add	r0, sp, #108	; 0x6c
 80073e2:	f7fe f8cf 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, SE2_SECRETS->romid, 8);
 80073e6:	4b18      	ldr	r3, [pc, #96]	; (8007448 <se2_verify_page+0xb0>)
 80073e8:	4918      	ldr	r1, [pc, #96]	; (800744c <se2_verify_page+0xb4>)
 80073ea:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80073ee:	33b0      	adds	r3, #176	; 0xb0
 80073f0:	2aff      	cmp	r2, #255	; 0xff
 80073f2:	bf18      	it	ne
 80073f4:	4619      	movne	r1, r3
 80073f6:	a81b      	add	r0, sp, #108	; 0x6c
 80073f8:	2208      	movs	r2, #8
 80073fa:	3160      	adds	r1, #96	; 0x60
 80073fc:	f7fe f8c8 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, data, 32);
 8007400:	4629      	mov	r1, r5
 8007402:	a81b      	add	r0, sp, #108	; 0x6c
 8007404:	2220      	movs	r2, #32
 8007406:	f7fe f8c3 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, chal, 32);
 800740a:	a902      	add	r1, sp, #8
 800740c:	a81b      	add	r0, sp, #108	; 0x6c
 800740e:	2220      	movs	r2, #32
 8007410:	f7fe f8be 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, &page_num, 1);
 8007414:	f10d 0107 	add.w	r1, sp, #7
 8007418:	a81b      	add	r0, sp, #108	; 0x6c
 800741a:	2201      	movs	r2, #1
 800741c:	f7fe f8b8 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, DEV_MANID, 2);
 8007420:	a81b      	add	r0, sp, #108	; 0x6c
 8007422:	490b      	ldr	r1, [pc, #44]	; (8007450 <se2_verify_page+0xb8>)
 8007424:	2202      	movs	r2, #2
 8007426:	f7fe f8b3 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_final(&ctx, secret, expect);
 800742a:	aa0a      	add	r2, sp, #40	; 0x28
 800742c:	4621      	mov	r1, r4
 800742e:	a81b      	add	r0, sp, #108	; 0x6c
 8007430:	f7fe f8c4 	bl	80055bc <hmac_sha256_final>
    return check_equal(expect, check+2, 32);
 8007434:	2220      	movs	r2, #32
 8007436:	f10d 014a 	add.w	r1, sp, #74	; 0x4a
 800743a:	a80a      	add	r0, sp, #40	; 0x28
 800743c:	f7fb f939 	bl	80026b2 <check_equal>
}
 8007440:	b05c      	add	sp, #368	; 0x170
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	2009e390 	.word	0x2009e390
 8007448:	0801c000 	.word	0x0801c000
 800744c:	2009e2b0 	.word	0x2009e2b0
 8007450:	0800e9f0 	.word	0x0800e9f0

08007454 <se2_read_page>:
{
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4604      	mov	r4, r0
 8007458:	b08a      	sub	sp, #40	; 0x28
 800745a:	460d      	mov	r5, r1
    CALL_CHECK(se2_write1(0x69, page_num));
 800745c:	4601      	mov	r1, r0
 800745e:	2069      	movs	r0, #105	; 0x69
{
 8007460:	4616      	mov	r6, r2
    CALL_CHECK(se2_write1(0x69, page_num));
 8007462:	f7ff feb5 	bl	80071d0 <se2_write1>
 8007466:	b120      	cbz	r0, 8007472 <se2_read_page+0x1e>
 8007468:	f44f 7185 	mov.w	r1, #266	; 0x10a
    CHECK_RIGHT(se2_read_n(sizeof(rx), rx) == RC_SUCCESS);
 800746c:	481c      	ldr	r0, [pc, #112]	; (80074e0 <se2_read_page+0x8c>)
 800746e:	f006 f8e7 	bl	800d640 <longjmp>
 8007472:	a901      	add	r1, sp, #4
 8007474:	2022      	movs	r0, #34	; 0x22
 8007476:	f7ff ff29 	bl	80072cc <se2_read_n>
 800747a:	28aa      	cmp	r0, #170	; 0xaa
 800747c:	d002      	beq.n	8007484 <se2_read_page+0x30>
 800747e:	f240 110d 	movw	r1, #269	; 0x10d
 8007482:	e7f3      	b.n	800746c <se2_read_page+0x18>
    CHECK_RIGHT(rx[0] == 33);
 8007484:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007488:	2b21      	cmp	r3, #33	; 0x21
 800748a:	d002      	beq.n	8007492 <se2_read_page+0x3e>
 800748c:	f240 110f 	movw	r1, #271	; 0x10f
 8007490:	e7ec      	b.n	800746c <se2_read_page+0x18>
    CHECK_RIGHT(rx[1] == RC_SUCCESS);
 8007492:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007496:	2baa      	cmp	r3, #170	; 0xaa
 8007498:	d002      	beq.n	80074a0 <se2_read_page+0x4c>
 800749a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800749e:	e7e5      	b.n	800746c <se2_read_page+0x18>
    memcpy(data, rx+2, 32);
 80074a0:	f10d 0306 	add.w	r3, sp, #6
 80074a4:	462a      	mov	r2, r5
 80074a6:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80074aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80074ae:	f842 0b04 	str.w	r0, [r2], #4
 80074b2:	428b      	cmp	r3, r1
 80074b4:	d1f9      	bne.n	80074aa <se2_read_page+0x56>
    if(!verify) return;
 80074b6:	b186      	cbz	r6, 80074da <se2_read_page+0x86>
    CHECK_RIGHT(se2_verify_page(page_num, data, 0, SE2_SECRETS->pairing));
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <se2_read_page+0x90>)
 80074ba:	4a0b      	ldr	r2, [pc, #44]	; (80074e8 <se2_read_page+0x94>)
 80074bc:	f893 10b0 	ldrb.w	r1, [r3, #176]	; 0xb0
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <se2_read_page+0x98>)
 80074c2:	4620      	mov	r0, r4
 80074c4:	29ff      	cmp	r1, #255	; 0xff
 80074c6:	bf18      	it	ne
 80074c8:	4613      	movne	r3, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	4629      	mov	r1, r5
 80074ce:	f7ff ff63 	bl	8007398 <se2_verify_page>
 80074d2:	b910      	cbnz	r0, 80074da <se2_read_page+0x86>
 80074d4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80074d8:	e7c8      	b.n	800746c <se2_read_page+0x18>
}
 80074da:	b00a      	add	sp, #40	; 0x28
 80074dc:	bd70      	pop	{r4, r5, r6, pc}
 80074de:	bf00      	nop
 80074e0:	2009e390 	.word	0x2009e390
 80074e4:	0801c000 	.word	0x0801c000
 80074e8:	0801c0b0 	.word	0x0801c0b0
 80074ec:	2009e2b0 	.word	0x2009e2b0

080074f0 <se2_read_encrypted>:
{
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	b0d6      	sub	sp, #344	; 0x158
 80074f4:	461e      	mov	r6, r3
    ASSERT((keynum == 0) || (keynum == 2));
 80074f6:	f032 0302 	bics.w	r3, r2, #2
{
 80074fa:	460c      	mov	r4, r1
 80074fc:	4615      	mov	r5, r2
 80074fe:	f88d 0007 	strb.w	r0, [sp, #7]
    ASSERT((keynum == 0) || (keynum == 2));
 8007502:	d002      	beq.n	800750a <se2_read_encrypted+0x1a>
 8007504:	4831      	ldr	r0, [pc, #196]	; (80075cc <se2_read_encrypted+0xdc>)
 8007506:	f7f9 fa9f 	bl	8000a48 <fatal_error>
    CALL_CHECK(se2_write1(0x4b, (keynum << 6) | page_num));
 800750a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800750e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
 8007512:	b2c9      	uxtb	r1, r1
 8007514:	204b      	movs	r0, #75	; 0x4b
 8007516:	f7ff fe5b 	bl	80071d0 <se2_write1>
 800751a:	b120      	cbz	r0, 8007526 <se2_read_encrypted+0x36>
 800751c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    CHECK_RIGHT(se2_read_n(sizeof(rx), rx) == RC_SUCCESS);
 8007520:	482b      	ldr	r0, [pc, #172]	; (80075d0 <se2_read_encrypted+0xe0>)
 8007522:	f006 f88d 	bl	800d640 <longjmp>
 8007526:	a90a      	add	r1, sp, #40	; 0x28
 8007528:	202a      	movs	r0, #42	; 0x2a
 800752a:	f7ff fecf 	bl	80072cc <se2_read_n>
 800752e:	28aa      	cmp	r0, #170	; 0xaa
 8007530:	d002      	beq.n	8007538 <se2_read_encrypted+0x48>
 8007532:	f240 1169 	movw	r1, #361	; 0x169
 8007536:	e7f3      	b.n	8007520 <se2_read_encrypted+0x30>
    CHECK_RIGHT(rx[1] == RC_SUCCESS);
 8007538:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800753c:	2baa      	cmp	r3, #170	; 0xaa
 800753e:	d002      	beq.n	8007546 <se2_read_encrypted+0x56>
 8007540:	f240 116b 	movw	r1, #363	; 0x16b
 8007544:	e7ec      	b.n	8007520 <se2_read_encrypted+0x30>
    memcpy(data, rx+2+8, 32);
 8007546:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800754a:	4622      	mov	r2, r4
 800754c:	f10d 0152 	add.w	r1, sp, #82	; 0x52
 8007550:	f853 0b04 	ldr.w	r0, [r3], #4
 8007554:	f842 0b04 	str.w	r0, [r2], #4
 8007558:	428b      	cmp	r3, r1
 800755a:	d1f9      	bne.n	8007550 <se2_read_encrypted+0x60>
    hmac_sha256_init(&ctx);
 800755c:	a815      	add	r0, sp, #84	; 0x54
 800755e:	f7fe f811 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, chal, 8);
 8007562:	2208      	movs	r2, #8
 8007564:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 8007568:	a815      	add	r0, sp, #84	; 0x54
 800756a:	f7fe f811 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, SE2_SECRETS->romid, 8);
 800756e:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <se2_read_encrypted+0xe4>)
 8007570:	4919      	ldr	r1, [pc, #100]	; (80075d8 <se2_read_encrypted+0xe8>)
 8007572:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8007576:	33b0      	adds	r3, #176	; 0xb0
 8007578:	2aff      	cmp	r2, #255	; 0xff
 800757a:	bf18      	it	ne
 800757c:	4619      	movne	r1, r3
 800757e:	3160      	adds	r1, #96	; 0x60
 8007580:	2208      	movs	r2, #8
 8007582:	a815      	add	r0, sp, #84	; 0x54
 8007584:	f7fe f804 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, &page_num, 1);
 8007588:	2201      	movs	r2, #1
 800758a:	f10d 0107 	add.w	r1, sp, #7
 800758e:	a815      	add	r0, sp, #84	; 0x54
 8007590:	f7fd fffe 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, DEV_MANID, 2);
 8007594:	4911      	ldr	r1, [pc, #68]	; (80075dc <se2_read_encrypted+0xec>)
 8007596:	2202      	movs	r2, #2
 8007598:	a815      	add	r0, sp, #84	; 0x54
 800759a:	f7fd fff9 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_final(&ctx, secret, otp);
 800759e:	aa02      	add	r2, sp, #8
 80075a0:	4631      	mov	r1, r6
 80075a2:	a815      	add	r0, sp, #84	; 0x54
 80075a4:	f7fe f80a 	bl	80055bc <hmac_sha256_final>
    xor_mixin(data, otp, 32);
 80075a8:	2220      	movs	r2, #32
 80075aa:	a902      	add	r1, sp, #8
 80075ac:	4620      	mov	r0, r4
 80075ae:	f7ff fe02 	bl	80071b6 <xor_mixin>
    CHECK_RIGHT(se2_verify_page(page_num, data, keynum, secret));
 80075b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80075b6:	4633      	mov	r3, r6
 80075b8:	462a      	mov	r2, r5
 80075ba:	4621      	mov	r1, r4
 80075bc:	f7ff feec 	bl	8007398 <se2_verify_page>
 80075c0:	b910      	cbnz	r0, 80075c8 <se2_read_encrypted+0xd8>
 80075c2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80075c6:	e7ab      	b.n	8007520 <se2_read_encrypted+0x30>
}
 80075c8:	b056      	add	sp, #344	; 0x158
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	0800e390 	.word	0x0800e390
 80075d0:	2009e390 	.word	0x2009e390
 80075d4:	0801c000 	.word	0x0801c000
 80075d8:	2009e2b0 	.word	0x2009e2b0
 80075dc:	0800e9f0 	.word	0x0800e9f0

080075e0 <se2_write_encrypted>:
{
 80075e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	460e      	mov	r6, r1
    ASSERT((keynum == 0) || (keynum == 2));
 80075e6:	f032 0102 	bics.w	r1, r2, #2
{
 80075ea:	b0e4      	sub	sp, #400	; 0x190
 80075ec:	4604      	mov	r4, r0
 80075ee:	4617      	mov	r7, r2
 80075f0:	4698      	mov	r8, r3
    ASSERT((keynum == 0) || (keynum == 2));
 80075f2:	d002      	beq.n	80075fa <se2_write_encrypted+0x1a>
 80075f4:	4849      	ldr	r0, [pc, #292]	; (800771c <se2_write_encrypted+0x13c>)
 80075f6:	f7f9 fa27 	bl	8000a48 <fatal_error>
    se2_read_encrypted(page_num, old_data, keynum, secret);
 80075fa:	a901      	add	r1, sp, #4
 80075fc:	f7ff ff78 	bl	80074f0 <se2_read_encrypted>
    uint8_t PGDV = page_num | 0x80;
 8007600:	f064 037f 	orn	r3, r4, #127	; 0x7f
    rng_buffer(&chal_check[32], 8);
 8007604:	2108      	movs	r1, #8
 8007606:	a821      	add	r0, sp, #132	; 0x84
    uint8_t PGDV = page_num | 0x80;
 8007608:	f88d 3002 	strb.w	r3, [sp, #2]
    rng_buffer(&chal_check[32], 8);
 800760c:	f7fb f8a0 	bl	8002750 <rng_buffer>
    hmac_sha256_init(&ctx);
 8007610:	a823      	add	r0, sp, #140	; 0x8c
 8007612:	f7fd ffb7 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, &chal_check[32], 8);
 8007616:	2208      	movs	r2, #8
 8007618:	a921      	add	r1, sp, #132	; 0x84
 800761a:	a823      	add	r0, sp, #140	; 0x8c
 800761c:	f7fd ffb8 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, SE2_SECRETS->romid, 8);
 8007620:	4b3f      	ldr	r3, [pc, #252]	; (8007720 <se2_write_encrypted+0x140>)
 8007622:	4940      	ldr	r1, [pc, #256]	; (8007724 <se2_write_encrypted+0x144>)
 8007624:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8007628:	33b0      	adds	r3, #176	; 0xb0
 800762a:	2aff      	cmp	r2, #255	; 0xff
 800762c:	bf18      	it	ne
 800762e:	4619      	movne	r1, r3
 8007630:	3160      	adds	r1, #96	; 0x60
 8007632:	2208      	movs	r2, #8
 8007634:	a823      	add	r0, sp, #140	; 0x8c
 8007636:	f7fd ffab 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, &PGDV, 1);
 800763a:	2201      	movs	r2, #1
 800763c:	f10d 0102 	add.w	r1, sp, #2
 8007640:	a823      	add	r0, sp, #140	; 0x8c
 8007642:	f7fd ffa5 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, DEV_MANID, 2);
 8007646:	4938      	ldr	r1, [pc, #224]	; (8007728 <se2_write_encrypted+0x148>)
 8007648:	2202      	movs	r2, #2
 800764a:	a823      	add	r0, sp, #140	; 0x8c
 800764c:	f7fd ffa0 	bl	8005590 <hmac_sha256_update>
    ASSERT(ctx.num_pending == 19);
 8007650:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007652:	2b13      	cmp	r3, #19
 8007654:	d1ce      	bne.n	80075f4 <se2_write_encrypted+0x14>
    hmac_sha256_final(&ctx, secret, otp);
 8007656:	aa09      	add	r2, sp, #36	; 0x24
 8007658:	4641      	mov	r1, r8
 800765a:	a823      	add	r0, sp, #140	; 0x8c
 800765c:	f7fd ffae 	bl	80055bc <hmac_sha256_final>
    memcpy(tmp, data, 32);
 8007660:	4635      	mov	r5, r6
 8007662:	aa11      	add	r2, sp, #68	; 0x44
 8007664:	f106 0c20 	add.w	ip, r6, #32
 8007668:	6828      	ldr	r0, [r5, #0]
 800766a:	6869      	ldr	r1, [r5, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	c303      	stmia	r3!, {r0, r1}
 8007670:	3508      	adds	r5, #8
 8007672:	4565      	cmp	r5, ip
 8007674:	461a      	mov	r2, r3
 8007676:	d1f7      	bne.n	8007668 <se2_write_encrypted+0x88>
    xor_mixin(tmp, otp, 32);
 8007678:	2220      	movs	r2, #32
 800767a:	a909      	add	r1, sp, #36	; 0x24
 800767c:	a811      	add	r0, sp, #68	; 0x44
 800767e:	f7ff fd9a 	bl	80071b6 <xor_mixin>
    hmac_sha256_init(&ctx);
 8007682:	a823      	add	r0, sp, #140	; 0x8c
 8007684:	f7fd ff7e 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, SE2_SECRETS->romid, 8);
 8007688:	4b25      	ldr	r3, [pc, #148]	; (8007720 <se2_write_encrypted+0x140>)
 800768a:	4926      	ldr	r1, [pc, #152]	; (8007724 <se2_write_encrypted+0x144>)
 800768c:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8007690:	33b0      	adds	r3, #176	; 0xb0
 8007692:	2aff      	cmp	r2, #255	; 0xff
 8007694:	bf18      	it	ne
 8007696:	4619      	movne	r1, r3
 8007698:	3160      	adds	r1, #96	; 0x60
 800769a:	2208      	movs	r2, #8
 800769c:	a823      	add	r0, sp, #140	; 0x8c
 800769e:	f7fd ff77 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, old_data, 32);
 80076a2:	2220      	movs	r2, #32
 80076a4:	a901      	add	r1, sp, #4
 80076a6:	a823      	add	r0, sp, #140	; 0x8c
 80076a8:	f7fd ff72 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, data, 32);
 80076ac:	2220      	movs	r2, #32
 80076ae:	4631      	mov	r1, r6
 80076b0:	a823      	add	r0, sp, #140	; 0x8c
 80076b2:	f7fd ff6d 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, &PGDV, 1);
 80076b6:	2201      	movs	r2, #1
 80076b8:	f10d 0102 	add.w	r1, sp, #2
 80076bc:	a823      	add	r0, sp, #140	; 0x8c
 80076be:	f7fd ff67 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, DEV_MANID, 2);
 80076c2:	4919      	ldr	r1, [pc, #100]	; (8007728 <se2_write_encrypted+0x148>)
 80076c4:	2202      	movs	r2, #2
 80076c6:	a823      	add	r0, sp, #140	; 0x8c
 80076c8:	f7fd ff62 	bl	8005590 <hmac_sha256_update>
    ASSERT(ctx.num_pending == 75);
 80076cc:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80076ce:	2b4b      	cmp	r3, #75	; 0x4b
 80076d0:	d190      	bne.n	80075f4 <se2_write_encrypted+0x14>
    hmac_sha256_final(&ctx, secret, chal_check);
 80076d2:	aa19      	add	r2, sp, #100	; 0x64
 80076d4:	4641      	mov	r1, r8
 80076d6:	a823      	add	r0, sp, #140	; 0x8c
 80076d8:	f7fd ff70 	bl	80055bc <hmac_sha256_final>
    se2_write_buffer(chal_check, sizeof(chal_check));
 80076dc:	2128      	movs	r1, #40	; 0x28
 80076de:	a819      	add	r0, sp, #100	; 0x64
 80076e0:	f7ff fde4 	bl	80072ac <se2_write_buffer>
    uint8_t pn = (keynum << 6) | page_num;
 80076e4:	ea44 1487 	orr.w	r4, r4, r7, lsl #6
    CALL_CHECK(se2_write_n(0x99, &pn, tmp, 32));
 80076e8:	2320      	movs	r3, #32
 80076ea:	aa11      	add	r2, sp, #68	; 0x44
 80076ec:	f10d 0103 	add.w	r1, sp, #3
 80076f0:	2099      	movs	r0, #153	; 0x99
    uint8_t pn = (keynum << 6) | page_num;
 80076f2:	f88d 4003 	strb.w	r4, [sp, #3]
    CALL_CHECK(se2_write_n(0x99, &pn, tmp, 32));
 80076f6:	f7ff fda1 	bl	800723c <se2_write_n>
 80076fa:	b120      	cbz	r0, 8007706 <se2_write_encrypted+0x126>
 80076fc:	f44f 71aa 	mov.w	r1, #340	; 0x154
    CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 8007700:	480a      	ldr	r0, [pc, #40]	; (800772c <se2_write_encrypted+0x14c>)
 8007702:	f005 ff9d 	bl	800d640 <longjmp>
 8007706:	f7ff fe09 	bl	800731c <se2_read1>
 800770a:	28aa      	cmp	r0, #170	; 0xaa
 800770c:	d002      	beq.n	8007714 <se2_write_encrypted+0x134>
 800770e:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8007712:	e7f5      	b.n	8007700 <se2_write_encrypted+0x120>
}
 8007714:	b064      	add	sp, #400	; 0x190
 8007716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771a:	bf00      	nop
 800771c:	0800e390 	.word	0x0800e390
 8007720:	0801c000 	.word	0x0801c000
 8007724:	2009e2b0 	.word	0x2009e2b0
 8007728:	0800e9f0 	.word	0x0800e9f0
 800772c:	2009e390 	.word	0x2009e390

08007730 <se2_get_protection>:
{
 8007730:	b508      	push	{r3, lr}
 8007732:	4601      	mov	r1, r0
    CALL_CHECK(se2_write1(0xaa, page_num));
 8007734:	20aa      	movs	r0, #170	; 0xaa
 8007736:	f7ff fd4b 	bl	80071d0 <se2_write1>
 800773a:	b120      	cbz	r0, 8007746 <se2_get_protection+0x16>
 800773c:	4804      	ldr	r0, [pc, #16]	; (8007750 <se2_get_protection+0x20>)
 800773e:	f240 118b 	movw	r1, #395	; 0x18b
 8007742:	f005 ff7d 	bl	800d640 <longjmp>
}
 8007746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return se2_read1();
 800774a:	f7ff bde7 	b.w	800731c <se2_read1>
 800774e:	bf00      	nop
 8007750:	2009e390 	.word	0x2009e390

08007754 <se2_set_protection>:
{
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	460c      	mov	r4, r1
 8007758:	4605      	mov	r5, r0
    if(se2_get_protection(page_num) == flags) {
 800775a:	f7ff ffe9 	bl	8007730 <se2_get_protection>
 800775e:	42a0      	cmp	r0, r4
 8007760:	d011      	beq.n	8007786 <se2_set_protection+0x32>
    CALL_CHECK(se2_write2(0xc3, page_num, flags));
 8007762:	4622      	mov	r2, r4
 8007764:	4629      	mov	r1, r5
 8007766:	20c3      	movs	r0, #195	; 0xc3
 8007768:	f7ff fd4c 	bl	8007204 <se2_write2>
 800776c:	b120      	cbz	r0, 8007778 <se2_set_protection+0x24>
 800776e:	f240 119b 	movw	r1, #411	; 0x19b
    CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 8007772:	4805      	ldr	r0, [pc, #20]	; (8007788 <se2_set_protection+0x34>)
 8007774:	f005 ff64 	bl	800d640 <longjmp>
 8007778:	f7ff fdd0 	bl	800731c <se2_read1>
 800777c:	28aa      	cmp	r0, #170	; 0xaa
 800777e:	d002      	beq.n	8007786 <se2_set_protection+0x32>
 8007780:	f240 119d 	movw	r1, #413	; 0x19d
 8007784:	e7f5      	b.n	8007772 <se2_set_protection+0x1e>
}
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	2009e390 	.word	0x2009e390

0800778c <se2_probe>:
{
 800778c:	b500      	push	{lr}
    if(setjmp(error_env)) {
 800778e:	4812      	ldr	r0, [pc, #72]	; (80077d8 <se2_probe+0x4c>)
{
 8007790:	b089      	sub	sp, #36	; 0x24
    if(setjmp(error_env)) {
 8007792:	f005 ff4f 	bl	800d634 <setjmp>
 8007796:	b120      	cbz	r0, 80077a2 <se2_probe+0x16>
        oled_show(screen_se2_issue);
 8007798:	4810      	ldr	r0, [pc, #64]	; (80077dc <se2_probe+0x50>)
 800779a:	f7f9 fb53 	bl	8000e44 <oled_show>
        LOCKUP_FOREVER();
 800779e:	bf30      	wfi
 80077a0:	e7fd      	b.n	800779e <se2_probe+0x12>
    rng_delay();
 80077a2:	f7fa ffeb 	bl	800277c <rng_delay>
    if(rom_secrets->se2.pairing[0] == 0xff) {
 80077a6:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <se2_probe+0x54>)
 80077a8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80077ac:	2bff      	cmp	r3, #255	; 0xff
 80077ae:	d00f      	beq.n	80077d0 <se2_probe+0x44>
        se2_read_page(PGN_ROM_OPTIONS, tmp, true);
 80077b0:	2201      	movs	r2, #1
 80077b2:	4669      	mov	r1, sp
 80077b4:	201c      	movs	r0, #28
 80077b6:	f7ff fe4d 	bl	8007454 <se2_read_page>
        CHECK_RIGHT(check_equal(&tmp[24], rom_secrets->se2.romid, 8));
 80077ba:	490a      	ldr	r1, [pc, #40]	; (80077e4 <se2_probe+0x58>)
 80077bc:	2208      	movs	r2, #8
 80077be:	a806      	add	r0, sp, #24
 80077c0:	f7fa ff77 	bl	80026b2 <check_equal>
 80077c4:	b920      	cbnz	r0, 80077d0 <se2_probe+0x44>
 80077c6:	4804      	ldr	r0, [pc, #16]	; (80077d8 <se2_probe+0x4c>)
 80077c8:	f240 11b5 	movw	r1, #437	; 0x1b5
 80077cc:	f005 ff38 	bl	800d640 <longjmp>
}
 80077d0:	b009      	add	sp, #36	; 0x24
 80077d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80077d6:	bf00      	nop
 80077d8:	2009e390 	.word	0x2009e390
 80077dc:	0800df7e 	.word	0x0800df7e
 80077e0:	0801c000 	.word	0x0801c000
 80077e4:	0801c110 	.word	0x0801c110

080077e8 <se2_clear_volatile>:
{
 80077e8:	b510      	push	{r4, lr}
    if(setjmp(error_env)) fatal_mitm();
 80077ea:	4817      	ldr	r0, [pc, #92]	; (8007848 <se2_clear_volatile+0x60>)
{
 80077ec:	b088      	sub	sp, #32
    if(setjmp(error_env)) fatal_mitm();
 80077ee:	f005 ff21 	bl	800d634 <setjmp>
 80077f2:	4604      	mov	r4, r0
 80077f4:	b108      	cbz	r0, 80077fa <se2_clear_volatile+0x12>
 80077f6:	f7f9 f931 	bl	8000a5c <fatal_mitm>
    uint8_t z32[32] = {0};
 80077fa:	221c      	movs	r2, #28
 80077fc:	4601      	mov	r1, r0
 80077fe:	9000      	str	r0, [sp, #0]
 8007800:	a801      	add	r0, sp, #4
 8007802:	f005 ff0f 	bl	800d624 <memset>
    se2_write_page(PGN_PUBKEY_S+0, z32);
 8007806:	4669      	mov	r1, sp
 8007808:	201e      	movs	r0, #30
 800780a:	f7ff fd8f 	bl	800732c <se2_write_page>
    se2_write_page(PGN_PUBKEY_S+1, z32);
 800780e:	4669      	mov	r1, sp
 8007810:	201f      	movs	r0, #31
 8007812:	f7ff fd8b 	bl	800732c <se2_write_page>
    se2_write_buffer(z32, 32);
 8007816:	2120      	movs	r1, #32
 8007818:	4668      	mov	r0, sp
 800781a:	f7ff fd47 	bl	80072ac <se2_write_buffer>
    CALL_CHECK(se2_write2(0x3c, (2<<6), 0));
 800781e:	4622      	mov	r2, r4
 8007820:	2180      	movs	r1, #128	; 0x80
 8007822:	203c      	movs	r0, #60	; 0x3c
 8007824:	f7ff fcee 	bl	8007204 <se2_write2>
 8007828:	b120      	cbz	r0, 8007834 <se2_clear_volatile+0x4c>
 800782a:	f240 11cd 	movw	r1, #461	; 0x1cd
    CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 800782e:	4806      	ldr	r0, [pc, #24]	; (8007848 <se2_clear_volatile+0x60>)
 8007830:	f005 ff06 	bl	800d640 <longjmp>
 8007834:	f7ff fd72 	bl	800731c <se2_read1>
 8007838:	28aa      	cmp	r0, #170	; 0xaa
 800783a:	d002      	beq.n	8007842 <se2_clear_volatile+0x5a>
 800783c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8007840:	e7f5      	b.n	800782e <se2_clear_volatile+0x46>
}
 8007842:	b008      	add	sp, #32
 8007844:	bd10      	pop	{r4, pc}
 8007846:	bf00      	nop
 8007848:	2009e390 	.word	0x2009e390

0800784c <se2_setup_config>:
{
 800784c:	b570      	push	{r4, r5, r6, lr}
    if((setjmp(error_env))) {
 800784e:	485b      	ldr	r0, [pc, #364]	; (80079bc <se2_setup_config+0x170>)
{
 8007850:	b090      	sub	sp, #64	; 0x40
    if((setjmp(error_env))) {
 8007852:	f005 feef 	bl	800d634 <setjmp>
 8007856:	4604      	mov	r4, r0
 8007858:	b120      	cbz	r0, 8007864 <se2_setup_config+0x18>
        oled_show(screen_se2_issue);
 800785a:	4859      	ldr	r0, [pc, #356]	; (80079c0 <se2_setup_config+0x174>)
 800785c:	f7f9 faf2 	bl	8000e44 <oled_show>
        LOCKUP_FOREVER();
 8007860:	bf30      	wfi
 8007862:	e7fd      	b.n	8007860 <se2_setup_config+0x14>
    if(rom_secrets->se2.pairing[0] != 0xff) {
 8007864:	4b57      	ldr	r3, [pc, #348]	; (80079c4 <se2_setup_config+0x178>)
 8007866:	f893 10b0 	ldrb.w	r1, [r3, #176]	; 0xb0
 800786a:	29ff      	cmp	r1, #255	; 0xff
 800786c:	f040 80a0 	bne.w	80079b0 <se2_setup_config+0x164>
    memset(&_tbd, 0xff, sizeof(_tbd));
 8007870:	4d55      	ldr	r5, [pc, #340]	; (80079c8 <se2_setup_config+0x17c>)
 8007872:	22e0      	movs	r2, #224	; 0xe0
 8007874:	4628      	mov	r0, r5
 8007876:	f005 fed5 	bl	800d624 <memset>
    rng_buffer(_tbd.tpin_key, 32);
 800787a:	2120      	movs	r1, #32
 800787c:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8007880:	f7fa ff66 	bl	8002750 <rng_buffer>
    se2_read_page(PGN_ROM_OPTIONS, tmp, false);
 8007884:	4622      	mov	r2, r4
 8007886:	4669      	mov	r1, sp
 8007888:	201c      	movs	r0, #28
 800788a:	f7ff fde3 	bl	8007454 <se2_read_page>
    ASSERT(tmp[1] == 0x00);     // check ANON is not set
 800788e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007892:	b113      	cbz	r3, 800789a <se2_setup_config+0x4e>
 8007894:	484d      	ldr	r0, [pc, #308]	; (80079cc <se2_setup_config+0x180>)
 8007896:	f7f9 f8d7 	bl	8000a48 <fatal_error>
    memcpy(_tbd.romid, tmp+24, 8);
 800789a:	ab06      	add	r3, sp, #24
 800789c:	cb03      	ldmia	r3!, {r0, r1}
 800789e:	6628      	str	r0, [r5, #96]	; 0x60
 80078a0:	6669      	str	r1, [r5, #100]	; 0x64
    rng_buffer(tmp, 32);
 80078a2:	4668      	mov	r0, sp
 80078a4:	2120      	movs	r1, #32
 80078a6:	f7fa ff53 	bl	8002750 <rng_buffer>
    se2_write_page(PGN_SECRET_B, tmp);
 80078aa:	4669      	mov	r1, sp
 80078ac:	201a      	movs	r0, #26
 80078ae:	f7ff fd3d 	bl	800732c <se2_write_page>
    se2_pick_keypair(0, true);
 80078b2:	2101      	movs	r1, #1
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7ff fd53 	bl	8007360 <se2_pick_keypair>
    se2_read_page(PGN_PUBKEY_A,   &_tbd.pubkey_A[0], false);
 80078ba:	4622      	mov	r2, r4
 80078bc:	f105 0120 	add.w	r1, r5, #32
 80078c0:	2010      	movs	r0, #16
 80078c2:	f7ff fdc7 	bl	8007454 <se2_read_page>
    memset(tmp, 0, 32);
 80078c6:	2620      	movs	r6, #32
    se2_read_page(PGN_PUBKEY_A+1, &_tbd.pubkey_A[32], false);
 80078c8:	4622      	mov	r2, r4
 80078ca:	f105 0140 	add.w	r1, r5, #64	; 0x40
 80078ce:	2011      	movs	r0, #17
 80078d0:	f7ff fdc0 	bl	8007454 <se2_read_page>
    memset(tmp, 0, 32);
 80078d4:	4632      	mov	r2, r6
 80078d6:	4621      	mov	r1, r4
 80078d8:	4668      	mov	r0, sp
 80078da:	f005 fea3 	bl	800d624 <memset>
    se2_write_page(PGN_PRIVKEY_B, tmp);
 80078de:	4669      	mov	r1, sp
 80078e0:	2017      	movs	r0, #23
 80078e2:	f7ff fd23 	bl	800732c <se2_write_page>
    se2_write_page(PGN_PRIVKEY_B+1, tmp);
 80078e6:	4669      	mov	r1, sp
 80078e8:	2018      	movs	r0, #24
 80078ea:	f7ff fd1f 	bl	800732c <se2_write_page>
    se2_write_page(PGN_PUBKEY_B, tmp);
 80078ee:	4669      	mov	r1, sp
 80078f0:	2012      	movs	r0, #18
 80078f2:	f7ff fd1b 	bl	800732c <se2_write_page>
    se2_write_page(PGN_PUBKEY_B+1, tmp);
 80078f6:	4669      	mov	r1, sp
 80078f8:	2013      	movs	r0, #19
 80078fa:	f7ff fd17 	bl	800732c <se2_write_page>
        rng_buffer(_tbd.pairing, 32);
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	f7fa ff25 	bl	8002750 <rng_buffer>
    } while(_tbd.pairing[0] == 0xff);
 8007906:	782b      	ldrb	r3, [r5, #0]
 8007908:	2bff      	cmp	r3, #255	; 0xff
 800790a:	d0f8      	beq.n	80078fe <se2_setup_config+0xb2>
    se2_write_page(PGN_SECRET_A, _tbd.pairing);
 800790c:	4629      	mov	r1, r5
 800790e:	2019      	movs	r0, #25
    rng_buffer(tmp, 32);
 8007910:	466d      	mov	r5, sp
    se2_write_page(PGN_SECRET_A, _tbd.pairing);
 8007912:	f7ff fd0b 	bl	800732c <se2_write_page>
    rng_buffer(tmp, 32);
 8007916:	2120      	movs	r1, #32
 8007918:	4628      	mov	r0, r5
 800791a:	f7fa ff19 	bl	8002750 <rng_buffer>
    se2_write_page(PGN_SE2_EASY_KEY, tmp);
 800791e:	4629      	mov	r1, r5
 8007920:	200e      	movs	r0, #14
 8007922:	f7ff fd03 	bl	800732c <se2_write_page>
    memset(tmp, 0, 32);
 8007926:	2220      	movs	r2, #32
 8007928:	2100      	movs	r1, #0
 800792a:	4628      	mov	r0, r5
 800792c:	f005 fe7a 	bl	800d624 <memset>
    for(int pn=0; pn <= PGN_LAST_TRICK; pn++) {
 8007930:	4626      	mov	r6, r4
        se2_write_page(pn, tmp);
 8007932:	b2f0      	uxtb	r0, r6
 8007934:	4629      	mov	r1, r5
    for(int pn=0; pn <= PGN_LAST_TRICK; pn++) {
 8007936:	3601      	adds	r6, #1
        se2_write_page(pn, tmp);
 8007938:	f7ff fcf8 	bl	800732c <se2_write_page>
    for(int pn=0; pn <= PGN_LAST_TRICK; pn++) {
 800793c:	2e0e      	cmp	r6, #14
 800793e:	d1f8      	bne.n	8007932 <se2_setup_config+0xe6>
    flash_save_se2_data(&_tbd);
 8007940:	4821      	ldr	r0, [pc, #132]	; (80079c8 <se2_setup_config+0x17c>)
 8007942:	f7fa fc4b 	bl	80021dc <flash_save_se2_data>
    se2_set_protection(PGN_SECRET_A, PROT_WP);
 8007946:	2102      	movs	r1, #2
 8007948:	2019      	movs	r0, #25
 800794a:	f7ff ff03 	bl	8007754 <se2_set_protection>
    se2_set_protection(PGN_SECRET_B, PROT_WP);
 800794e:	2102      	movs	r1, #2
 8007950:	201a      	movs	r0, #26
 8007952:	f7ff feff 	bl	8007754 <se2_set_protection>
    se2_set_protection(PGN_PUBKEY_A, PROT_WP);
 8007956:	2102      	movs	r1, #2
 8007958:	2010      	movs	r0, #16
 800795a:	f7ff fefb 	bl	8007754 <se2_set_protection>
    se2_set_protection(PGN_PUBKEY_B, PROT_WP);
 800795e:	2102      	movs	r1, #2
 8007960:	2012      	movs	r0, #18
 8007962:	f7ff fef7 	bl	8007754 <se2_set_protection>
    se2_set_protection(PGN_SE2_EASY_KEY, PROT_EPH);
 8007966:	2110      	movs	r1, #16
 8007968:	4630      	mov	r0, r6
 800796a:	f7ff fef3 	bl	8007754 <se2_set_protection>
        se2_set_protection(pn, PROT_EPH);
 800796e:	2510      	movs	r5, #16
 8007970:	b2e0      	uxtb	r0, r4
 8007972:	4629      	mov	r1, r5
    for(int pn=0; pn <= PGN_LAST_TRICK; pn++) {
 8007974:	3401      	adds	r4, #1
        se2_set_protection(pn, PROT_EPH);
 8007976:	f7ff feed 	bl	8007754 <se2_set_protection>
    for(int pn=0; pn <= PGN_LAST_TRICK; pn++) {
 800797a:	2c0e      	cmp	r4, #14
 800797c:	d1f8      	bne.n	8007970 <se2_setup_config+0x124>
    se2_set_protection(PGN_ROM_OPTIONS, PROT_APH);       // not planning to change
 800797e:	2108      	movs	r1, #8
 8007980:	201c      	movs	r0, #28
 8007982:	f7ff fee7 	bl	8007754 <se2_set_protection>
    se2_read_page(PGN_DEC_COUNTER, tmp, false);
 8007986:	2200      	movs	r2, #0
 8007988:	a908      	add	r1, sp, #32
 800798a:	201b      	movs	r0, #27
 800798c:	f7ff fd62 	bl	8007454 <se2_read_page>
    if(tmp[2] == 0xff) {
 8007990:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8007994:	2bff      	cmp	r3, #255	; 0xff
 8007996:	d10d      	bne.n	80079b4 <se2_setup_config+0x168>
        tmp[0] = val & 0x0ff;
 8007998:	2380      	movs	r3, #128	; 0x80
 800799a:	f88d 3020 	strb.w	r3, [sp, #32]
        se2_write_page(PGN_DEC_COUNTER, tmp);
 800799e:	a908      	add	r1, sp, #32
        tmp[1] = (val >> 8) & 0x0ff;
 80079a0:	2300      	movs	r3, #0
        se2_write_page(PGN_DEC_COUNTER, tmp);
 80079a2:	201b      	movs	r0, #27
        tmp[1] = (val >> 8) & 0x0ff;
 80079a4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        tmp[2] = (val >> 16) & 0x01;
 80079a8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        se2_write_page(PGN_DEC_COUNTER, tmp);
 80079ac:	f7ff fcbe 	bl	800732c <se2_write_page>
}
 80079b0:	b010      	add	sp, #64	; 0x40
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
        puts("ctr set?");        // not expected, but keep going
 80079b4:	4806      	ldr	r0, [pc, #24]	; (80079d0 <se2_setup_config+0x184>)
 80079b6:	f7fd f9ed 	bl	8004d94 <puts>
 80079ba:	e7f9      	b.n	80079b0 <se2_setup_config+0x164>
 80079bc:	2009e390 	.word	0x2009e390
 80079c0:	0800df7e 	.word	0x0800df7e
 80079c4:	0801c000 	.word	0x0801c000
 80079c8:	2009e2b0 	.word	0x2009e2b0
 80079cc:	0800e390 	.word	0x0800e390
 80079d0:	0800e9d0 	.word	0x0800e9d0

080079d4 <se2_save_auth_pubkey>:
{
 80079d4:	b510      	push	{r4, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	9001      	str	r0, [sp, #4]
    if(setjmp(error_env)) fatal_mitm();
 80079da:	481e      	ldr	r0, [pc, #120]	; (8007a54 <se2_save_auth_pubkey+0x80>)
 80079dc:	f005 fe2a 	bl	800d634 <setjmp>
 80079e0:	b108      	cbz	r0, 80079e6 <se2_save_auth_pubkey+0x12>
 80079e2:	f7f9 f83b 	bl	8000a5c <fatal_mitm>
    ASSERT(check_all_ones(rom_secrets->se2.auth_pubkey, 64));
 80079e6:	481c      	ldr	r0, [pc, #112]	; (8007a58 <se2_save_auth_pubkey+0x84>)
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	f7fa fe49 	bl	8002680 <check_all_ones>
 80079ee:	b910      	cbnz	r0, 80079f6 <se2_save_auth_pubkey+0x22>
 80079f0:	481a      	ldr	r0, [pc, #104]	; (8007a5c <se2_save_auth_pubkey+0x88>)
 80079f2:	f7f9 f829 	bl	8000a48 <fatal_error>
    memcpy(&_tbd, &rom_secrets->se2, sizeof(_tbd));
 80079f6:	4c1a      	ldr	r4, [pc, #104]	; (8007a60 <se2_save_auth_pubkey+0x8c>)
 80079f8:	491a      	ldr	r1, [pc, #104]	; (8007a64 <se2_save_auth_pubkey+0x90>)
 80079fa:	22e0      	movs	r2, #224	; 0xe0
 80079fc:	4620      	mov	r0, r4
 80079fe:	f005 fde9 	bl	800d5d4 <memcpy>
    rng_buffer(tmp, 32);
 8007a02:	2120      	movs	r1, #32
 8007a04:	a802      	add	r0, sp, #8
 8007a06:	f7fa fea3 	bl	8002750 <rng_buffer>
    se2_write_page(PGN_SE2_HARD_KEY, tmp);
 8007a0a:	a902      	add	r1, sp, #8
 8007a0c:	200f      	movs	r0, #15
 8007a0e:	f7ff fc8d 	bl	800732c <se2_write_page>
    se2_write_page(PGN_PUBKEY_C, &pubkey[0]);
 8007a12:	9901      	ldr	r1, [sp, #4]
 8007a14:	2014      	movs	r0, #20
 8007a16:	f7ff fc89 	bl	800732c <se2_write_page>
    se2_write_page(PGN_PUBKEY_C+1, &pubkey[32]);
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	2015      	movs	r0, #21
 8007a1e:	f103 0120 	add.w	r1, r3, #32
 8007a22:	f7ff fc83 	bl	800732c <se2_write_page>
    memcpy(_tbd.auth_pubkey, pubkey, 64);
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	34a0      	adds	r4, #160	; 0xa0
 8007a2a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007a2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a32:	f844 1b04 	str.w	r1, [r4], #4
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d1f9      	bne.n	8007a2e <se2_save_auth_pubkey+0x5a>
    flash_save_se2_data(&_tbd);
 8007a3a:	4809      	ldr	r0, [pc, #36]	; (8007a60 <se2_save_auth_pubkey+0x8c>)
 8007a3c:	f7fa fbce 	bl	80021dc <flash_save_se2_data>
    se2_set_protection(PGN_SE2_HARD_KEY, PROT_WP | PROT_ECH | PROT_ECW);
 8007a40:	21c2      	movs	r1, #194	; 0xc2
 8007a42:	200f      	movs	r0, #15
 8007a44:	f7ff fe86 	bl	8007754 <se2_set_protection>
    se2_set_protection(PGN_PUBKEY_C, PROT_WP | PROT_RP | PROT_AUTH);
 8007a48:	2123      	movs	r1, #35	; 0x23
 8007a4a:	2014      	movs	r0, #20
 8007a4c:	f7ff fe82 	bl	8007754 <se2_set_protection>
}
 8007a50:	b00a      	add	sp, #40	; 0x28
 8007a52:	bd10      	pop	{r4, pc}
 8007a54:	2009e390 	.word	0x2009e390
 8007a58:	0801c150 	.word	0x0801c150
 8007a5c:	0800e390 	.word	0x0800e390
 8007a60:	2009e2b0 	.word	0x2009e2b0
 8007a64:	0801c0b0 	.word	0x0801c0b0

08007a68 <trick_pin_hash>:
{
 8007a68:	b530      	push	{r4, r5, lr}
 8007a6a:	4614      	mov	r4, r2
    ASSERT(pin_len >= 0);           // 12-12 typical, but empty = blank PIN
 8007a6c:	1e0a      	subs	r2, r1, #0
{
 8007a6e:	b0c5      	sub	sp, #276	; 0x114
 8007a70:	4605      	mov	r5, r0
    ASSERT(pin_len >= 0);           // 12-12 typical, but empty = blank PIN
 8007a72:	da02      	bge.n	8007a7a <trick_pin_hash+0x12>
 8007a74:	4812      	ldr	r0, [pc, #72]	; (8007ac0 <trick_pin_hash+0x58>)
 8007a76:	f7f8 ffe7 	bl	8000a48 <fatal_error>
    hmac_sha256_init(&ctx);
 8007a7a:	a803      	add	r0, sp, #12
 8007a7c:	9201      	str	r2, [sp, #4]
 8007a7e:	f7fd fd81 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, (uint8_t *)pin, pin_len);
 8007a82:	9a01      	ldr	r2, [sp, #4]
 8007a84:	4629      	mov	r1, r5
 8007a86:	a803      	add	r0, sp, #12
 8007a88:	f7fd fd82 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_final(&ctx, SE2_SECRETS->tpin_key, tpin_hash);
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <trick_pin_hash+0x5c>)
 8007a8e:	490e      	ldr	r1, [pc, #56]	; (8007ac8 <trick_pin_hash+0x60>)
 8007a90:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8007a94:	33b0      	adds	r3, #176	; 0xb0
 8007a96:	2aff      	cmp	r2, #255	; 0xff
 8007a98:	bf18      	it	ne
 8007a9a:	4619      	movne	r1, r3
 8007a9c:	a803      	add	r0, sp, #12
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	3180      	adds	r1, #128	; 0x80
 8007aa2:	f7fd fd8b 	bl	80055bc <hmac_sha256_final>
    sha256_single(tpin_hash, 32, tpin_hash);
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	2120      	movs	r1, #32
 8007aac:	f7fd fd4a 	bl	8005544 <sha256_single>
    sha256_single(tpin_hash, 32, tpin_hash);
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	2120      	movs	r1, #32
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f7fd fd45 	bl	8005544 <sha256_single>
}
 8007aba:	b045      	add	sp, #276	; 0x114
 8007abc:	bd30      	pop	{r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	0800e390 	.word	0x0800e390
 8007ac4:	0801c000 	.word	0x0801c000
 8007ac8:	2009e2b0 	.word	0x2009e2b0

08007acc <p256_gen_keypair>:

// p256_gen_keypair()
//
    void
p256_gen_keypair(uint8_t privkey[32], uint8_t pubkey[64])
{
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4605      	mov	r5, r0
    uECC_set_rng(rng_for_uECC);
 8007ad0:	4808      	ldr	r0, [pc, #32]	; (8007af4 <p256_gen_keypair+0x28>)
{
 8007ad2:	460c      	mov	r4, r1
    uECC_set_rng(rng_for_uECC);
 8007ad4:	f7fe fef0 	bl	80068b8 <uECC_set_rng>

    int ok = uECC_make_key(pubkey, privkey, uECC_secp256r1());
 8007ad8:	f7fe fef4 	bl	80068c4 <uECC_secp256r1>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f7fe fef7 	bl	80068d4 <uECC_make_key>
    ASSERT(ok == 1);
 8007ae6:	2801      	cmp	r0, #1
 8007ae8:	d002      	beq.n	8007af0 <p256_gen_keypair+0x24>
 8007aea:	4803      	ldr	r0, [pc, #12]	; (8007af8 <p256_gen_keypair+0x2c>)
 8007aec:	f7f8 ffac 	bl	8000a48 <fatal_error>
}
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	bf00      	nop
 8007af4:	080072a1 	.word	0x080072a1
 8007af8:	0800e390 	.word	0x0800e390

08007afc <ps256_ecdh>:

// ps256_ecdh()
//
    void
ps256_ecdh(const uint8_t pubkey[64], const uint8_t privkey[32], uint8_t result[32])
{
 8007afc:	b513      	push	{r0, r1, r4, lr}
 8007afe:	4604      	mov	r4, r0
    uECC_set_rng(rng_for_uECC);
 8007b00:	4809      	ldr	r0, [pc, #36]	; (8007b28 <ps256_ecdh+0x2c>)
{
 8007b02:	e9cd 2100 	strd	r2, r1, [sp]
    uECC_set_rng(rng_for_uECC);
 8007b06:	f7fe fed7 	bl	80068b8 <uECC_set_rng>

    int ok = uECC_shared_secret(pubkey, privkey, result, uECC_secp256r1());
 8007b0a:	f7fe fedb 	bl	80068c4 <uECC_secp256r1>
 8007b0e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8007b12:	4603      	mov	r3, r0
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7fe ff1d 	bl	8006954 <uECC_shared_secret>
    ASSERT(ok == 1);
 8007b1a:	2801      	cmp	r0, #1
 8007b1c:	d002      	beq.n	8007b24 <ps256_ecdh+0x28>
 8007b1e:	4803      	ldr	r0, [pc, #12]	; (8007b2c <ps256_ecdh+0x30>)
 8007b20:	f7f8 ff92 	bl	8000a48 <fatal_error>
}
 8007b24:	b002      	add	sp, #8
 8007b26:	bd10      	pop	{r4, pc}
 8007b28:	080072a1 	.word	0x080072a1
 8007b2c:	0800e390 	.word	0x0800e390

08007b30 <se2_read_hard_secret>:

// se2_read_hard_secret()
//
    static bool
se2_read_hard_secret(uint8_t hard_key[32], const uint8_t pin_digest[32])
{
 8007b30:	b510      	push	{r4, lr}
 8007b32:	b0e8      	sub	sp, #416	; 0x1a0
 8007b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if(setjmp(error_env)) {
 8007b38:	4836      	ldr	r0, [pc, #216]	; (8007c14 <se2_read_hard_secret+0xe4>)
 8007b3a:	f005 fd7b 	bl	800d634 <setjmp>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d165      	bne.n	8007c0e <se2_read_hard_secret+0xde>
    //
    SHA256_CTX ctx;

    // pick a temp key pair, share public part w/ SE2
    uint8_t tmp_privkey[32], tmp_pubkey[64];
    p256_gen_keypair(tmp_privkey, tmp_pubkey);
 8007b42:	a925      	add	r1, sp, #148	; 0x94
 8007b44:	a805      	add	r0, sp, #20
 8007b46:	f7ff ffc1 	bl	8007acc <p256_gen_keypair>

    // - this can be mitm-ed, but we sign it next so doesn't matter
    se2_write_page(PGN_PUBKEY_S, &tmp_pubkey[0]);
 8007b4a:	a925      	add	r1, sp, #148	; 0x94
 8007b4c:	201e      	movs	r0, #30
 8007b4e:	f7ff fbed 	bl	800732c <se2_write_page>
    se2_write_page(PGN_PUBKEY_S+1, &tmp_pubkey[32]);
 8007b52:	a92d      	add	r1, sp, #180	; 0xb4
 8007b54:	201f      	movs	r0, #31
 8007b56:	f7ff fbe9 	bl	800732c <se2_write_page>

    // pick nonce
    uint8_t chal[32+32];
    rng_buffer(chal, sizeof(chal));
 8007b5a:	2140      	movs	r1, #64	; 0x40
 8007b5c:	a835      	add	r0, sp, #212	; 0xd4
 8007b5e:	f7fa fdf7 	bl	8002750 <rng_buffer>
    se2_write_buffer(chal, sizeof(chal));
 8007b62:	2140      	movs	r1, #64	; 0x40
 8007b64:	a835      	add	r0, sp, #212	; 0xd4
 8007b66:	f7ff fba1 	bl	80072ac <se2_write_buffer>

    // md = ngu.hash.sha256s(T_pubkey + chal[0:32])
    sha256_init(&ctx);
 8007b6a:	a855      	add	r0, sp, #340	; 0x154
 8007b6c:	f7fd fc82 	bl	8005474 <sha256_init>
    sha256_update(&ctx, tmp_pubkey, 64);
 8007b70:	2240      	movs	r2, #64	; 0x40
 8007b72:	a925      	add	r1, sp, #148	; 0x94
 8007b74:	a855      	add	r0, sp, #340	; 0x154
 8007b76:	f7fd fc8b 	bl	8005490 <sha256_update>
    sha256_update(&ctx, chal, 32);      // only first 32 bytes
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	a935      	add	r1, sp, #212	; 0xd4
 8007b7e:	a855      	add	r0, sp, #340	; 0x154
 8007b80:	f7fd fc86 	bl	8005490 <sha256_update>

    uint8_t md[32];
    sha256_final(&ctx, md);
 8007b84:	a90d      	add	r1, sp, #52	; 0x34
 8007b86:	a855      	add	r0, sp, #340	; 0x154
 8007b88:	f7fd fcc8 	bl	800551c <sha256_final>
    // Get that digest signed by SE1 now, and doing that requires
    // the main pin, because the required slot requires auth by that key.
    // - this is the critical step attackers would not be able to emulate w/o SE1 contents
    // - fails here if PIN wrong
    uint8_t signature[64];
    int arc = ae_sign_authed(KEYNUM_joiner_key, md, signature, KEYNUM_main_pin, pin_digest);
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	aa45      	add	r2, sp, #276	; 0x114
 8007b92:	2303      	movs	r3, #3
 8007b94:	a90d      	add	r1, sp, #52	; 0x34
 8007b96:	2007      	movs	r0, #7
 8007b98:	f7fb f910 	bl	8002dbc <ae_sign_authed>
    CHECK_RIGHT(arc == 0);
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	b120      	cbz	r0, 8007baa <se2_read_hard_secret+0x7a>
 8007ba0:	f240 4141 	movw	r1, #1089	; 0x441

    // "Authenticate ECDSA Public Key" = 0xA8
    // cs_offset=32   ecdh_keynum=0=pubA ECDH=1 WR=0
    uint8_t param = ((32-1) << 3) | (0 << 2) | 0x2;
    se2_write_n(0xA8, &param, signature, 64);
    CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 8007ba4:	481b      	ldr	r0, [pc, #108]	; (8007c14 <se2_read_hard_secret+0xe4>)
 8007ba6:	f005 fd4b 	bl	800d640 <longjmp>
    uint8_t param = ((32-1) << 3) | (0 << 2) | 0x2;
 8007baa:	23fa      	movs	r3, #250	; 0xfa
 8007bac:	f88d 3013 	strb.w	r3, [sp, #19]
    se2_write_n(0xA8, &param, signature, 64);
 8007bb0:	aa45      	add	r2, sp, #276	; 0x114
 8007bb2:	2340      	movs	r3, #64	; 0x40
 8007bb4:	f10d 0113 	add.w	r1, sp, #19
 8007bb8:	20a8      	movs	r0, #168	; 0xa8
 8007bba:	f7ff fb3f 	bl	800723c <se2_write_n>
    CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 8007bbe:	f7ff fbad 	bl	800731c <se2_read1>
 8007bc2:	28aa      	cmp	r0, #170	; 0xaa
 8007bc4:	d002      	beq.n	8007bcc <se2_read_hard_secret+0x9c>
 8007bc6:	f240 4147 	movw	r1, #1095	; 0x447
 8007bca:	e7eb      	b.n	8007ba4 <se2_read_hard_secret+0x74>

    uint8_t shared_x[32], shared_secret[32];
    ps256_ecdh(rom_secrets->se2.pubkey_A, tmp_privkey, shared_x);
 8007bcc:	aa15      	add	r2, sp, #84	; 0x54
 8007bce:	a905      	add	r1, sp, #20
 8007bd0:	4811      	ldr	r0, [pc, #68]	; (8007c18 <se2_read_hard_secret+0xe8>)
 8007bd2:	f7ff ff93 	bl	8007afc <ps256_ecdh>

    // shared secret S will be SHA over X of shared ECDH point + chal[32:]
    //  s = ngu.hash.sha256s(x + chal[32:])
    sha256_init(&ctx);
 8007bd6:	a855      	add	r0, sp, #340	; 0x154
 8007bd8:	f7fd fc4c 	bl	8005474 <sha256_init>
    sha256_update(&ctx, shared_x, 32);
 8007bdc:	2220      	movs	r2, #32
 8007bde:	a915      	add	r1, sp, #84	; 0x54
 8007be0:	a855      	add	r0, sp, #340	; 0x154
 8007be2:	f7fd fc55 	bl	8005490 <sha256_update>
    sha256_update(&ctx, &chal[32], 32);      // second half
 8007be6:	2220      	movs	r2, #32
 8007be8:	a93d      	add	r1, sp, #244	; 0xf4
 8007bea:	a855      	add	r0, sp, #340	; 0x154
 8007bec:	f7fd fc50 	bl	8005490 <sha256_update>
    sha256_final(&ctx, shared_secret);
 8007bf0:	a91d      	add	r1, sp, #116	; 0x74
 8007bf2:	a855      	add	r0, sp, #340	; 0x154
 8007bf4:	f7fd fc92 	bl	800551c <sha256_final>

    se2_read_encrypted(PGN_SE2_HARD_KEY, hard_key, 2, shared_secret);
 8007bf8:	200f      	movs	r0, #15
 8007bfa:	9902      	ldr	r1, [sp, #8]
 8007bfc:	ab1d      	add	r3, sp, #116	; 0x74
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f7ff fc76 	bl	80074f0 <se2_read_encrypted>

    // CONCERN: secret "S" is retained in SE2's sram. No API to clear it.
    // - but you'd need to see our copy of that value to make use of it
    // - and PIN checked already to get here, so you could re-do anyway
    se2_clear_volatile();
 8007c04:	f7ff fdf0 	bl	80077e8 <se2_clear_volatile>

    return false;
 8007c08:	4620      	mov	r0, r4
}
 8007c0a:	b068      	add	sp, #416	; 0x1a0
 8007c0c:	bd10      	pop	{r4, pc}
        return true;
 8007c0e:	2001      	movs	r0, #1
 8007c10:	e7fb      	b.n	8007c0a <se2_read_hard_secret+0xda>
 8007c12:	bf00      	nop
 8007c14:	2009e390 	.word	0x2009e390
 8007c18:	0801c0d0 	.word	0x0801c0d0

08007c1c <se2_calc_seed_key>:

// se2_calc_seed_key()
//
    static bool
se2_calc_seed_key(uint8_t aes_key[32], const mcu_key_t *mcu_key, const uint8_t pin_digest[32])
{
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	b0d2      	sub	sp, #328	; 0x148
 8007c20:	4614      	mov	r4, r2
    // Gather key parts from all over. Combine them w/ HMAC into a AES-256 key
    uint8_t se1_easy_key[32], se1_hard_key[32];
    se2_read_encrypted(PGN_SE2_EASY_KEY, se1_easy_key, 0, rom_secrets->se2.pairing);
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <se2_calc_seed_key+0x5c>)
 8007c24:	2200      	movs	r2, #0
{
 8007c26:	4605      	mov	r5, r0
 8007c28:	460e      	mov	r6, r1
    se2_read_encrypted(PGN_SE2_EASY_KEY, se1_easy_key, 0, rom_secrets->se2.pairing);
 8007c2a:	200e      	movs	r0, #14
 8007c2c:	a901      	add	r1, sp, #4
 8007c2e:	f7ff fc5f 	bl	80074f0 <se2_read_encrypted>

    if(se2_read_hard_secret(se1_hard_key, pin_digest)) return true;
 8007c32:	4621      	mov	r1, r4
 8007c34:	a809      	add	r0, sp, #36	; 0x24
 8007c36:	f7ff ff7b 	bl	8007b30 <se2_read_hard_secret>
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	b9c8      	cbnz	r0, 8007c72 <se2_calc_seed_key+0x56>

    HMAC_CTX ctx;
    hmac_sha256_init(&ctx);
 8007c3e:	a811      	add	r0, sp, #68	; 0x44
 8007c40:	f7fd fca0 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, mcu_key->value, 32);
 8007c44:	2220      	movs	r2, #32
 8007c46:	4631      	mov	r1, r6
 8007c48:	a811      	add	r0, sp, #68	; 0x44
 8007c4a:	f7fd fca1 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, se1_hard_key, 32);
 8007c4e:	2220      	movs	r2, #32
 8007c50:	a909      	add	r1, sp, #36	; 0x24
 8007c52:	a811      	add	r0, sp, #68	; 0x44
 8007c54:	f7fd fc9c 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, se1_easy_key, 32);
 8007c58:	2220      	movs	r2, #32
 8007c5a:	a901      	add	r1, sp, #4
 8007c5c:	a811      	add	r0, sp, #68	; 0x44
 8007c5e:	f7fd fc97 	bl	8005590 <hmac_sha256_update>

    // combine them all using anther MCU key via HMAC-SHA256
    hmac_sha256_final(&ctx, rom_secrets->mcu_hmac_key, aes_key);
 8007c62:	a811      	add	r0, sp, #68	; 0x44
 8007c64:	4905      	ldr	r1, [pc, #20]	; (8007c7c <se2_calc_seed_key+0x60>)
 8007c66:	462a      	mov	r2, r5
 8007c68:	f7fd fca8 	bl	80055bc <hmac_sha256_final>
    hmac_sha256_init(&ctx);     // clear secrets
 8007c6c:	a811      	add	r0, sp, #68	; 0x44
 8007c6e:	f7fd fc89 	bl	8005584 <hmac_sha256_init>

    return false;
}
 8007c72:	4620      	mov	r0, r4
 8007c74:	b052      	add	sp, #328	; 0x148
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	0801c0b0 	.word	0x0801c0b0
 8007c7c:	0801c090 	.word	0x0801c090

08007c80 <se2_setup>:
{
 8007c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(i2c_port.Instance == I2C2) {
 8007c82:	4e1b      	ldr	r6, [pc, #108]	; (8007cf0 <se2_setup+0x70>)
 8007c84:	4f1b      	ldr	r7, [pc, #108]	; (8007cf4 <se2_setup+0x74>)
 8007c86:	6833      	ldr	r3, [r6, #0]
 8007c88:	42bb      	cmp	r3, r7
{
 8007c8a:	b089      	sub	sp, #36	; 0x24
    if(i2c_port.Instance == I2C2) {
 8007c8c:	d02e      	beq.n	8007cec <se2_setup+0x6c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <se2_setup+0x78>)
    GPIO_InitTypeDef setup = {
 8007c90:	4d1a      	ldr	r5, [pc, #104]	; (8007cfc <se2_setup+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c94:	f042 0202 	orr.w	r2, r2, #2
 8007c98:	64da      	str	r2, [r3, #76]	; 0x4c
 8007c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c9c:	f002 0202 	and.w	r2, r2, #2
 8007ca0:	9201      	str	r2, [sp, #4]
 8007ca2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007ca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ca6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007caa:	659a      	str	r2, [r3, #88]	; 0x58
 8007cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb2:	9302      	str	r3, [sp, #8]
 8007cb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitTypeDef setup = {
 8007cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cb8:	ac03      	add	r4, sp, #12
 8007cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cbc:	682b      	ldr	r3, [r5, #0]
    HAL_GPIO_Init(GPIOB, &setup);
 8007cbe:	4810      	ldr	r0, [pc, #64]	; (8007d00 <se2_setup+0x80>)
    GPIO_InitTypeDef setup = {
 8007cc0:	6023      	str	r3, [r4, #0]
    HAL_GPIO_Init(GPIOB, &setup);
 8007cc2:	a903      	add	r1, sp, #12
 8007cc4:	f7f9 f9a4 	bl	8001010 <HAL_GPIO_Init>
    memset(&i2c_port, 0, sizeof(i2c_port));
 8007cc8:	2244      	movs	r2, #68	; 0x44
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f106 0008 	add.w	r0, r6, #8
 8007cd0:	f005 fca8 	bl	800d624 <memset>
    i2c_port.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	60f3      	str	r3, [r6, #12]
    HAL_StatusTypeDef rv = HAL_I2C_Init(&i2c_port);
 8007cd8:	4630      	mov	r0, r6
    i2c_port.Init.Timing = 0x00b03fb8;     // 400khz "fast mode" in CubeMX @ 120Mhz (measured ok)
 8007cda:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <se2_setup+0x84>)
    i2c_port.Instance = I2C2;
 8007cdc:	6037      	str	r7, [r6, #0]
    i2c_port.Init.Timing = 0x00b03fb8;     // 400khz "fast mode" in CubeMX @ 120Mhz (measured ok)
 8007cde:	6073      	str	r3, [r6, #4]
    HAL_StatusTypeDef rv = HAL_I2C_Init(&i2c_port);
 8007ce0:	f003 fdac 	bl	800b83c <HAL_I2C_Init>
    ASSERT(rv == HAL_OK);
 8007ce4:	b110      	cbz	r0, 8007cec <se2_setup+0x6c>
 8007ce6:	4808      	ldr	r0, [pc, #32]	; (8007d08 <se2_setup+0x88>)
 8007ce8:	f7f8 feae 	bl	8000a48 <fatal_error>
}
 8007cec:	b009      	add	sp, #36	; 0x24
 8007cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf0:	2009e3ec 	.word	0x2009e3ec
 8007cf4:	40005800 	.word	0x40005800
 8007cf8:	40021000 	.word	0x40021000
 8007cfc:	0800e9dc 	.word	0x0800e9dc
 8007d00:	48000400 	.word	0x48000400
 8007d04:	00b03fb8 	.word	0x00b03fb8
 8007d08:	0800e390 	.word	0x0800e390

08007d0c <se2_clear_tricks>:
{
 8007d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0e:	b089      	sub	sp, #36	; 0x24
    se2_setup();
 8007d10:	f7ff ffb6 	bl	8007c80 <se2_setup>
    if(setjmp(error_env)) fatal_mitm();
 8007d14:	480f      	ldr	r0, [pc, #60]	; (8007d54 <se2_clear_tricks+0x48>)
 8007d16:	f005 fc8d 	bl	800d634 <setjmp>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	b108      	cbz	r0, 8007d22 <se2_clear_tricks+0x16>
 8007d1e:	f7f8 fe9d 	bl	8000a5c <fatal_mitm>
    uint8_t tmp[32] = {0};
 8007d22:	9000      	str	r0, [sp, #0]
 8007d24:	4601      	mov	r1, r0
 8007d26:	221c      	movs	r2, #28
 8007d28:	a801      	add	r0, sp, #4
 8007d2a:	f005 fc7b 	bl	800d624 <memset>
        se2_write_encrypted(pn, tmp, 0, SE2_SECRETS->pairing);
 8007d2e:	4f0a      	ldr	r7, [pc, #40]	; (8007d58 <se2_clear_tricks+0x4c>)
 8007d30:	4e0a      	ldr	r6, [pc, #40]	; (8007d5c <se2_clear_tricks+0x50>)
 8007d32:	4d0b      	ldr	r5, [pc, #44]	; (8007d60 <se2_clear_tricks+0x54>)
 8007d34:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8007d38:	b2e0      	uxtb	r0, r4
 8007d3a:	2bff      	cmp	r3, #255	; 0xff
 8007d3c:	bf0c      	ite	eq
 8007d3e:	4633      	moveq	r3, r6
 8007d40:	462b      	movne	r3, r5
 8007d42:	2200      	movs	r2, #0
 8007d44:	4669      	mov	r1, sp
    for(int pn=0; pn <= PGN_LAST_TRICK; pn++) {
 8007d46:	3401      	adds	r4, #1
        se2_write_encrypted(pn, tmp, 0, SE2_SECRETS->pairing);
 8007d48:	f7ff fc4a 	bl	80075e0 <se2_write_encrypted>
    for(int pn=0; pn <= PGN_LAST_TRICK; pn++) {
 8007d4c:	2c0e      	cmp	r4, #14
 8007d4e:	d1f1      	bne.n	8007d34 <se2_clear_tricks+0x28>
}
 8007d50:	b009      	add	sp, #36	; 0x24
 8007d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d54:	2009e390 	.word	0x2009e390
 8007d58:	0801c000 	.word	0x0801c000
 8007d5c:	2009e2b0 	.word	0x2009e2b0
 8007d60:	0801c0b0 	.word	0x0801c0b0

08007d64 <se2_read_trick_data>:
{
 8007d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d66:	b087      	sub	sp, #28
 8007d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if(setjmp(error_env)) fatal_mitm();
 8007d6c:	4816      	ldr	r0, [pc, #88]	; (8007dc8 <se2_read_trick_data+0x64>)
{
 8007d6e:	9201      	str	r2, [sp, #4]
    if(setjmp(error_env)) fatal_mitm();
 8007d70:	f005 fc60 	bl	800d634 <setjmp>
 8007d74:	b108      	cbz	r0, 8007d7a <se2_read_trick_data+0x16>
 8007d76:	f7f8 fe71 	bl	8000a5c <fatal_mitm>
    se2_read_encrypted(slot_num+1, &data[0], 0, SE2_SECRETS->pairing);
 8007d7a:	4f14      	ldr	r7, [pc, #80]	; (8007dcc <se2_read_trick_data+0x68>)
 8007d7c:	9005      	str	r0, [sp, #20]
    se2_setup();
 8007d7e:	f7ff ff7f 	bl	8007c80 <se2_setup>
    se2_read_encrypted(slot_num+1, &data[0], 0, SE2_SECRETS->pairing);
 8007d82:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8007d86:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8007d8a:	4e11      	ldr	r6, [pc, #68]	; (8007dd0 <se2_read_trick_data+0x6c>)
 8007d8c:	4d11      	ldr	r5, [pc, #68]	; (8007dd4 <se2_read_trick_data+0x70>)
 8007d8e:	9a05      	ldr	r2, [sp, #20]
 8007d90:	9901      	ldr	r1, [sp, #4]
 8007d92:	9204      	str	r2, [sp, #16]
 8007d94:	1c60      	adds	r0, r4, #1
 8007d96:	2bff      	cmp	r3, #255	; 0xff
 8007d98:	bf0c      	ite	eq
 8007d9a:	4633      	moveq	r3, r6
 8007d9c:	462b      	movne	r3, r5
 8007d9e:	b2c0      	uxtb	r0, r0
 8007da0:	f7ff fba6 	bl	80074f0 <se2_read_encrypted>
    if(tc_flags & TC_XPRV_WALLET) {
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	051b      	lsls	r3, r3, #20
 8007da8:	d50c      	bpl.n	8007dc4 <se2_read_trick_data+0x60>
        se2_read_encrypted(slot_num+2, &data[32], 0, SE2_SECRETS->pairing);
 8007daa:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8007dae:	9901      	ldr	r1, [sp, #4]
 8007db0:	9a04      	ldr	r2, [sp, #16]
 8007db2:	3402      	adds	r4, #2
 8007db4:	2bff      	cmp	r3, #255	; 0xff
 8007db6:	bf0c      	ite	eq
 8007db8:	4633      	moveq	r3, r6
 8007dba:	462b      	movne	r3, r5
 8007dbc:	3120      	adds	r1, #32
 8007dbe:	b2e0      	uxtb	r0, r4
 8007dc0:	f7ff fb96 	bl	80074f0 <se2_read_encrypted>
}
 8007dc4:	b007      	add	sp, #28
 8007dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc8:	2009e390 	.word	0x2009e390
 8007dcc:	0801c000 	.word	0x0801c000
 8007dd0:	2009e2b0 	.word	0x2009e2b0
 8007dd4:	0801c0b0 	.word	0x0801c0b0

08007dd8 <se2_test_trick_pin>:
{
 8007dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	b0fe      	sub	sp, #504	; 0x1f8
 8007dde:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007de2:	e9cd 2300 	strd	r2, r3, [sp]
    se2_setup();
 8007de6:	f7ff ff4b 	bl	8007c80 <se2_setup>
    if(setjmp(error_env)) {
 8007dea:	486a      	ldr	r0, [pc, #424]	; (8007f94 <se2_test_trick_pin+0x1bc>)
 8007dec:	f005 fc22 	bl	800d634 <setjmp>
 8007df0:	4604      	mov	r4, r0
 8007df2:	b138      	cbz	r0, 8007e04 <se2_test_trick_pin+0x2c>
        if(!safety_mode) fatal_mitm();
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	b11b      	cbz	r3, 8007e00 <se2_test_trick_pin+0x28>
        return false;
 8007df8:	2000      	movs	r0, #0
}
 8007dfa:	b07e      	add	sp, #504	; 0x1f8
 8007dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(!safety_mode) fatal_mitm();
 8007e00:	f7f8 fe2c 	bl	8000a5c <fatal_mitm>
    if(!pin_len) return false;
 8007e04:	9b02      	ldr	r3, [sp, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f6      	beq.n	8007df8 <se2_test_trick_pin+0x20>
    trick_pin_hash(pin, pin_len, tpin_hash);
 8007e0a:	9803      	ldr	r0, [sp, #12]
        se2_read_encrypted(pn, slots[i], 0, SE2_SECRETS->pairing);
 8007e0c:	f8df a194 	ldr.w	sl, [pc, #404]	; 8007fa4 <se2_test_trick_pin+0x1cc>
 8007e10:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8007fa8 <se2_test_trick_pin+0x1d0>
 8007e14:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8007fac <se2_test_trick_pin+0x1d4>
    trick_pin_hash(pin, pin_len, tpin_hash);
 8007e18:	aa06      	add	r2, sp, #24
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7ff fe24 	bl	8007a68 <trick_pin_hash>
 8007e20:	ad0e      	add	r5, sp, #56	; 0x38
 8007e22:	462f      	mov	r7, r5
    int pn = PGN_TRICK(0);
 8007e24:	4626      	mov	r6, r4
        se2_read_encrypted(pn, slots[i], 0, SE2_SECRETS->pairing);
 8007e26:	f89a 30b0 	ldrb.w	r3, [sl, #176]	; 0xb0
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	2bff      	cmp	r3, #255	; 0xff
 8007e2e:	bf0c      	ite	eq
 8007e30:	464b      	moveq	r3, r9
 8007e32:	4643      	movne	r3, r8
 8007e34:	b2f0      	uxtb	r0, r6
 8007e36:	2200      	movs	r2, #0
    for(int i=0; i<NUM_TRICKS; i++, pn++) {
 8007e38:	3601      	adds	r6, #1
        se2_read_encrypted(pn, slots[i], 0, SE2_SECRETS->pairing);
 8007e3a:	f7ff fb59 	bl	80074f0 <se2_read_encrypted>
    for(int i=0; i<NUM_TRICKS; i++, pn++) {
 8007e3e:	2e0e      	cmp	r6, #14
 8007e40:	f107 0720 	add.w	r7, r7, #32
 8007e44:	d1ef      	bne.n	8007e26 <se2_test_trick_pin+0x4e>
    se2_clear_volatile();
 8007e46:	f7ff fccf 	bl	80077e8 <se2_clear_volatile>
    uint32_t blank = 0;
 8007e4a:	2700      	movs	r7, #0
    int found = -1;
 8007e4c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        if(check_equal(here, tpin_hash, 28)) {
 8007e50:	f04f 091c 	mov.w	r9, #28
        blank |= (!!check_all_zeros(here, 32)) << i;
 8007e54:	f04f 0820 	mov.w	r8, #32
        if(check_equal(here, tpin_hash, 28)) {
 8007e58:	464a      	mov	r2, r9
 8007e5a:	a906      	add	r1, sp, #24
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f7fa fc28 	bl	80026b2 <check_equal>
        blank |= (!!check_all_zeros(here, 32)) << i;
 8007e62:	4641      	mov	r1, r8
        if(check_equal(here, tpin_hash, 28)) {
 8007e64:	2800      	cmp	r0, #0
 8007e66:	bf18      	it	ne
 8007e68:	4626      	movne	r6, r4
        blank |= (!!check_all_zeros(here, 32)) << i;
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f7fa fc12 	bl	8002694 <check_all_zeros>
 8007e70:	40a0      	lsls	r0, r4
    for(int i=0; i<NUM_TRICKS; i++) {
 8007e72:	3401      	adds	r4, #1
 8007e74:	2c0e      	cmp	r4, #14
        blank |= (!!check_all_zeros(here, 32)) << i;
 8007e76:	ea47 0700 	orr.w	r7, r7, r0
    for(int i=0; i<NUM_TRICKS; i++) {
 8007e7a:	f105 0520 	add.w	r5, r5, #32
 8007e7e:	d1eb      	bne.n	8007e58 <se2_test_trick_pin+0x80>
    rng_delay();
 8007e80:	f7fa fc7c 	bl	800277c <rng_delay>
    memset(found_slot, 0, sizeof(trick_slot_t));
 8007e84:	9800      	ldr	r0, [sp, #0]
 8007e86:	2280      	movs	r2, #128	; 0x80
 8007e88:	2100      	movs	r1, #0
 8007e8a:	f005 fbcb 	bl	800d624 <memset>
    if(safety_mode) {
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	b10b      	cbz	r3, 8007e96 <se2_test_trick_pin+0xbe>
        found_slot->blank_slots = blank;
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	65df      	str	r7, [r3, #92]	; 0x5c
    if(found >= 0) {
 8007e96:	1c72      	adds	r2, r6, #1
 8007e98:	d074      	beq.n	8007f84 <se2_test_trick_pin+0x1ac>
        found_slot->slot_num = found;
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	0174      	lsls	r4, r6, #5
 8007e9e:	601e      	str	r6, [r3, #0]
        memcpy(meta, &slots[found][28], 4);
 8007ea0:	ab15      	add	r3, sp, #84	; 0x54
        xor_mixin(meta, &tpin_hash[28], 4);
 8007ea2:	2204      	movs	r2, #4
        memcpy(meta, &slots[found][28], 4);
 8007ea4:	591b      	ldr	r3, [r3, r4]
 8007ea6:	9305      	str	r3, [sp, #20]
        xor_mixin(meta, &tpin_hash[28], 4);
 8007ea8:	a90d      	add	r1, sp, #52	; 0x34
 8007eaa:	a805      	add	r0, sp, #20
 8007eac:	f7ff f983 	bl	80071b6 <xor_mixin>
        memcpy(&found_slot->tc_flags, &meta[0], 2);
 8007eb0:	9b00      	ldr	r3, [sp, #0]
 8007eb2:	f8bd 5014 	ldrh.w	r5, [sp, #20]
        memcpy(&found_slot->tc_arg, &meta[2], 2);
 8007eb6:	9a00      	ldr	r2, [sp, #0]
        memcpy(&found_slot->tc_flags, &meta[0], 2);
 8007eb8:	809d      	strh	r5, [r3, #4]
        memcpy(&found_slot->tc_arg, &meta[2], 2);
 8007eba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007ebe:	80d3      	strh	r3, [r2, #6]
        if(found_slot->tc_flags & TC_WORD_WALLET) {
 8007ec0:	04eb      	lsls	r3, r5, #19
 8007ec2:	d513      	bpl.n	8007eec <se2_test_trick_pin+0x114>
            if(found+1 < NUM_TRICKS) {
 8007ec4:	2e0c      	cmp	r6, #12
 8007ec6:	dc0e      	bgt.n	8007ee6 <se2_test_trick_pin+0x10e>
                memcpy(found_slot->xdata, &slots[found+1][0], 32);
 8007ec8:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8007ecc:	eb0d 0403 	add.w	r4, sp, r3
 8007ed0:	f5a4 73d0 	sub.w	r3, r4, #416	; 0x1a0
 8007ed4:	3208      	adds	r2, #8
 8007ed6:	f5a4 74c0 	sub.w	r4, r4, #384	; 0x180
 8007eda:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ede:	f842 1b04 	str.w	r1, [r2], #4
 8007ee2:	42a3      	cmp	r3, r4
 8007ee4:	d1f9      	bne.n	8007eda <se2_test_trick_pin+0x102>
        if(!safety_mode && todo) {
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	b33b      	cbz	r3, 8007f3a <se2_test_trick_pin+0x162>
 8007eea:	e049      	b.n	8007f80 <se2_test_trick_pin+0x1a8>
        } else if(found_slot->tc_flags & TC_XPRV_WALLET) {
 8007eec:	052f      	lsls	r7, r5, #20
 8007eee:	d521      	bpl.n	8007f34 <se2_test_trick_pin+0x15c>
            if(found+2 < NUM_TRICKS) {
 8007ef0:	2e0b      	cmp	r6, #11
 8007ef2:	dcf8      	bgt.n	8007ee6 <se2_test_trick_pin+0x10e>
                memcpy(&found_slot->xdata[0], &slots[found+1][0], 32);
 8007ef4:	9900      	ldr	r1, [sp, #0]
 8007ef6:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8007efa:	446b      	add	r3, sp
 8007efc:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8007f00:	3108      	adds	r1, #8
 8007f02:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007f06:	f852 0b04 	ldr.w	r0, [r2], #4
 8007f0a:	f841 0b04 	str.w	r0, [r1], #4
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d1f9      	bne.n	8007f06 <se2_test_trick_pin+0x12e>
                memcpy(&found_slot->xdata[32], &slots[found+2][0], 32);
 8007f12:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8007f16:	9a00      	ldr	r2, [sp, #0]
 8007f18:	eb0d 0403 	add.w	r4, sp, r3
 8007f1c:	f5a4 73c0 	sub.w	r3, r4, #384	; 0x180
 8007f20:	3228      	adds	r2, #40	; 0x28
 8007f22:	f5a4 74b0 	sub.w	r4, r4, #352	; 0x160
 8007f26:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f2a:	f842 1b04 	str.w	r1, [r2], #4
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	d1f9      	bne.n	8007f26 <se2_test_trick_pin+0x14e>
 8007f32:	e7d8      	b.n	8007ee6 <se2_test_trick_pin+0x10e>
        if(!safety_mode && todo) {
 8007f34:	9b01      	ldr	r3, [sp, #4]
 8007f36:	bb1b      	cbnz	r3, 8007f80 <se2_test_trick_pin+0x1a8>
 8007f38:	b315      	cbz	r5, 8007f80 <se2_test_trick_pin+0x1a8>
            if(todo & TC_WIPE) {
 8007f3a:	0428      	lsls	r0, r5, #16
 8007f3c:	d50a      	bpl.n	8007f54 <se2_test_trick_pin+0x17c>
                mcu_key_clear(NULL);
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f7fa fa8a 	bl	8002458 <mcu_key_clear>
                if(todo == TC_WIPE) {
 8007f44:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8007f48:	d104      	bne.n	8007f54 <se2_test_trick_pin+0x17c>
                    oled_show(screen_wiped);
 8007f4a:	4813      	ldr	r0, [pc, #76]	; (8007f98 <se2_test_trick_pin+0x1c0>)
 8007f4c:	f7f8 ff7a 	bl	8000e44 <oled_show>
                    LOCKUP_FOREVER();
 8007f50:	bf30      	wfi
 8007f52:	e7fd      	b.n	8007f50 <se2_test_trick_pin+0x178>
            if(todo & TC_BRICK) {
 8007f54:	0469      	lsls	r1, r5, #17
 8007f56:	d40e      	bmi.n	8007f76 <se2_test_trick_pin+0x19e>
            if(todo & TC_REBOOT) {
 8007f58:	05aa      	lsls	r2, r5, #22
 8007f5a:	d50f      	bpl.n	8007f7c <se2_test_trick_pin+0x1a4>
 8007f5c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007f60:	490e      	ldr	r1, [pc, #56]	; (8007f9c <se2_test_trick_pin+0x1c4>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007f62:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <se2_test_trick_pin+0x1c8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007f64:	68ca      	ldr	r2, [r1, #12]
 8007f66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60cb      	str	r3, [r1, #12]
 8007f6e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007f72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007f74:	e7fd      	b.n	8007f72 <se2_test_trick_pin+0x19a>
                fast_brick();
 8007f76:	f7fa fb33 	bl	80025e0 <fast_brick>
 8007f7a:	e7ed      	b.n	8007f58 <se2_test_trick_pin+0x180>
            if(todo & TC_FAKE_OUT) {
 8007f7c:	04ab      	lsls	r3, r5, #18
 8007f7e:	d401      	bmi.n	8007f84 <se2_test_trick_pin+0x1ac>
        return true;
 8007f80:	2001      	movs	r0, #1
 8007f82:	e73a      	b.n	8007dfa <se2_test_trick_pin+0x22>
        found_slot->slot_num = -1;
 8007f84:	9a00      	ldr	r2, [sp, #0]
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f8a:	6013      	str	r3, [r2, #0]
        rng_delay();
 8007f8c:	f7fa fbf6 	bl	800277c <rng_delay>
 8007f90:	e732      	b.n	8007df8 <se2_test_trick_pin+0x20>
 8007f92:	bf00      	nop
 8007f94:	2009e390 	.word	0x2009e390
 8007f98:	0800e2c0 	.word	0x0800e2c0
 8007f9c:	e000ed00 	.word	0xe000ed00
 8007fa0:	05fa0004 	.word	0x05fa0004
 8007fa4:	0801c000 	.word	0x0801c000
 8007fa8:	2009e2b0 	.word	0x2009e2b0
 8007fac:	0801c0b0 	.word	0x0801c0b0

08007fb0 <se2_handle_bad_pin>:
{
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	b0a2      	sub	sp, #136	; 0x88
 8007fb4:	4604      	mov	r4, r0
    bool is_trick = se2_test_trick_pin("!p", 2, &slot, true);
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4811      	ldr	r0, [pc, #68]	; (8008000 <se2_handle_bad_pin+0x50>)
 8007fba:	aa02      	add	r2, sp, #8
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	f7ff ff0b 	bl	8007dd8 <se2_test_trick_pin>
    if(!is_trick) return;
 8007fc2:	b1d8      	cbz	r0, 8007ffc <se2_handle_bad_pin+0x4c>
    if(num_fails >= slot.tc_arg) {
 8007fc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	dc17      	bgt.n	8007ffc <se2_handle_bad_pin+0x4c>
        if(slot.tc_flags & TC_WIPE) {
 8007fcc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	da0d      	bge.n	8007ff0 <se2_handle_bad_pin+0x40>
            const mcu_key_t *cur = mcu_key_get(&valid);
 8007fd4:	f10d 0007 	add.w	r0, sp, #7
 8007fd8:	f7fa fa1e 	bl	8002418 <mcu_key_get>
            if(valid) {
 8007fdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007fe0:	b133      	cbz	r3, 8007ff0 <se2_handle_bad_pin+0x40>
                mcu_key_clear(cur);
 8007fe2:	f7fa fa39 	bl	8002458 <mcu_key_clear>
                oled_show(screen_wiped);
 8007fe6:	4807      	ldr	r0, [pc, #28]	; (8008004 <se2_handle_bad_pin+0x54>)
 8007fe8:	f7f8 ff2c 	bl	8000e44 <oled_show>
                LOCKUP_FOREVER();
 8007fec:	bf30      	wfi
 8007fee:	e7fd      	b.n	8007fec <se2_handle_bad_pin+0x3c>
        if(slot.tc_flags & TC_BRICK) {
 8007ff0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007ff4:	045b      	lsls	r3, r3, #17
 8007ff6:	d501      	bpl.n	8007ffc <se2_handle_bad_pin+0x4c>
            fast_brick();
 8007ff8:	f7fa faf2 	bl	80025e0 <fast_brick>
}
 8007ffc:	b022      	add	sp, #136	; 0x88
 8007ffe:	bd10      	pop	{r4, pc}
 8008000:	0800e9d9 	.word	0x0800e9d9
 8008004:	0800e2c0 	.word	0x0800e2c0

08008008 <se2_save_trick>:
{
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	b094      	sub	sp, #80	; 0x50
 800800e:	9001      	str	r0, [sp, #4]
    se2_setup();
 8008010:	f7ff fe36 	bl	8007c80 <se2_setup>
    if(setjmp(error_env)) {
 8008014:	4848      	ldr	r0, [pc, #288]	; (8008138 <se2_save_trick+0x130>)
 8008016:	f005 fb0d 	bl	800d634 <setjmp>
 800801a:	4604      	mov	r4, r0
 800801c:	2800      	cmp	r0, #0
 800801e:	f040 8088 	bne.w	8008132 <se2_save_trick+0x12a>
    if((config->slot_num < 0) || (config->slot_num >= NUM_TRICKS) ) {
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b0d      	cmp	r3, #13
 8008028:	d804      	bhi.n	8008034 <se2_save_trick+0x2c>
    if((config->slot_num >= NUM_TRICKS-1) && (config->tc_flags & TC_WORD_WALLET) ) {
 800802a:	d106      	bne.n	800803a <se2_save_trick+0x32>
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	889b      	ldrh	r3, [r3, #4]
 8008030:	04d9      	lsls	r1, r3, #19
 8008032:	d504      	bpl.n	800803e <se2_save_trick+0x36>
        return EPIN_RANGE_ERR;
 8008034:	f06f 0466 	mvn.w	r4, #102	; 0x66
 8008038:	e01f      	b.n	800807a <se2_save_trick+0x72>
    if((config->slot_num >= NUM_TRICKS-2) && (config->tc_flags & TC_XPRV_WALLET) ) {
 800803a:	2b0c      	cmp	r3, #12
 800803c:	d103      	bne.n	8008046 <se2_save_trick+0x3e>
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	889b      	ldrh	r3, [r3, #4]
 8008042:	051a      	lsls	r2, r3, #20
 8008044:	d4f6      	bmi.n	8008034 <se2_save_trick+0x2c>
    if(config->pin_len > sizeof(config->pin)) {
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800804a:	2910      	cmp	r1, #16
 800804c:	d8f2      	bhi.n	8008034 <se2_save_trick+0x2c>
    if(config->blank_slots) {
 800804e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8008050:	b31d      	cbz	r5, 800809a <se2_save_trick+0x92>
        uint8_t zeros[32] = { 0 };
 8008052:	2100      	movs	r1, #0
 8008054:	221c      	movs	r2, #28
 8008056:	a805      	add	r0, sp, #20
 8008058:	9104      	str	r1, [sp, #16]
 800805a:	f005 fae3 	bl	800d624 <memset>
                se2_write_encrypted(PGN_TRICK(i), zeros, 0, SE2_SECRETS->pairing);
 800805e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8008144 <se2_save_trick+0x13c>
 8008062:	4f36      	ldr	r7, [pc, #216]	; (800813c <se2_save_trick+0x134>)
 8008064:	4e36      	ldr	r6, [pc, #216]	; (8008140 <se2_save_trick+0x138>)
        for(int i=0; i<NUM_TRICKS; i++) {
 8008066:	4625      	mov	r5, r4
            if(mask & config->blank_slots) {
 8008068:	9a01      	ldr	r2, [sp, #4]
            uint32_t mask = (1 << i);
 800806a:	2301      	movs	r3, #1
            if(mask & config->blank_slots) {
 800806c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
            uint32_t mask = (1 << i);
 800806e:	40ab      	lsls	r3, r5
            if(mask & config->blank_slots) {
 8008070:	4213      	tst	r3, r2
 8008072:	d106      	bne.n	8008082 <se2_save_trick+0x7a>
        for(int i=0; i<NUM_TRICKS; i++) {
 8008074:	3501      	adds	r5, #1
 8008076:	2d0e      	cmp	r5, #14
 8008078:	d1f6      	bne.n	8008068 <se2_save_trick+0x60>
}
 800807a:	4620      	mov	r0, r4
 800807c:	b014      	add	sp, #80	; 0x50
 800807e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                se2_write_encrypted(PGN_TRICK(i), zeros, 0, SE2_SECRETS->pairing);
 8008082:	f898 30b0 	ldrb.w	r3, [r8, #176]	; 0xb0
 8008086:	2200      	movs	r2, #0
 8008088:	2bff      	cmp	r3, #255	; 0xff
 800808a:	bf0c      	ite	eq
 800808c:	463b      	moveq	r3, r7
 800808e:	4633      	movne	r3, r6
 8008090:	a904      	add	r1, sp, #16
 8008092:	b2e8      	uxtb	r0, r5
 8008094:	f7ff faa4 	bl	80075e0 <se2_write_encrypted>
 8008098:	e7ec      	b.n	8008074 <se2_save_trick+0x6c>
        trick_pin_hash(config->pin, config->pin_len, tpin_digest);
 800809a:	9b01      	ldr	r3, [sp, #4]
        se2_write_encrypted(PGN_TRICK(config->slot_num), tpin_digest, 0, SE2_SECRETS->pairing);
 800809c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008144 <se2_save_trick+0x13c>
 80080a0:	4f26      	ldr	r7, [pc, #152]	; (800813c <se2_save_trick+0x134>)
 80080a2:	4e27      	ldr	r6, [pc, #156]	; (8008140 <se2_save_trick+0x138>)
        trick_pin_hash(config->pin, config->pin_len, tpin_digest);
 80080a4:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80080a8:	aa0c      	add	r2, sp, #48	; 0x30
 80080aa:	f7ff fcdd 	bl	8007a68 <trick_pin_hash>
        memcpy(&meta[0], &config->tc_flags, 2);
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	889b      	ldrh	r3, [r3, #4]
 80080b2:	f8ad 300c 	strh.w	r3, [sp, #12]
        memcpy(&meta[2], &config->tc_arg, 2);
 80080b6:	9b01      	ldr	r3, [sp, #4]
        xor_mixin(&tpin_digest[28], meta, 4);
 80080b8:	2204      	movs	r2, #4
        memcpy(&meta[2], &config->tc_arg, 2);
 80080ba:	88db      	ldrh	r3, [r3, #6]
 80080bc:	f8ad 300e 	strh.w	r3, [sp, #14]
        xor_mixin(&tpin_digest[28], meta, 4);
 80080c0:	a903      	add	r1, sp, #12
 80080c2:	a813      	add	r0, sp, #76	; 0x4c
 80080c4:	f7ff f877 	bl	80071b6 <xor_mixin>
        se2_write_encrypted(PGN_TRICK(config->slot_num), tpin_digest, 0, SE2_SECRETS->pairing);
 80080c8:	f898 30b0 	ldrb.w	r3, [r8, #176]	; 0xb0
 80080cc:	9801      	ldr	r0, [sp, #4]
 80080ce:	2bff      	cmp	r3, #255	; 0xff
 80080d0:	bf0c      	ite	eq
 80080d2:	463b      	moveq	r3, r7
 80080d4:	4633      	movne	r3, r6
 80080d6:	7800      	ldrb	r0, [r0, #0]
 80080d8:	462a      	mov	r2, r5
 80080da:	a90c      	add	r1, sp, #48	; 0x30
 80080dc:	f7ff fa80 	bl	80075e0 <se2_write_encrypted>
        if(config->tc_flags & (TC_WORD_WALLET | TC_XPRV_WALLET)) {
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	889b      	ldrh	r3, [r3, #4]
 80080e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80080e8:	b9a3      	cbnz	r3, 8008114 <se2_save_trick+0x10c>
        if(config->tc_flags & TC_XPRV_WALLET) {
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	889b      	ldrh	r3, [r3, #4]
 80080ee:	051b      	lsls	r3, r3, #20
 80080f0:	d5c3      	bpl.n	800807a <se2_save_trick+0x72>
            se2_write_encrypted(PGN_TRICK(config->slot_num+2), &config->xdata[32],
 80080f2:	9901      	ldr	r1, [sp, #4]
                                                                    0, SE2_SECRETS->pairing);
 80080f4:	4b13      	ldr	r3, [pc, #76]	; (8008144 <se2_save_trick+0x13c>)
            se2_write_encrypted(PGN_TRICK(config->slot_num+2), &config->xdata[32],
 80080f6:	f851 0b28 	ldr.w	r0, [r1], #40
                                                                    0, SE2_SECRETS->pairing);
 80080fa:	f893 50b0 	ldrb.w	r5, [r3, #176]	; 0xb0
            se2_write_encrypted(PGN_TRICK(config->slot_num+2), &config->xdata[32],
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <se2_save_trick+0x138>)
 8008100:	4b0e      	ldr	r3, [pc, #56]	; (800813c <se2_save_trick+0x134>)
 8008102:	3002      	adds	r0, #2
 8008104:	2dff      	cmp	r5, #255	; 0xff
 8008106:	bf18      	it	ne
 8008108:	4613      	movne	r3, r2
 800810a:	b2c0      	uxtb	r0, r0
 800810c:	2200      	movs	r2, #0
 800810e:	f7ff fa67 	bl	80075e0 <se2_write_encrypted>
 8008112:	e7b2      	b.n	800807a <se2_save_trick+0x72>
            se2_write_encrypted(PGN_TRICK(config->slot_num+1), &config->xdata[0],
 8008114:	9901      	ldr	r1, [sp, #4]
                                                                    0, SE2_SECRETS->pairing);
 8008116:	f898 30b0 	ldrb.w	r3, [r8, #176]	; 0xb0
            se2_write_encrypted(PGN_TRICK(config->slot_num+1), &config->xdata[0],
 800811a:	f851 0b08 	ldr.w	r0, [r1], #8
 800811e:	3001      	adds	r0, #1
 8008120:	2bff      	cmp	r3, #255	; 0xff
 8008122:	bf0c      	ite	eq
 8008124:	463b      	moveq	r3, r7
 8008126:	4633      	movne	r3, r6
 8008128:	462a      	mov	r2, r5
 800812a:	b2c0      	uxtb	r0, r0
 800812c:	f7ff fa58 	bl	80075e0 <se2_write_encrypted>
 8008130:	e7db      	b.n	80080ea <se2_save_trick+0xe2>
        return EPIN_SE2_FAIL;
 8008132:	f06f 0472 	mvn.w	r4, #114	; 0x72
 8008136:	e7a0      	b.n	800807a <se2_save_trick+0x72>
 8008138:	2009e390 	.word	0x2009e390
 800813c:	2009e2b0 	.word	0x2009e2b0
 8008140:	0801c0b0 	.word	0x0801c0b0
 8008144:	0801c000 	.word	0x0801c000

08008148 <se2_encrypt_secret>:
//
    bool
se2_encrypt_secret(const uint8_t secret[], int secret_len, int offset, 
    uint8_t main_slot[], uint8_t *check_value,
    const uint8_t pin_digest[32])
{
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8008150:	4699      	mov	r9, r3
 8008152:	4682      	mov	sl, r0
 8008154:	460f      	mov	r7, r1
 8008156:	4614      	mov	r4, r2
 8008158:	f8dd 8260 	ldr.w	r8, [sp, #608]	; 0x260
    se2_setup();
 800815c:	f7ff fd90 	bl	8007c80 <se2_setup>

    bool is_valid;
    const mcu_key_t *cur = mcu_key_get(&is_valid);
 8008160:	f10d 000b 	add.w	r0, sp, #11
 8008164:	f7fa f958 	bl	8002418 <mcu_key_get>

    if(!is_valid) {
 8008168:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800816c:	b953      	cbnz	r3, 8008184 <se2_encrypt_secret+0x3c>
        if(!check_value) {
 800816e:	f1b8 0f00 	cmp.w	r8, #0
 8008172:	d105      	bne.n	8008180 <se2_encrypt_secret+0x38>
            // problem: we are not writing the check value but it would be changed.
            // ie: change long secret before real secret--unlikely
            return true;
 8008174:	2501      	movs	r5, #1
        ctx.num_pending = 32;
        aes_done(&ctx, check_value, 32, aes_key, nonce);
    }

    return false;
}
 8008176:	4628      	mov	r0, r5
 8008178:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cur = mcu_key_pick();     
 8008180:	f7fa f9b2 	bl	80024e8 <mcu_key_pick>
    if(se2_calc_seed_key(aes_key, cur, pin_digest)) return true;
 8008184:	4601      	mov	r1, r0
 8008186:	9a99      	ldr	r2, [sp, #612]	; 0x264
 8008188:	a807      	add	r0, sp, #28
 800818a:	f7ff fd47 	bl	8007c1c <se2_calc_seed_key>
 800818e:	4605      	mov	r5, r0
 8008190:	2800      	cmp	r0, #0
 8008192:	d1ef      	bne.n	8008174 <se2_encrypt_secret+0x2c>
    memcpy(nonce, rom_secrets->mcu_hmac_key, sizeof(nonce)-1);
 8008194:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <se2_encrypt_secret+0xa8>)
 8008196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008198:	ae03      	add	r6, sp, #12
 800819a:	46b4      	mov	ip, r6
 800819c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    nonce[15] = offset / AES_BLOCK_SIZE;
 80081a0:	2c00      	cmp	r4, #0
    memcpy(nonce, rom_secrets->mcu_hmac_key, sizeof(nonce)-1);
 80081a2:	f82c 3b02 	strh.w	r3, [ip], #2
    nonce[15] = offset / AES_BLOCK_SIZE;
 80081a6:	bfb8      	it	lt
 80081a8:	340f      	addlt	r4, #15
    memcpy(nonce, rom_secrets->mcu_hmac_key, sizeof(nonce)-1);
 80081aa:	0c1b      	lsrs	r3, r3, #16
 80081ac:	f88c 3000 	strb.w	r3, [ip]
    aes_init(&ctx);
 80081b0:	a80f      	add	r0, sp, #60	; 0x3c
    nonce[15] = offset / AES_BLOCK_SIZE;
 80081b2:	1124      	asrs	r4, r4, #4
 80081b4:	73f4      	strb	r4, [r6, #15]
    aes_init(&ctx);
 80081b6:	f000 f92b 	bl	8008410 <aes_init>
    aes_add(&ctx, secret, secret_len);
 80081ba:	463a      	mov	r2, r7
 80081bc:	4651      	mov	r1, sl
 80081be:	a80f      	add	r0, sp, #60	; 0x3c
 80081c0:	f000 f92c 	bl	800841c <aes_add>
    aes_done(&ctx, main_slot, secret_len, aes_key, nonce);
 80081c4:	9600      	str	r6, [sp, #0]
 80081c6:	ab07      	add	r3, sp, #28
 80081c8:	463a      	mov	r2, r7
 80081ca:	4649      	mov	r1, r9
 80081cc:	a80f      	add	r0, sp, #60	; 0x3c
 80081ce:	f000 f93b 	bl	8008448 <aes_done>
    if(check_value) {
 80081d2:	f1b8 0f00 	cmp.w	r8, #0
 80081d6:	d0ce      	beq.n	8008176 <se2_encrypt_secret+0x2e>
        aes_init(&ctx);
 80081d8:	a80f      	add	r0, sp, #60	; 0x3c
 80081da:	f000 f919 	bl	8008410 <aes_init>
        ctx.num_pending = 32;
 80081de:	2220      	movs	r2, #32
        aes_done(&ctx, check_value, 32, aes_key, nonce);
 80081e0:	9600      	str	r6, [sp, #0]
 80081e2:	ab07      	add	r3, sp, #28
 80081e4:	4641      	mov	r1, r8
 80081e6:	a80f      	add	r0, sp, #60	; 0x3c
        ctx.num_pending = 32;
 80081e8:	928f      	str	r2, [sp, #572]	; 0x23c
        aes_done(&ctx, check_value, 32, aes_key, nonce);
 80081ea:	f000 f92d 	bl	8008448 <aes_done>
 80081ee:	e7c2      	b.n	8008176 <se2_encrypt_secret+0x2e>
 80081f0:	0801c090 	.word	0x0801c090

080081f4 <se2_decrypt_secret>:
//
    void
se2_decrypt_secret(uint8_t secret[], int secret_len, int offset,
        const uint8_t main_slot[], const uint8_t *check_value,
        const uint8_t pin_digest[32], bool *is_valid)
{
 80081f4:	b530      	push	{r4, r5, lr}
 80081f6:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80081fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081fe:	9005      	str	r0, [sp, #20]
 8008200:	9103      	str	r1, [sp, #12]
    se2_setup();
 8008202:	f7ff fd3d 	bl	8007c80 <se2_setup>

    const mcu_key_t *cur = mcu_key_get(is_valid);
 8008206:	98a4      	ldr	r0, [sp, #656]	; 0x290
 8008208:	f7fa f906 	bl	8002418 <mcu_key_get>
    if(!*is_valid) {
 800820c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    const mcu_key_t *cur = mcu_key_get(is_valid);
 800820e:	9004      	str	r0, [sp, #16]
    if(!*is_valid) {
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b133      	cbz	r3, 8008222 <se2_decrypt_secret+0x2e>
        // no key set? won't be able to decrypt.
        return;
    }

    int line_num;
    if((line_num = setjmp(error_env))) {
 8008214:	4825      	ldr	r0, [pc, #148]	; (80082ac <se2_decrypt_secret+0xb8>)
 8008216:	f005 fa0d 	bl	800d634 <setjmp>
 800821a:	b128      	cbz	r0, 8008228 <se2_decrypt_secret+0x34>
        // internal failures / broken i2c buses will come here
        *is_valid = false;
 800821c:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 800821e:	2300      	movs	r3, #0
 8008220:	7013      	strb	r3, [r2, #0]

    // decrypt the real data
    aes_init(&ctx);
    aes_add(&ctx, main_slot, secret_len);
    aes_done(&ctx, secret, secret_len, aes_key, nonce);
}
 8008222:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8008226:	bd30      	pop	{r4, r5, pc}
    if(se2_calc_seed_key(aes_key, cur, pin_digest)) {
 8008228:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800822a:	9904      	ldr	r1, [sp, #16]
 800822c:	a80d      	add	r0, sp, #52	; 0x34
 800822e:	f7ff fcf5 	bl	8007c1c <se2_calc_seed_key>
 8008232:	2800      	cmp	r0, #0
 8008234:	d1f2      	bne.n	800821c <se2_decrypt_secret+0x28>
    memcpy(nonce, rom_secrets->mcu_hmac_key, sizeof(nonce)-1);
 8008236:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <se2_decrypt_secret+0xbc>)
 8008238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800823a:	ad09      	add	r5, sp, #36	; 0x24
 800823c:	462c      	mov	r4, r5
 800823e:	c407      	stmia	r4!, {r0, r1, r2}
 8008240:	f824 3b02 	strh.w	r3, [r4], #2
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	7023      	strb	r3, [r4, #0]
    nonce[15] = offset / AES_BLOCK_SIZE;
 8008248:	9b06      	ldr	r3, [sp, #24]
 800824a:	2b00      	cmp	r3, #0
 800824c:	bfb8      	it	lt
 800824e:	330f      	addlt	r3, #15
 8008250:	111b      	asrs	r3, r3, #4
 8008252:	73eb      	strb	r3, [r5, #15]
    if(check_value) {
 8008254:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008256:	b1bb      	cbz	r3, 8008288 <se2_decrypt_secret+0x94>
        aes_init(&ctx);
 8008258:	a81d      	add	r0, sp, #116	; 0x74
 800825a:	f000 f8d9 	bl	8008410 <aes_init>
        aes_add(&ctx, check_value, 32);
 800825e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008260:	2220      	movs	r2, #32
 8008262:	a81d      	add	r0, sp, #116	; 0x74
 8008264:	f000 f8da 	bl	800841c <aes_add>
        aes_done(&ctx, got, 32, aes_key, nonce);
 8008268:	ab09      	add	r3, sp, #36	; 0x24
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	a915      	add	r1, sp, #84	; 0x54
 800826e:	a81d      	add	r0, sp, #116	; 0x74
 8008270:	ab0d      	add	r3, sp, #52	; 0x34
 8008272:	2220      	movs	r2, #32
 8008274:	f000 f8e8 	bl	8008448 <aes_done>
        if(!check_all_zeros(got, 32)) {
 8008278:	2120      	movs	r1, #32
 800827a:	a815      	add	r0, sp, #84	; 0x54
 800827c:	f7fa fa0a 	bl	8002694 <check_all_zeros>
 8008280:	b910      	cbnz	r0, 8008288 <se2_decrypt_secret+0x94>
            *is_valid = false;
 8008282:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008284:	7018      	strb	r0, [r3, #0]
            return;
 8008286:	e7cc      	b.n	8008222 <se2_decrypt_secret+0x2e>
    aes_init(&ctx);
 8008288:	a81d      	add	r0, sp, #116	; 0x74
 800828a:	f000 f8c1 	bl	8008410 <aes_init>
    aes_add(&ctx, main_slot, secret_len);
 800828e:	9a03      	ldr	r2, [sp, #12]
 8008290:	9907      	ldr	r1, [sp, #28]
 8008292:	a81d      	add	r0, sp, #116	; 0x74
 8008294:	f000 f8c2 	bl	800841c <aes_add>
    aes_done(&ctx, secret, secret_len, aes_key, nonce);
 8008298:	ab09      	add	r3, sp, #36	; 0x24
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	9a03      	ldr	r2, [sp, #12]
 800829e:	9905      	ldr	r1, [sp, #20]
 80082a0:	ab0d      	add	r3, sp, #52	; 0x34
 80082a2:	a81d      	add	r0, sp, #116	; 0x74
 80082a4:	f000 f8d0 	bl	8008448 <aes_done>
 80082a8:	e7bb      	b.n	8008222 <se2_decrypt_secret+0x2e>
 80082aa:	bf00      	nop
 80082ac:	2009e390 	.word	0x2009e390
 80082b0:	0801c090 	.word	0x0801c090

080082b4 <se2_pin_hash>:
//
// Hash up a PIN code for login attempt: to tie it into SE2's contents.
//
    void
se2_pin_hash(uint8_t digest_io[32], uint32_t purpose)
{
 80082b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(purpose != PIN_PURPOSE_NORMAL) {
 80082b6:	4b41      	ldr	r3, [pc, #260]	; (80083bc <se2_pin_hash+0x108>)
{
 80082b8:	b0d5      	sub	sp, #340	; 0x154
    if(purpose != PIN_PURPOSE_NORMAL) {
 80082ba:	4299      	cmp	r1, r3
{
 80082bc:	e9cd 0100 	strd	r0, r1, [sp]
    if(purpose != PIN_PURPOSE_NORMAL) {
 80082c0:	d17a      	bne.n	80083b8 <se2_pin_hash+0x104>
        // do nothing except for real PIN case (ie. not for prefix words)
        return;
    }

    se2_setup();
 80082c2:	f7ff fcdd 	bl	8007c80 <se2_setup>
    if((setjmp(error_env))) {
 80082c6:	483e      	ldr	r0, [pc, #248]	; (80083c0 <se2_pin_hash+0x10c>)
 80082c8:	f005 f9b4 	bl	800d634 <setjmp>
 80082cc:	4604      	mov	r4, r0
 80082ce:	b120      	cbz	r0, 80082da <se2_pin_hash+0x26>
        oled_show(screen_se2_issue);
 80082d0:	483c      	ldr	r0, [pc, #240]	; (80083c4 <se2_pin_hash+0x110>)
 80082d2:	f7f8 fdb7 	bl	8000e44 <oled_show>

        LOCKUP_FOREVER();
 80082d6:	bf30      	wfi
 80082d8:	e7fd      	b.n	80082d6 <se2_pin_hash+0x22>
    uint8_t     rx[34];     // 2 bytes of len+status, then 32 bytes of data
    uint8_t     tmp[32];
    HMAC_CTX    ctx;

    // HMAC(key=tpin_key, msg=given hash so far)
    hmac_sha256_init(&ctx);
 80082da:	a813      	add	r0, sp, #76	; 0x4c
 80082dc:	f7fd f952 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, digest_io, 32);
 80082e0:	9900      	ldr	r1, [sp, #0]
 80082e2:	2220      	movs	r2, #32
 80082e4:	a813      	add	r0, sp, #76	; 0x4c
 80082e6:	f7fd f953 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, (uint8_t *)&purpose, 4);
 80082ea:	2204      	movs	r2, #4
 80082ec:	eb0d 0102 	add.w	r1, sp, r2
 80082f0:	a813      	add	r0, sp, #76	; 0x4c
 80082f2:	f7fd f94d 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_final(&ctx, SE2_SECRETS->tpin_key, tmp);
 80082f6:	4b34      	ldr	r3, [pc, #208]	; (80083c8 <se2_pin_hash+0x114>)
 80082f8:	4934      	ldr	r1, [pc, #208]	; (80083cc <se2_pin_hash+0x118>)
 80082fa:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80082fe:	33b0      	adds	r3, #176	; 0xb0
 8008300:	2aff      	cmp	r2, #255	; 0xff
 8008302:	bf18      	it	ne
 8008304:	4619      	movne	r1, r3
 8008306:	3180      	adds	r1, #128	; 0x80
 8008308:	aa02      	add	r2, sp, #8
 800830a:	a813      	add	r0, sp, #76	; 0x4c
 800830c:	f7fd f956 	bl	80055bc <hmac_sha256_final>

    // NOTE: exposed as cleartext here
    se2_write_buffer(tmp, 32);
 8008310:	2120      	movs	r1, #32
 8008312:	a802      	add	r0, sp, #8
 8008314:	f7fe ffca 	bl	80072ac <se2_write_buffer>
 8008318:	25aa      	movs	r5, #170	; 0xaa
            se2_write_buffer(rx+2, 32);
        }

        // HMAC(key=secret-B, msg=consts+easy_key+buffer+consts)
        // - result put in secret-S (ram)
        CALL_CHECK(se2_write2(0x3c, (2<<6) | (1<<4) | PGN_SE2_EASY_KEY, 0));
 800831a:	269e      	movs	r6, #158	; 0x9e
 800831c:	273c      	movs	r7, #60	; 0x3c
 800831e:	4622      	mov	r2, r4
 8008320:	4631      	mov	r1, r6
 8008322:	4638      	mov	r0, r7
 8008324:	f7fe ff6e 	bl	8007204 <se2_write2>
 8008328:	b150      	cbz	r0, 8008340 <se2_pin_hash+0x8c>
 800832a:	f240 510c 	movw	r1, #1292	; 0x50c
        CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 800832e:	4824      	ldr	r0, [pc, #144]	; (80083c0 <se2_pin_hash+0x10c>)
 8008330:	f005 f986 	bl	800d640 <longjmp>
            se2_write_buffer(rx+2, 32);
 8008334:	2120      	movs	r1, #32
 8008336:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 800833a:	f7fe ffb7 	bl	80072ac <se2_write_buffer>
 800833e:	e7ee      	b.n	800831e <se2_pin_hash+0x6a>
        CHECK_RIGHT(se2_read1() == RC_SUCCESS);
 8008340:	f7fe ffec 	bl	800731c <se2_read1>
 8008344:	28aa      	cmp	r0, #170	; 0xaa
 8008346:	d002      	beq.n	800834e <se2_pin_hash+0x9a>
 8008348:	f240 510d 	movw	r1, #1293	; 0x50d
 800834c:	e7ef      	b.n	800832e <se2_pin_hash+0x7a>

        // HMAC(key=S, msg=counter+junk), so we have something to read out
        // - not 100% clear what contents of 'buffer' are here, but seems
        //   to be deterministic and unchanged from prev command
        CALL_CHECK(se2_write1(0xa5, (2<<5) | PGN_DEC_COUNTER));
 800834e:	215b      	movs	r1, #91	; 0x5b
 8008350:	20a5      	movs	r0, #165	; 0xa5
 8008352:	f7fe ff3d 	bl	80071d0 <se2_write1>
 8008356:	b110      	cbz	r0, 800835e <se2_pin_hash+0xaa>
 8008358:	f240 5112 	movw	r1, #1298	; 0x512
 800835c:	e7e7      	b.n	800832e <se2_pin_hash+0x7a>

        CHECK_RIGHT(se2_read_n(sizeof(rx), rx) == RC_SUCCESS);
 800835e:	a90a      	add	r1, sp, #40	; 0x28
 8008360:	2022      	movs	r0, #34	; 0x22
 8008362:	f7fe ffb3 	bl	80072cc <se2_read_n>
 8008366:	28aa      	cmp	r0, #170	; 0xaa
 8008368:	d002      	beq.n	8008370 <se2_pin_hash+0xbc>
 800836a:	f240 5114 	movw	r1, #1300	; 0x514
 800836e:	e7de      	b.n	800832e <se2_pin_hash+0x7a>
        CHECK_RIGHT(rx[1] == RC_SUCCESS);
 8008370:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8008374:	2baa      	cmp	r3, #170	; 0xaa
 8008376:	d002      	beq.n	800837e <se2_pin_hash+0xca>
 8008378:	f240 5115 	movw	r1, #1301	; 0x515
 800837c:	e7d7      	b.n	800832e <se2_pin_hash+0x7a>
    for(int i=0; i<SE2_STRETCH_ITER; i++) {
 800837e:	3d01      	subs	r5, #1
 8008380:	d1d8      	bne.n	8008334 <se2_pin_hash+0x80>
    }

    // one final HMAC because we had to read cleartext from bus
    hmac_sha256_init(&ctx);
 8008382:	a813      	add	r0, sp, #76	; 0x4c
 8008384:	f7fd f8fe 	bl	8005584 <hmac_sha256_init>
    hmac_sha256_update(&ctx, rx+2, 32);
 8008388:	2220      	movs	r2, #32
 800838a:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 800838e:	a813      	add	r0, sp, #76	; 0x4c
 8008390:	f7fd f8fe 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_update(&ctx, digest_io, 32);
 8008394:	9900      	ldr	r1, [sp, #0]
 8008396:	2220      	movs	r2, #32
 8008398:	a813      	add	r0, sp, #76	; 0x4c
 800839a:	f7fd f8f9 	bl	8005590 <hmac_sha256_update>
    hmac_sha256_final(&ctx, SE2_SECRETS->tpin_key, digest_io);
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <se2_pin_hash+0x114>)
 80083a0:	490a      	ldr	r1, [pc, #40]	; (80083cc <se2_pin_hash+0x118>)
 80083a2:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80083a6:	33b0      	adds	r3, #176	; 0xb0
 80083a8:	2aff      	cmp	r2, #255	; 0xff
 80083aa:	bf18      	it	ne
 80083ac:	4619      	movne	r1, r3
 80083ae:	3180      	adds	r1, #128	; 0x80
 80083b0:	9a00      	ldr	r2, [sp, #0]
 80083b2:	a813      	add	r0, sp, #76	; 0x4c
 80083b4:	f7fd f902 	bl	80055bc <hmac_sha256_final>
}
 80083b8:	b055      	add	sp, #340	; 0x154
 80083ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083bc:	334d1858 	.word	0x334d1858
 80083c0:	2009e390 	.word	0x2009e390
 80083c4:	0800df7e 	.word	0x0800df7e
 80083c8:	0801c000 	.word	0x0801c000
 80083cc:	2009e2b0 	.word	0x2009e2b0

080083d0 <se2_read_rng>:
//
// Read some random bytes, which we know cannot be MitM'ed.
//
    void
se2_read_rng(uint8_t value[8])
{
 80083d0:	b500      	push	{lr}
 80083d2:	b08b      	sub	sp, #44	; 0x2c
 80083d4:	9001      	str	r0, [sp, #4]
    // funny business means MitM here
    se2_setup();
 80083d6:	f7ff fc53 	bl	8007c80 <se2_setup>
    if(setjmp(error_env)) fatal_mitm();
 80083da:	4809      	ldr	r0, [pc, #36]	; (8008400 <se2_read_rng+0x30>)
 80083dc:	f005 f92a 	bl	800d634 <setjmp>
 80083e0:	b108      	cbz	r0, 80083e6 <se2_read_rng+0x16>
 80083e2:	f7f8 fb3b 	bl	8000a5c <fatal_mitm>

    // read a field with "RPS" bytes, and verify those were read true
    uint8_t tmp[32];
    se2_read_page(PGN_ROM_OPTIONS, tmp, true);
 80083e6:	a902      	add	r1, sp, #8
 80083e8:	2201      	movs	r2, #1
 80083ea:	201c      	movs	r0, #28
 80083ec:	f7ff f832 	bl	8007454 <se2_read_page>

    memcpy(value, &tmp[4], 8);
 80083f0:	ab03      	add	r3, sp, #12
 80083f2:	cb03      	ldmia	r3!, {r0, r1}
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	6018      	str	r0, [r3, #0]
 80083f8:	6059      	str	r1, [r3, #4]
}
 80083fa:	b00b      	add	sp, #44	; 0x2c
 80083fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008400:	2009e390 	.word	0x2009e390

08008404 <word_pump_bytes>:
    uint32_t rv;

    if(((uint32_t)src) & 0x3) {
        memcpy(&rv, *src, 4);
    } else {
        rv = *(uint32_t *)(*src);
 8008404:	6803      	ldr	r3, [r0, #0]
 8008406:	f853 2b04 	ldr.w	r2, [r3], #4
    }
    (*src) += 4;
 800840a:	6003      	str	r3, [r0, #0]

    return __REV(rv);
}
 800840c:	ba10      	rev	r0, r2
 800840e:	4770      	bx	lr

08008410 <aes_init>:
    memset(ctx, 0, sizeof(AES_CTX));
 8008410:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008414:	2100      	movs	r1, #0
 8008416:	f005 b905 	b.w	800d624 <memset>
	...

0800841c <aes_add>:
{
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4605      	mov	r5, r0
    memcpy(ctx->pending+ctx->num_pending, data_in, len);
 8008420:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
 8008424:	4428      	add	r0, r5
{
 8008426:	4614      	mov	r4, r2
    memcpy(ctx->pending+ctx->num_pending, data_in, len);
 8008428:	f005 f8d4 	bl	800d5d4 <memcpy>
    ctx->num_pending += len;
 800842c:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
 8008430:	4422      	add	r2, r4
    ASSERT(ctx->num_pending < sizeof(ctx->pending));
 8008432:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    ctx->num_pending += len;
 8008436:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    ASSERT(ctx->num_pending < sizeof(ctx->pending));
 800843a:	d302      	bcc.n	8008442 <aes_add+0x26>
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <aes_add+0x28>)
 800843e:	f7f8 fb03 	bl	8000a48 <fatal_error>
}
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	0800e390 	.word	0x0800e390

08008448 <aes_done>:
//
// Do the decryption.
//
    void
aes_done(AES_CTX *ctx, uint8_t data_out[], uint32_t len, const uint8_t key[32], const uint8_t nonce[AES_BLOCK_SIZE])
{
 8008448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800844c:	4688      	mov	r8, r1
 800844e:	4611      	mov	r1, r2
    ASSERT(len <= ctx->num_pending);
 8008450:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
{
 8008454:	b085      	sub	sp, #20
    ASSERT(len <= ctx->num_pending);
 8008456:	428a      	cmp	r2, r1
{
 8008458:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800845c:	4606      	mov	r6, r0
    ASSERT(len <= ctx->num_pending);
 800845e:	d202      	bcs.n	8008466 <aes_done+0x1e>
 8008460:	4858      	ldr	r0, [pc, #352]	; (80085c4 <aes_done+0x17c>)
 8008462:	f7f8 faf1 	bl	8000a48 <fatal_error>

    // enable clock to block
    __HAL_RCC_AES_CLK_ENABLE();
 8008466:	4d58      	ldr	r5, [pc, #352]	; (80085c8 <aes_done+0x180>)

    // most changes have to be made w/ module disabled
    AES->CR &= ~AES_CR_EN;
 8008468:	4c58      	ldr	r4, [pc, #352]	; (80085cc <aes_done+0x184>)
    __HAL_RCC_AES_CLK_ENABLE();
 800846a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800846c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008470:	64ea      	str	r2, [r5, #76]	; 0x4c
 8008472:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8008474:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8008478:	9201      	str	r2, [sp, #4]
 800847a:	9a01      	ldr	r2, [sp, #4]
    AES->CR &= ~AES_CR_EN;
 800847c:	6822      	ldr	r2, [r4, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	6022      	str	r2, [r4, #0]

    // set the key size and operation mode
    MODIFY_REG(AES->CR, AES_CR_KEYSIZE, CRYP_KEYSIZE_256B);
 8008484:	6822      	ldr	r2, [r4, #0]
 8008486:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800848a:	6022      	str	r2, [r4, #0]
    MODIFY_REG(AES->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, 
 800848c:	6827      	ldr	r7, [r4, #0]
 800848e:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8008492:	f027 077e 	bic.w	r7, r7, #126	; 0x7e
 8008496:	f047 0744 	orr.w	r7, r7, #68	; 0x44
 800849a:	6027      	str	r7, [r4, #0]
            CRYP_DATATYPE_8B | CRYP_ALGOMODE_ENCRYPT | CRYP_CHAINMODE_AES_CTR);

    // load key and IV values
    const uint8_t *K = key;
    AES->KEYR7 = word_pump_bytes(&K);
 800849c:	a802      	add	r0, sp, #8
    const uint8_t *K = key;
 800849e:	9302      	str	r3, [sp, #8]
    AES->KEYR7 = word_pump_bytes(&K);
 80084a0:	f7ff ffb0 	bl	8008404 <word_pump_bytes>
 80084a4:	63e0      	str	r0, [r4, #60]	; 0x3c
    AES->KEYR6 = word_pump_bytes(&K);
 80084a6:	a802      	add	r0, sp, #8
 80084a8:	f7ff ffac 	bl	8008404 <word_pump_bytes>
 80084ac:	63a0      	str	r0, [r4, #56]	; 0x38
    AES->KEYR5 = word_pump_bytes(&K);
 80084ae:	a802      	add	r0, sp, #8
 80084b0:	f7ff ffa8 	bl	8008404 <word_pump_bytes>
 80084b4:	6360      	str	r0, [r4, #52]	; 0x34
    AES->KEYR4 = word_pump_bytes(&K);
 80084b6:	a802      	add	r0, sp, #8
 80084b8:	f7ff ffa4 	bl	8008404 <word_pump_bytes>
 80084bc:	6320      	str	r0, [r4, #48]	; 0x30
    AES->KEYR3 = word_pump_bytes(&K);
 80084be:	a802      	add	r0, sp, #8
 80084c0:	f7ff ffa0 	bl	8008404 <word_pump_bytes>
 80084c4:	61e0      	str	r0, [r4, #28]
    AES->KEYR2 = word_pump_bytes(&K);
 80084c6:	a802      	add	r0, sp, #8
 80084c8:	f7ff ff9c 	bl	8008404 <word_pump_bytes>
 80084cc:	61a0      	str	r0, [r4, #24]
    AES->KEYR1 = word_pump_bytes(&K);
 80084ce:	a802      	add	r0, sp, #8
 80084d0:	f7ff ff98 	bl	8008404 <word_pump_bytes>
 80084d4:	6160      	str	r0, [r4, #20]
    AES->KEYR0 = word_pump_bytes(&K);
 80084d6:	a802      	add	r0, sp, #8
 80084d8:	f7ff ff94 	bl	8008404 <word_pump_bytes>
 80084dc:	6120      	str	r0, [r4, #16]

    if(nonce) {
 80084de:	f1b9 0f00 	cmp.w	r9, #0
 80084e2:	d045      	beq.n	8008570 <aes_done+0x128>
        const uint8_t *N = nonce;
        AES->IVR3 = word_pump_bytes(&N);
 80084e4:	a803      	add	r0, sp, #12
        const uint8_t *N = nonce;
 80084e6:	f8cd 900c 	str.w	r9, [sp, #12]
        AES->IVR3 = word_pump_bytes(&N);
 80084ea:	f7ff ff8b 	bl	8008404 <word_pump_bytes>
 80084ee:	62e0      	str	r0, [r4, #44]	; 0x2c
        AES->IVR2 = word_pump_bytes(&N);
 80084f0:	a803      	add	r0, sp, #12
 80084f2:	f7ff ff87 	bl	8008404 <word_pump_bytes>
 80084f6:	62a0      	str	r0, [r4, #40]	; 0x28
        AES->IVR1 = word_pump_bytes(&N);
 80084f8:	a803      	add	r0, sp, #12
 80084fa:	f7ff ff83 	bl	8008404 <word_pump_bytes>
 80084fe:	6260      	str	r0, [r4, #36]	; 0x24
        AES->IVR0 = word_pump_bytes(&N);
 8008500:	a803      	add	r0, sp, #12
 8008502:	f7ff ff7f 	bl	8008404 <word_pump_bytes>
 8008506:	6220      	str	r0, [r4, #32]
        AES->IVR1 = 0;
        AES->IVR0 = 0;          // maybe should be byte-swapped one, but whatever
    }

    // Enable the Peripheral
    AES->CR |= AES_CR_EN;
 8008508:	4b30      	ldr	r3, [pc, #192]	; (80085cc <aes_done+0x184>)
 800850a:	681a      	ldr	r2, [r3, #0]

    ASSERT((((uint32_t)&ctx->pending) & 3) == 0);      // safe because of special attr
 800850c:	07b0      	lsls	r0, r6, #30
    AES->CR |= AES_CR_EN;
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]
    ASSERT((((uint32_t)&ctx->pending) & 3) == 0);      // safe because of special attr
 8008514:	d1a4      	bne.n	8008460 <aes_done+0x18>

    uint32_t    *p = (uint32_t *)ctx->pending;
    for(int i=0; i < ctx->num_pending; i += 16) {
 8008516:	f06f 070f 	mvn.w	r7, #15
 800851a:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
 800851e:	f106 0410 	add.w	r4, r6, #16
 8008522:	1bbf      	subs	r7, r7, r6
 8008524:	193a      	adds	r2, r7, r4
 8008526:	4282      	cmp	r2, r0
 8008528:	db2b      	blt.n	8008582 <aes_done+0x13a>
        *out = AES->DOUTR; out++;
        *out = AES->DOUTR; out++;
        *out = AES->DOUTR;
    }

    memcpy(data_out, ctx->pending, len);
 800852a:	460a      	mov	r2, r1
 800852c:	4640      	mov	r0, r8
 800852e:	4631      	mov	r1, r6
 8008530:	f005 f850 	bl	800d5d4 <memcpy>

    memset(ctx, 0, sizeof(AES_CTX));
 8008534:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008538:	2100      	movs	r1, #0
 800853a:	4630      	mov	r0, r6
 800853c:	f005 f872 	bl	800d624 <memset>

    // reset state of chip block, and leave clock off as well
    __HAL_RCC_AES_CLK_ENABLE();
 8008540:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008546:	64eb      	str	r3, [r5, #76]	; 0x4c
 8008548:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800854a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800854e:	9303      	str	r3, [sp, #12]
 8008550:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_AES_FORCE_RESET();
 8008552:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008558:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_AES_RELEASE_RESET();
 800855a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800855c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008560:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_AES_CLK_DISABLE();
 8008562:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008568:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 800856a:	b005      	add	sp, #20
 800856c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        AES->IVR3 = 0;
 8008570:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
        AES->IVR2 = 0;
 8008574:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
        AES->IVR1 = 0;
 8008578:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
        AES->IVR0 = 0;          // maybe should be byte-swapped one, but whatever
 800857c:	f8c4 9020 	str.w	r9, [r4, #32]
 8008580:	e7c2      	b.n	8008508 <aes_done+0xc0>
        AES->DINR = *p; p++;
 8008582:	f854 2c10 	ldr.w	r2, [r4, #-16]
 8008586:	609a      	str	r2, [r3, #8]
        AES->DINR = *p; p++;
 8008588:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800858c:	609a      	str	r2, [r3, #8]
        AES->DINR = *p; p++;
 800858e:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8008592:	609a      	str	r2, [r3, #8]
        AES->DINR = *p; p++;
 8008594:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8008598:	609a      	str	r2, [r3, #8]
        while(HAL_IS_BIT_CLR(AES->SR, AES_SR_CCF)) {
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	07d2      	lsls	r2, r2, #31
 800859e:	d5fc      	bpl.n	800859a <aes_done+0x152>
        SET_BIT(AES->CR, CRYP_CCF_CLEAR);
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085a6:	601a      	str	r2, [r3, #0]
        *out = AES->DOUTR; out++;
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	f844 2c10 	str.w	r2, [r4, #-16]
        *out = AES->DOUTR; out++;
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	f844 2c0c 	str.w	r2, [r4, #-12]
        *out = AES->DOUTR; out++;
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	f844 2c08 	str.w	r2, [r4, #-8]
        *out = AES->DOUTR;
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	f844 2c04 	str.w	r2, [r4, #-4]
    for(int i=0; i < ctx->num_pending; i += 16) {
 80085c0:	3410      	adds	r4, #16
 80085c2:	e7af      	b.n	8008524 <aes_done+0xdc>
 80085c4:	0800e390 	.word	0x0800e390
 80085c8:	40021000 	.word	0x40021000
 80085cc:	50060000 	.word	0x50060000

080085d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80085d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80085d2:	4d1c      	ldr	r5, [pc, #112]	; (8008644 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 80085d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80085d6:	00da      	lsls	r2, r3, #3
{
 80085d8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80085da:	d518      	bpl.n	800860e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80085dc:	f7fe fd7e 	bl	80070dc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80085e4:	d123      	bne.n	800862e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80085e6:	2c80      	cmp	r4, #128	; 0x80
 80085e8:	d928      	bls.n	800863c <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80085ea:	2ca0      	cmp	r4, #160	; 0xa0
 80085ec:	bf8c      	ite	hi
 80085ee:	2002      	movhi	r0, #2
 80085f0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80085f2:	4a15      	ldr	r2, [pc, #84]	; (8008648 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80085f4:	6813      	ldr	r3, [r2, #0]
 80085f6:	f023 030f 	bic.w	r3, r3, #15
 80085fa:	4303      	orrs	r3, r0
 80085fc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80085fe:	6813      	ldr	r3, [r2, #0]
 8008600:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8008604:	1a18      	subs	r0, r3, r0
 8008606:	bf18      	it	ne
 8008608:	2001      	movne	r0, #1
 800860a:	b003      	add	sp, #12
 800860c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800860e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008614:	65ab      	str	r3, [r5, #88]	; 0x58
 8008616:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8008620:	f7fe fd5c 	bl	80070dc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8008624:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800862a:	65ab      	str	r3, [r5, #88]	; 0x58
 800862c:	e7d8      	b.n	80085e0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 800862e:	2c7f      	cmp	r4, #127	; 0x7f
 8008630:	d806      	bhi.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8008632:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8008636:	4258      	negs	r0, r3
 8008638:	4158      	adcs	r0, r3
 800863a:	e7da      	b.n	80085f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800863c:	2000      	movs	r0, #0
 800863e:	e7d8      	b.n	80085f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8008640:	2002      	movs	r0, #2
 8008642:	e7d6      	b.n	80085f2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8008644:	40021000 	.word	0x40021000
 8008648:	40022000 	.word	0x40022000

0800864c <HAL_RCC_DeInit>:
{
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800864e:	4c32      	ldr	r4, [pc, #200]	; (8008718 <HAL_RCC_DeInit+0xcc>)
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008658:	f7fe fd3c 	bl	80070d4 <HAL_GetTick>
 800865c:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	079b      	lsls	r3, r3, #30
 8008662:	d543      	bpl.n	80086ec <HAL_RCC_DeInit+0xa0>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8008664:	6823      	ldr	r3, [r4, #0]
  SystemCoreClock = MSI_VALUE;
 8008666:	4a2d      	ldr	r2, [pc, #180]	; (800871c <HAL_RCC_DeInit+0xd0>)
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8008668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800866c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008670:	6023      	str	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);
 8008672:	2300      	movs	r3, #0
 8008674:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = MSI_VALUE;
 8008676:	4b2a      	ldr	r3, [pc, #168]	; (8008720 <HAL_RCC_DeInit+0xd4>)
 8008678:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800867a:	4b2a      	ldr	r3, [pc, #168]	; (8008724 <HAL_RCC_DeInit+0xd8>)
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	f7fe fd2b 	bl	80070d8 <HAL_InitTick>
 8008682:	4605      	mov	r5, r0
 8008684:	2800      	cmp	r0, #0
 8008686:	d145      	bne.n	8008714 <HAL_RCC_DeInit+0xc8>
  tickstart = HAL_GetTick();
 8008688:	f7fe fd24 	bl	80070d4 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800868c:	f241 3788 	movw	r7, #5000	; 0x1388
  tickstart = HAL_GetTick();
 8008690:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	f013 0f0c 	tst.w	r3, #12
 8008698:	d130      	bne.n	80086fc <HAL_RCC_DeInit+0xb0>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <HAL_RCC_DeInit+0xdc>)
 800869e:	4013      	ands	r3, r2
 80086a0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80086a2:	f7fe fd17 	bl	80070d4 <HAL_GetTick>
 80086a6:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	f013 5328 	ands.w	r3, r3, #704643072	; 0x2a000000
 80086ae:	d12b      	bne.n	8008708 <HAL_RCC_DeInit+0xbc>
  CLEAR_REG(RCC->PLLCFGR);
 80086b0:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 80086b2:	68e2      	ldr	r2, [r4, #12]
 80086b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086b8:	60e2      	str	r2, [r4, #12]
  CLEAR_REG(RCC->PLLSAI1CFGR);
 80086ba:	6123      	str	r3, [r4, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086c2:	6122      	str	r2, [r4, #16]
  CLEAR_REG(RCC->PLLSAI2CFGR);
 80086c4:	6163      	str	r3, [r4, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 80086c6:	6962      	ldr	r2, [r4, #20]
 80086c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086cc:	6162      	str	r2, [r4, #20]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086d4:	6022      	str	r2, [r4, #0]
  CLEAR_REG(RCC->CIER);
 80086d6:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80086d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086dc:	6223      	str	r3, [r4, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80086de:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80086e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086e6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 80086ea:	e005      	b.n	80086f8 <HAL_RCC_DeInit+0xac>
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086ec:	f7fe fcf2 	bl	80070d4 <HAL_GetTick>
 80086f0:	1b40      	subs	r0, r0, r5
 80086f2:	2802      	cmp	r0, #2
 80086f4:	d9b3      	bls.n	800865e <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 80086f6:	2503      	movs	r5, #3
}
 80086f8:	4628      	mov	r0, r5
 80086fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086fc:	f7fe fcea 	bl	80070d4 <HAL_GetTick>
 8008700:	1b80      	subs	r0, r0, r6
 8008702:	42b8      	cmp	r0, r7
 8008704:	d9c5      	bls.n	8008692 <HAL_RCC_DeInit+0x46>
 8008706:	e7f6      	b.n	80086f6 <HAL_RCC_DeInit+0xaa>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008708:	f7fe fce4 	bl	80070d4 <HAL_GetTick>
 800870c:	1b80      	subs	r0, r0, r6
 800870e:	2802      	cmp	r0, #2
 8008710:	d9ca      	bls.n	80086a8 <HAL_RCC_DeInit+0x5c>
 8008712:	e7f0      	b.n	80086f6 <HAL_RCC_DeInit+0xaa>
    return HAL_ERROR;
 8008714:	2501      	movs	r5, #1
 8008716:	e7ef      	b.n	80086f8 <HAL_RCC_DeInit+0xac>
 8008718:	40021000 	.word	0x40021000
 800871c:	003d0900 	.word	0x003d0900
 8008720:	2009e2a8 	.word	0x2009e2a8
 8008724:	2009e2ac 	.word	0x2009e2ac
 8008728:	eafef4ff 	.word	0xeafef4ff

0800872c <HAL_RCC_MCOConfig>:
{
 800872c:	b570      	push	{r4, r5, r6, lr}
  __MCO1_CLK_ENABLE();
 800872e:	4c12      	ldr	r4, [pc, #72]	; (8008778 <HAL_RCC_MCOConfig+0x4c>)
 8008730:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008732:	f043 0301 	orr.w	r3, r3, #1
 8008736:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008738:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800873a:	b086      	sub	sp, #24
  __MCO1_CLK_ENABLE();
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	9b00      	ldr	r3, [sp, #0]
{
 8008744:	4616      	mov	r6, r2
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008746:	2302      	movs	r3, #2
 8008748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800874c:	e9cd 2301 	strd	r2, r3, [sp, #4]
{
 8008750:	460d      	mov	r5, r1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008752:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008754:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008756:	2300      	movs	r3, #0
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800875c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800875e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008760:	f7f8 fc56 	bl	8001010 <HAL_GPIO_Init>
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800876a:	ea43 0206 	orr.w	r2, r3, r6
 800876e:	432a      	orrs	r2, r5
 8008770:	60a2      	str	r2, [r4, #8]
}
 8008772:	b006      	add	sp, #24
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	bf00      	nop
 8008778:	40021000 	.word	0x40021000

0800877c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800877c:	4b22      	ldr	r3, [pc, #136]	; (8008808 <HAL_RCC_GetSysClockFreq+0x8c>)
 800877e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008780:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008782:	f012 020c 	ands.w	r2, r2, #12
 8008786:	d005      	beq.n	8008794 <HAL_RCC_GetSysClockFreq+0x18>
 8008788:	2a0c      	cmp	r2, #12
 800878a:	d115      	bne.n	80087b8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800878c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008790:	2901      	cmp	r1, #1
 8008792:	d118      	bne.n	80087c6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008794:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8008796:	481d      	ldr	r0, [pc, #116]	; (800880c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008798:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800879a:	bf55      	itete	pl
 800879c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80087a0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80087a2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80087a6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80087aa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80087ae:	b34a      	cbz	r2, 8008804 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80087b0:	2a0c      	cmp	r2, #12
 80087b2:	d009      	beq.n	80087c8 <HAL_RCC_GetSysClockFreq+0x4c>
 80087b4:	2000      	movs	r0, #0
  return sysclockfreq;
 80087b6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80087b8:	2a04      	cmp	r2, #4
 80087ba:	d022      	beq.n	8008802 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80087bc:	2a08      	cmp	r2, #8
 80087be:	4814      	ldr	r0, [pc, #80]	; (8008810 <HAL_RCC_GetSysClockFreq+0x94>)
 80087c0:	bf18      	it	ne
 80087c2:	2000      	movne	r0, #0
 80087c4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80087c6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80087ce:	2a02      	cmp	r2, #2
 80087d0:	d015      	beq.n	80087fe <HAL_RCC_GetSysClockFreq+0x82>
 80087d2:	490f      	ldr	r1, [pc, #60]	; (8008810 <HAL_RCC_GetSysClockFreq+0x94>)
 80087d4:	2a03      	cmp	r2, #3
 80087d6:	bf08      	it	eq
 80087d8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087da:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80087e2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087e4:	68d8      	ldr	r0, [r3, #12]
 80087e6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087ea:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087ee:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087f0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087f2:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80087f4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80087f8:	fbb2 f0f0 	udiv	r0, r2, r0
 80087fc:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80087fe:	4805      	ldr	r0, [pc, #20]	; (8008814 <HAL_RCC_GetSysClockFreq+0x98>)
 8008800:	e7eb      	b.n	80087da <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8008802:	4804      	ldr	r0, [pc, #16]	; (8008814 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40021000 	.word	0x40021000
 800880c:	0800e9a0 	.word	0x0800e9a0
 8008810:	007a1200 	.word	0x007a1200
 8008814:	00f42400 	.word	0x00f42400

08008818 <HAL_RCC_OscConfig>:
{
 8008818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800881c:	4605      	mov	r5, r0
 800881e:	b908      	cbnz	r0, 8008824 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8008820:	2001      	movs	r0, #1
 8008822:	e047      	b.n	80088b4 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008824:	4c94      	ldr	r4, [pc, #592]	; (8008a78 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008826:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008828:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800882a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800882c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800882e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008832:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008836:	d575      	bpl.n	8008924 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008838:	b11e      	cbz	r6, 8008842 <HAL_RCC_OscConfig+0x2a>
 800883a:	2e0c      	cmp	r6, #12
 800883c:	d154      	bne.n	80088e8 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800883e:	2f01      	cmp	r7, #1
 8008840:	d152      	bne.n	80088e8 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	0798      	lsls	r0, r3, #30
 8008846:	d502      	bpl.n	800884e <HAL_RCC_OscConfig+0x36>
 8008848:	69ab      	ldr	r3, [r5, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0e8      	beq.n	8008820 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	6a28      	ldr	r0, [r5, #32]
 8008852:	0719      	lsls	r1, r3, #28
 8008854:	bf56      	itet	pl
 8008856:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800885a:	6823      	ldrmi	r3, [r4, #0]
 800885c:	091b      	lsrpl	r3, r3, #4
 800885e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008862:	4298      	cmp	r0, r3
 8008864:	d929      	bls.n	80088ba <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008866:	f7ff feb3 	bl	80085d0 <RCC_SetFlashLatencyFromMSIRange>
 800886a:	2800      	cmp	r0, #0
 800886c:	d1d8      	bne.n	8008820 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f043 0308 	orr.w	r3, r3, #8
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	6a2a      	ldr	r2, [r5, #32]
 800887a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800887e:	4313      	orrs	r3, r2
 8008880:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008882:	6863      	ldr	r3, [r4, #4]
 8008884:	69ea      	ldr	r2, [r5, #28]
 8008886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800888a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800888e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008890:	f7ff ff74 	bl	800877c <HAL_RCC_GetSysClockFreq>
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	4a79      	ldr	r2, [pc, #484]	; (8008a7c <HAL_RCC_OscConfig+0x264>)
 8008898:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800889c:	5cd3      	ldrb	r3, [r2, r3]
 800889e:	f003 031f 	and.w	r3, r3, #31
 80088a2:	40d8      	lsrs	r0, r3
 80088a4:	4b76      	ldr	r3, [pc, #472]	; (8008a80 <HAL_RCC_OscConfig+0x268>)
 80088a6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80088a8:	4b76      	ldr	r3, [pc, #472]	; (8008a84 <HAL_RCC_OscConfig+0x26c>)
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	f7fe fc14 	bl	80070d8 <HAL_InitTick>
        if(status != HAL_OK)
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d037      	beq.n	8008924 <HAL_RCC_OscConfig+0x10c>
}
 80088b4:	b003      	add	sp, #12
 80088b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f043 0308 	orr.w	r3, r3, #8
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088c8:	4303      	orrs	r3, r0
 80088ca:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	69ea      	ldr	r2, [r5, #28]
 80088d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80088d8:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80088da:	2e00      	cmp	r6, #0
 80088dc:	d1d8      	bne.n	8008890 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80088de:	f7ff fe77 	bl	80085d0 <RCC_SetFlashLatencyFromMSIRange>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d0d4      	beq.n	8008890 <HAL_RCC_OscConfig+0x78>
 80088e6:	e79b      	b.n	8008820 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80088e8:	69ab      	ldr	r3, [r5, #24]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d03a      	beq.n	8008964 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80088f6:	f7fe fbed 	bl	80070d4 <HAL_GetTick>
 80088fa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	079a      	lsls	r2, r3, #30
 8008900:	d528      	bpl.n	8008954 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f043 0308 	orr.w	r3, r3, #8
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	6a2a      	ldr	r2, [r5, #32]
 800890e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008912:	4313      	orrs	r3, r2
 8008914:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008916:	6863      	ldr	r3, [r4, #4]
 8008918:	69ea      	ldr	r2, [r5, #28]
 800891a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800891e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008922:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	07d8      	lsls	r0, r3, #31
 8008928:	d42d      	bmi.n	8008986 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	0799      	lsls	r1, r3, #30
 800892e:	d46b      	bmi.n	8008a08 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	0718      	lsls	r0, r3, #28
 8008934:	f100 80a8 	bmi.w	8008a88 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	0759      	lsls	r1, r3, #29
 800893c:	f100 80ce 	bmi.w	8008adc <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	069f      	lsls	r7, r3, #26
 8008944:	f100 8137 	bmi.w	8008bb6 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008948:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 815d 	bne.w	8008c0a <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8008950:	2000      	movs	r0, #0
 8008952:	e7af      	b.n	80088b4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008954:	f7fe fbbe 	bl	80070d4 <HAL_GetTick>
 8008958:	eba0 0008 	sub.w	r0, r0, r8
 800895c:	2802      	cmp	r0, #2
 800895e:	d9cd      	bls.n	80088fc <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8008960:	2003      	movs	r0, #3
 8008962:	e7a7      	b.n	80088b4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	f023 0301 	bic.w	r3, r3, #1
 800896a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800896c:	f7fe fbb2 	bl	80070d4 <HAL_GetTick>
 8008970:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	079b      	lsls	r3, r3, #30
 8008976:	d5d5      	bpl.n	8008924 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008978:	f7fe fbac 	bl	80070d4 <HAL_GetTick>
 800897c:	eba0 0008 	sub.w	r0, r0, r8
 8008980:	2802      	cmp	r0, #2
 8008982:	d9f6      	bls.n	8008972 <HAL_RCC_OscConfig+0x15a>
 8008984:	e7ec      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008986:	2e08      	cmp	r6, #8
 8008988:	d003      	beq.n	8008992 <HAL_RCC_OscConfig+0x17a>
 800898a:	2e0c      	cmp	r6, #12
 800898c:	d108      	bne.n	80089a0 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800898e:	2f03      	cmp	r7, #3
 8008990:	d106      	bne.n	80089a0 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	039a      	lsls	r2, r3, #14
 8008996:	d5c8      	bpl.n	800892a <HAL_RCC_OscConfig+0x112>
 8008998:	686b      	ldr	r3, [r5, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1c5      	bne.n	800892a <HAL_RCC_OscConfig+0x112>
 800899e:	e73f      	b.n	8008820 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089a0:	686b      	ldr	r3, [r5, #4]
 80089a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a6:	d110      	bne.n	80089ca <HAL_RCC_OscConfig+0x1b2>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80089b0:	f7fe fb90 	bl	80070d4 <HAL_GetTick>
 80089b4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	039b      	lsls	r3, r3, #14
 80089ba:	d4b6      	bmi.n	800892a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089bc:	f7fe fb8a 	bl	80070d4 <HAL_GetTick>
 80089c0:	eba0 0008 	sub.w	r0, r0, r8
 80089c4:	2864      	cmp	r0, #100	; 0x64
 80089c6:	d9f6      	bls.n	80089b6 <HAL_RCC_OscConfig+0x19e>
 80089c8:	e7ca      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089ce:	d104      	bne.n	80089da <HAL_RCC_OscConfig+0x1c2>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	e7e6      	b.n	80089a8 <HAL_RCC_OscConfig+0x190>
 80089da:	6822      	ldr	r2, [r4, #0]
 80089dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089e0:	6022      	str	r2, [r4, #0]
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089e8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e0      	bne.n	80089b0 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 80089ee:	f7fe fb71 	bl	80070d4 <HAL_GetTick>
 80089f2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	0398      	lsls	r0, r3, #14
 80089f8:	d597      	bpl.n	800892a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089fa:	f7fe fb6b 	bl	80070d4 <HAL_GetTick>
 80089fe:	eba0 0008 	sub.w	r0, r0, r8
 8008a02:	2864      	cmp	r0, #100	; 0x64
 8008a04:	d9f6      	bls.n	80089f4 <HAL_RCC_OscConfig+0x1dc>
 8008a06:	e7ab      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008a08:	2e04      	cmp	r6, #4
 8008a0a:	d003      	beq.n	8008a14 <HAL_RCC_OscConfig+0x1fc>
 8008a0c:	2e0c      	cmp	r6, #12
 8008a0e:	d110      	bne.n	8008a32 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008a10:	2f02      	cmp	r7, #2
 8008a12:	d10e      	bne.n	8008a32 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	0559      	lsls	r1, r3, #21
 8008a18:	d503      	bpl.n	8008a22 <HAL_RCC_OscConfig+0x20a>
 8008a1a:	68eb      	ldr	r3, [r5, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f43f aeff 	beq.w	8008820 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	692a      	ldr	r2, [r5, #16]
 8008a26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008a2e:	6063      	str	r3, [r4, #4]
 8008a30:	e77e      	b.n	8008930 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a32:	68eb      	ldr	r3, [r5, #12]
 8008a34:	b17b      	cbz	r3, 8008a56 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008a3e:	f7fe fb49 	bl	80070d4 <HAL_GetTick>
 8008a42:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	055a      	lsls	r2, r3, #21
 8008a48:	d4eb      	bmi.n	8008a22 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a4a:	f7fe fb43 	bl	80070d4 <HAL_GetTick>
 8008a4e:	1bc0      	subs	r0, r0, r7
 8008a50:	2802      	cmp	r0, #2
 8008a52:	d9f7      	bls.n	8008a44 <HAL_RCC_OscConfig+0x22c>
 8008a54:	e784      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008a5e:	f7fe fb39 	bl	80070d4 <HAL_GetTick>
 8008a62:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	055b      	lsls	r3, r3, #21
 8008a68:	f57f af62 	bpl.w	8008930 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a6c:	f7fe fb32 	bl	80070d4 <HAL_GetTick>
 8008a70:	1bc0      	subs	r0, r0, r7
 8008a72:	2802      	cmp	r0, #2
 8008a74:	d9f6      	bls.n	8008a64 <HAL_RCC_OscConfig+0x24c>
 8008a76:	e773      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
 8008a78:	40021000 	.word	0x40021000
 8008a7c:	0800e988 	.word	0x0800e988
 8008a80:	2009e2a8 	.word	0x2009e2a8
 8008a84:	2009e2ac 	.word	0x2009e2ac
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a88:	696b      	ldr	r3, [r5, #20]
 8008a8a:	b19b      	cbz	r3, 8008ab4 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8008a8c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008a90:	f043 0301 	orr.w	r3, r3, #1
 8008a94:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008a98:	f7fe fb1c 	bl	80070d4 <HAL_GetTick>
 8008a9c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a9e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008aa2:	079a      	lsls	r2, r3, #30
 8008aa4:	f53f af48 	bmi.w	8008938 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aa8:	f7fe fb14 	bl	80070d4 <HAL_GetTick>
 8008aac:	1bc0      	subs	r0, r0, r7
 8008aae:	2802      	cmp	r0, #2
 8008ab0:	d9f5      	bls.n	8008a9e <HAL_RCC_OscConfig+0x286>
 8008ab2:	e755      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8008ab4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008ac0:	f7fe fb08 	bl	80070d4 <HAL_GetTick>
 8008ac4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ac6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008aca:	079b      	lsls	r3, r3, #30
 8008acc:	f57f af34 	bpl.w	8008938 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad0:	f7fe fb00 	bl	80070d4 <HAL_GetTick>
 8008ad4:	1bc0      	subs	r0, r0, r7
 8008ad6:	2802      	cmp	r0, #2
 8008ad8:	d9f5      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x2ae>
 8008ada:	e741      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008adc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ade:	00df      	lsls	r7, r3, #3
 8008ae0:	d429      	bmi.n	8008b36 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae8:	65a3      	str	r3, [r4, #88]	; 0x58
 8008aea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008af4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008af8:	4f9c      	ldr	r7, [pc, #624]	; (8008d6c <HAL_RCC_OscConfig+0x554>)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	05d8      	lsls	r0, r3, #23
 8008afe:	d51d      	bpl.n	8008b3c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b00:	68ab      	ldr	r3, [r5, #8]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d12b      	bne.n	8008b5e <HAL_RCC_OscConfig+0x346>
 8008b06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008b0a:	f043 0301 	orr.w	r3, r3, #1
 8008b0e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8008b12:	f7fe fadf 	bl	80070d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b16:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008b1a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008b20:	079a      	lsls	r2, r3, #30
 8008b22:	d542      	bpl.n	8008baa <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8008b24:	f1b8 0f00 	cmp.w	r8, #0
 8008b28:	f43f af0a 	beq.w	8008940 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b32:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b34:	e704      	b.n	8008940 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8008b36:	f04f 0800 	mov.w	r8, #0
 8008b3a:	e7dd      	b.n	8008af8 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b42:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008b44:	f7fe fac6 	bl	80070d4 <HAL_GetTick>
 8008b48:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	05d9      	lsls	r1, r3, #23
 8008b4e:	d4d7      	bmi.n	8008b00 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b50:	f7fe fac0 	bl	80070d4 <HAL_GetTick>
 8008b54:	eba0 0009 	sub.w	r0, r0, r9
 8008b58:	2802      	cmp	r0, #2
 8008b5a:	d9f6      	bls.n	8008b4a <HAL_RCC_OscConfig+0x332>
 8008b5c:	e700      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d106      	bne.n	8008b70 <HAL_RCC_OscConfig+0x358>
 8008b62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008b66:	f043 0304 	orr.w	r3, r3, #4
 8008b6a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8008b6e:	e7ca      	b.n	8008b06 <HAL_RCC_OscConfig+0x2ee>
 8008b70:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8008b74:	f022 0201 	bic.w	r2, r2, #1
 8008b78:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8008b7c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8008b80:	f022 0204 	bic.w	r2, r2, #4
 8008b84:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1c2      	bne.n	8008b12 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8008b8c:	f7fe faa2 	bl	80070d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b90:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008b94:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008b9a:	079b      	lsls	r3, r3, #30
 8008b9c:	d5c2      	bpl.n	8008b24 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b9e:	f7fe fa99 	bl	80070d4 <HAL_GetTick>
 8008ba2:	1bc0      	subs	r0, r0, r7
 8008ba4:	4548      	cmp	r0, r9
 8008ba6:	d9f6      	bls.n	8008b96 <HAL_RCC_OscConfig+0x37e>
 8008ba8:	e6da      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008baa:	f7fe fa93 	bl	80070d4 <HAL_GetTick>
 8008bae:	1bc0      	subs	r0, r0, r7
 8008bb0:	4548      	cmp	r0, r9
 8008bb2:	d9b3      	bls.n	8008b1c <HAL_RCC_OscConfig+0x304>
 8008bb4:	e6d4      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bb8:	b19b      	cbz	r3, 8008be2 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 8008bba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008bbe:	f043 0301 	orr.w	r3, r3, #1
 8008bc2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008bc6:	f7fe fa85 	bl	80070d4 <HAL_GetTick>
 8008bca:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bcc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008bd0:	0798      	lsls	r0, r3, #30
 8008bd2:	f53f aeb9 	bmi.w	8008948 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bd6:	f7fe fa7d 	bl	80070d4 <HAL_GetTick>
 8008bda:	1bc0      	subs	r0, r0, r7
 8008bdc:	2802      	cmp	r0, #2
 8008bde:	d9f5      	bls.n	8008bcc <HAL_RCC_OscConfig+0x3b4>
 8008be0:	e6be      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8008be2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008be6:	f023 0301 	bic.w	r3, r3, #1
 8008bea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008bee:	f7fe fa71 	bl	80070d4 <HAL_GetTick>
 8008bf2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bf4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008bf8:	0799      	lsls	r1, r3, #30
 8008bfa:	f57f aea5 	bpl.w	8008948 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bfe:	f7fe fa69 	bl	80070d4 <HAL_GetTick>
 8008c02:	1bc0      	subs	r0, r0, r7
 8008c04:	2802      	cmp	r0, #2
 8008c06:	d9f5      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x3dc>
 8008c08:	e6aa      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	f040 808c 	bne.w	8008d28 <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 8008c10:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c12:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008c14:	f003 0103 	and.w	r1, r3, #3
 8008c18:	4291      	cmp	r1, r2
 8008c1a:	d122      	bne.n	8008c62 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c1c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008c1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c22:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c24:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008c28:	d11b      	bne.n	8008c62 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c2a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c30:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008c34:	d115      	bne.n	8008c62 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c36:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8008c38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c3c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8008c40:	d10f      	bne.n	8008c62 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c42:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008c44:	0852      	lsrs	r2, r2, #1
 8008c46:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8008c4a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c4c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008c50:	d107      	bne.n	8008c62 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c52:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008c54:	0852      	lsrs	r2, r2, #1
 8008c56:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008c5a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c5c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008c60:	d049      	beq.n	8008cf6 <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c62:	2e0c      	cmp	r6, #12
 8008c64:	f43f addc 	beq.w	8008820 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	f53f add8 	bmi.w	8008820 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	f53f add4 	bmi.w	8008820 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c7e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8008c80:	f7fe fa28 	bl	80070d4 <HAL_GetTick>
 8008c84:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	019f      	lsls	r7, r3, #6
 8008c8a:	d42e      	bmi.n	8008cea <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c8c:	68e2      	ldr	r2, [r4, #12]
 8008c8e:	4b38      	ldr	r3, [pc, #224]	; (8008d70 <HAL_RCC_OscConfig+0x558>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008c94:	4313      	orrs	r3, r2
 8008c96:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008c98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c9c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008c9e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8008ca2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8008ca4:	3a01      	subs	r2, #1
 8008ca6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008caa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008cac:	0852      	lsrs	r2, r2, #1
 8008cae:	3a01      	subs	r2, #1
 8008cb0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8008cb4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008cb6:	0852      	lsrs	r2, r2, #1
 8008cb8:	3a01      	subs	r2, #1
 8008cba:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008cbe:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cc6:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cc8:	68e3      	ldr	r3, [r4, #12]
 8008cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cce:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8008cd0:	f7fe fa00 	bl	80070d4 <HAL_GetTick>
 8008cd4:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	0198      	lsls	r0, r3, #6
 8008cda:	f53f ae39 	bmi.w	8008950 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cde:	f7fe f9f9 	bl	80070d4 <HAL_GetTick>
 8008ce2:	1b40      	subs	r0, r0, r5
 8008ce4:	2802      	cmp	r0, #2
 8008ce6:	d9f6      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x4be>
 8008ce8:	e63a      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cea:	f7fe f9f3 	bl	80070d4 <HAL_GetTick>
 8008cee:	1b80      	subs	r0, r0, r6
 8008cf0:	2802      	cmp	r0, #2
 8008cf2:	d9c8      	bls.n	8008c86 <HAL_RCC_OscConfig+0x46e>
 8008cf4:	e634      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	0199      	lsls	r1, r3, #6
 8008cfa:	f53f ae29 	bmi.w	8008950 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d04:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d06:	68e3      	ldr	r3, [r4, #12]
 8008d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d0c:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8008d0e:	f7fe f9e1 	bl	80070d4 <HAL_GetTick>
 8008d12:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	019a      	lsls	r2, r3, #6
 8008d18:	f53f ae1a 	bmi.w	8008950 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d1c:	f7fe f9da 	bl	80070d4 <HAL_GetTick>
 8008d20:	1b40      	subs	r0, r0, r5
 8008d22:	2802      	cmp	r0, #2
 8008d24:	d9f6      	bls.n	8008d14 <HAL_RCC_OscConfig+0x4fc>
 8008d26:	e61b      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d28:	2e0c      	cmp	r6, #12
 8008d2a:	f43f ad79 	beq.w	8008820 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d34:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008d3c:	bf02      	ittt	eq
 8008d3e:	68e3      	ldreq	r3, [r4, #12]
 8008d40:	f023 0303 	biceq.w	r3, r3, #3
 8008d44:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d50:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8008d52:	f7fe f9bf 	bl	80070d4 <HAL_GetTick>
 8008d56:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	019b      	lsls	r3, r3, #6
 8008d5c:	f57f adf8 	bpl.w	8008950 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d60:	f7fe f9b8 	bl	80070d4 <HAL_GetTick>
 8008d64:	1b40      	subs	r0, r0, r5
 8008d66:	2802      	cmp	r0, #2
 8008d68:	d9f6      	bls.n	8008d58 <HAL_RCC_OscConfig+0x540>
 8008d6a:	e5f9      	b.n	8008960 <HAL_RCC_OscConfig+0x148>
 8008d6c:	40007000 	.word	0x40007000
 8008d70:	019d800c 	.word	0x019d800c

08008d74 <HAL_RCC_ClockConfig>:
{
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b910      	cbnz	r0, 8008d84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008d7e:	2001      	movs	r0, #1
}
 8008d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d84:	4a6f      	ldr	r2, [pc, #444]	; (8008f44 <HAL_RCC_ClockConfig+0x1d0>)
 8008d86:	6813      	ldr	r3, [r2, #0]
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	428b      	cmp	r3, r1
 8008d8e:	d335      	bcc.n	8008dfc <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d90:	6829      	ldr	r1, [r5, #0]
 8008d92:	f011 0701 	ands.w	r7, r1, #1
 8008d96:	d13c      	bne.n	8008e12 <HAL_RCC_ClockConfig+0x9e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d98:	682a      	ldr	r2, [r5, #0]
 8008d9a:	0791      	lsls	r1, r2, #30
 8008d9c:	f140 80b7 	bpl.w	8008f0e <HAL_RCC_ClockConfig+0x19a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008da0:	4969      	ldr	r1, [pc, #420]	; (8008f48 <HAL_RCC_ClockConfig+0x1d4>)
 8008da2:	68a8      	ldr	r0, [r5, #8]
 8008da4:	688b      	ldr	r3, [r1, #8]
 8008da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008daa:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008dac:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dae:	4965      	ldr	r1, [pc, #404]	; (8008f44 <HAL_RCC_ClockConfig+0x1d0>)
 8008db0:	680b      	ldr	r3, [r1, #0]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	42b3      	cmp	r3, r6
 8008db8:	f200 80b1 	bhi.w	8008f1e <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dbc:	f012 0f04 	tst.w	r2, #4
 8008dc0:	4c61      	ldr	r4, [pc, #388]	; (8008f48 <HAL_RCC_ClockConfig+0x1d4>)
 8008dc2:	f040 80b8 	bne.w	8008f36 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dc6:	0713      	lsls	r3, r2, #28
 8008dc8:	d506      	bpl.n	8008dd8 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dca:	68a3      	ldr	r3, [r4, #8]
 8008dcc:	692a      	ldr	r2, [r5, #16]
 8008dce:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008dd2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008dd6:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008dd8:	f7ff fcd0 	bl	800877c <HAL_RCC_GetSysClockFreq>
 8008ddc:	68a3      	ldr	r3, [r4, #8]
 8008dde:	4a5b      	ldr	r2, [pc, #364]	; (8008f4c <HAL_RCC_ClockConfig+0x1d8>)
 8008de0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008de4:	5cd3      	ldrb	r3, [r2, r3]
 8008de6:	f003 031f 	and.w	r3, r3, #31
 8008dea:	40d8      	lsrs	r0, r3
 8008dec:	4b58      	ldr	r3, [pc, #352]	; (8008f50 <HAL_RCC_ClockConfig+0x1dc>)
 8008dee:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8008df0:	4b58      	ldr	r3, [pc, #352]	; (8008f54 <HAL_RCC_ClockConfig+0x1e0>)
 8008df2:	6818      	ldr	r0, [r3, #0]
}
 8008df4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8008df8:	f7fe b96e 	b.w	80070d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dfc:	6813      	ldr	r3, [r2, #0]
 8008dfe:	f023 030f 	bic.w	r3, r3, #15
 8008e02:	430b      	orrs	r3, r1
 8008e04:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	428b      	cmp	r3, r1
 8008e0e:	d1b6      	bne.n	8008d7e <HAL_RCC_ClockConfig+0xa>
 8008e10:	e7be      	b.n	8008d90 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e12:	686b      	ldr	r3, [r5, #4]
 8008e14:	4c4c      	ldr	r4, [pc, #304]	; (8008f48 <HAL_RCC_ClockConfig+0x1d4>)
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d163      	bne.n	8008ee2 <HAL_RCC_ClockConfig+0x16e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	019b      	lsls	r3, r3, #6
 8008e1e:	d5ae      	bpl.n	8008d7e <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8008e20:	68e3      	ldr	r3, [r4, #12]
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d145      	bne.n	8008eb6 <HAL_RCC_ClockConfig+0x142>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e2a:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008e2c:	4a4a      	ldr	r2, [pc, #296]	; (8008f58 <HAL_RCC_ClockConfig+0x1e4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e2e:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008e30:	bf55      	itete	pl
 8008e32:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e36:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008e38:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e3c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 8008e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e44:	68e3      	ldr	r3, [r4, #12]
 8008e46:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d035      	beq.n	8008eba <HAL_RCC_ClockConfig+0x146>
 8008e4e:	4843      	ldr	r0, [pc, #268]	; (8008f5c <HAL_RCC_ClockConfig+0x1e8>)
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	bf08      	it	eq
 8008e54:	4602      	moveq	r2, r0
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e56:	68e0      	ldr	r0, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e58:	68e3      	ldr	r3, [r4, #12]
 8008e5a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8008e5e:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e60:	68e2      	ldr	r2, [r4, #12]
 8008e62:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e66:	f3c0 1003 	ubfx	r0, r0, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e6a:	3201      	adds	r2, #1
 8008e6c:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e6e:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e70:	fbb3 f3f0 	udiv	r3, r3, r0
  sysclockfreq = pllvco / pllr;
 8008e74:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008e78:	4a39      	ldr	r2, [pc, #228]	; (8008f60 <HAL_RCC_ClockConfig+0x1ec>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d81f      	bhi.n	8008ebe <HAL_RCC_ClockConfig+0x14a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008e7e:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e80:	68a3      	ldr	r3, [r4, #8]
 8008e82:	686a      	ldr	r2, [r5, #4]
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8008e8c:	f7fe f922 	bl	80070d4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e90:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008e94:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e96:	68a3      	ldr	r3, [r4, #8]
 8008e98:	686a      	ldr	r2, [r5, #4]
 8008e9a:	f003 030c 	and.w	r3, r3, #12
 8008e9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008ea2:	f43f af79 	beq.w	8008d98 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ea6:	f7fe f915 	bl	80070d4 <HAL_GetTick>
 8008eaa:	eba0 0008 	sub.w	r0, r0, r8
 8008eae:	4548      	cmp	r0, r9
 8008eb0:	d9f1      	bls.n	8008e96 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8008eb2:	2003      	movs	r0, #3
 8008eb4:	e764      	b.n	8008d80 <HAL_RCC_ClockConfig+0xc>
  uint32_t msirange = 0U;
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	e7c4      	b.n	8008e44 <HAL_RCC_ClockConfig+0xd0>
    pllvco = HSI_VALUE;
 8008eba:	4a2a      	ldr	r2, [pc, #168]	; (8008f64 <HAL_RCC_ClockConfig+0x1f0>)
 8008ebc:	e7cb      	b.n	8008e56 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008ebe:	68a3      	ldr	r3, [r4, #8]
 8008ec0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8008ec4:	d107      	bne.n	8008ed6 <HAL_RCC_ClockConfig+0x162>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed0:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008ed2:	2780      	movs	r7, #128	; 0x80
 8008ed4:	e7d4      	b.n	8008e80 <HAL_RCC_ClockConfig+0x10c>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8008ed6:	0788      	lsls	r0, r1, #30
 8008ed8:	d5d1      	bpl.n	8008e7e <HAL_RCC_ClockConfig+0x10a>
 8008eda:	68ab      	ldr	r3, [r5, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1ce      	bne.n	8008e7e <HAL_RCC_ClockConfig+0x10a>
 8008ee0:	e7f1      	b.n	8008ec6 <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d10a      	bne.n	8008efc <HAL_RCC_ClockConfig+0x188>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008eec:	f43f af47 	beq.w	8008d7e <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008ef0:	f7ff fc44 	bl	800877c <HAL_RCC_GetSysClockFreq>
 8008ef4:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <HAL_RCC_ClockConfig+0x1ec>)
 8008ef6:	4298      	cmp	r0, r3
 8008ef8:	d9c1      	bls.n	8008e7e <HAL_RCC_ClockConfig+0x10a>
 8008efa:	e7e4      	b.n	8008ec6 <HAL_RCC_ClockConfig+0x152>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008efc:	b91b      	cbnz	r3, 8008f06 <HAL_RCC_ClockConfig+0x192>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	f013 0f02 	tst.w	r3, #2
 8008f04:	e7f2      	b.n	8008eec <HAL_RCC_ClockConfig+0x178>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008f0c:	e7ee      	b.n	8008eec <HAL_RCC_ClockConfig+0x178>
    if(hpre == RCC_SYSCLK_DIV2)
 8008f0e:	2f80      	cmp	r7, #128	; 0x80
 8008f10:	f47f af4d 	bne.w	8008dae <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f14:	490c      	ldr	r1, [pc, #48]	; (8008f48 <HAL_RCC_ClockConfig+0x1d4>)
 8008f16:	688b      	ldr	r3, [r1, #8]
 8008f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f1c:	e746      	b.n	8008dac <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f1e:	680b      	ldr	r3, [r1, #0]
 8008f20:	f023 030f 	bic.w	r3, r3, #15
 8008f24:	4333      	orrs	r3, r6
 8008f26:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f28:	680b      	ldr	r3, [r1, #0]
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	42b3      	cmp	r3, r6
 8008f30:	f47f af25 	bne.w	8008d7e <HAL_RCC_ClockConfig+0xa>
 8008f34:	e742      	b.n	8008dbc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f36:	68a3      	ldr	r3, [r4, #8]
 8008f38:	68e9      	ldr	r1, [r5, #12]
 8008f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	e740      	b.n	8008dc6 <HAL_RCC_ClockConfig+0x52>
 8008f44:	40022000 	.word	0x40022000
 8008f48:	40021000 	.word	0x40021000
 8008f4c:	0800e988 	.word	0x0800e988
 8008f50:	2009e2a8 	.word	0x2009e2a8
 8008f54:	2009e2ac 	.word	0x2009e2ac
 8008f58:	0800e9a0 	.word	0x0800e9a0
 8008f5c:	007a1200 	.word	0x007a1200
 8008f60:	04c4b400 	.word	0x04c4b400
 8008f64:	00f42400 	.word	0x00f42400

08008f68 <HAL_RCC_GetHCLKFreq>:
}
 8008f68:	4b01      	ldr	r3, [pc, #4]	; (8008f70 <HAL_RCC_GetHCLKFreq+0x8>)
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	2009e2a8 	.word	0x2009e2a8

08008f74 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008f74:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8008f76:	4a06      	ldr	r2, [pc, #24]	; (8008f90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008f7e:	5cd3      	ldrb	r3, [r2, r3]
 8008f80:	4a04      	ldr	r2, [pc, #16]	; (8008f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f82:	6810      	ldr	r0, [r2, #0]
 8008f84:	f003 031f 	and.w	r3, r3, #31
}
 8008f88:	40d8      	lsrs	r0, r3
 8008f8a:	4770      	bx	lr
 8008f8c:	40021000 	.word	0x40021000
 8008f90:	0800e998 	.word	0x0800e998
 8008f94:	2009e2a8 	.word	0x2009e2a8

08008f98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8008f9a:	4a06      	ldr	r2, [pc, #24]	; (8008fb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008fa2:	5cd3      	ldrb	r3, [r2, r3]
 8008fa4:	4a04      	ldr	r2, [pc, #16]	; (8008fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fa6:	6810      	ldr	r0, [r2, #0]
 8008fa8:	f003 031f 	and.w	r3, r3, #31
}
 8008fac:	40d8      	lsrs	r0, r3
 8008fae:	4770      	bx	lr
 8008fb0:	40021000 	.word	0x40021000
 8008fb4:	0800e998 	.word	0x0800e998
 8008fb8:	2009e2a8 	.word	0x2009e2a8

08008fbc <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8008fbc:	233f      	movs	r3, #63	; 0x3f
 8008fbe:	6003      	str	r3, [r0, #0]
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8008fc0:	4b2e      	ldr	r3, [pc, #184]	; (800907c <HAL_RCC_GetOscConfig+0xc0>)
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	0351      	lsls	r1, r2, #13
 8008fc6:	d54a      	bpl.n	800905e <HAL_RCC_GetOscConfig+0xa2>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8008fc8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8008fcc:	6042      	str	r2, [r0, #4]
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	f002 0201 	and.w	r2, r2, #1
 8008fd4:	6182      	str	r2, [r0, #24]
  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008fdc:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008fe4:	6202      	str	r2, [r0, #32]
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 8008fe6:	681a      	ldr	r2, [r3, #0]
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8008fe8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008fec:	60c2      	str	r2, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	f3c2 6206 	ubfx	r2, r2, #24, #7
 8008ff4:	6102      	str	r2, [r0, #16]
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8008ff6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008ffa:	0752      	lsls	r2, r2, #29
 8008ffc:	d536      	bpl.n	800906c <HAL_RCC_GetOscConfig+0xb0>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8008ffe:	2205      	movs	r2, #5
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8009000:	6082      	str	r2, [r0, #8]
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8009002:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009006:	f002 0201 	and.w	r2, r2, #1
 800900a:	6142      	str	r2, [r0, #20]
  if(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON) == RCC_CRRCR_HSI48ON)
 800900c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009010:	f002 0201 	and.w	r2, r2, #1
 8009014:	6242      	str	r2, [r0, #36]	; 0x24
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8009016:	681a      	ldr	r2, [r3, #0]
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8009018:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800901c:	bf14      	ite	ne
 800901e:	2202      	movne	r2, #2
 8009020:	2201      	moveq	r2, #1
 8009022:	6282      	str	r2, [r0, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	f002 0203 	and.w	r2, r2, #3
 800902a:	62c2      	str	r2, [r0, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8009032:	3201      	adds	r2, #1
 8009034:	6302      	str	r2, [r0, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800903c:	6342      	str	r2, [r0, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	f3c2 5241 	ubfx	r2, r2, #21, #2
 8009044:	3201      	adds	r2, #1
 8009046:	0052      	lsls	r2, r2, #1
 8009048:	63c2      	str	r2, [r0, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8009050:	3201      	adds	r2, #1
 8009052:	0052      	lsls	r2, r2, #1
 8009054:	6402      	str	r2, [r0, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLP = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	0edb      	lsrs	r3, r3, #27
 800905a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800905c:	4770      	bx	lr
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8009064:	bf18      	it	ne
 8009066:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 800906a:	e7af      	b.n	8008fcc <HAL_RCC_GetOscConfig+0x10>
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800906c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009070:	f012 0201 	ands.w	r2, r2, #1
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8009074:	bf18      	it	ne
 8009076:	2201      	movne	r2, #1
 8009078:	e7c2      	b.n	8009000 <HAL_RCC_GetOscConfig+0x44>
 800907a:	bf00      	nop
 800907c:	40021000 	.word	0x40021000

08009080 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009080:	230f      	movs	r3, #15
 8009082:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009084:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <HAL_RCC_GetClockConfig+0x34>)
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	f002 0203 	and.w	r2, r2, #3
 800908c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009094:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800909c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	08db      	lsrs	r3, r3, #3
 80090a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090a6:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80090a8:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <HAL_RCC_GetClockConfig+0x38>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	600b      	str	r3, [r1, #0]
}
 80090b2:	4770      	bx	lr
 80090b4:	40021000 	.word	0x40021000
 80090b8:	40022000 	.word	0x40022000

080090bc <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80090bc:	4a02      	ldr	r2, [pc, #8]	; (80090c8 <HAL_RCC_EnableCSS+0xc>)
 80090be:	6813      	ldr	r3, [r2, #0]
 80090c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090c4:	6013      	str	r3, [r2, #0]
}
 80090c6:	4770      	bx	lr
 80090c8:	40021000 	.word	0x40021000

080090cc <HAL_RCC_CSSCallback>:
}
 80090cc:	4770      	bx	lr
	...

080090d0 <HAL_RCC_NMI_IRQHandler>:
{
 80090d0:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80090d2:	4c05      	ldr	r4, [pc, #20]	; (80090e8 <HAL_RCC_NMI_IRQHandler+0x18>)
 80090d4:	69e3      	ldr	r3, [r4, #28]
 80090d6:	05db      	lsls	r3, r3, #23
 80090d8:	d504      	bpl.n	80090e4 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 80090da:	f7ff fff7 	bl	80090cc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80090de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e2:	6223      	str	r3, [r4, #32]
}
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	bf00      	nop
 80090e8:	40021000 	.word	0x40021000

080090ec <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80090ec:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80090f0:	4a3d      	ldr	r2, [pc, #244]	; (80091e8 <RCCEx_GetSAIxPeriphCLKFreq+0xfc>)
 80090f2:	d108      	bne.n	8009106 <RCCEx_GetSAIxPeriphCLKFreq+0x1a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80090f4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80090f8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80090fc:	2b60      	cmp	r3, #96	; 0x60
 80090fe:	d12d      	bne.n	800915c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009100:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8009104:	4770      	bx	lr
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009106:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800910a:	d12a      	bne.n	8009162 <RCCEx_GetSAIxPeriphCLKFreq+0x76>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800910c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009118:	d0f2      	beq.n	8009100 <RCCEx_GetSAIxPeriphCLKFreq+0x14>
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800911a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800911e:	d15c      	bne.n	80091da <RCCEx_GetSAIxPeriphCLKFreq+0xee>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009120:	6810      	ldr	r0, [r2, #0]
 8009122:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009126:	d05d      	beq.n	80091e4 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
 8009128:	68d0      	ldr	r0, [r2, #12]
 800912a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800912e:	d059      	beq.n	80091e4 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009130:	68d0      	ldr	r0, [r2, #12]
 8009132:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8009136:	3001      	adds	r0, #1
 8009138:	fbb1 f0f0 	udiv	r0, r1, r0
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800913c:	68d1      	ldr	r1, [r2, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800913e:	68d3      	ldr	r3, [r2, #12]
#endif
        if(pllp == 0U)
 8009140:	0edb      	lsrs	r3, r3, #27
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009142:	f3c1 2106 	ubfx	r1, r1, #8, #7
        if(pllp == 0U)
 8009146:	d105      	bne.n	8009154 <RCCEx_GetSAIxPeriphCLKFreq+0x68>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009148:	68d3      	ldr	r3, [r2, #12]
          {
            pllp = 17U;
          }
          else
          {
            pllp = 7U;
 800914a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800914e:	bf14      	ite	ne
 8009150:	2311      	movne	r3, #17
 8009152:	2307      	moveq	r3, #7
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009154:	4348      	muls	r0, r1
 8009156:	fbb0 f0f3 	udiv	r0, r0, r3
 800915a:	4770      	bx	lr
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	d0df      	beq.n	8009120 <RCCEx_GetSAIxPeriphCLKFreq+0x34>
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009160:	b9ab      	cbnz	r3, 800918e <RCCEx_GetSAIxPeriphCLKFreq+0xa2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009162:	6810      	ldr	r0, [r2, #0]
 8009164:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009168:	d03c      	beq.n	80091e4 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
 800916a:	6910      	ldr	r0, [r2, #16]
 800916c:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8009170:	d038      	beq.n	80091e4 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009172:	6913      	ldr	r3, [r2, #16]
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009174:	6910      	ldr	r0, [r2, #16]
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009176:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800917a:	3301      	adds	r3, #1
 800917c:	fbb1 f1f3 	udiv	r1, r1, r3
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8009180:	6913      	ldr	r3, [r2, #16]
        if(pllp == 0U)
 8009182:	0edb      	lsrs	r3, r3, #27
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009184:	f3c0 2006 	ubfx	r0, r0, #8, #7
        if(pllp == 0U)
 8009188:	d1e4      	bne.n	8009154 <RCCEx_GetSAIxPeriphCLKFreq+0x68>
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800918a:	6913      	ldr	r3, [r2, #16]
 800918c:	e7dd      	b.n	800914a <RCCEx_GetSAIxPeriphCLKFreq+0x5e>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800918e:	2b80      	cmp	r3, #128	; 0x80
 8009190:	d106      	bne.n	80091a0 <RCCEx_GetSAIxPeriphCLKFreq+0xb4>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009192:	6810      	ldr	r0, [r2, #0]
        frequency = HSI_VALUE;
 8009194:	4b15      	ldr	r3, [pc, #84]	; (80091ec <RCCEx_GetSAIxPeriphCLKFreq+0x100>)
 8009196:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800919a:	bf18      	it	ne
 800919c:	4618      	movne	r0, r3
 800919e:	4770      	bx	lr
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d002      	beq.n	80091aa <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
 80091a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a8:	d115      	bne.n	80091d6 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80091aa:	6810      	ldr	r0, [r2, #0]
 80091ac:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80091b0:	d018      	beq.n	80091e4 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
 80091b2:	6950      	ldr	r0, [r2, #20]
 80091b4:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 80091b8:	d014      	beq.n	80091e4 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80091ba:	6953      	ldr	r3, [r2, #20]
 80091bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80091c0:	3301      	adds	r3, #1
 80091c2:	fbb1 f0f3 	udiv	r0, r1, r3
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80091c6:	6951      	ldr	r1, [r2, #20]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80091c8:	6953      	ldr	r3, [r2, #20]
        if(pllp == 0U)
 80091ca:	0edb      	lsrs	r3, r3, #27
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80091cc:	f3c1 2106 	ubfx	r1, r1, #8, #7
        if(pllp == 0U)
 80091d0:	d1c0      	bne.n	8009154 <RCCEx_GetSAIxPeriphCLKFreq+0x68>
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80091d2:	6953      	ldr	r3, [r2, #20]
 80091d4:	e7b9      	b.n	800914a <RCCEx_GetSAIxPeriphCLKFreq+0x5e>
 80091d6:	2000      	movs	r0, #0
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80091d8:	4770      	bx	lr
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0c1      	beq.n	8009162 <RCCEx_GetSAIxPeriphCLKFreq+0x76>
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80091de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091e2:	e7d5      	b.n	8009190 <RCCEx_GetSAIxPeriphCLKFreq+0xa4>
}
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40021000 	.word	0x40021000
 80091ec:	00f42400 	.word	0x00f42400

080091f0 <RCCEx_PLLSAI1_Config>:
{
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80091f2:	4c3c      	ldr	r4, [pc, #240]	; (80092e4 <RCCEx_PLLSAI1_Config+0xf4>)
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80091f4:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80091f6:	68e2      	ldr	r2, [r4, #12]
{
 80091f8:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80091fa:	0790      	lsls	r0, r2, #30
{
 80091fc:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80091fe:	d023      	beq.n	8009248 <RCCEx_PLLSAI1_Config+0x58>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009200:	68e2      	ldr	r2, [r4, #12]
 8009202:	f002 0203 	and.w	r2, r2, #3
 8009206:	429a      	cmp	r2, r3
 8009208:	d16a      	bne.n	80092e0 <RCCEx_PLLSAI1_Config+0xf0>
       ||
 800920a:	2a00      	cmp	r2, #0
 800920c:	d068      	beq.n	80092e0 <RCCEx_PLLSAI1_Config+0xf0>
    __HAL_RCC_PLLSAI1_DISABLE();
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009214:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009216:	f7fd ff5d 	bl	80070d4 <HAL_GetTick>
 800921a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	011a      	lsls	r2, r3, #4
 8009220:	d42d      	bmi.n	800927e <RCCEx_PLLSAI1_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009222:	68ab      	ldr	r3, [r5, #8]
 8009224:	021e      	lsls	r6, r3, #8
 8009226:	686b      	ldr	r3, [r5, #4]
 8009228:	3b01      	subs	r3, #1
 800922a:	0118      	lsls	r0, r3, #4
      if(Divider == DIVIDER_P_UPDATE)
 800922c:	b377      	cbz	r7, 800928c <RCCEx_PLLSAI1_Config+0x9c>
      else if(Divider == DIVIDER_Q_UPDATE)
 800922e:	2f01      	cmp	r7, #1
 8009230:	d145      	bne.n	80092be <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009232:	692b      	ldr	r3, [r5, #16]
 8009234:	6927      	ldr	r7, [r4, #16]
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	1e59      	subs	r1, r3, #1
 800923a:	4b2b      	ldr	r3, [pc, #172]	; (80092e8 <RCCEx_PLLSAI1_Config+0xf8>)
 800923c:	403b      	ands	r3, r7
 800923e:	4333      	orrs	r3, r6
 8009240:	4303      	orrs	r3, r0
 8009242:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8009246:	e029      	b.n	800929c <RCCEx_PLLSAI1_Config+0xac>
    switch(PllSai1->PLLSAI1Source)
 8009248:	2b02      	cmp	r3, #2
 800924a:	d00d      	beq.n	8009268 <RCCEx_PLLSAI1_Config+0x78>
 800924c:	2b03      	cmp	r3, #3
 800924e:	d00f      	beq.n	8009270 <RCCEx_PLLSAI1_Config+0x80>
 8009250:	2b01      	cmp	r3, #1
 8009252:	d145      	bne.n	80092e0 <RCCEx_PLLSAI1_Config+0xf0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009254:	6822      	ldr	r2, [r4, #0]
 8009256:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800925a:	d041      	beq.n	80092e0 <RCCEx_PLLSAI1_Config+0xf0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800925c:	68e0      	ldr	r0, [r4, #12]
 800925e:	f020 0003 	bic.w	r0, r0, #3
 8009262:	4318      	orrs	r0, r3
 8009264:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8009266:	e7d2      	b.n	800920e <RCCEx_PLLSAI1_Config+0x1e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800926e:	e7f4      	b.n	800925a <RCCEx_PLLSAI1_Config+0x6a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	0391      	lsls	r1, r2, #14
 8009274:	d4f2      	bmi.n	800925c <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009276:	6822      	ldr	r2, [r4, #0]
 8009278:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800927c:	e7ed      	b.n	800925a <RCCEx_PLLSAI1_Config+0x6a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800927e:	f7fd ff29 	bl	80070d4 <HAL_GetTick>
 8009282:	1b80      	subs	r0, r0, r6
 8009284:	2802      	cmp	r0, #2
 8009286:	d9c9      	bls.n	800921c <RCCEx_PLLSAI1_Config+0x2c>
        status = HAL_TIMEOUT;
 8009288:	2003      	movs	r0, #3
}
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800928c:	68e9      	ldr	r1, [r5, #12]
 800928e:	6922      	ldr	r2, [r4, #16]
 8009290:	ea46 63c1 	orr.w	r3, r6, r1, lsl #27
 8009294:	4915      	ldr	r1, [pc, #84]	; (80092ec <RCCEx_PLLSAI1_Config+0xfc>)
 8009296:	4011      	ands	r1, r2
 8009298:	430b      	orrs	r3, r1
 800929a:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800929c:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092a4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80092a6:	f7fd ff15 	bl	80070d4 <HAL_GetTick>
 80092aa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	d510      	bpl.n	80092d4 <RCCEx_PLLSAI1_Config+0xe4>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	69aa      	ldr	r2, [r5, #24]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	2000      	movs	r0, #0
  return status;
 80092bc:	e7e5      	b.n	800928a <RCCEx_PLLSAI1_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80092be:	696b      	ldr	r3, [r5, #20]
 80092c0:	6921      	ldr	r1, [r4, #16]
 80092c2:	085b      	lsrs	r3, r3, #1
 80092c4:	1e5a      	subs	r2, r3, #1
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <RCCEx_PLLSAI1_Config+0x100>)
 80092c8:	400b      	ands	r3, r1
 80092ca:	4333      	orrs	r3, r6
 80092cc:	4303      	orrs	r3, r0
 80092ce:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80092d2:	e7e3      	b.n	800929c <RCCEx_PLLSAI1_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092d4:	f7fd fefe 	bl	80070d4 <HAL_GetTick>
 80092d8:	1b80      	subs	r0, r0, r6
 80092da:	2802      	cmp	r0, #2
 80092dc:	d9e6      	bls.n	80092ac <RCCEx_PLLSAI1_Config+0xbc>
 80092de:	e7d3      	b.n	8009288 <RCCEx_PLLSAI1_Config+0x98>
      status = HAL_ERROR;
 80092e0:	2001      	movs	r0, #1
 80092e2:	e7d2      	b.n	800928a <RCCEx_PLLSAI1_Config+0x9a>
 80092e4:	40021000 	.word	0x40021000
 80092e8:	ff9f800f 	.word	0xff9f800f
 80092ec:	07ff800f 	.word	0x07ff800f
 80092f0:	f9ff800f 	.word	0xf9ff800f

080092f4 <RCCEx_PLLSAI2_Config.constprop.0>:
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 80092f4:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092f6:	4c2f      	ldr	r4, [pc, #188]	; (80093b4 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>)
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80092f8:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092fa:	68e2      	ldr	r2, [r4, #12]
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 80092fc:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80092fe:	0790      	lsls	r0, r2, #30
 8009300:	d026      	beq.n	8009350 <RCCEx_PLLSAI2_Config.constprop.0+0x5c>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009302:	68e2      	ldr	r2, [r4, #12]
 8009304:	f002 0203 	and.w	r2, r2, #3
 8009308:	429a      	cmp	r2, r3
 800930a:	d151      	bne.n	80093b0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
       ||
 800930c:	2a00      	cmp	r2, #0
 800930e:	d04f      	beq.n	80093b0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
    __HAL_RCC_PLLSAI2_DISABLE();
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009316:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009318:	f7fd fedc 	bl	80070d4 <HAL_GetTick>
 800931c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	009a      	lsls	r2, r3, #2
 8009322:	d430      	bmi.n	8009386 <RCCEx_PLLSAI2_Config.constprop.0+0x92>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009324:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009328:	06db      	lsls	r3, r3, #27
 800932a:	6961      	ldr	r1, [r4, #20]
 800932c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009330:	4a21      	ldr	r2, [pc, #132]	; (80093b8 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>)
 8009332:	400a      	ands	r2, r1
 8009334:	4313      	orrs	r3, r2
 8009336:	686a      	ldr	r2, [r5, #4]
 8009338:	3a01      	subs	r2, #1
 800933a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800933e:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009346:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8009348:	f7fd fec4 	bl	80070d4 <HAL_GetTick>
 800934c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800934e:	e026      	b.n	800939e <RCCEx_PLLSAI2_Config.constprop.0+0xaa>
    switch(PllSai2->PLLSAI2Source)
 8009350:	2b02      	cmp	r3, #2
 8009352:	d00d      	beq.n	8009370 <RCCEx_PLLSAI2_Config.constprop.0+0x7c>
 8009354:	2b03      	cmp	r3, #3
 8009356:	d00f      	beq.n	8009378 <RCCEx_PLLSAI2_Config.constprop.0+0x84>
 8009358:	2b01      	cmp	r3, #1
 800935a:	d129      	bne.n	80093b0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009362:	d025      	beq.n	80093b0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009364:	68e0      	ldr	r0, [r4, #12]
 8009366:	f020 0003 	bic.w	r0, r0, #3
 800936a:	4318      	orrs	r0, r3
 800936c:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800936e:	e7cf      	b.n	8009310 <RCCEx_PLLSAI2_Config.constprop.0+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009370:	6822      	ldr	r2, [r4, #0]
 8009372:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8009376:	e7f4      	b.n	8009362 <RCCEx_PLLSAI2_Config.constprop.0+0x6e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	0391      	lsls	r1, r2, #14
 800937c:	d4f2      	bmi.n	8009364 <RCCEx_PLLSAI2_Config.constprop.0+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800937e:	6822      	ldr	r2, [r4, #0]
 8009380:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8009384:	e7ed      	b.n	8009362 <RCCEx_PLLSAI2_Config.constprop.0+0x6e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009386:	f7fd fea5 	bl	80070d4 <HAL_GetTick>
 800938a:	1b80      	subs	r0, r0, r6
 800938c:	2802      	cmp	r0, #2
 800938e:	d9c6      	bls.n	800931e <RCCEx_PLLSAI2_Config.constprop.0+0x2a>
        status = HAL_TIMEOUT;
 8009390:	2003      	movs	r0, #3
}
 8009392:	bd70      	pop	{r4, r5, r6, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009394:	f7fd fe9e 	bl	80070d4 <HAL_GetTick>
 8009398:	1b80      	subs	r0, r0, r6
 800939a:	2802      	cmp	r0, #2
 800939c:	d8f8      	bhi.n	8009390 <RCCEx_PLLSAI2_Config.constprop.0+0x9c>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	d5f7      	bpl.n	8009394 <RCCEx_PLLSAI2_Config.constprop.0+0xa0>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80093a4:	6963      	ldr	r3, [r4, #20]
 80093a6:	69aa      	ldr	r2, [r5, #24]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	6163      	str	r3, [r4, #20]
 80093ac:	2000      	movs	r0, #0
  return status;
 80093ae:	e7f0      	b.n	8009392 <RCCEx_PLLSAI2_Config.constprop.0+0x9e>
      status = HAL_ERROR;
 80093b0:	2001      	movs	r0, #1
 80093b2:	e7ee      	b.n	8009392 <RCCEx_PLLSAI2_Config.constprop.0+0x9e>
 80093b4:	40021000 	.word	0x40021000
 80093b8:	07ff800f 	.word	0x07ff800f

080093bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80093bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80093c0:	6806      	ldr	r6, [r0, #0]
 80093c2:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80093c6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80093c8:	d007      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x1e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80093ca:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80093cc:	2940      	cmp	r1, #64	; 0x40
 80093ce:	d022      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80093d0:	d812      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80093d2:	b331      	cbz	r1, 8009422 <HAL_RCCEx_PeriphCLKConfig+0x66>
 80093d4:	2920      	cmp	r1, #32
 80093d6:	d02b      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80093d8:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	04db      	lsls	r3, r3, #19
 80093de:	d509      	bpl.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->Sai2ClockSelection)
 80093e0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80093e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80093e6:	d02f      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80093e8:	d826      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80093ea:	b399      	cbz	r1, 8009454 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80093ec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80093f0:	d073      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80093f2:	2601      	movs	r6, #1
 80093f4:	4635      	mov	r5, r6
 80093f6:	e03c      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch(PeriphClkInit->Sai1ClockSelection)
 80093f8:	2960      	cmp	r1, #96	; 0x60
 80093fa:	d001      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80093fc:	2980      	cmp	r1, #128	; 0x80
 80093fe:	d1eb      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009400:	4a3b      	ldr	r2, [pc, #236]	; (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009402:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009404:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009408:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800940c:	430b      	orrs	r3, r1
 800940e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009412:	2600      	movs	r6, #0
 8009414:	e7e1      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009416:	4a36      	ldr	r2, [pc, #216]	; (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009418:	68d3      	ldr	r3, [r2, #12]
 800941a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800941e:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8009420:	e7ee      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009422:	3004      	adds	r0, #4
 8009424:	f7ff fee4 	bl	80091f0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009428:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800942a:	2800      	cmp	r0, #0
 800942c:	d1d5      	bne.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800942e:	e7e7      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x44>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009430:	3020      	adds	r0, #32
 8009432:	f7ff ff5f 	bl	80092f4 <RCCEx_PLLSAI2_Config.constprop.0>
 8009436:	e7f7      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8009438:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800943c:	d002      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800943e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009442:	d1d6      	bne.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8009444:	4635      	mov	r5, r6
 8009446:	e009      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009448:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800944a:	68d3      	ldr	r3, [r2, #12]
 800944c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009450:	60d3      	str	r3, [r2, #12]
      break;
 8009452:	e7f7      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009454:	1d20      	adds	r0, r4, #4
 8009456:	f7ff fecb 	bl	80091f0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800945a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800945c:	2d00      	cmp	r5, #0
 800945e:	d141      	bne.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009460:	4a23      	ldr	r2, [pc, #140]	; (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009462:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009464:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009468:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800946c:	430b      	orrs	r3, r1
 800946e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	039f      	lsls	r7, r3, #14
 8009476:	f140 817d 	bpl.w	8009774 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800947a:	4f1d      	ldr	r7, [pc, #116]	; (80094f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800947c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800947e:	00d8      	lsls	r0, r3, #3
 8009480:	d432      	bmi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009488:	65bb      	str	r3, [r7, #88]	; 0x58
 800948a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800948c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009494:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009498:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80094f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800949c:	f8d9 3000 	ldr.w	r3, [r9]
 80094a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a4:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80094a8:	f7fd fe14 	bl	80070d4 <HAL_GetTick>
 80094ac:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80094ae:	f8d9 3000 	ldr.w	r3, [r9]
 80094b2:	05d9      	lsls	r1, r3, #23
 80094b4:	d520      	bpl.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 80094b6:	bb35      	cbnz	r5, 8009506 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80094b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80094bc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80094c0:	f040 812e 	bne.w	8009720 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094c8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80094cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094d6:	4635      	mov	r5, r6
 80094d8:	e015      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80094da:	f104 0020 	add.w	r0, r4, #32
 80094de:	f7ff ff09 	bl	80092f4 <RCCEx_PLLSAI2_Config.constprop.0>
 80094e2:	e7ba      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80094e4:	462e      	mov	r6, r5
 80094e6:	e7c4      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    FlagStatus       pwrclkchanged = RESET;
 80094e8:	f04f 0800 	mov.w	r8, #0
 80094ec:	e7d4      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80094ee:	bf00      	nop
 80094f0:	40021000 	.word	0x40021000
 80094f4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f8:	f7fd fdec 	bl	80070d4 <HAL_GetTick>
 80094fc:	eba0 000a 	sub.w	r0, r0, sl
 8009500:	2802      	cmp	r0, #2
 8009502:	d9d4      	bls.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xf2>
        ret = HAL_TIMEOUT;
 8009504:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8009506:	f1b8 0f00 	cmp.w	r8, #0
 800950a:	d003      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 800950c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800950e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009512:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	07d8      	lsls	r0, r3, #31
 8009518:	d508      	bpl.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800951a:	49b2      	ldr	r1, [pc, #712]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800951c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800951e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009522:	f022 0203 	bic.w	r2, r2, #3
 8009526:	4302      	orrs	r2, r0
 8009528:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800952c:	0799      	lsls	r1, r3, #30
 800952e:	d508      	bpl.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009530:	49ac      	ldr	r1, [pc, #688]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8009532:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8009534:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009538:	f022 020c 	bic.w	r2, r2, #12
 800953c:	4302      	orrs	r2, r0
 800953e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009542:	075a      	lsls	r2, r3, #29
 8009544:	d508      	bpl.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009546:	49a7      	ldr	r1, [pc, #668]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8009548:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800954a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800954e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009552:	4302      	orrs	r2, r0
 8009554:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009558:	071f      	lsls	r7, r3, #28
 800955a:	d508      	bpl.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800955c:	49a1      	ldr	r1, [pc, #644]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800955e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009560:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009564:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009568:	4302      	orrs	r2, r0
 800956a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800956e:	06de      	lsls	r6, r3, #27
 8009570:	d508      	bpl.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009572:	499c      	ldr	r1, [pc, #624]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8009574:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009576:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800957a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800957e:	4302      	orrs	r2, r0
 8009580:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009584:	0698      	lsls	r0, r3, #26
 8009586:	d508      	bpl.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009588:	4996      	ldr	r1, [pc, #600]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800958a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800958c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8009590:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009594:	4302      	orrs	r2, r0
 8009596:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800959a:	0599      	lsls	r1, r3, #22
 800959c:	d508      	bpl.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800959e:	4991      	ldr	r1, [pc, #580]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80095a0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80095a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095a6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80095aa:	4302      	orrs	r2, r0
 80095ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80095b0:	055a      	lsls	r2, r3, #21
 80095b2:	d508      	bpl.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095b4:	498b      	ldr	r1, [pc, #556]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80095b6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80095b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80095c0:	4302      	orrs	r2, r0
 80095c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095c6:	065f      	lsls	r7, r3, #25
 80095c8:	d508      	bpl.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095ca:	4986      	ldr	r1, [pc, #536]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80095cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80095d6:	4302      	orrs	r2, r0
 80095d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095dc:	061e      	lsls	r6, r3, #24
 80095de:	d508      	bpl.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80095e0:	4980      	ldr	r1, [pc, #512]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80095e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095e8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80095ec:	4302      	orrs	r2, r0
 80095ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095f2:	05d8      	lsls	r0, r3, #23
 80095f4:	d508      	bpl.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095f6:	497b      	ldr	r1, [pc, #492]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80095f8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80095fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80095fe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009602:	4302      	orrs	r2, r0
 8009604:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009608:	02d9      	lsls	r1, r3, #11
 800960a:	d508      	bpl.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800960c:	4975      	ldr	r1, [pc, #468]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800960e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009610:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8009614:	f022 0203 	bic.w	r2, r2, #3
 8009618:	4302      	orrs	r2, r0
 800961a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800961e:	049a      	lsls	r2, r3, #18
 8009620:	d510      	bpl.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009622:	4a70      	ldr	r2, [pc, #448]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8009624:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009626:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800962a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800962e:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009630:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009638:	f040 809e 	bne.w	8009778 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800963c:	68d3      	ldr	r3, [r2, #12]
 800963e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009642:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	031b      	lsls	r3, r3, #12
 8009648:	d50f      	bpl.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800964a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800964c:	4b65      	ldr	r3, [pc, #404]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800964e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8009652:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009656:	f040 809b 	bne.w	8009790 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800965a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800965e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009668:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	035f      	lsls	r7, r3, #13
 800966e:	d510      	bpl.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009670:	4a5c      	ldr	r2, [pc, #368]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8009672:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009674:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009678:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800967c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800967e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009686:	f040 80a1 	bne.w	80097cc <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800968a:	68d3      	ldr	r3, [r2, #12]
 800968c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009690:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	045e      	lsls	r6, r3, #17
 8009696:	d513      	bpl.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009698:	4952      	ldr	r1, [pc, #328]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800969a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800969e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80096a2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80096a6:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80096a8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80096b0:	d106      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80096b2:	2102      	movs	r1, #2
 80096b4:	1d20      	adds	r0, r4, #4
 80096b6:	f7ff fd9b 	bl	80091f0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80096ba:	2800      	cmp	r0, #0
 80096bc:	bf18      	it	ne
 80096be:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096c0:	6822      	ldr	r2, [r4, #0]
 80096c2:	03d0      	lsls	r0, r2, #15
 80096c4:	d509      	bpl.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096c6:	4947      	ldr	r1, [pc, #284]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80096c8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80096cc:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 80096d0:	f023 0304 	bic.w	r3, r3, #4
 80096d4:	4303      	orrs	r3, r0
 80096d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80096da:	0291      	lsls	r1, r2, #10
 80096dc:	d509      	bpl.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80096de:	4941      	ldr	r1, [pc, #260]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80096e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80096e4:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 80096e8:	f023 0318 	bic.w	r3, r3, #24
 80096ec:	4303      	orrs	r3, r0
 80096ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80096f2:	01d3      	lsls	r3, r2, #7
 80096f4:	d510      	bpl.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80096f6:	4a3b      	ldr	r2, [pc, #236]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80096f8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80096fc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8009700:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009704:	430b      	orrs	r3, r1
 8009706:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800970a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800970e:	bf02      	ittt	eq
 8009710:	68d3      	ldreq	r3, [r2, #12]
 8009712:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8009716:	60d3      	streq	r3, [r2, #12]
}
 8009718:	4628      	mov	r0, r5
 800971a:	b002      	add	sp, #8
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009720:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009724:	429a      	cmp	r2, r3
 8009726:	f43f aecd 	beq.w	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800972a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800972e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800973a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800973e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009746:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800974c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009750:	f57f aeb8 	bpl.w	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8009754:	f7fd fcbe 	bl	80070d4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009758:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800975c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800975e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009762:	079b      	lsls	r3, r3, #30
 8009764:	f53f aeae 	bmi.w	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009768:	f7fd fcb4 	bl	80070d4 <HAL_GetTick>
 800976c:	1b40      	subs	r0, r0, r5
 800976e:	4548      	cmp	r0, r9
 8009770:	d9f5      	bls.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8009772:	e6c7      	b.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8009774:	4635      	mov	r5, r6
 8009776:	e6cd      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009778:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800977c:	f47f af62 	bne.w	8009644 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009780:	2101      	movs	r1, #1
 8009782:	1d20      	adds	r0, r4, #4
 8009784:	f7ff fd34 	bl	80091f0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8009788:	2800      	cmp	r0, #0
 800978a:	bf18      	it	ne
 800978c:	4605      	movne	r5, r0
 800978e:	e759      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009790:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009794:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8009798:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800979c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80097a0:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80097a2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80097a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80097aa:	d103      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80097b2:	e759      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80097b4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80097b8:	f47f af57 	bne.w	800966a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097bc:	2101      	movs	r1, #1
 80097be:	1d20      	adds	r0, r4, #4
 80097c0:	f7ff fd16 	bl	80091f0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80097c4:	2800      	cmp	r0, #0
 80097c6:	bf18      	it	ne
 80097c8:	4605      	movne	r5, r0
 80097ca:	e74e      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80097cc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80097d0:	f47f af5f 	bne.w	8009692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097d4:	2101      	movs	r1, #1
 80097d6:	1d20      	adds	r0, r4, #4
 80097d8:	f7ff fd0a 	bl	80091f0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80097dc:	2800      	cmp	r0, #0
 80097de:	bf18      	it	ne
 80097e0:	4605      	movne	r5, r0
 80097e2:	e756      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80097e4:	40021000 	.word	0x40021000

080097e8 <HAL_RCCEx_GetPeriphCLKConfig>:
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 80097e8:	4b5b      	ldr	r3, [pc, #364]	; (8009958 <HAL_RCCEx_GetPeriphCLKConfig+0x170>)
 80097ea:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 80097ec:	4b5b      	ldr	r3, [pc, #364]	; (800995c <HAL_RCCEx_GetPeriphCLKConfig+0x174>)
 80097ee:	68d9      	ldr	r1, [r3, #12]
 80097f0:	f001 0103 	and.w	r1, r1, #3
 80097f4:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
 80097f6:	691a      	ldr	r2, [r3, #16]
 80097f8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80097fc:	3201      	adds	r2, #1
 80097fe:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009800:	691a      	ldr	r2, [r3, #16]
 8009802:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8009806:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8009808:	691a      	ldr	r2, [r3, #16]
 800980a:	0b52      	lsrs	r2, r2, #13
 800980c:	f002 0210 	and.w	r2, r2, #16
 8009810:	3207      	adds	r2, #7
 8009812:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	f3c2 5241 	ubfx	r2, r2, #21, #2
 800981a:	3201      	adds	r2, #1
 800981c:	0052      	lsls	r2, r2, #1
 800981e:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8009820:	691a      	ldr	r2, [r3, #16]
  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8009822:	6201      	str	r1, [r0, #32]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8009824:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8009828:	3201      	adds	r2, #1
 800982a:	0052      	lsls	r2, r2, #1
 800982c:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
 800982e:	695a      	ldr	r2, [r3, #20]
 8009830:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8009834:	3201      	adds	r2, #1
 8009836:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800983e:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	0b52      	lsrs	r2, r2, #13
 8009844:	f002 0210 	and.w	r2, r2, #16
 8009848:	3207      	adds	r2, #7
 800984a:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	f3c2 5241 	ubfx	r2, r2, #21, #2
 8009852:	3201      	adds	r2, #1
 8009854:	0052      	lsls	r2, r2, #1
 8009856:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8009858:	695a      	ldr	r2, [r3, #20]
 800985a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800985e:	3201      	adds	r2, #1
 8009860:	0052      	lsls	r2, r2, #1
 8009862:	6342      	str	r2, [r0, #52]	; 0x34
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8009864:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009868:	f002 0203 	and.w	r2, r2, #3
 800986c:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800986e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009872:	f002 020c 	and.w	r2, r2, #12
 8009876:	6402      	str	r2, [r0, #64]	; 0x40
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8009878:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800987c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009880:	6442      	str	r2, [r0, #68]	; 0x44
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8009882:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009886:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800988a:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 800988c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009890:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009894:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8009896:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800989a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800989e:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 80098a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098a4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80098a8:	6542      	str	r2, [r0, #84]	; 0x54
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 80098aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098ae:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80098b2:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 80098b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098b8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80098bc:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 80098be:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80098c2:	f002 0203 	and.w	r2, r2, #3
 80098c6:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 80098c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098cc:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80098d0:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 80098d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80098d6:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80098da:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 80098dc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80098e0:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 80098e4:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 80098e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80098ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80098ee:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 80098f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80098f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80098f8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 80098fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009900:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8009904:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8009906:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800990a:	0452      	lsls	r2, r2, #17
 800990c:	bf56      	itet	pl
 800990e:	f8d3 2088 	ldrpl.w	r2, [r3, #136]	; 0x88
 8009912:	f44f 4280 	movmi.w	r2, #16384	; 0x4000
 8009916:	f002 6240 	andpl.w	r2, r2, #201326592	; 0xc000000
 800991a:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 800991c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009920:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8009924:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8009926:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800992a:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 800992e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009932:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009936:	f002 0204 	and.w	r2, r2, #4
 800993a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->Dfsdm1AudioClockSelection  = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800993e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009942:	f002 0218 	and.w	r2, r2, #24
 8009946:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
 800994a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800994e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009952:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
}
 8009956:	4770      	bx	lr
 8009958:	013f7fff 	.word	0x013f7fff
 800995c:	40021000 	.word	0x40021000

08009960 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009960:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
{
 8009964:	b4f0      	push	{r4, r5, r6, r7}
 8009966:	4d9a      	ldr	r5, [pc, #616]	; (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009968:	d11c      	bne.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800996a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800996e:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 8009972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009976:	f000 8085 	beq.w	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800997a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800997e:	d00a      	beq.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8009980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009984:	d154      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009986:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
        frequency = LSE_VALUE;
 800998a:	f010 0002 	ands.w	r0, r0, #2
 800998e:	bf18      	it	ne
 8009990:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009994:	e11a      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009996:	6828      	ldr	r0, [r5, #0]
        frequency = HSE_VALUE / 32U;
 8009998:	4b8e      	ldr	r3, [pc, #568]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800999a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
            frequency = HSI_VALUE;
 800999e:	bf18      	it	ne
 80099a0:	4618      	movne	r0, r3
 80099a2:	e113      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099a4:	68eb      	ldr	r3, [r5, #12]
 80099a6:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d02f      	beq.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d034      	beq.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d137      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80099b6:	6829      	ldr	r1, [r5, #0]
 80099b8:	f011 0102 	ands.w	r1, r1, #2
 80099bc:	d00c      	beq.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80099be:	682b      	ldr	r3, [r5, #0]
 80099c0:	4a85      	ldr	r2, [pc, #532]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099c2:	0719      	lsls	r1, r3, #28
 80099c4:	bf4b      	itete	mi
 80099c6:	682b      	ldrmi	r3, [r5, #0]
 80099c8:	f8d5 3094 	ldrpl.w	r3, [r5, #148]	; 0x94
 80099cc:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 80099d0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80099d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    switch(PeriphClk)
 80099d8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80099dc:	f000 8226 	beq.w	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80099e0:	d858      	bhi.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80099e2:	2820      	cmp	r0, #32
 80099e4:	f000 81be 	beq.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 80099e8:	d824      	bhi.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 80099ea:	2808      	cmp	r0, #8
 80099ec:	d81d      	bhi.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f000 80ec 	beq.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80099f4:	3801      	subs	r0, #1
 80099f6:	2807      	cmp	r0, #7
 80099f8:	d81a      	bhi.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80099fa:	e8df f010 	tbh	[pc, r0, lsl #1]
 80099fe:	0164      	.short	0x0164
 8009a00:	00190177 	.word	0x00190177
 8009a04:	00190189 	.word	0x00190189
 8009a08:	00190019 	.word	0x00190019
 8009a0c:	0196      	.short	0x0196
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a0e:	6829      	ldr	r1, [r5, #0]
        pllvco = HSI_VALUE;
 8009a10:	4b72      	ldr	r3, [pc, #456]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009a12:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
        pllvco = HSE_VALUE;
 8009a16:	bf18      	it	ne
 8009a18:	4619      	movne	r1, r3
 8009a1a:	e7dd      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a1c:	6829      	ldr	r1, [r5, #0]
        pllvco = HSE_VALUE;
 8009a1e:	4b70      	ldr	r3, [pc, #448]	; (8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009a20:	f411 3100 	ands.w	r1, r1, #131072	; 0x20000
 8009a24:	e7f7      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
    switch(pll_oscsource)
 8009a26:	2100      	movs	r1, #0
 8009a28:	e7d6      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch(PeriphClk)
 8009a2a:	2810      	cmp	r0, #16
 8009a2c:	f000 818a 	beq.w	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8009a30:	2000      	movs	r0, #0
 8009a32:	e0cb      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009a34:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009a38:	f000 81ea 	beq.w	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8009a3c:	d80f      	bhi.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009a3e:	2840      	cmp	r0, #64	; 0x40
 8009a40:	f000 81d5 	beq.w	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009a44:	2880      	cmp	r0, #128	; 0x80
 8009a46:	d1f3      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009a48:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 8009a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a54:	f000 8157 	beq.w	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8009a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a5c:	e1d0      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
    switch(PeriphClk)
 8009a5e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009a62:	d1e5      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009a64:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009a68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 8009a6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a70:	f000 8137 	beq.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009a74:	f200 81d7 	bhi.w	8009e26 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 81c6 	beq.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8009a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a82:	d1d5      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009a84:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
              frequency = LSI_VALUE;
 8009a88:	f010 0002 	ands.w	r0, r0, #2
 8009a8c:	bf18      	it	ne
 8009a8e:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8009a92:	e09b      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    switch(PeriphClk)
 8009a94:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8009a98:	d040      	beq.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009a9a:	d819      	bhi.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009a9c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8009aa0:	d03c      	beq.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009aa2:	d808      	bhi.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8009aa4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009aa8:	d002      	beq.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8009aaa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009aae:	d1bf      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
}
 8009ab0:	bcf0      	pop	{r4, r5, r6, r7}
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009ab2:	f7ff bb1b 	b.w	80090ec <RCCEx_GetSAIxPeriphCLKFreq>
    switch(PeriphClk)
 8009ab6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009aba:	f000 8163 	beq.w	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8009abe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009ac2:	d1b5      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009ac4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8009ac8:	075a      	lsls	r2, r3, #29
 8009aca:	f100 811c 	bmi.w	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8009ace:	e105      	b.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
    switch(PeriphClk)
 8009ad0:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8009ad4:	f000 817c 	beq.w	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 8009ad8:	d80f      	bhi.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8009ada:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009ade:	f000 8081 	beq.w	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 8009ae2:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8009ae6:	d1a3      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009ae8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8009aec:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	f000 8108 	beq.w	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	e182      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
    switch(PeriphClk)
 8009afa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009afe:	d197      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009b00:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8009b04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 8009b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0c:	d033      	beq.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8009b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b12:	f000 819c 	beq.w	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d18a      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8009b1a:	e0f4      	b.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009b1c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009b20:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 8009b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b28:	d037      	beq.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009b2a:	d820      	bhi.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80c4 	beq.w	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
 8009b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b36:	f47f af7b 	bne.w	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009b3a:	6828      	ldr	r0, [r5, #0]
 8009b3c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009b40:	d044      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009b42:	6928      	ldr	r0, [r5, #16]
 8009b44:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8009b48:	d040      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009b4a:	692f      	ldr	r7, [r5, #16]
 8009b4c:	f3c7 2706 	ubfx	r7, r7, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009b50:	4379      	muls	r1, r7
 8009b52:	692f      	ldr	r7, [r5, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009b54:	6928      	ldr	r0, [r5, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009b56:	f3c7 1703 	ubfx	r7, r7, #4, #4
 8009b5a:	3701      	adds	r7, #1
 8009b5c:	fbb1 f1f7 	udiv	r1, r1, r7
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009b60:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8009b64:	3001      	adds	r0, #1
 8009b66:	0040      	lsls	r0, r0, #1
 8009b68:	fbb1 f0f0 	udiv	r0, r1, r0
 8009b6c:	e02e      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009b6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009b72:	f47f af5d 	bne.w	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009b76:	6828      	ldr	r0, [r5, #0]
 8009b78:	f010 0002 	ands.w	r0, r0, #2
 8009b7c:	d026      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009b7e:	682b      	ldr	r3, [r5, #0]
 8009b80:	4a15      	ldr	r2, [pc, #84]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b82:	071b      	lsls	r3, r3, #28
 8009b84:	bf4b      	itete	mi
 8009b86:	682b      	ldrmi	r3, [r5, #0]
 8009b88:	f8d5 3094 	ldrpl.w	r3, [r5, #148]	; 0x94
 8009b8c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8009b90:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8009b94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009b98:	e018      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009b9a:	6828      	ldr	r0, [r5, #0]
 8009b9c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009ba0:	d014      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009ba2:	68e8      	ldr	r0, [r5, #12]
 8009ba4:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8009ba8:	d010      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009baa:	68e8      	ldr	r0, [r5, #12]
 8009bac:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009bb0:	4348      	muls	r0, r1
 8009bb2:	68e9      	ldr	r1, [r5, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009bb4:	68ed      	ldr	r5, [r5, #12]
 8009bb6:	f3c5 5541 	ubfx	r5, r5, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009bba:	f3c1 1103 	ubfx	r1, r1, #4, #4
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009bbe:	3501      	adds	r5, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009bc0:	3101      	adds	r1, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009bc2:	006d      	lsls	r5, r5, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009bc4:	fbb0 f0f1 	udiv	r0, r0, r1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009bc8:	fbb0 f0f5 	udiv	r0, r0, r5
}
 8009bcc:	bcf0      	pop	{r4, r5, r6, r7}
 8009bce:	4770      	bx	lr
 8009bd0:	40021000 	.word	0x40021000
 8009bd4:	0003d090 	.word	0x0003d090
 8009bd8:	0800e9a0 	.word	0x0800e9a0
 8009bdc:	00f42400 	.word	0x00f42400
 8009be0:	007a1200 	.word	0x007a1200
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8009be4:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8009be8:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8009bec:	d01f      	beq.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009bee:	6828      	ldr	r0, [r5, #0]
 8009bf0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009bf4:	d0ea      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8009bf6:	68e8      	ldr	r0, [r5, #12]
 8009bf8:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8009bfc:	d0e6      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009bfe:	68ee      	ldr	r6, [r5, #12]
 8009c00:	f3c6 2606 	ubfx	r6, r6, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c04:	fb01 f006 	mul.w	r0, r1, r6
 8009c08:	68ee      	ldr	r6, [r5, #12]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009c0a:	68eb      	ldr	r3, [r5, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c0c:	f3c6 1603 	ubfx	r6, r6, #4, #4
            if(pllp == 0U)
 8009c10:	0edb      	lsrs	r3, r3, #27
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c12:	f106 0601 	add.w	r6, r6, #1
 8009c16:	fbb0 f0f6 	udiv	r0, r0, r6
            if(pllp == 0U)
 8009c1a:	d105      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009c1c:	68eb      	ldr	r3, [r5, #12]
                pllp = 7U;
 8009c1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009c22:	bf14      	ite	ne
 8009c24:	2311      	movne	r3, #17
 8009c26:	2307      	moveq	r3, #7
            frequency = (pllvco / pllp);
 8009c28:	fbb0 f0f3 	udiv	r0, r0, r3
 8009c2c:	e7ce      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009c2e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009c32:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 8009c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c3a:	d024      	beq.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009c3c:	d81e      	bhi.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d03b      	beq.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
 8009c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c46:	d1c1      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009c48:	6828      	ldr	r0, [r5, #0]
 8009c4a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009c4e:	d0bd      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009c50:	6928      	ldr	r0, [r5, #16]
 8009c52:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8009c56:	d0b9      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009c58:	692a      	ldr	r2, [r5, #16]
 8009c5a:	f3c2 2206 	ubfx	r2, r2, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009c5e:	434a      	muls	r2, r1
 8009c60:	6929      	ldr	r1, [r5, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009c62:	6928      	ldr	r0, [r5, #16]
 8009c64:	f3c0 5041 	ubfx	r0, r0, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009c68:	f3c1 1103 	ubfx	r1, r1, #4, #4
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009c6c:	3001      	adds	r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009c6e:	3101      	adds	r1, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009c70:	0040      	lsls	r0, r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009c72:	fbb2 f2f1 	udiv	r2, r2, r1
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009c76:	fbb2 f0f0 	udiv	r0, r2, r0
 8009c7a:	e7a7      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009c7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009c80:	f43f af79 	beq.w	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8009c84:	e7a2      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009c86:	6828      	ldr	r0, [r5, #0]
 8009c88:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009c8c:	d09e      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009c8e:	68e8      	ldr	r0, [r5, #12]
 8009c90:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8009c94:	d09a      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009c96:	68ec      	ldr	r4, [r5, #12]
 8009c98:	f3c4 2406 	ubfx	r4, r4, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009c9c:	434c      	muls	r4, r1
 8009c9e:	68e9      	ldr	r1, [r5, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009ca0:	68e8      	ldr	r0, [r5, #12]
 8009ca2:	f3c0 5041 	ubfx	r0, r0, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009ca6:	f3c1 1103 	ubfx	r1, r1, #4, #4
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009caa:	3001      	adds	r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009cac:	3101      	adds	r1, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009cae:	0040      	lsls	r0, r0, #1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009cb0:	fbb4 f4f1 	udiv	r4, r4, r1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009cb4:	fbb4 f0f0 	udiv	r0, r4, r0
 8009cb8:	e788      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009cba:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
            frequency = HSI48_VALUE;
 8009cbe:	4b6f      	ldr	r3, [pc, #444]	; (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009cc0:	f010 0002 	ands.w	r0, r0, #2
 8009cc4:	e66b      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009cc6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009cca:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d007      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	f43f ae57 	beq.w	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d014      	beq.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
}
 8009cdc:	bcf0      	pop	{r4, r5, r6, r7}
          frequency = HAL_RCC_GetPCLK2Freq();
 8009cde:	f7ff b95b 	b.w	8008f98 <HAL_RCC_GetPCLK2Freq>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ce2:	6828      	ldr	r0, [r5, #0]
            frequency = HSI_VALUE;
 8009ce4:	4b66      	ldr	r3, [pc, #408]	; (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009ce6:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8009cea:	e658      	b.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009cec:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009cf0:	f003 030c 	and.w	r3, r3, #12
        switch(srcclk)
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d0f4      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009cf8:	d808      	bhi.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8085 	beq.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	f47f ae95 	bne.w	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
}
 8009d06:	bcf0      	pop	{r4, r5, r6, r7}
          frequency = HAL_RCC_GetSysClockFreq();
 8009d08:	f7fe bd38 	b.w	800877c <HAL_RCC_GetSysClockFreq>
 8009d0c:	2b0c      	cmp	r3, #12
 8009d0e:	e639      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009d10:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009d14:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d0e2      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009d1c:	d803      	bhi.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d073      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8009d22:	2b10      	cmp	r3, #16
 8009d24:	e7ed      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009d26:	2b30      	cmp	r3, #48	; 0x30
 8009d28:	e62c      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009d2a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009d2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 8009d32:	2b80      	cmp	r3, #128	; 0x80
 8009d34:	d0d5      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009d36:	d803      	bhi.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d066      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8009d3c:	2b40      	cmp	r3, #64	; 0x40
 8009d3e:	e7e0      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009d40:	2bc0      	cmp	r3, #192	; 0xc0
 8009d42:	e61f      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009d44:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
        switch(srcclk)
 8009d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d50:	d0c7      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009d52:	d804      	bhi.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d058      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8009d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d5c:	e7d1      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d62:	e60f      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009d64:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 8009d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d70:	d0b7      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009d72:	d804      	bhi.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d048      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8009d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d7c:	e7c1      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009d7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d82:	e5ff      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009d84:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        switch(srcclk)
 8009d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d90:	d002      	beq.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
 8009d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d96:	e7b4      	b.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8009d98:	6828      	ldr	r0, [r5, #0]
 8009d9a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009d9e:	f43f af15 	beq.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009da2:	6928      	ldr	r0, [r5, #16]
 8009da4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8009da8:	f43f af10 	beq.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009dac:	692b      	ldr	r3, [r5, #16]
 8009dae:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009db2:	434b      	muls	r3, r1
 8009db4:	6929      	ldr	r1, [r5, #16]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009db6:	6928      	ldr	r0, [r5, #16]
 8009db8:	f3c0 6041 	ubfx	r0, r0, #25, #2
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009dbc:	f3c1 1103 	ubfx	r1, r1, #4, #4
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009dc0:	3001      	adds	r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009dc2:	3101      	adds	r1, #1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009dc4:	0040      	lsls	r0, r0, #1
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009dc6:	fbb3 f3f1 	udiv	r3, r3, r1
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009dca:	fbb3 f0f0 	udiv	r0, r3, r0
 8009dce:	e6fd      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8009dd0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8009dd4:	f003 0318 	and.w	r3, r3, #24
        switch(srcclk)
 8009dd8:	2b08      	cmp	r3, #8
 8009dda:	d082      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009ddc:	2b10      	cmp	r3, #16
 8009dde:	f43f aeca 	beq.w	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f47f ae24 	bne.w	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009de8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009dec:	e660      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009dee:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009df2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 8009df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfa:	d084      	beq.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8009dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e00:	f43f af6f 	beq.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f47f ae13 	bne.w	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
}
 8009e0a:	bcf0      	pop	{r4, r5, r6, r7}
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e0c:	f7ff b8b2 	b.w	8008f74 <HAL_RCC_GetPCLK1Freq>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009e10:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 8009e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e1c:	f43f af73 	beq.w	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8009e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e24:	e7ec      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8009e26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009e2a:	e5ab      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009e2c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009e30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 8009e34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e38:	f43f af53 	beq.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8009e3c:	d804      	bhi.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0e3      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8009e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e46:	e61c      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e4c:	e59a      	b.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009e4e:	6828      	ldr	r0, [r5, #0]
 8009e50:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009e54:	f43f aeba 	beq.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009e58:	68e8      	ldr	r0, [r5, #12]
 8009e5a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8009e5e:	f43f aeb5 	beq.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009e62:	68e8      	ldr	r0, [r5, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e64:	68eb      	ldr	r3, [r5, #12]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009e66:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009e6e:	4341      	muls	r1, r0
 8009e70:	3301      	adds	r3, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009e72:	68e8      	ldr	r0, [r5, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e74:	fbb1 f1f3 	udiv	r1, r1, r3
 8009e78:	e672      	b.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 8009e7a:	bf00      	nop
 8009e7c:	02dc6c00 	.word	0x02dc6c00
 8009e80:	00f42400 	.word	0x00f42400

08009e84 <HAL_RCCEx_EnablePLLSAI1>:
{
 8009e84:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLLSAI1_DISABLE();
 8009e86:	4c20      	ldr	r4, [pc, #128]	; (8009f08 <HAL_RCCEx_EnablePLLSAI1+0x84>)
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e8e:	6023      	str	r3, [r4, #0]
{
 8009e90:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 8009e92:	f7fd f91f 	bl	80070d4 <HAL_GetTick>
 8009e96:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	011a      	lsls	r2, r3, #4
 8009e9c:	d423      	bmi.n	8009ee6 <HAL_RCCEx_EnablePLLSAI1+0x62>
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1M, PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 8009e9e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009ea2:	06db      	lsls	r3, r3, #27
 8009ea4:	6921      	ldr	r1, [r4, #16]
 8009ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009eaa:	4a18      	ldr	r2, [pc, #96]	; (8009f0c <HAL_RCCEx_EnablePLLSAI1+0x88>)
 8009eac:	400a      	ands	r2, r1
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	686a      	ldr	r2, [r5, #4]
 8009eb2:	3a01      	subs	r2, #1
 8009eb4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009eb8:	692a      	ldr	r2, [r5, #16]
 8009eba:	0852      	lsrs	r2, r2, #1
 8009ebc:	3a01      	subs	r2, #1
 8009ebe:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8009ec2:	696a      	ldr	r2, [r5, #20]
 8009ec4:	0852      	lsrs	r2, r2, #1
 8009ec6:	3a01      	subs	r2, #1
 8009ec8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009ecc:	6123      	str	r3, [r4, #16]
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	69aa      	ldr	r2, [r5, #24]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	6123      	str	r3, [r4, #16]
    __HAL_RCC_PLLSAI1_ENABLE();
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009edc:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009ede:	f7fd f8f9 	bl	80070d4 <HAL_GetTick>
 8009ee2:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009ee4:	e00b      	b.n	8009efe <HAL_RCCEx_EnablePLLSAI1+0x7a>
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ee6:	f7fd f8f5 	bl	80070d4 <HAL_GetTick>
 8009eea:	1b80      	subs	r0, r0, r6
 8009eec:	2802      	cmp	r0, #2
 8009eee:	d9d3      	bls.n	8009e98 <HAL_RCCEx_EnablePLLSAI1+0x14>
      status = HAL_TIMEOUT;
 8009ef0:	2003      	movs	r0, #3
}
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ef4:	f7fd f8ee 	bl	80070d4 <HAL_GetTick>
 8009ef8:	1b40      	subs	r0, r0, r5
 8009efa:	2802      	cmp	r0, #2
 8009efc:	d8f8      	bhi.n	8009ef0 <HAL_RCCEx_EnablePLLSAI1+0x6c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	011b      	lsls	r3, r3, #4
 8009f02:	d5f7      	bpl.n	8009ef4 <HAL_RCCEx_EnablePLLSAI1+0x70>
 8009f04:	2000      	movs	r0, #0
  return status;
 8009f06:	e7f4      	b.n	8009ef2 <HAL_RCCEx_EnablePLLSAI1+0x6e>
 8009f08:	40021000 	.word	0x40021000
 8009f0c:	019d800f 	.word	0x019d800f

08009f10 <HAL_RCCEx_DisablePLLSAI1>:
{
 8009f10:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI1_DISABLE();
 8009f12:	4c11      	ldr	r4, [pc, #68]	; (8009f58 <HAL_RCCEx_DisablePLLSAI1+0x48>)
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f1a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8009f1c:	f7fd f8da 	bl	80070d4 <HAL_GetTick>
 8009f20:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	f013 6300 	ands.w	r3, r3, #134217728	; 0x8000000
 8009f28:	d10f      	bne.n	8009f4a <HAL_RCCEx_DisablePLLSAI1+0x3a>
  HAL_StatusTypeDef status = HAL_OK;
 8009f2a:	4618      	mov	r0, r3
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f36:	6123      	str	r3, [r4, #16]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	f013 5f08 	tst.w	r3, #570425344	; 0x22000000
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009f3e:	bf02      	ittt	eq
 8009f40:	68e3      	ldreq	r3, [r4, #12]
 8009f42:	f023 0303 	biceq.w	r3, r3, #3
 8009f46:	60e3      	streq	r3, [r4, #12]
}
 8009f48:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f4a:	f7fd f8c3 	bl	80070d4 <HAL_GetTick>
 8009f4e:	1b40      	subs	r0, r0, r5
 8009f50:	2802      	cmp	r0, #2
 8009f52:	d9e6      	bls.n	8009f22 <HAL_RCCEx_DisablePLLSAI1+0x12>
      status = HAL_TIMEOUT;
 8009f54:	2003      	movs	r0, #3
 8009f56:	e7e9      	b.n	8009f2c <HAL_RCCEx_DisablePLLSAI1+0x1c>
 8009f58:	40021000 	.word	0x40021000

08009f5c <HAL_RCCEx_EnablePLLSAI2>:
{
 8009f5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLLSAI2_DISABLE();
 8009f5e:	4c20      	ldr	r4, [pc, #128]	; (8009fe0 <HAL_RCCEx_EnablePLLSAI2+0x84>)
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f66:	6023      	str	r3, [r4, #0]
{
 8009f68:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 8009f6a:	f7fd f8b3 	bl	80070d4 <HAL_GetTick>
 8009f6e:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	009a      	lsls	r2, r3, #2
 8009f74:	d423      	bmi.n	8009fbe <HAL_RCCEx_EnablePLLSAI2+0x62>
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2M, PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2Q, PLLSAI2Init->PLLSAI2R);
 8009f76:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009f7a:	06db      	lsls	r3, r3, #27
 8009f7c:	6961      	ldr	r1, [r4, #20]
 8009f7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f82:	4a18      	ldr	r2, [pc, #96]	; (8009fe4 <HAL_RCCEx_EnablePLLSAI2+0x88>)
 8009f84:	400a      	ands	r2, r1
 8009f86:	4313      	orrs	r3, r2
 8009f88:	686a      	ldr	r2, [r5, #4]
 8009f8a:	3a01      	subs	r2, #1
 8009f8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009f90:	692a      	ldr	r2, [r5, #16]
 8009f92:	0852      	lsrs	r2, r2, #1
 8009f94:	3a01      	subs	r2, #1
 8009f96:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8009f9a:	696a      	ldr	r2, [r5, #20]
 8009f9c:	0852      	lsrs	r2, r2, #1
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009fa4:	6163      	str	r3, [r4, #20]
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 8009fa6:	6963      	ldr	r3, [r4, #20]
 8009fa8:	69aa      	ldr	r2, [r5, #24]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	6163      	str	r3, [r4, #20]
    __HAL_RCC_PLLSAI2_ENABLE();
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fb4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8009fb6:	f7fd f88d 	bl	80070d4 <HAL_GetTick>
 8009fba:	4605      	mov	r5, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009fbc:	e00b      	b.n	8009fd6 <HAL_RCCEx_EnablePLLSAI2+0x7a>
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009fbe:	f7fd f889 	bl	80070d4 <HAL_GetTick>
 8009fc2:	1b80      	subs	r0, r0, r6
 8009fc4:	2802      	cmp	r0, #2
 8009fc6:	d9d3      	bls.n	8009f70 <HAL_RCCEx_EnablePLLSAI2+0x14>
      status = HAL_TIMEOUT;
 8009fc8:	2003      	movs	r0, #3
}
 8009fca:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009fcc:	f7fd f882 	bl	80070d4 <HAL_GetTick>
 8009fd0:	1b40      	subs	r0, r0, r5
 8009fd2:	2802      	cmp	r0, #2
 8009fd4:	d8f8      	bhi.n	8009fc8 <HAL_RCCEx_EnablePLLSAI2+0x6c>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	d5f7      	bpl.n	8009fcc <HAL_RCCEx_EnablePLLSAI2+0x70>
 8009fdc:	2000      	movs	r0, #0
  return status;
 8009fde:	e7f4      	b.n	8009fca <HAL_RCCEx_EnablePLLSAI2+0x6e>
 8009fe0:	40021000 	.word	0x40021000
 8009fe4:	019d800f 	.word	0x019d800f

08009fe8 <HAL_RCCEx_DisablePLLSAI2>:
{
 8009fe8:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_PLLSAI2_DISABLE();
 8009fea:	4c11      	ldr	r4, [pc, #68]	; (800a030 <HAL_RCCEx_DisablePLLSAI2+0x48>)
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ff2:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8009ff4:	f7fd f86e 	bl	80070d4 <HAL_GetTick>
 8009ff8:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
 800a000:	d10f      	bne.n	800a022 <HAL_RCCEx_DisablePLLSAI2+0x3a>
  HAL_StatusTypeDef status = HAL_OK;
 800a002:	4618      	mov	r0, r3
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2QEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 800a004:	6963      	ldr	r3, [r4, #20]
 800a006:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a00a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a00e:	6163      	str	r3, [r4, #20]
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	f013 6f20 	tst.w	r3, #167772160	; 0xa000000
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a016:	bf02      	ittt	eq
 800a018:	68e3      	ldreq	r3, [r4, #12]
 800a01a:	f023 0303 	biceq.w	r3, r3, #3
 800a01e:	60e3      	streq	r3, [r4, #12]
}
 800a020:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a022:	f7fd f857 	bl	80070d4 <HAL_GetTick>
 800a026:	1b40      	subs	r0, r0, r5
 800a028:	2802      	cmp	r0, #2
 800a02a:	d9e6      	bls.n	8009ffa <HAL_RCCEx_DisablePLLSAI2+0x12>
      status = HAL_TIMEOUT;
 800a02c:	2003      	movs	r0, #3
 800a02e:	e7e9      	b.n	800a004 <HAL_RCCEx_DisablePLLSAI2+0x1c>
 800a030:	40021000 	.word	0x40021000

0800a034 <HAL_RCCEx_WakeUpStopCLKConfig>:
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 800a034:	4a03      	ldr	r2, [pc, #12]	; (800a044 <HAL_RCCEx_WakeUpStopCLKConfig+0x10>)
 800a036:	6893      	ldr	r3, [r2, #8]
 800a038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a03c:	4318      	orrs	r0, r3
 800a03e:	6090      	str	r0, [r2, #8]
}
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	40021000 	.word	0x40021000

0800a048 <HAL_RCCEx_StandbyMSIRangeConfig>:
  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 800a048:	4a04      	ldr	r2, [pc, #16]	; (800a05c <HAL_RCCEx_StandbyMSIRangeConfig+0x14>)
 800a04a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a04e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a052:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800a056:	f8c2 0094 	str.w	r0, [r2, #148]	; 0x94
}
 800a05a:	4770      	bx	lr
 800a05c:	40021000 	.word	0x40021000

0800a060 <HAL_RCCEx_EnableLSECSS>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800a060:	4a03      	ldr	r2, [pc, #12]	; (800a070 <HAL_RCCEx_EnableLSECSS+0x10>)
 800a062:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a066:	f043 0320 	orr.w	r3, r3, #32
 800a06a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a06e:	4770      	bx	lr
 800a070:	40021000 	.word	0x40021000

0800a074 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <HAL_RCCEx_DisableLSECSS+0x18>)
 800a076:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a07a:	f022 0220 	bic.w	r2, r2, #32
 800a07e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800a082:	699a      	ldr	r2, [r3, #24]
 800a084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a088:	619a      	str	r2, [r3, #24]
}
 800a08a:	4770      	bx	lr
 800a08c:	40021000 	.word	0x40021000

0800a090 <HAL_RCCEx_EnableLSECSS_IT>:
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <HAL_RCCEx_EnableLSECSS_IT+0x2c>)
 800a092:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a096:	f042 0220 	orr.w	r2, r2, #32
 800a09a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 800a09e:	699a      	ldr	r2, [r3, #24]
 800a0a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0a4:	619a      	str	r2, [r3, #24]
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 800a0a6:	f5a3 3386 	sub.w	r3, r3, #68608	; 0x10c00
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a0b0:	601a      	str	r2, [r3, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 800a0b2:	689a      	ldr	r2, [r3, #8]
 800a0b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a0b8:	609a      	str	r2, [r3, #8]
}
 800a0ba:	4770      	bx	lr
 800a0bc:	40021000 	.word	0x40021000

0800a0c0 <HAL_RCCEx_LSECSS_Callback>:
}
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <HAL_RCCEx_LSECSS_IRQHandler>:
{
 800a0c4:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 800a0c6:	4c05      	ldr	r4, [pc, #20]	; (800a0dc <HAL_RCCEx_LSECSS_IRQHandler+0x18>)
 800a0c8:	69e3      	ldr	r3, [r4, #28]
 800a0ca:	059b      	lsls	r3, r3, #22
 800a0cc:	d504      	bpl.n	800a0d8 <HAL_RCCEx_LSECSS_IRQHandler+0x14>
    HAL_RCCEx_LSECSS_Callback();
 800a0ce:	f7ff fff7 	bl	800a0c0 <HAL_RCCEx_LSECSS_Callback>
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800a0d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d6:	6223      	str	r3, [r4, #32]
}
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	bf00      	nop
 800a0dc:	40021000 	.word	0x40021000

0800a0e0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a0e0:	4a02      	ldr	r2, [pc, #8]	; (800a0ec <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800a0e2:	6813      	ldr	r3, [r2, #0]
 800a0e4:	f043 0304 	orr.w	r3, r3, #4
 800a0e8:	6013      	str	r3, [r2, #0]
}
 800a0ea:	4770      	bx	lr
 800a0ec:	40021000 	.word	0x40021000

0800a0f0 <HAL_RCCEx_DisableMSIPLLMode>:
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a0f0:	4a02      	ldr	r2, [pc, #8]	; (800a0fc <HAL_RCCEx_DisableMSIPLLMode+0xc>)
 800a0f2:	6813      	ldr	r3, [r2, #0]
 800a0f4:	f023 0304 	bic.w	r3, r3, #4
 800a0f8:	6013      	str	r3, [r2, #0]
}
 800a0fa:	4770      	bx	lr
 800a0fc:	40021000 	.word	0x40021000

0800a100 <HAL_RCCEx_OCTOSPIDelayConfig>:
  MODIFY_REG(RCC->DLYCFGR, RCC_DLYCFGR_OCTOSPI1_DLY|RCC_DLYCFGR_OCTOSPI2_DLY, (Delay1 | (Delay2 << RCC_DLYCFGR_OCTOSPI2_DLY_Pos))) ;
 800a100:	4a05      	ldr	r2, [pc, #20]	; (800a118 <HAL_RCCEx_OCTOSPIDelayConfig+0x18>)
 800a102:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 800a106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a10a:	4318      	orrs	r0, r3
 800a10c:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
 800a110:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
}
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	40021000 	.word	0x40021000

0800a11c <HAL_RCCEx_CRSConfig>:
  __HAL_RCC_CRS_FORCE_RESET();
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <HAL_RCCEx_CRSConfig+0x44>)
 800a11e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a120:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a124:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 800a126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a128:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a12c:	639a      	str	r2, [r3, #56]	; 0x38
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a12e:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a132:	4313      	orrs	r3, r2
 800a134:	6882      	ldr	r2, [r0, #8]
 800a136:	4313      	orrs	r3, r2
  value |= pInit->ReloadValue;
 800a138:	68c2      	ldr	r2, [r0, #12]
 800a13a:	4313      	orrs	r3, r2
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a13c:	6902      	ldr	r2, [r0, #16]
 800a13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  WRITE_REG(CRS->CFGR, value);
 800a142:	4a08      	ldr	r2, [pc, #32]	; (800a164 <HAL_RCCEx_CRSConfig+0x48>)
 800a144:	6053      	str	r3, [r2, #4]
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a146:	6813      	ldr	r3, [r2, #0]
 800a148:	6941      	ldr	r1, [r0, #20]
 800a14a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a14e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a152:	6013      	str	r3, [r2, #0]
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a154:	6813      	ldr	r3, [r2, #0]
 800a156:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a15a:	6013      	str	r3, [r2, #0]
}
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	40021000 	.word	0x40021000
 800a164:	40006000 	.word	0x40006000

0800a168 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
 800a168:	4a02      	ldr	r2, [pc, #8]	; (800a174 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0xc>)
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a170:	6013      	str	r3, [r2, #0]
}
 800a172:	4770      	bx	lr
 800a174:	40006000 	.word	0x40006000

0800a178 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  pSynchroInfo->ReloadValue = (READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <HAL_RCCEx_CRSGetSynchronizationInfo+0x20>)
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	b292      	uxth	r2, r2
 800a17e:	6002      	str	r2, [r0, #0]
  pSynchroInfo->HSI48CalibrationValue = (READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	f3c2 2205 	ubfx	r2, r2, #8, #6
 800a186:	6042      	str	r2, [r0, #4]
  pSynchroInfo->FreqErrorCapture = (READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	0c12      	lsrs	r2, r2, #16
 800a18c:	6082      	str	r2, [r0, #8]
  pSynchroInfo->FreqErrorDirection = (READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a194:	60c3      	str	r3, [r0, #12]
}
 800a196:	4770      	bx	lr
 800a198:	40006000 	.word	0x40006000

0800a19c <HAL_RCCEx_CRSWaitSynchronization>:
{
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 800a1a0:	f7fc ff98 	bl	80070d4 <HAL_GetTick>
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
 800a1a4:	4c1e      	ldr	r4, [pc, #120]	; (800a220 <HAL_RCCEx_CRSWaitSynchronization+0x84>)
  tickstart = HAL_GetTick();
 800a1a6:	4606      	mov	r6, r0
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
 800a1a8:	2701      	movs	r7, #1
    if(Timeout != HAL_MAX_DELAY)
 800a1aa:	1c68      	adds	r0, r5, #1
 800a1ac:	d12f      	bne.n	800a20e <HAL_RCCEx_CRSWaitSynchronization+0x72>
        crsstatus = RCC_CRS_TIMEOUT;
 800a1ae:	2000      	movs	r0, #0
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
 800a1b0:	68a2      	ldr	r2, [r4, #8]
 800a1b2:	07d1      	lsls	r1, r2, #31
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
 800a1b4:	bf48      	it	mi
 800a1b6:	60e7      	strmi	r7, [r4, #12]
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
 800a1b8:	68a2      	ldr	r2, [r4, #8]
      crsstatus |= RCC_CRS_SYNCOK;
 800a1ba:	bf48      	it	mi
 800a1bc:	f040 0002 	orrmi.w	r0, r0, #2
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
 800a1c0:	0792      	lsls	r2, r2, #30
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
 800a1c2:	bf44      	itt	mi
 800a1c4:	2202      	movmi	r2, #2
 800a1c6:	60e2      	strmi	r2, [r4, #12]
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
 800a1c8:	68a2      	ldr	r2, [r4, #8]
      crsstatus |= RCC_CRS_SYNCWARN;
 800a1ca:	bf48      	it	mi
 800a1cc:	f040 0004 	orrmi.w	r0, r0, #4
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
 800a1d0:	0553      	lsls	r3, r2, #21
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
 800a1d2:	bf44      	itt	mi
 800a1d4:	2204      	movmi	r2, #4
 800a1d6:	60e2      	strmi	r2, [r4, #12]
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
 800a1d8:	68a2      	ldr	r2, [r4, #8]
      crsstatus |= RCC_CRS_TRIMOVF;
 800a1da:	bf48      	it	mi
 800a1dc:	f040 0020 	orrmi.w	r0, r0, #32
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
 800a1e0:	05d1      	lsls	r1, r2, #23
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
 800a1e2:	bf44      	itt	mi
 800a1e4:	2204      	movmi	r2, #4
 800a1e6:	60e2      	strmi	r2, [r4, #12]
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
 800a1e8:	68a2      	ldr	r2, [r4, #8]
      crsstatus |= RCC_CRS_SYNCERR;
 800a1ea:	bf48      	it	mi
 800a1ec:	f040 0008 	orrmi.w	r0, r0, #8
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
 800a1f0:	0592      	lsls	r2, r2, #22
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
 800a1f2:	bf44      	itt	mi
 800a1f4:	2204      	movmi	r2, #4
 800a1f6:	60e2      	strmi	r2, [r4, #12]
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
 800a1f8:	68a2      	ldr	r2, [r4, #8]
      crsstatus |= RCC_CRS_SYNCMISS;
 800a1fa:	bf48      	it	mi
 800a1fc:	f040 0010 	orrmi.w	r0, r0, #16
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
 800a200:	0713      	lsls	r3, r2, #28
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
 800a202:	bf44      	itt	mi
 800a204:	2208      	movmi	r2, #8
 800a206:	60e2      	strmi	r2, [r4, #12]
  } while(RCC_CRS_NONE == crsstatus);
 800a208:	2800      	cmp	r0, #0
 800a20a:	d0ce      	beq.n	800a1aa <HAL_RCCEx_CRSWaitSynchronization+0xe>
}
 800a20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a20e:	f7fc ff61 	bl	80070d4 <HAL_GetTick>
 800a212:	1b80      	subs	r0, r0, r6
 800a214:	42a8      	cmp	r0, r5
 800a216:	d801      	bhi.n	800a21c <HAL_RCCEx_CRSWaitSynchronization+0x80>
 800a218:	2d00      	cmp	r5, #0
 800a21a:	d1c8      	bne.n	800a1ae <HAL_RCCEx_CRSWaitSynchronization+0x12>
        crsstatus = RCC_CRS_TIMEOUT;
 800a21c:	2001      	movs	r0, #1
 800a21e:	e7c7      	b.n	800a1b0 <HAL_RCCEx_CRSWaitSynchronization+0x14>
 800a220:	40006000 	.word	0x40006000

0800a224 <HAL_RCCEx_CRS_SyncOkCallback>:
 800a224:	4770      	bx	lr

0800a226 <HAL_RCCEx_CRS_SyncWarnCallback>:
 800a226:	4770      	bx	lr

0800a228 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
 800a228:	4770      	bx	lr

0800a22a <HAL_RCCEx_CRS_ErrorCallback>:
}
 800a22a:	4770      	bx	lr

0800a22c <HAL_RCCEx_CRS_IRQHandler>:
  uint32_t itflags = READ_REG(CRS->ISR);
 800a22c:	491b      	ldr	r1, [pc, #108]	; (800a29c <HAL_RCCEx_CRS_IRQHandler+0x70>)
{
 800a22e:	b508      	push	{r3, lr}
  uint32_t itflags = READ_REG(CRS->ISR);
 800a230:	688b      	ldr	r3, [r1, #8]
  uint32_t itsources = READ_REG(CRS->CR);
 800a232:	680a      	ldr	r2, [r1, #0]
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
 800a234:	07d8      	lsls	r0, r3, #31
 800a236:	d506      	bpl.n	800a246 <HAL_RCCEx_CRS_IRQHandler+0x1a>
 800a238:	07d0      	lsls	r0, r2, #31
 800a23a:	d504      	bpl.n	800a246 <HAL_RCCEx_CRS_IRQHandler+0x1a>
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
 800a23c:	2301      	movs	r3, #1
 800a23e:	60cb      	str	r3, [r1, #12]
    HAL_RCCEx_CRS_SyncOkCallback();
 800a240:	f7ff fff0 	bl	800a224 <HAL_RCCEx_CRS_SyncOkCallback>
}
 800a244:	bd08      	pop	{r3, pc}
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
 800a246:	0798      	lsls	r0, r3, #30
 800a248:	d507      	bpl.n	800a25a <HAL_RCCEx_CRS_IRQHandler+0x2e>
 800a24a:	0791      	lsls	r1, r2, #30
 800a24c:	d505      	bpl.n	800a25a <HAL_RCCEx_CRS_IRQHandler+0x2e>
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
 800a24e:	4b13      	ldr	r3, [pc, #76]	; (800a29c <HAL_RCCEx_CRS_IRQHandler+0x70>)
 800a250:	2202      	movs	r2, #2
 800a252:	60da      	str	r2, [r3, #12]
    HAL_RCCEx_CRS_SyncWarnCallback();
 800a254:	f7ff ffe7 	bl	800a226 <HAL_RCCEx_CRS_SyncWarnCallback>
 800a258:	e7f4      	b.n	800a244 <HAL_RCCEx_CRS_IRQHandler+0x18>
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
 800a25a:	0718      	lsls	r0, r3, #28
 800a25c:	d507      	bpl.n	800a26e <HAL_RCCEx_CRS_IRQHandler+0x42>
 800a25e:	0711      	lsls	r1, r2, #28
 800a260:	d505      	bpl.n	800a26e <HAL_RCCEx_CRS_IRQHandler+0x42>
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
 800a262:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <HAL_RCCEx_CRS_IRQHandler+0x70>)
 800a264:	2208      	movs	r2, #8
 800a266:	60da      	str	r2, [r3, #12]
    HAL_RCCEx_CRS_ExpectedSyncCallback();
 800a268:	f7ff ffde 	bl	800a228 <HAL_RCCEx_CRS_ExpectedSyncCallback>
 800a26c:	e7ea      	b.n	800a244 <HAL_RCCEx_CRS_IRQHandler+0x18>
    if(((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
 800a26e:	0758      	lsls	r0, r3, #29
 800a270:	d5e8      	bpl.n	800a244 <HAL_RCCEx_CRS_IRQHandler+0x18>
 800a272:	0751      	lsls	r1, r2, #29
 800a274:	d5e6      	bpl.n	800a244 <HAL_RCCEx_CRS_IRQHandler+0x18>
        crserror |= RCC_CRS_SYNCERR;
 800a276:	f413 7080 	ands.w	r0, r3, #256	; 0x100
 800a27a:	bf18      	it	ne
 800a27c:	2008      	movne	r0, #8
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
 800a27e:	059a      	lsls	r2, r3, #22
        crserror |= RCC_CRS_SYNCMISS;
 800a280:	bf48      	it	mi
 800a282:	f040 0010 	orrmi.w	r0, r0, #16
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
 800a286:	055b      	lsls	r3, r3, #21
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
 800a288:	4b04      	ldr	r3, [pc, #16]	; (800a29c <HAL_RCCEx_CRS_IRQHandler+0x70>)
 800a28a:	f04f 0204 	mov.w	r2, #4
        crserror |= RCC_CRS_TRIMOVF;
 800a28e:	bf48      	it	mi
 800a290:	f040 0020 	orrmi.w	r0, r0, #32
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
 800a294:	60da      	str	r2, [r3, #12]
      HAL_RCCEx_CRS_ErrorCallback(crserror);
 800a296:	f7ff ffc8 	bl	800a22a <HAL_RCCEx_CRS_ErrorCallback>
}
 800a29a:	e7d3      	b.n	800a244 <HAL_RCCEx_CRS_IRQHandler+0x18>
 800a29c:	40006000 	.word	0x40006000

0800a2a0 <HASH_WriteData>:
  *         processing is suspended when possible and the Peripheral feeding point reached at
  *         suspension time is stored in the handle for resumption later on.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
 800a2a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;

  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
  {
    /* Write input data 4 bytes at a time */
    HASH->DIN = *(uint32_t*)inputaddr;
 800a2a2:	4d1e      	ldr	r5, [pc, #120]	; (800a31c <HASH_WriteData+0x7c>)
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 800a2a4:	9101      	str	r1, [sp, #4]
{
 800a2a6:	4604      	mov	r4, r0
  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	4291      	cmp	r1, r2
 800a2ac:	d221      	bcs.n	800a2f2 <HASH_WriteData+0x52>
    HASH->DIN = *(uint32_t*)inputaddr;
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	606b      	str	r3, [r5, #4]
    inputaddr+=4U;
 800a2b4:	9b01      	ldr	r3, [sp, #4]

    /* If the suspension flag has been raised and if the processing is not about
    to end, suspend processing */
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4U) < Size))
 800a2b6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
    inputaddr+=4U;
 800a2ba:	3304      	adds	r3, #4
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4U) < Size))
 800a2bc:	2801      	cmp	r0, #1
    inputaddr+=4U;
 800a2be:	9301      	str	r3, [sp, #4]
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4U) < Size))
 800a2c0:	f101 0304 	add.w	r3, r1, #4
 800a2c4:	d127      	bne.n	800a316 <HASH_WriteData+0x76>
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d225      	bcs.n	800a316 <HASH_WriteData+0x76>
    {
      /* Wait for DINIS = 1, which occurs when 16 32-bit locations are free
      in the input buffer */
      if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 800a2ca:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800a2cc:	07f6      	lsls	r6, r6, #31
 800a2ce:	d522      	bpl.n	800a316 <HASH_WriteData+0x76>
        /* Reset SuspendRequest */
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;

        /* Depending whether the key or the input data were fed to the Peripheral, the feeding point
        reached at suspension time is not saved in the same handle fields */
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 800a2d0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 800a2d4:	2500      	movs	r5, #0
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 800a2d6:	2b02      	cmp	r3, #2
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 800a2d8:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 800a2dc:	d001      	beq.n	800a2e2 <HASH_WriteData+0x42>
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	d109      	bne.n	800a2f6 <HASH_WriteData+0x56>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashInBuffPtr =  (uint8_t *)inputaddr;
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 800a2e2:	3a04      	subs	r2, #4
          hhash->pHashInBuffPtr =  (uint8_t *)inputaddr;
 800a2e4:	9b01      	ldr	r3, [sp, #4]
 800a2e6:	60e3      	str	r3, [r4, #12]
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 800a2e8:	1a52      	subs	r2, r2, r1
 800a2ea:	6222      	str	r2, [r4, #32]
          __HAL_UNLOCK(hhash);
          return HAL_ERROR;
        }

        /* Set the HASH state to Suspended and exit to stop entering data */
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 800a2ec:	2308      	movs	r3, #8
 800a2ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      } /* if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))  */
    } /* if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4) < Size)) */
  }   /* for(buffercounter = 0; buffercounter < Size; buffercounter+=4)                 */

  /* At this point, all the data have been entered to the Peripheral: exit */
  return  HAL_OK;
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	e00d      	b.n	800a312 <HASH_WriteData+0x72>
        else if ((hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3))
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d001      	beq.n	800a2fe <HASH_WriteData+0x5e>
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d105      	bne.n	800a30a <HASH_WriteData+0x6a>
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 800a2fe:	3a04      	subs	r2, #4
          hhash->pHashKeyBuffPtr  =  (uint8_t *)inputaddr;
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	6163      	str	r3, [r4, #20]
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 800a304:	1a52      	subs	r2, r2, r1
 800a306:	62a2      	str	r2, [r4, #40]	; 0x28
 800a308:	e7f0      	b.n	800a2ec <HASH_WriteData+0x4c>
          hhash->State = HAL_HASH_STATE_READY;
 800a30a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          __HAL_UNLOCK(hhash);
 800a30e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800a312:	b002      	add	sp, #8
 800a314:	bd70      	pop	{r4, r5, r6, pc}
 800a316:	4619      	mov	r1, r3
 800a318:	e7c7      	b.n	800a2aa <HASH_WriteData+0xa>
 800a31a:	bf00      	nop
 800a31c:	50060400 	.word	0x50060400

0800a320 <HASH_GetDigest>:
  */
static void HASH_GetDigest(uint8_t *pMsgDigest, uint8_t Size)
{
  uint32_t msgdigest = (uint32_t)pMsgDigest;

  switch(Size)
 800a320:	291c      	cmp	r1, #28
 800a322:	d027      	beq.n	800a374 <HASH_GetDigest+0x54>
 800a324:	d804      	bhi.n	800a330 <HASH_GetDigest+0x10>
 800a326:	2910      	cmp	r1, #16
 800a328:	d005      	beq.n	800a336 <HASH_GetDigest+0x16>
 800a32a:	2914      	cmp	r1, #20
 800a32c:	d011      	beq.n	800a352 <HASH_GetDigest+0x32>
 800a32e:	4770      	bx	lr
 800a330:	2920      	cmp	r1, #32
 800a332:	d037      	beq.n	800a3a4 <HASH_GetDigest+0x84>
 800a334:	4770      	bx	lr
  {
    /* Read the message digest */
    case 16:  /* MD5 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 800a336:	4b29      	ldr	r3, [pc, #164]	; (800a3dc <HASH_GetDigest+0xbc>)
 800a338:	68da      	ldr	r2, [r3, #12]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 800a33a:	ba12      	rev	r2, r2
 800a33c:	6002      	str	r2, [r0, #0]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800a33e:	691a      	ldr	r2, [r3, #16]
 800a340:	ba12      	rev	r2, r2
 800a342:	6042      	str	r2, [r0, #4]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 800a344:	695a      	ldr	r2, [r3, #20]
 800a346:	ba12      	rev	r2, r2
 800a348:	6082      	str	r2, [r0, #8]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	ba1b      	rev	r3, r3
 800a34e:	60c3      	str	r3, [r0, #12]
    break;
 800a350:	4770      	bx	lr
    case 20:  /* SHA1 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 800a352:	4b22      	ldr	r3, [pc, #136]	; (800a3dc <HASH_GetDigest+0xbc>)
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	ba12      	rev	r2, r2
 800a358:	6002      	str	r2, [r0, #0]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	ba12      	rev	r2, r2
 800a35e:	6042      	str	r2, [r0, #4]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 800a360:	695a      	ldr	r2, [r3, #20]
 800a362:	ba12      	rev	r2, r2
 800a364:	6082      	str	r2, [r0, #8]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 800a366:	699a      	ldr	r2, [r3, #24]
 800a368:	ba12      	rev	r2, r2
 800a36a:	60c2      	str	r2, [r0, #12]
      msgdigest+=4U;
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	ba1b      	rev	r3, r3
 800a370:	6103      	str	r3, [r0, #16]
    break;
 800a372:	4770      	bx	lr
  case 28:  /* SHA224 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 800a374:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <HASH_GetDigest+0xbc>)
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	ba12      	rev	r2, r2
 800a37a:	6002      	str	r2, [r0, #0]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	ba12      	rev	r2, r2
 800a380:	6042      	str	r2, [r0, #4]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 800a382:	695a      	ldr	r2, [r3, #20]
 800a384:	ba12      	rev	r2, r2
 800a386:	6082      	str	r2, [r0, #8]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 800a388:	699a      	ldr	r2, [r3, #24]
 800a38a:	ba12      	rev	r2, r2
 800a38c:	60c2      	str	r2, [r0, #12]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 800a38e:	69db      	ldr	r3, [r3, #28]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 800a390:	4a13      	ldr	r2, [pc, #76]	; (800a3e0 <HASH_GetDigest+0xc0>)
 800a392:	ba1b      	rev	r3, r3
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 800a394:	6103      	str	r3, [r0, #16]
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 800a396:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a398:	ba1b      	rev	r3, r3
 800a39a:	6143      	str	r3, [r0, #20]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800a39c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a39e:	ba1b      	rev	r3, r3
 800a3a0:	6183      	str	r3, [r0, #24]
    break;
 800a3a2:	4770      	bx	lr
  case 32:   /* SHA256 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 800a3a4:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <HASH_GetDigest+0xbc>)
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	ba12      	rev	r2, r2
 800a3aa:	6002      	str	r2, [r0, #0]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	ba12      	rev	r2, r2
 800a3b0:	6042      	str	r2, [r0, #4]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 800a3b2:	695a      	ldr	r2, [r3, #20]
 800a3b4:	ba12      	rev	r2, r2
 800a3b6:	6082      	str	r2, [r0, #8]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 800a3b8:	699a      	ldr	r2, [r3, #24]
 800a3ba:	ba12      	rev	r2, r2
 800a3bc:	60c2      	str	r2, [r0, #12]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	ba1b      	rev	r3, r3
 800a3c2:	6103      	str	r3, [r0, #16]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 800a3c4:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <HASH_GetDigest+0xc0>)
 800a3c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3c8:	ba12      	rev	r2, r2
 800a3ca:	6142      	str	r2, [r0, #20]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800a3cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3ce:	ba12      	rev	r2, r2
 800a3d0:	6182      	str	r2, [r0, #24]
    msgdigest+=4U;
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	ba1b      	rev	r3, r3
 800a3d6:	61c3      	str	r3, [r0, #28]
    break;
    default:
    break;
  }
}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	50060400 	.word	0x50060400
 800a3e0:	50060700 	.word	0x50060700

0800a3e4 <HASH_WaitOnFlagUntilTimeout>:
  * @param  Status the Flag status (SET or RESET).
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 800a3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460e      	mov	r6, r1
 800a3ec:	4691      	mov	r9, r2
 800a3ee:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a3f0:	f7fc fe70 	bl	80070d4 <HAL_GetTick>
 800a3f4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a454 <HASH_WaitOnFlagUntilTimeout+0x70>
 800a3f8:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 800a3fa:	f1b9 0f00 	cmp.w	r9, #0
 800a3fe:	d021      	beq.n	800a444 <HASH_WaitOnFlagUntilTimeout+0x60>
      }
    }
  }
  else
  {
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
 800a400:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800a404:	ea36 0303 	bics.w	r3, r6, r3
 800a408:	d121      	bne.n	800a44e <HASH_WaitOnFlagUntilTimeout+0x6a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800a40a:	1c6b      	adds	r3, r5, #1
 800a40c:	d0f8      	beq.n	800a400 <HASH_WaitOnFlagUntilTimeout+0x1c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800a40e:	f7fc fe61 	bl	80070d4 <HAL_GetTick>
 800a412:	1bc0      	subs	r0, r0, r7
 800a414:	42a8      	cmp	r0, r5
 800a416:	d80a      	bhi.n	800a42e <HASH_WaitOnFlagUntilTimeout+0x4a>
 800a418:	2d00      	cmp	r5, #0
 800a41a:	d1f1      	bne.n	800a400 <HASH_WaitOnFlagUntilTimeout+0x1c>
 800a41c:	e007      	b.n	800a42e <HASH_WaitOnFlagUntilTimeout+0x4a>
      if(Timeout != HAL_MAX_DELAY)
 800a41e:	1c6a      	adds	r2, r5, #1
 800a420:	d010      	beq.n	800a444 <HASH_WaitOnFlagUntilTimeout+0x60>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 800a422:	f7fc fe57 	bl	80070d4 <HAL_GetTick>
 800a426:	1bc0      	subs	r0, r0, r7
 800a428:	42a8      	cmp	r0, r5
 800a42a:	d800      	bhi.n	800a42e <HASH_WaitOnFlagUntilTimeout+0x4a>
 800a42c:	b955      	cbnz	r5, 800a444 <HASH_WaitOnFlagUntilTimeout+0x60>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 800a42e:	2301      	movs	r3, #1
 800a430:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 800a434:	2200      	movs	r2, #0
          hhash->Status = HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hhash);
 800a43c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          return HAL_TIMEOUT;
 800a440:	4618      	mov	r0, r3
 800a442:	e005      	b.n	800a450 <HASH_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 800a444:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800a448:	ea36 0303 	bics.w	r3, r6, r3
 800a44c:	d1e7      	bne.n	800a41e <HASH_WaitOnFlagUntilTimeout+0x3a>
        }
      }
    }
  }
  return HAL_OK;
 800a44e:	2000      	movs	r0, #0
}
 800a450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a454:	50060400 	.word	0x50060400

0800a458 <HAL_HASH_MspInit>:
}
 800a458:	4770      	bx	lr
	...

0800a45c <HAL_HASH_Init>:
{
 800a45c:	b538      	push	{r3, r4, r5, lr}
  if(hhash == NULL)
 800a45e:	4604      	mov	r4, r0
 800a460:	b328      	cbz	r0, 800a4ae <HAL_HASH_Init+0x52>
  if(hhash->State == HAL_HASH_STATE_RESET)
 800a462:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a466:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a46a:	b91b      	cbnz	r3, 800a474 <HAL_HASH_Init+0x18>
    hhash->Lock = HAL_UNLOCKED;
 800a46c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_HASH_MspInit(hhash);
 800a470:	f7ff fff2 	bl	800a458 <HAL_HASH_MspInit>
  hhash->HashInCount = 0;
 800a474:	2000      	movs	r0, #0
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 800a476:	4a0f      	ldr	r2, [pc, #60]	; (800a4b4 <HAL_HASH_Init+0x58>)
  hhash->HashBuffSize = 0;
 800a478:	61e0      	str	r0, [r4, #28]
  hhash->State = HAL_HASH_STATE_BUSY;
 800a47a:	2302      	movs	r3, #2
  hhash->Phase = HAL_HASH_PHASE_READY;
 800a47c:	2101      	movs	r1, #1
  hhash->State = HAL_HASH_STATE_BUSY;
 800a47e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hhash->Phase = HAL_HASH_PHASE_READY;
 800a482:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
  hhash->HashInCount = 0;
 800a486:	6220      	str	r0, [r4, #32]
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 800a488:	86e0      	strh	r0, [r4, #54]	; 0x36
  hhash->HashITCounter = 0;
 800a48a:	6260      	str	r0, [r4, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 800a48c:	63a0      	str	r0, [r4, #56]	; 0x38
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 800a48e:	6813      	ldr	r3, [r2, #0]
 800a490:	6825      	ldr	r5, [r4, #0]
 800a492:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a496:	432b      	orrs	r3, r5
 800a498:	6013      	str	r3, [r2, #0]
__HAL_HASH_RESET_MDMAT();
 800a49a:	6813      	ldr	r3, [r2, #0]
 800a49c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4a0:	6013      	str	r3, [r2, #0]
  hhash->State = HAL_HASH_STATE_READY;
 800a4a2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  hhash->Status = HAL_OK;
 800a4a6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 800a4aa:	63e0      	str	r0, [r4, #60]	; 0x3c
}
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a4ae:	2001      	movs	r0, #1
 800a4b0:	e7fc      	b.n	800a4ac <HAL_HASH_Init+0x50>
 800a4b2:	bf00      	nop
 800a4b4:	50060400 	.word	0x50060400

0800a4b8 <HAL_HASH_MspDeInit>:
 800a4b8:	4770      	bx	lr

0800a4ba <HAL_HASH_InCpltCallback>:
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_HASH_DgstCpltCallback>:
 800a4bc:	4770      	bx	lr

0800a4be <HAL_HASH_ErrorCallback>:
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_HASH_IRQHandler>:
{
 800a4c0:	b570      	push	{r4, r5, r6, lr}
  *         suspension time is stored in the handle for resumption later on.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_IT(HASH_HandleTypeDef *hhash)
{
  if (hhash->State == HAL_HASH_STATE_BUSY)
 800a4c2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a4c6:	2b02      	cmp	r3, #2
{
 800a4c8:	4604      	mov	r4, r0
  if (hhash->State == HAL_HASH_STATE_BUSY)
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	f040 80e7 	bne.w	800a69e <HAL_HASH_IRQHandler+0x1de>
  {
    /* ITCounter must not be equal to 0 at this point. Report an error if this is the case. */
    if(hhash->HashITCounter == 0U)
 800a4d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a4d2:	4d74      	ldr	r5, [pc, #464]	; (800a6a4 <HAL_HASH_IRQHandler+0x1e4>)
 800a4d4:	b94b      	cbnz	r3, 800a4ea <HAL_HASH_IRQHandler+0x2a>
    {
      /* Disable Interrupts */
      __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800a4d6:	6a2b      	ldr	r3, [r5, #32]
 800a4d8:	f023 0303 	bic.w	r3, r3, #3
 800a4dc:	622b      	str	r3, [r5, #32]
      /* HASH state set back to Ready to prevent any issue in user code
         present in HAL_HASH_ErrorCallback() */
      hhash->State = HAL_HASH_STATE_READY;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hhash->Status = HASH_IT(hhash);
 800a4e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  if (hhash->Status != HAL_OK)
 800a4e8:	e099      	b.n	800a61e <HAL_HASH_IRQHandler+0x15e>
      return HAL_ERROR;
    }
    else if (hhash->HashITCounter == 1U)
 800a4ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a4ec:	2b01      	cmp	r3, #1
    }
    else
    {
      /* Cruise speed reached, HashITCounter remains equal to 3 until the end of
        the HASH processing or the end of the current step for HMAC processing. */
      hhash->HashITCounter = 3U;
 800a4ee:	bf16      	itet	ne
 800a4f0:	2303      	movne	r3, #3
      hhash->HashITCounter = 2U;
 800a4f2:	6242      	streq	r2, [r0, #36]	; 0x24
      hhash->HashITCounter = 3U;
 800a4f4:	6243      	strne	r3, [r0, #36]	; 0x24
    }

    /* If digest is ready */
    if (__HAL_HASH_GET_FLAG(HASH_FLAG_DCIS))
 800a4f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4f8:	f013 0302 	ands.w	r3, r3, #2
 800a4fc:	d022      	beq.n	800a544 <HAL_HASH_IRQHandler+0x84>
    {
      /* Read the digest */
      HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 800a4fe:	682a      	ldr	r2, [r5, #0]
 800a500:	4b69      	ldr	r3, [pc, #420]	; (800a6a8 <HAL_HASH_IRQHandler+0x1e8>)
 800a502:	6900      	ldr	r0, [r0, #16]
 800a504:	421a      	tst	r2, r3
 800a506:	d019      	beq.n	800a53c <HAL_HASH_IRQHandler+0x7c>
 800a508:	682a      	ldr	r2, [r5, #0]
 800a50a:	401a      	ands	r2, r3
 800a50c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800a510:	d016      	beq.n	800a540 <HAL_HASH_IRQHandler+0x80>
 800a512:	682a      	ldr	r2, [r5, #0]
 800a514:	4393      	bics	r3, r2
 800a516:	bf0c      	ite	eq
 800a518:	2120      	moveq	r1, #32
 800a51a:	2110      	movne	r1, #16
 800a51c:	f7ff ff00 	bl	800a320 <HASH_GetDigest>

      /* Disable Interrupts */
      __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800a520:	6a2b      	ldr	r3, [r5, #32]
 800a522:	f023 0303 	bic.w	r3, r3, #3
 800a526:	622b      	str	r3, [r5, #32]
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_READY;
 800a528:	2301      	movs	r3, #1
 800a52a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      /* Reset HASH state machine */
      hhash->Phase = HAL_HASH_PHASE_READY;
 800a52e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
      hhash->DgstCpltCallback(hhash);
#else
      HAL_HASH_DgstCpltCallback(hhash);
 800a532:	4620      	mov	r0, r4
 800a534:	f7ff ffc2 	bl	800a4bc <HAL_HASH_DgstCpltCallback>
    hhash->Status = HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	e015      	b.n	800a568 <HAL_HASH_IRQHandler+0xa8>
      HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 800a53c:	2114      	movs	r1, #20
 800a53e:	e7ed      	b.n	800a51c <HAL_HASH_IRQHandler+0x5c>
 800a540:	211c      	movs	r1, #28
 800a542:	e7eb      	b.n	800a51c <HAL_HASH_IRQHandler+0x5c>

      return HAL_OK;
    }

    /* If Peripheral ready to accept new data */
    if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 800a544:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a546:	07d2      	lsls	r2, r2, #31
 800a548:	d5f6      	bpl.n	800a538 <HAL_HASH_IRQHandler+0x78>
    {

      /* If the suspension flag has been raised and if the processing is not about
         to end, suspend processing */
      if ( (hhash->HashInCount != 0U) &&  (hhash->SuspendRequest == HAL_HASH_SUSPEND))
 800a54a:	6a02      	ldr	r2, [r0, #32]
 800a54c:	b17a      	cbz	r2, 800a56e <HAL_HASH_IRQHandler+0xae>
 800a54e:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 800a552:	2a01      	cmp	r2, #1
 800a554:	d10b      	bne.n	800a56e <HAL_HASH_IRQHandler+0xae>
      {
        /* Disable Interrupts */
        __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800a556:	6a2a      	ldr	r2, [r5, #32]
 800a558:	f022 0203 	bic.w	r2, r2, #3
 800a55c:	622a      	str	r2, [r5, #32]

        /* Reset SuspendRequest */
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;

        /* Change the HASH state */
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 800a55e:	2208      	movs	r2, #8
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 800a560:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 800a564:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hhash->Status = HAL_OK;
 800a568:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a56c:	e076      	b.n	800a65c <HAL_HASH_IRQHandler+0x19c>
  uint32_t buffercounter;
  uint32_t inputcounter;
  uint32_t ret = HASH_DIGEST_CALCULATION_NOT_STARTED;

  /* If there are more than 64 bytes remaining to be entered */
  if(hhash->HashInCount > 64U)
 800a56e:	6a21      	ldr	r1, [r4, #32]
  {
    inputaddr = (uint32_t)hhash->pHashInBuffPtr;
 800a570:	68e3      	ldr	r3, [r4, #12]
  if(hhash->HashInCount > 64U)
 800a572:	2940      	cmp	r1, #64	; 0x40
    inputaddr = (uint32_t)hhash->pHashInBuffPtr;
 800a574:	461a      	mov	r2, r3
  if(hhash->HashInCount > 64U)
 800a576:	d91c      	bls.n	800a5b2 <HAL_HASH_IRQHandler+0xf2>
 800a578:	f103 0140 	add.w	r1, r3, #64	; 0x40
    /* Write the Input block in the Data IN register
      (16 32-bit words, or 64 bytes are entered) */
    for(buffercounter = 0U; buffercounter < 64U; buffercounter+=4U)
    {
      HASH->DIN = *(uint32_t*)inputaddr;
 800a57c:	f853 0b04 	ldr.w	r0, [r3], #4
 800a580:	6068      	str	r0, [r5, #4]
    for(buffercounter = 0U; buffercounter < 64U; buffercounter+=4U)
 800a582:	4299      	cmp	r1, r3
 800a584:	d1fa      	bne.n	800a57c <HAL_HASH_IRQHandler+0xbc>
      inputaddr+=4U;
    }
    /* If this is the start of input data entering, an additional word
      must be entered to start up the HASH processing */
    if(hhash->HashITCounter == 2U)
 800a586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d10d      	bne.n	800a5a8 <HAL_HASH_IRQHandler+0xe8>
    {
      HASH->DIN = *(uint32_t*)inputaddr;
 800a58c:	680b      	ldr	r3, [r1, #0]
 800a58e:	606b      	str	r3, [r5, #4]
      if(hhash->HashInCount >= 68U)
 800a590:	6a23      	ldr	r3, [r4, #32]
 800a592:	2b43      	cmp	r3, #67	; 0x43
 800a594:	d905      	bls.n	800a5a2 <HAL_HASH_IRQHandler+0xe2>
      {
        /* There are still data waiting to be entered in the Peripheral.
           Decrement buffer counter and set pointer to the proper
           memory location for the next data entering round. */
        hhash->HashInCount -= 68U;
 800a596:	6a23      	ldr	r3, [r4, #32]
 800a598:	3b44      	subs	r3, #68	; 0x44
 800a59a:	6223      	str	r3, [r4, #32]
        hhash->pHashInBuffPtr+= 68U;
 800a59c:	3244      	adds	r2, #68	; 0x44
    {
      /* 64 bytes have been entered and there are still some remaining:
         Decrement buffer counter and set pointer to the proper
        memory location for the next data entering round.*/
      hhash->HashInCount -= 64U;
      hhash->pHashInBuffPtr+= 64U;
 800a59e:	60e2      	str	r2, [r4, #12]
    /* Reset buffer counter */
    hhash->HashInCount = 0;
  }

  /* Return whether or digest calculation has started */
  return ret;
 800a5a0:	e7ca      	b.n	800a538 <HAL_HASH_IRQHandler+0x78>
        hhash->HashInCount = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6223      	str	r3, [r4, #32]
  return ret;
 800a5a6:	e7c7      	b.n	800a538 <HAL_HASH_IRQHandler+0x78>
      hhash->HashInCount -= 64U;
 800a5a8:	6a23      	ldr	r3, [r4, #32]
 800a5aa:	3b40      	subs	r3, #64	; 0x40
 800a5ac:	6223      	str	r3, [r4, #32]
      hhash->pHashInBuffPtr+= 64U;
 800a5ae:	3240      	adds	r2, #64	; 0x40
 800a5b0:	e7f5      	b.n	800a59e <HAL_HASH_IRQHandler+0xde>
    inputcounter = hhash->HashInCount;
 800a5b2:	6a22      	ldr	r2, [r4, #32]
    __HAL_HASH_DISABLE_IT(HASH_IT_DINI);
 800a5b4:	6a29      	ldr	r1, [r5, #32]
    for(buffercounter = 0U; buffercounter < ((inputcounter+3U)/4U); buffercounter++)
 800a5b6:	3203      	adds	r2, #3
    __HAL_HASH_DISABLE_IT(HASH_IT_DINI);
 800a5b8:	f021 0101 	bic.w	r1, r1, #1
 800a5bc:	f022 0203 	bic.w	r2, r2, #3
 800a5c0:	6229      	str	r1, [r5, #32]
    for(buffercounter = 0U; buffercounter < ((inputcounter+3U)/4U); buffercounter++)
 800a5c2:	441a      	add	r2, r3
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d10b      	bne.n	800a5e0 <HAL_HASH_IRQHandler+0x120>
    if (hhash->Accumulation == 1U)
 800a5c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d10c      	bne.n	800a5e8 <HAL_HASH_IRQHandler+0x128>
      hhash->Accumulation = 0U;
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	6425      	str	r5, [r4, #64]	; 0x40
        HAL_HASH_InCpltCallback(hhash);
 800a5d2:	4620      	mov	r0, r4
      hhash->State = HAL_HASH_STATE_READY;
 800a5d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        HAL_HASH_InCpltCallback(hhash);
 800a5d8:	f7ff ff6f 	bl	800a4ba <HAL_HASH_InCpltCallback>
    hhash->HashInCount = 0;
 800a5dc:	6225      	str	r5, [r4, #32]
  return ret;
 800a5de:	e7ab      	b.n	800a538 <HAL_HASH_IRQHandler+0x78>
      HASH->DIN = *(uint32_t*)inputaddr;
 800a5e0:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5e4:	6069      	str	r1, [r5, #4]
    for(buffercounter = 0U; buffercounter < ((inputcounter+3U)/4U); buffercounter++)
 800a5e6:	e7ed      	b.n	800a5c4 <HAL_HASH_IRQHandler+0x104>
      __HAL_HASH_START_DIGEST();
 800a5e8:	68ab      	ldr	r3, [r5, #8]
 800a5ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ee:	60ab      	str	r3, [r5, #8]
    hhash->HashInCount = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	6223      	str	r3, [r4, #32]
        HAL_HASH_InCpltCallback(hhash);
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f7ff ff60 	bl	800a4ba <HAL_HASH_InCpltCallback>
        if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1)
 800a5fa:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800a5fe:	2e03      	cmp	r6, #3
 800a600:	d12d      	bne.n	800a65e <HAL_HASH_IRQHandler+0x19e>
          if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, HASH_TIMEOUTVALUE) != HAL_OK)
 800a602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a606:	2201      	movs	r2, #1
 800a608:	2108      	movs	r1, #8
 800a60a:	4620      	mov	r0, r4
 800a60c:	f7ff feea 	bl	800a3e4 <HASH_WaitOnFlagUntilTimeout>
 800a610:	b168      	cbz	r0, 800a62e <HAL_HASH_IRQHandler+0x16e>
            __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800a612:	6a2b      	ldr	r3, [r5, #32]
 800a614:	f023 0303 	bic.w	r3, r3, #3
 800a618:	622b      	str	r3, [r5, #32]
  hhash->Status = HASH_IT(hhash);
 800a61a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    hhash->ErrorCode |= HAL_HASH_ERROR_IT;
 800a61e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a620:	f043 0301 	orr.w	r3, r3, #1
 800a624:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_HASH_ErrorCallback(hhash);
 800a626:	4620      	mov	r0, r4
 800a628:	f7ff ff49 	bl	800a4be <HAL_HASH_ErrorCallback>
 800a62c:	e784      	b.n	800a538 <HAL_HASH_IRQHandler+0x78>
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;        /* Move phase from Step 1 to Step 2 */
 800a62e:	2304      	movs	r3, #4
 800a630:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
          __HAL_HASH_SET_NBVALIDBITS(hhash->HashBuffSize);  /* Set NBLW for the input message */
 800a634:	68ab      	ldr	r3, [r5, #8]
 800a636:	69e2      	ldr	r2, [r4, #28]
 800a638:	f023 031f 	bic.w	r3, r3, #31
 800a63c:	f002 0103 	and.w	r1, r2, #3
 800a640:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a644:	60ab      	str	r3, [r5, #8]
          hhash->pHashInBuffPtr = hhash->pHashMsgBuffPtr;   /* Set the input data address */
 800a646:	69a3      	ldr	r3, [r4, #24]
          hhash->HashInCount = hhash->HashBuffSize;         /* Set the input data size (in bytes) */
 800a648:	6222      	str	r2, [r4, #32]
          hhash->pHashInBuffPtr = hhash->Init.pKey;          /* Set the key address */
 800a64a:	60e3      	str	r3, [r4, #12]
          hhash->HashITCounter = 1;                          /* Set ITCounter to 1 to indicate the start of a new phase */
 800a64c:	2301      	movs	r3, #1
 800a64e:	6263      	str	r3, [r4, #36]	; 0x24
          __HAL_HASH_ENABLE_IT(HASH_IT_DINI);                /* Enable IT (was disabled in HASH_Write_Block_Data) */
 800a650:	6a2b      	ldr	r3, [r5, #32]
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	622b      	str	r3, [r5, #32]
  hhash->Status = HASH_IT(hhash);
 800a658:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
}
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
        else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2)
 800a65e:	2e04      	cmp	r6, #4
 800a660:	f47f af6a 	bne.w	800a538 <HAL_HASH_IRQHandler+0x78>
          if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, HASH_TIMEOUTVALUE) != HAL_OK)
 800a664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a668:	2201      	movs	r2, #1
 800a66a:	2108      	movs	r1, #8
 800a66c:	4620      	mov	r0, r4
 800a66e:	f7ff feb9 	bl	800a3e4 <HASH_WaitOnFlagUntilTimeout>
 800a672:	b128      	cbz	r0, 800a680 <HAL_HASH_IRQHandler+0x1c0>
            __HAL_HASH_DISABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800a674:	6a2b      	ldr	r3, [r5, #32]
 800a676:	f023 0303 	bic.w	r3, r3, #3
 800a67a:	622b      	str	r3, [r5, #32]
  hhash->Status = HASH_IT(hhash);
 800a67c:	2303      	movs	r3, #3
 800a67e:	e731      	b.n	800a4e4 <HAL_HASH_IRQHandler+0x24>
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;         /* Move phase from Step 2 to Step 3 */
 800a680:	2305      	movs	r3, #5
 800a682:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
          __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);   /* Set NBLW for the key */
 800a686:	68ab      	ldr	r3, [r5, #8]
 800a688:	6862      	ldr	r2, [r4, #4]
 800a68a:	f023 031f 	bic.w	r3, r3, #31
 800a68e:	f002 0103 	and.w	r1, r2, #3
 800a692:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a696:	60ab      	str	r3, [r5, #8]
          hhash->pHashInBuffPtr = hhash->Init.pKey;          /* Set the key address */
 800a698:	68a3      	ldr	r3, [r4, #8]
          hhash->HashInCount = hhash->Init.KeySize;          /* Set the key size (in bytes) */
 800a69a:	6222      	str	r2, [r4, #32]
          hhash->pHashInBuffPtr = hhash->Init.pKey;          /* Set the key address */
 800a69c:	e7d5      	b.n	800a64a <HAL_HASH_IRQHandler+0x18a>
  hhash->Status = HASH_IT(hhash);
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e720      	b.n	800a4e4 <HAL_HASH_IRQHandler+0x24>
 800a6a2:	bf00      	nop
 800a6a4:	50060400 	.word	0x50060400
 800a6a8:	00040080 	.word	0x00040080

0800a6ac <HAL_HASH_GetState>:
  return hhash->State;
 800a6ac:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800a6b0:	4770      	bx	lr

0800a6b2 <HAL_HASH_GetStatus>:
}
 800a6b2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_HASH_ContextSaving>:
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->IMR,HASH_IT_DINI|HASH_IT_DCI);
 800a6b8:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <HAL_HASH_ContextSaving+0x3c>)
 800a6ba:	6a1a      	ldr	r2, [r3, #32]
 800a6bc:	f002 0203 	and.w	r2, r2, #3
 800a6c0:	600a      	str	r2, [r1, #0]
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->STR,HASH_STR_NBLW);
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	f002 021f 	and.w	r2, r2, #31
 800a6c8:	604a      	str	r2, [r1, #4]
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->CR,HASH_CR_DMAE|HASH_CR_DATATYPE|HASH_CR_MODE|HASH_CR_ALGO|HASH_CR_LKEY|HASH_CR_MDMAT);
 800a6ca:	681b      	ldr	r3, [r3, #0]
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 800a6cc:	4a0a      	ldr	r2, [pc, #40]	; (800a6f8 <HAL_HASH_ContextSaving+0x40>)
  *(uint32_t*)(mem_ptr) = READ_BIT(HASH->CR,HASH_CR_DMAE|HASH_CR_DATATYPE|HASH_CR_MODE|HASH_CR_ALGO|HASH_CR_LKEY|HASH_CR_MDMAT);
 800a6ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a6d2:	f423 037a 	bic.w	r3, r3, #16384000	; 0xfa0000
 800a6d6:	f423 435f 	bic.w	r3, r3, #57088	; 0xdf00
 800a6da:	f023 0307 	bic.w	r3, r3, #7
 800a6de:	608b      	str	r3, [r1, #8]
  uint32_t csr_ptr = (uint32_t)HASH->CSR;
 800a6e0:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <HAL_HASH_ContextSaving+0x44>)
  mem_ptr+=4U;
 800a6e2:	310c      	adds	r1, #12
    *(uint32_t*)(mem_ptr) = *(uint32_t*)(csr_ptr);
 800a6e4:	f853 0b04 	ldr.w	r0, [r3], #4
 800a6e8:	f841 0b04 	str.w	r0, [r1], #4
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d1f9      	bne.n	800a6e4 <HAL_HASH_ContextSaving+0x2c>
}
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	50060400 	.word	0x50060400
 800a6f8:	500605d0 	.word	0x500605d0
 800a6fc:	500604f8 	.word	0x500604f8

0800a700 <HAL_HASH_ContextRestoring>:
  WRITE_REG(HASH->IMR, (*(uint32_t*)(mem_ptr)));
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <HAL_HASH_ContextRestoring+0x2c>)
 800a702:	680a      	ldr	r2, [r1, #0]
 800a704:	621a      	str	r2, [r3, #32]
  WRITE_REG(HASH->STR, (*(uint32_t*)(mem_ptr)));
 800a706:	684a      	ldr	r2, [r1, #4]
 800a708:	609a      	str	r2, [r3, #8]
  WRITE_REG(HASH->CR, (*(uint32_t*)(mem_ptr)));
 800a70a:	688a      	ldr	r2, [r1, #8]
 800a70c:	601a      	str	r2, [r3, #0]
  __HAL_HASH_INIT();
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	f042 0204 	orr.w	r2, r2, #4
 800a714:	601a      	str	r2, [r3, #0]
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 800a716:	4a06      	ldr	r2, [pc, #24]	; (800a730 <HAL_HASH_ContextRestoring+0x30>)
  mem_ptr+=4U;
 800a718:	310c      	adds	r1, #12
  uint32_t csr_ptr = (uint32_t)HASH->CSR;
 800a71a:	33f8      	adds	r3, #248	; 0xf8
    WRITE_REG((*(uint32_t*)(csr_ptr)), (*(uint32_t*)(mem_ptr)));
 800a71c:	f851 0b04 	ldr.w	r0, [r1], #4
 800a720:	f843 0b04 	str.w	r0, [r3], #4
  for (i = HASH_NUMBER_OF_CSR_REGISTERS; i >0U; i--)
 800a724:	4293      	cmp	r3, r2
 800a726:	d1f9      	bne.n	800a71c <HAL_HASH_ContextRestoring+0x1c>
}
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	50060400 	.word	0x50060400
 800a730:	500605d0 	.word	0x500605d0

0800a734 <HAL_HASH_SwFeed_ProcessSuspend>:
  hhash->SuspendRequest = HAL_HASH_SUSPEND;
 800a734:	2301      	movs	r3, #1
 800a736:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
}
 800a73a:	4770      	bx	lr

0800a73c <HAL_HASH_GetError>:
  return hhash->ErrorCode;
 800a73c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800a73e:	4770      	bx	lr

0800a740 <HASH_Start>:
  * @param  Timeout Timeout value.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout, uint32_t Algorithm)
{
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	461e      	mov	r6, r3
  uint8_t *pInBuffer_tmp;  /* input data address, input parameter of HASH_WriteData()         */
  uint32_t Size_tmp; /* input data size (in bytes), input parameter of HASH_WriteData() */
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800a744:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35


  /* Initiate HASH processing in case of start or resumption */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800a748:	2b01      	cmp	r3, #1
{
 800a74a:	4604      	mov	r4, r0
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800a74c:	b2d8      	uxtb	r0, r3
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800a74e:	d001      	beq.n	800a754 <HASH_Start+0x14>
 800a750:	2808      	cmp	r0, #8
 800a752:	d17a      	bne.n	800a84a <HASH_Start+0x10a>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (pOutBuffer == NULL))
 800a754:	b101      	cbz	r1, 800a758 <HASH_Start+0x18>
 800a756:	b926      	cbnz	r6, 800a762 <HASH_Start+0x22>
    {
      hhash->State = HAL_HASH_STATE_READY;
 800a758:	2501      	movs	r5, #1
 800a75a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a75e:	4628      	mov	r0, r5
 800a760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hhash);
 800a762:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a766:	2b01      	cmp	r3, #1
 800a768:	d06f      	beq.n	800a84a <HASH_Start+0x10a>
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800a76a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    __HAL_LOCK(hhash);
 800a76e:	2501      	movs	r5, #1
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800a770:	42ab      	cmp	r3, r5
    __HAL_LOCK(hhash);
 800a772:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800a776:	d148      	bne.n	800a80a <HASH_Start+0xca>
      MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 800a778:	4f36      	ldr	r7, [pc, #216]	; (800a854 <HASH_Start+0x114>)
 800a77a:	9b07      	ldr	r3, [sp, #28]
      hhash->State = HAL_HASH_STATE_BUSY;
 800a77c:	f04f 0c02 	mov.w	ip, #2
 800a780:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
      MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 800a784:	683d      	ldr	r5, [r7, #0]
 800a786:	f425 25a0 	bic.w	r5, r5, #327680	; 0x50000
 800a78a:	f025 05c4 	bic.w	r5, r5, #196	; 0xc4
 800a78e:	431d      	orrs	r5, r3
 800a790:	f045 0504 	orr.w	r5, r5, #4
 800a794:	603d      	str	r5, [r7, #0]
      __HAL_HASH_SET_NBVALIDBITS(Size);
 800a796:	68b8      	ldr	r0, [r7, #8]
 800a798:	f002 0303 	and.w	r3, r2, #3
 800a79c:	f020 001f 	bic.w	r0, r0, #31
 800a7a0:	ea40 03c3 	orr.w	r3, r0, r3, lsl #3
 800a7a4:	60bb      	str	r3, [r7, #8]
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 800a7a6:	f884 c02d 	strb.w	ip, [r4, #45]	; 0x2d
    hhash->Status = HASH_WriteData(hhash, pInBuffer_tmp, Size_tmp);
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7ff fd78 	bl	800a2a0 <HASH_WriteData>
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d1d1      	bne.n	800a75e <HASH_Start+0x1e>
    if (hhash->State != HAL_HASH_STATE_SUSPENDED)
 800a7ba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d03b      	beq.n	800a83a <HASH_Start+0xfa>
      __HAL_HASH_START_DIGEST();
 800a7c2:	4f24      	ldr	r7, [pc, #144]	; (800a854 <HASH_Start+0x114>)
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7ca:	60bb      	str	r3, [r7, #8]
      if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	9b06      	ldr	r3, [sp, #24]
 800a7d0:	2102      	movs	r1, #2
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7ff fe06 	bl	800a3e4 <HASH_WaitOnFlagUntilTimeout>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d138      	bne.n	800a84e <HASH_Start+0x10e>
      HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	4b1e      	ldr	r3, [pc, #120]	; (800a858 <HASH_Start+0x118>)
 800a7e0:	421a      	tst	r2, r3
 800a7e2:	d02e      	beq.n	800a842 <HASH_Start+0x102>
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	401a      	ands	r2, r3
 800a7e8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800a7ec:	d02b      	beq.n	800a846 <HASH_Start+0x106>
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	4393      	bics	r3, r2
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2120      	moveq	r1, #32
 800a7f6:	2110      	movne	r1, #16
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff fd91 	bl	800a320 <HASH_GetDigest>
      hhash->State = HAL_HASH_STATE_READY;
 800a7fe:	2301      	movs	r3, #1
 800a800:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      hhash->Phase = HAL_HASH_PHASE_READY;
 800a804:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800a808:	e017      	b.n	800a83a <HASH_Start+0xfa>
    else if (hhash->Phase == HAL_HASH_PHASE_PROCESS)
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d113      	bne.n	800a836 <HASH_Start+0xf6>
      if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800a80e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a812:	2b08      	cmp	r3, #8
        __HAL_HASH_SET_NBVALIDBITS(Size);
 800a814:	bf15      	itete	ne
 800a816:	4d0f      	ldrne	r5, [pc, #60]	; (800a854 <HASH_Start+0x114>)
        Size_tmp = hhash->HashInCount;
 800a818:	6a22      	ldreq	r2, [r4, #32]
        __HAL_HASH_SET_NBVALIDBITS(Size);
 800a81a:	68a8      	ldrne	r0, [r5, #8]
        pInBuffer_tmp = hhash->pHashInBuffPtr;
 800a81c:	68e1      	ldreq	r1, [r4, #12]
        __HAL_HASH_SET_NBVALIDBITS(Size);
 800a81e:	bf1f      	itttt	ne
 800a820:	f002 0303 	andne.w	r3, r2, #3
 800a824:	f020 001f 	bicne.w	r0, r0, #31
 800a828:	ea40 03c3 	orrne.w	r3, r0, r3, lsl #3
 800a82c:	60ab      	strne	r3, [r5, #8]
      hhash->State = HAL_HASH_STATE_BUSY;
 800a82e:	2302      	movs	r3, #2
 800a830:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800a834:	e7b9      	b.n	800a7aa <HASH_Start+0x6a>
      hhash->State = HAL_HASH_STATE_READY;
 800a836:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    __HAL_UNLOCK(hhash);
 800a83a:	2300      	movs	r3, #0
 800a83c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800a840:	e78d      	b.n	800a75e <HASH_Start+0x1e>
      HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 800a842:	2114      	movs	r1, #20
 800a844:	e7d8      	b.n	800a7f8 <HASH_Start+0xb8>
 800a846:	211c      	movs	r1, #28
 800a848:	e7d6      	b.n	800a7f8 <HASH_Start+0xb8>
    return HAL_BUSY;
 800a84a:	2502      	movs	r5, #2
 800a84c:	e787      	b.n	800a75e <HASH_Start+0x1e>
        return HAL_TIMEOUT;
 800a84e:	2503      	movs	r5, #3
 800a850:	e785      	b.n	800a75e <HASH_Start+0x1e>
 800a852:	bf00      	nop
 800a854:	50060400 	.word	0x50060400
 800a858:	00040080 	.word	0x00040080

0800a85c <HAL_HASH_MD5_Start>:
{
 800a85c:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_MD5);
 800a85e:	2480      	movs	r4, #128	; 0x80
 800a860:	9401      	str	r4, [sp, #4]
 800a862:	9c04      	ldr	r4, [sp, #16]
 800a864:	9400      	str	r4, [sp, #0]
 800a866:	f7ff ff6b 	bl	800a740 <HASH_Start>
}
 800a86a:	b002      	add	sp, #8
 800a86c:	bd10      	pop	{r4, pc}

0800a86e <HAL_HASH_MD5_Accmlt_End>:
 800a86e:	f7ff bff5 	b.w	800a85c <HAL_HASH_MD5_Start>

0800a872 <HAL_HASH_SHA1_Start>:
{
 800a872:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA1);
 800a874:	2400      	movs	r4, #0
 800a876:	9401      	str	r4, [sp, #4]
 800a878:	9c04      	ldr	r4, [sp, #16]
 800a87a:	9400      	str	r4, [sp, #0]
 800a87c:	f7ff ff60 	bl	800a740 <HASH_Start>
}
 800a880:	b002      	add	sp, #8
 800a882:	bd10      	pop	{r4, pc}

0800a884 <HAL_HASH_SHA1_Accmlt_End>:
 800a884:	f7ff bff5 	b.w	800a872 <HAL_HASH_SHA1_Start>

0800a888 <HASH_Accumulate>:
  * @param  Size length of the input buffer in bytes, must be a multiple of 4.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Accumulate(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint32_t Algorithm)
{
 800a888:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pInBuffer_tmp;   /* input data address, input parameter of HASH_WriteData()         */
  uint32_t Size_tmp;  /* input data size (in bytes), input parameter of HASH_WriteData() */
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800a88a:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 800a88e:	4604      	mov	r4, r0

  /* Make sure the input buffer size (in bytes) is a multiple of 4 */
  if ((Size % 4U) != 0U)
 800a890:	0790      	lsls	r0, r2, #30
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800a892:	b2ed      	uxtb	r5, r5
  if ((Size % 4U) != 0U)
 800a894:	d13e      	bne.n	800a914 <HASH_Accumulate+0x8c>
  {
    return  HAL_ERROR;
  }

  /* Initiate HASH processing in case of start or resumption */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800a896:	2d01      	cmp	r5, #1
 800a898:	d001      	beq.n	800a89e <HASH_Accumulate+0x16>
 800a89a:	2d08      	cmp	r5, #8
 800a89c:	d13c      	bne.n	800a918 <HASH_Accumulate+0x90>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0U))
 800a89e:	b101      	cbz	r1, 800a8a2 <HASH_Accumulate+0x1a>
 800a8a0:	b91a      	cbnz	r2, 800a8aa <HASH_Accumulate+0x22>
    {
      hhash->State = HAL_HASH_STATE_READY;
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  {
    return HAL_BUSY;
  }


}
 800a8a8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hhash);
 800a8aa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800a8ae:	2801      	cmp	r0, #1
 800a8b0:	d032      	beq.n	800a918 <HASH_Accumulate+0x90>
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800a8b8:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800a8bc:	2808      	cmp	r0, #8
 800a8be:	f04f 0002 	mov.w	r0, #2
      hhash->State = HAL_HASH_STATE_BUSY;
 800a8c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800a8c6:	d113      	bne.n	800a8f0 <HASH_Accumulate+0x68>
      pInBuffer_tmp = hhash->pHashInBuffPtr;  /* pInBuffer_tmp is set to the input data address */
 800a8c8:	68e1      	ldr	r1, [r4, #12]
      Size_tmp = hhash->HashInCount;          /* Size_tmp contains the input data size in bytes */
 800a8ca:	6a22      	ldr	r2, [r4, #32]
    hhash->Status = HASH_WriteData(hhash, pInBuffer_tmp, Size_tmp);
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f7ff fce7 	bl	800a2a0 <HASH_WriteData>
 800a8d2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d1e6      	bne.n	800a8a8 <HASH_Accumulate+0x20>
    if (hhash->State != HAL_HASH_STATE_SUSPENDED)
 800a8da:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a8de:	2b08      	cmp	r3, #8
      hhash->State = HAL_HASH_STATE_READY;
 800a8e0:	bf1c      	itt	ne
 800a8e2:	2301      	movne	r3, #1
 800a8e4:	f884 3035 	strbne.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hhash);
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800a8ee:	e7db      	b.n	800a8a8 <HASH_Accumulate+0x20>
      if(hhash->Phase == HAL_HASH_PHASE_READY)
 800a8f0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800a8f4:	2801      	cmp	r0, #1
 800a8f6:	d109      	bne.n	800a90c <HASH_Accumulate+0x84>
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 800a8f8:	4e08      	ldr	r6, [pc, #32]	; (800a91c <HASH_Accumulate+0x94>)
 800a8fa:	6830      	ldr	r0, [r6, #0]
 800a8fc:	f420 20a0 	bic.w	r0, r0, #327680	; 0x50000
 800a900:	f020 00c4 	bic.w	r0, r0, #196	; 0xc4
 800a904:	4318      	orrs	r0, r3
 800a906:	f040 0004 	orr.w	r0, r0, #4
 800a90a:	6030      	str	r0, [r6, #0]
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 800a90c:	2302      	movs	r3, #2
 800a90e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800a912:	e7db      	b.n	800a8cc <HASH_Accumulate+0x44>
    return  HAL_ERROR;
 800a914:	2001      	movs	r0, #1
 800a916:	e7c7      	b.n	800a8a8 <HASH_Accumulate+0x20>
    return HAL_BUSY;
 800a918:	2002      	movs	r0, #2
 800a91a:	e7c5      	b.n	800a8a8 <HASH_Accumulate+0x20>
 800a91c:	50060400 	.word	0x50060400

0800a920 <HAL_HASH_MD5_Accmlt>:
  return  HASH_Accumulate(hhash, pInBuffer, Size,HASH_ALGOSELECTION_MD5);
 800a920:	2380      	movs	r3, #128	; 0x80
 800a922:	f7ff bfb1 	b.w	800a888 <HASH_Accumulate>

0800a926 <HAL_HASH_SHA1_Accmlt>:
  return  HASH_Accumulate(hhash, pInBuffer, Size,HASH_ALGOSELECTION_SHA1);
 800a926:	2300      	movs	r3, #0
 800a928:	f7ff bfae 	b.w	800a888 <HASH_Accumulate>

0800a92c <HASH_Accumulate_IT>:
  * @param  Size length of the input buffer in bytes, must be a multiple of 4.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Accumulate_IT(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint32_t Algorithm)
{
 800a92c:	b567      	push	{r0, r1, r2, r5, r6, lr}
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800a92e:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 800a932:	9101      	str	r1, [sp, #4]
  uint32_t SizeVar = Size;

  /* Make sure the input buffer size (in bytes) is a multiple of 4 */
  if ((Size % 4U) != 0U)
 800a934:	0796      	lsls	r6, r2, #30
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800a936:	b2ed      	uxtb	r5, r5
  if ((Size % 4U) != 0U)
 800a938:	d154      	bne.n	800a9e4 <HASH_Accumulate_IT+0xb8>
  {
    return  HAL_ERROR;
  }

  /* Initiate HASH processing in case of start or resumption */
  if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800a93a:	2d01      	cmp	r5, #1
 800a93c:	d001      	beq.n	800a942 <HASH_Accumulate_IT+0x16>
 800a93e:	2d08      	cmp	r5, #8
 800a940:	d152      	bne.n	800a9e8 <HASH_Accumulate_IT+0xbc>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0U))
 800a942:	b101      	cbz	r1, 800a946 <HASH_Accumulate_IT+0x1a>
 800a944:	b92a      	cbnz	r2, 800a952 <HASH_Accumulate_IT+0x26>
    {
      hhash->State = HAL_HASH_STATE_READY;
 800a946:	2301      	movs	r3, #1
 800a948:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  else
  {
    return HAL_BUSY;
  }

}
 800a94c:	4618      	mov	r0, r3
 800a94e:	b003      	add	sp, #12
 800a950:	bd60      	pop	{r5, r6, pc}
    __HAL_LOCK(hhash);
 800a952:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 800a956:	2901      	cmp	r1, #1
 800a958:	d046      	beq.n	800a9e8 <HASH_Accumulate_IT+0xbc>
 800a95a:	2101      	movs	r1, #1
 800a95c:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800a960:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 800a964:	4d21      	ldr	r5, [pc, #132]	; (800a9ec <HASH_Accumulate_IT+0xc0>)
 800a966:	2908      	cmp	r1, #8
 800a968:	f04f 0102 	mov.w	r1, #2
      hhash->State = HAL_HASH_STATE_BUSY;
 800a96c:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800a970:	d109      	bne.n	800a986 <HASH_Accumulate_IT+0x5a>
    hhash->Accumulation = 1U;
 800a972:	2301      	movs	r3, #1
 800a974:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hhash);
 800a976:	2300      	movs	r3, #0
 800a978:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    __HAL_HASH_ENABLE_IT(HASH_IT_DINI);
 800a97c:	6a2a      	ldr	r2, [r5, #32]
 800a97e:	f042 0201 	orr.w	r2, r2, #1
 800a982:	622a      	str	r2, [r5, #32]
    return HAL_OK;
 800a984:	e7e2      	b.n	800a94c <HASH_Accumulate_IT+0x20>
      if(hhash->Phase == HAL_HASH_PHASE_READY)
 800a986:	f890 602d 	ldrb.w	r6, [r0, #45]	; 0x2d
 800a98a:	2e01      	cmp	r6, #1
 800a98c:	d11b      	bne.n	800a9c6 <HASH_Accumulate_IT+0x9a>
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 800a98e:	6829      	ldr	r1, [r5, #0]
 800a990:	f421 21a0 	bic.w	r1, r1, #327680	; 0x50000
 800a994:	f021 01c4 	bic.w	r1, r1, #196	; 0xc4
 800a998:	4319      	orrs	r1, r3
 800a99a:	f041 0104 	orr.w	r1, r1, #4
 800a99e:	6029      	str	r1, [r5, #0]
        hhash->HashITCounter = 1;
 800a9a0:	6246      	str	r6, [r0, #36]	; 0x24
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
      while((!(__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))) && (SizeVar > 0U))
 800a9a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9aa:	07d9      	lsls	r1, r3, #31
 800a9ac:	d400      	bmi.n	800a9b0 <HASH_Accumulate_IT+0x84>
 800a9ae:	b96a      	cbnz	r2, 800a9cc <HASH_Accumulate_IT+0xa0>
      if ((!(__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))) || (SizeVar == 0U))
 800a9b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9b2:	07db      	lsls	r3, r3, #31
 800a9b4:	d500      	bpl.n	800a9b8 <HASH_Accumulate_IT+0x8c>
 800a9b6:	b98a      	cbnz	r2, 800a9dc <HASH_Accumulate_IT+0xb0>
        hhash->State = HAL_HASH_STATE_READY;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        __HAL_UNLOCK(hhash);
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
        return HAL_OK;
 800a9c4:	e7c2      	b.n	800a94c <HASH_Accumulate_IT+0x20>
         hhash->HashITCounter = 3; /* 'cruise-speed' reached during a previous buffer processing */
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	6243      	str	r3, [r0, #36]	; 0x24
 800a9ca:	e7ea      	b.n	800a9a2 <HASH_Accumulate_IT+0x76>
        HASH->DIN = *(uint32_t*)inputaddr;
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	606b      	str	r3, [r5, #4]
        inputaddr+=4U;
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	9301      	str	r3, [sp, #4]
        SizeVar-=4U;
 800a9d8:	3a04      	subs	r2, #4
 800a9da:	e7e5      	b.n	800a9a8 <HASH_Accumulate_IT+0x7c>
      hhash->HashInCount = SizeVar;               /* Counter used to keep track of number of data
 800a9dc:	6202      	str	r2, [r0, #32]
      hhash->pHashInBuffPtr = (uint8_t *)inputaddr;       /* Points at data which will be fed to the Peripheral at
 800a9de:	9b01      	ldr	r3, [sp, #4]
 800a9e0:	60c3      	str	r3, [r0, #12]
 800a9e2:	e7c6      	b.n	800a972 <HASH_Accumulate_IT+0x46>
    return  HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e7b1      	b.n	800a94c <HASH_Accumulate_IT+0x20>
    return HAL_BUSY;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e7af      	b.n	800a94c <HASH_Accumulate_IT+0x20>
 800a9ec:	50060400 	.word	0x50060400

0800a9f0 <HAL_HASH_MD5_Accmlt_IT>:
  return  HASH_Accumulate_IT(hhash, pInBuffer, Size,HASH_ALGOSELECTION_MD5);
 800a9f0:	2380      	movs	r3, #128	; 0x80
 800a9f2:	f7ff bf9b 	b.w	800a92c <HASH_Accumulate_IT>

0800a9f6 <HAL_HASH_SHA1_Accmlt_IT>:
  return  HASH_Accumulate_IT(hhash, pInBuffer, Size,HASH_ALGOSELECTION_SHA1);
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f7ff bf98 	b.w	800a92c <HASH_Accumulate_IT>

0800a9fc <HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Start_IT(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Algorithm)
{
 800a9fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800a9fe:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 800aa02:	9101      	str	r1, [sp, #4]
  uint32_t polling_step = 0U;
  uint32_t initialization_skipped = 0U;
  uint32_t SizeVar = Size;

  /* If State is ready or suspended, start or resume IT-based HASH processing */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800aa04:	2c01      	cmp	r4, #1
   HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800aa06:	b2e5      	uxtb	r5, r4
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800aa08:	d001      	beq.n	800aa0e <HASH_Start_IT+0x12>
 800aa0a:	2d08      	cmp	r5, #8
 800aa0c:	d17f      	bne.n	800ab0e <HASH_Start_IT+0x112>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0U) || (pOutBuffer == NULL))
 800aa0e:	b109      	cbz	r1, 800aa14 <HASH_Start_IT+0x18>
 800aa10:	b102      	cbz	r2, 800aa14 <HASH_Start_IT+0x18>
 800aa12:	b92b      	cbnz	r3, 800aa20 <HASH_Start_IT+0x24>
    {
      hhash->State = HAL_HASH_STATE_READY;
 800aa14:	2201      	movs	r2, #1
 800aa16:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  else
  {
    return HAL_BUSY;
  }

}
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	b002      	add	sp, #8
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hhash);
 800aa20:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800aa24:	2c01      	cmp	r4, #1
 800aa26:	f04f 0402 	mov.w	r4, #2
 800aa2a:	d072      	beq.n	800ab12 <HASH_Start_IT+0x116>
    hhash->State = HAL_HASH_STATE_BUSY;
 800aa2c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800aa30:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
    __HAL_LOCK(hhash);
 800aa34:	2601      	movs	r6, #1
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800aa36:	42b4      	cmp	r4, r6
    __HAL_LOCK(hhash);
 800aa38:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
    hhash->HashITCounter = 1;
 800aa3c:	4c36      	ldr	r4, [pc, #216]	; (800ab18 <HASH_Start_IT+0x11c>)
 800aa3e:	6246      	str	r6, [r0, #36]	; 0x24
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800aa40:	d115      	bne.n	800aa6e <HASH_Start_IT+0x72>
      MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 800aa42:	6825      	ldr	r5, [r4, #0]
 800aa44:	9e06      	ldr	r6, [sp, #24]
 800aa46:	f425 25a0 	bic.w	r5, r5, #327680	; 0x50000
 800aa4a:	f025 05c4 	bic.w	r5, r5, #196	; 0xc4
 800aa4e:	4335      	orrs	r5, r6
 800aa50:	f045 0504 	orr.w	r5, r5, #4
 800aa54:	6025      	str	r5, [r4, #0]
     __HAL_HASH_SET_NBVALIDBITS(SizeVar);
 800aa56:	68a6      	ldr	r6, [r4, #8]
 800aa58:	f002 0503 	and.w	r5, r2, #3
 800aa5c:	f026 061f 	bic.w	r6, r6, #31
 800aa60:	ea46 05c5 	orr.w	r5, r6, r5, lsl #3
 800aa64:	60a5      	str	r5, [r4, #8]
      hhash->pHashOutBuffPtr = pOutBuffer;     /* Points at the computed digest */
 800aa66:	e9c0 1303 	strd	r1, r3, [r0, #12]
      hhash->HashInCount = SizeVar;            /* Counter used to keep track of number of data
 800aa6a:	6202      	str	r2, [r0, #32]
  uint32_t initialization_skipped = 0U;
 800aa6c:	2600      	movs	r6, #0
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 800aa6e:	2102      	movs	r1, #2
 800aa70:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
  uint32_t polling_step = 0U;
 800aa74:	2100      	movs	r1, #0
    while((!(__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))) && (SizeVar > 3U))
 800aa76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa78:	07ed      	lsls	r5, r5, #31
 800aa7a:	d401      	bmi.n	800aa80 <HASH_Start_IT+0x84>
 800aa7c:	2a03      	cmp	r2, #3
 800aa7e:	d80d      	bhi.n	800aa9c <HASH_Start_IT+0xa0>
    if (polling_step == 1U)
 800aa80:	b349      	cbz	r1, 800aad6 <HASH_Start_IT+0xda>
      if (SizeVar == 0U)
 800aa82:	b9a2      	cbnz	r2, 800aaae <HASH_Start_IT+0xb2>
        hhash->pHashOutBuffPtr = pOutBuffer;     /* Points at the computed digest */
 800aa84:	6103      	str	r3, [r0, #16]
         __HAL_HASH_START_DIGEST();
 800aa86:	68a3      	ldr	r3, [r4, #8]
 800aa88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa8c:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(hhash);
 800aa8e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
        __HAL_HASH_ENABLE_IT(HASH_IT_DCI);
 800aa92:	6a23      	ldr	r3, [r4, #32]
 800aa94:	f043 0302 	orr.w	r3, r3, #2
    __HAL_HASH_ENABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800aa98:	6223      	str	r3, [r4, #32]
    return HAL_OK;
 800aa9a:	e7be      	b.n	800aa1a <HASH_Start_IT+0x1e>
      HASH->DIN = *(uint32_t*)inputaddr;
 800aa9c:	9901      	ldr	r1, [sp, #4]
 800aa9e:	6809      	ldr	r1, [r1, #0]
 800aaa0:	6061      	str	r1, [r4, #4]
      inputaddr+=4U;
 800aaa2:	9901      	ldr	r1, [sp, #4]
 800aaa4:	3104      	adds	r1, #4
 800aaa6:	9101      	str	r1, [sp, #4]
      SizeVar-=4U;
 800aaa8:	3a04      	subs	r2, #4
      polling_step = 1U; /* note that some words are entered before enabling the interrupt */
 800aaaa:	2101      	movs	r1, #1
 800aaac:	e7e3      	b.n	800aa76 <HASH_Start_IT+0x7a>
      else if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 800aaae:	6a61      	ldr	r1, [r4, #36]	; 0x24
        __HAL_HASH_SET_NBVALIDBITS(SizeVar);  /* Update the configuration of the number of valid bits in last word of the message */
 800aab0:	f002 0503 	and.w	r5, r2, #3
      else if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 800aab4:	f011 0101 	ands.w	r1, r1, #1
        __HAL_HASH_SET_NBVALIDBITS(SizeVar);  /* Update the configuration of the number of valid bits in last word of the message */
 800aab8:	ea4f 05c5 	mov.w	r5, r5, lsl #3
      else if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 800aabc:	d012      	beq.n	800aae4 <HASH_Start_IT+0xe8>
        hhash->HashInCount = SizeVar;
 800aabe:	6202      	str	r2, [r0, #32]
        hhash->pHashInBuffPtr = (uint8_t *)inputaddr;
 800aac0:	9a01      	ldr	r2, [sp, #4]
 800aac2:	60c2      	str	r2, [r0, #12]
        __HAL_HASH_SET_NBVALIDBITS(SizeVar);  /* Update the configuration of the number of valid bits in last word of the message */
 800aac4:	68a2      	ldr	r2, [r4, #8]
 800aac6:	f022 021f 	bic.w	r2, r2, #31
 800aaca:	432a      	orrs	r2, r5
 800aacc:	60a2      	str	r2, [r4, #8]
        hhash->pHashOutBuffPtr = pOutBuffer;  /* Points at the computed digest */
 800aace:	6103      	str	r3, [r0, #16]
        if (initialization_skipped == 1U)
 800aad0:	b10e      	cbz	r6, 800aad6 <HASH_Start_IT+0xda>
          hhash->HashITCounter = 3; /* 'cruise-speed' reached during a previous buffer processing */
 800aad2:	2303      	movs	r3, #3
 800aad4:	6243      	str	r3, [r0, #36]	; 0x24
    __HAL_UNLOCK(hhash);
 800aad6:	2200      	movs	r2, #0
 800aad8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    __HAL_HASH_ENABLE_IT(HASH_IT_DINI|HASH_IT_DCI);
 800aadc:	6a23      	ldr	r3, [r4, #32]
 800aade:	f043 0303 	orr.w	r3, r3, #3
 800aae2:	e7d9      	b.n	800aa98 <HASH_Start_IT+0x9c>
        __HAL_HASH_SET_NBVALIDBITS(SizeVar);
 800aae4:	68a2      	ldr	r2, [r4, #8]
 800aae6:	f022 021f 	bic.w	r2, r2, #31
 800aaea:	432a      	orrs	r2, r5
 800aaec:	60a2      	str	r2, [r4, #8]
        HASH->DIN = *(uint32_t*)inputaddr;
 800aaee:	9a01      	ldr	r2, [sp, #4]
 800aaf0:	6812      	ldr	r2, [r2, #0]
 800aaf2:	6062      	str	r2, [r4, #4]
        hhash->pHashOutBuffPtr = pOutBuffer;     /* Points at the computed digest */
 800aaf4:	6103      	str	r3, [r0, #16]
         __HAL_HASH_START_DIGEST();
 800aaf6:	68a3      	ldr	r3, [r4, #8]
 800aaf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aafc:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(hhash);
 800aafe:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
        __HAL_HASH_ENABLE_IT(HASH_IT_DCI);
 800ab02:	6a23      	ldr	r3, [r4, #32]
 800ab04:	f043 0302 	orr.w	r3, r3, #2
 800ab08:	6223      	str	r3, [r4, #32]
        return HAL_OK;
 800ab0a:	460a      	mov	r2, r1
 800ab0c:	e785      	b.n	800aa1a <HASH_Start_IT+0x1e>
    return HAL_BUSY;
 800ab0e:	2202      	movs	r2, #2
 800ab10:	e783      	b.n	800aa1a <HASH_Start_IT+0x1e>
 800ab12:	4622      	mov	r2, r4
 800ab14:	e781      	b.n	800aa1a <HASH_Start_IT+0x1e>
 800ab16:	bf00      	nop
 800ab18:	50060400 	.word	0x50060400

0800ab1c <HAL_HASH_MD5_Start_IT>:
{
 800ab1c:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start_IT(hhash, pInBuffer, Size, pOutBuffer,HASH_ALGOSELECTION_MD5);
 800ab1e:	2480      	movs	r4, #128	; 0x80
 800ab20:	9400      	str	r4, [sp, #0]
 800ab22:	f7ff ff6b 	bl	800a9fc <HASH_Start_IT>
}
 800ab26:	b002      	add	sp, #8
 800ab28:	bd10      	pop	{r4, pc}

0800ab2a <HAL_HASH_MD5_Accmlt_End_IT>:
 800ab2a:	f7ff bff7 	b.w	800ab1c <HAL_HASH_MD5_Start_IT>

0800ab2e <HAL_HASH_SHA1_Start_IT>:
{
 800ab2e:	b513      	push	{r0, r1, r4, lr}
  return HASH_Start_IT(hhash, pInBuffer, Size, pOutBuffer,HASH_ALGOSELECTION_SHA1);
 800ab30:	2400      	movs	r4, #0
 800ab32:	9400      	str	r4, [sp, #0]
 800ab34:	f7ff ff62 	bl	800a9fc <HASH_Start_IT>
}
 800ab38:	b002      	add	sp, #8
 800ab3a:	bd10      	pop	{r4, pc}

0800ab3c <HAL_HASH_SHA1_Accmlt_End_IT>:
 800ab3c:	f7ff bff7 	b.w	800ab2e <HAL_HASH_SHA1_Start_IT>

0800ab40 <HASH_Finish>:
  * @param  pOutBuffer pointer to the computed digest.
  * @param  Timeout Timeout value.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Finish(HASH_HandleTypeDef *hhash, uint8_t* pOutBuffer, uint32_t Timeout)
{
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	4613      	mov	r3, r2

  if(hhash->State == HAL_HASH_STATE_READY)
 800ab44:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800ab48:	2a01      	cmp	r2, #1
{
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	460e      	mov	r6, r1
  if(hhash->State == HAL_HASH_STATE_READY)
 800ab4e:	b2d4      	uxtb	r4, r2
 800ab50:	d12f      	bne.n	800abb2 <HASH_Finish+0x72>
  {
    /* Check parameter */
    if (pOutBuffer == NULL)
 800ab52:	b341      	cbz	r1, 800aba6 <HASH_Finish+0x66>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hhash);
 800ab54:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800ab58:	2a01      	cmp	r2, #1
 800ab5a:	f04f 0102 	mov.w	r1, #2
 800ab5e:	d028      	beq.n	800abb2 <HASH_Finish+0x72>
 800ab60:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34

    /* Change the HASH state to busy */
    hhash->State = HAL_HASH_STATE_BUSY;
 800ab64:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35

    /* Wait for DCIS flag to be set */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f7ff fc3b 	bl	800a3e4 <HASH_WaitOnFlagUntilTimeout>
 800ab6e:	4604      	mov	r4, r0
 800ab70:	bb08      	cbnz	r0, 800abb6 <HASH_Finish+0x76>
    {
      return HAL_TIMEOUT;
    }

    /* Read the message digest */
    HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 800ab72:	4a12      	ldr	r2, [pc, #72]	; (800abbc <HASH_Finish+0x7c>)
 800ab74:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <HASH_Finish+0x80>)
 800ab76:	6811      	ldr	r1, [r2, #0]
 800ab78:	4219      	tst	r1, r3
 800ab7a:	d016      	beq.n	800abaa <HASH_Finish+0x6a>
 800ab7c:	6811      	ldr	r1, [r2, #0]
 800ab7e:	4019      	ands	r1, r3
 800ab80:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800ab84:	d013      	beq.n	800abae <HASH_Finish+0x6e>
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	4393      	bics	r3, r2
 800ab8a:	bf0c      	ite	eq
 800ab8c:	2120      	moveq	r1, #32
 800ab8e:	2110      	movne	r1, #16
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff fbc5 	bl	800a320 <HASH_GetDigest>

    /* Change the HASH state to ready */
    hhash->State = HAL_HASH_STATE_READY;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35

    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 800ab9c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d

    /* Process UnLock */
    __HAL_UNLOCK(hhash);
 800aba0:	2300      	movs	r3, #0
 800aba2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  else
  {
    return HAL_BUSY;
  }

}
 800aba6:	4620      	mov	r0, r4
 800aba8:	bd70      	pop	{r4, r5, r6, pc}
    HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 800abaa:	2114      	movs	r1, #20
 800abac:	e7f0      	b.n	800ab90 <HASH_Finish+0x50>
 800abae:	211c      	movs	r1, #28
 800abb0:	e7ee      	b.n	800ab90 <HASH_Finish+0x50>
    return HAL_BUSY;
 800abb2:	2402      	movs	r4, #2
 800abb4:	e7f7      	b.n	800aba6 <HASH_Finish+0x66>
      return HAL_TIMEOUT;
 800abb6:	2403      	movs	r4, #3
 800abb8:	e7f5      	b.n	800aba6 <HASH_Finish+0x66>
 800abba:	bf00      	nop
 800abbc:	50060400 	.word	0x50060400
 800abc0:	00040080 	.word	0x00040080

0800abc4 <HMAC_Start>:
  * @param  Timeout Timeout value.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HMAC_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout, uint32_t Algorithm)
{
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	4604      	mov	r4, r0
    HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800abca:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35

   /* If State is ready or suspended, start or resume polling-based HASH processing */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800abce:	2801      	cmp	r0, #1
{
 800abd0:	e9dd 7e06 	ldrd	r7, lr, [sp, #24]
    HAL_HASH_StateTypeDef State_tmp = hhash->State;
 800abd4:	b2c5      	uxtb	r5, r0
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 800abd6:	d002      	beq.n	800abde <HMAC_Start+0x1a>
 800abd8:	2d08      	cmp	r5, #8
 800abda:	f040 80df 	bne.w	800ad9c <HMAC_Start+0x1d8>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || /*(Size == 0U) ||*/ (hhash->Init.pKey == NULL) || (hhash->Init.KeySize == 0U) || (pOutBuffer == NULL))
 800abde:	b139      	cbz	r1, 800abf0 <HMAC_Start+0x2c>
 800abe0:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800abe4:	f1bc 0f00 	cmp.w	ip, #0
 800abe8:	d002      	beq.n	800abf0 <HMAC_Start+0x2c>
 800abea:	6865      	ldr	r5, [r4, #4]
 800abec:	b105      	cbz	r5, 800abf0 <HMAC_Start+0x2c>
 800abee:	b923      	cbnz	r3, 800abfa <HMAC_Start+0x36>
    {
      hhash->State = HAL_HASH_STATE_READY;
 800abf0:	2001      	movs	r0, #1
 800abf2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    return HMAC_Processing(hhash, Timeout);

  }
  else
  {
    return HAL_BUSY;
 800abf6:	4605      	mov	r5, r0
 800abf8:	e05b      	b.n	800acb2 <HMAC_Start+0xee>
    __HAL_LOCK(hhash);
 800abfa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800abfe:	2801      	cmp	r0, #1
 800ac00:	f04f 0002 	mov.w	r0, #2
 800ac04:	d0f7      	beq.n	800abf6 <HMAC_Start+0x32>
    hhash->State = HAL_HASH_STATE_BUSY;
 800ac06:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800ac0a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    __HAL_LOCK(hhash);
 800ac0e:	2601      	movs	r6, #1
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800ac10:	42b0      	cmp	r0, r6
    __HAL_LOCK(hhash);
 800ac12:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 800ac16:	d118      	bne.n	800ac4a <HMAC_Start+0x86>
      if(hhash->Init.KeySize > 64U)
 800ac18:	4e61      	ldr	r6, [pc, #388]	; (800ada0 <HMAC_Start+0x1dc>)
 800ac1a:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800ada8 <HMAC_Start+0x1e4>
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_ALGOMODE_HMAC | HASH_HMAC_KEYTYPE_LONGKEY | HASH_CR_INIT);
 800ac1e:	6830      	ldr	r0, [r6, #0]
 800ac20:	ea00 0008 	and.w	r0, r0, r8
 800ac24:	ea40 000e 	orr.w	r0, r0, lr
      if(hhash->Init.KeySize > 64U)
 800ac28:	2d40      	cmp	r5, #64	; 0x40
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_ALGOMODE_HMAC | HASH_HMAC_KEYTYPE_LONGKEY | HASH_CR_INIT);
 800ac2a:	bf88      	it	hi
 800ac2c:	f440 3080 	orrhi.w	r0, r0, #65536	; 0x10000
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_ALGOMODE_HMAC | HASH_CR_INIT);
 800ac30:	f040 0044 	orr.w	r0, r0, #68	; 0x44
 800ac34:	6030      	str	r0, [r6, #0]
      hhash->pHashInBuffPtr   = pInBuffer;             /* Input data address, HMAC_Processing input parameter for Step 2     */
 800ac36:	e9c4 1303 	strd	r1, r3, [r4, #12]
      hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 800ac3a:	2003      	movs	r0, #3
      hhash->HashInCount      = Size;                  /* Input data size, HMAC_Processing input parameter for Step 2        */
 800ac3c:	6222      	str	r2, [r4, #32]
      hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 800ac3e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      hhash->HashBuffSize     = Size;                  /* Store the input buffer size for the whole HMAC process             */
 800ac42:	61e2      	str	r2, [r4, #28]
      hhash->pHashKeyBuffPtr  = hhash->Init.pKey;      /* Key address, HMAC_Processing input parameter for Step 1 and Step 3 */
 800ac44:	f8c4 c014 	str.w	ip, [r4, #20]
      hhash->HashKeyCount     = hhash->Init.KeySize;   /* Key size, HMAC_Processing input parameter for Step 1 and Step 3    */
 800ac48:	62a5      	str	r5, [r4, #40]	; 0x28
  if ((hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_1) && (hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_2) && (hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_3))
 800ac4a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ac4e:	1eda      	subs	r2, r3, #3
 800ac50:	2a02      	cmp	r2, #2
 800ac52:	d906      	bls.n	800ac62 <HMAC_Start+0x9e>
    hhash->State = HAL_HASH_STATE_READY;
 800ac54:	2001      	movs	r0, #1
    __HAL_UNLOCK(hhash);
 800ac56:	2300      	movs	r3, #0
    hhash->State = HAL_HASH_STATE_READY;
 800ac58:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hhash);
 800ac5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800ac60:	e7c9      	b.n	800abf6 <HMAC_Start+0x32>
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1)
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	4e4e      	ldr	r6, [pc, #312]	; (800ada0 <HMAC_Start+0x1dc>)
 800ac66:	d155      	bne.n	800ad14 <HMAC_Start+0x150>
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 800ac68:	68b3      	ldr	r3, [r6, #8]
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 800ac6a:	6961      	ldr	r1, [r4, #20]
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 800ac6c:	f023 031f 	bic.w	r3, r3, #31
 800ac70:	f005 0503 	and.w	r5, r5, #3
 800ac74:	ea43 05c5 	orr.w	r5, r3, r5, lsl #3
 800ac78:	60b5      	str	r5, [r6, #8]
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 800ac7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f7ff fb0f 	bl	800a2a0 <HASH_WriteData>
 800ac82:	4605      	mov	r5, r0
 800ac84:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 800ac88:	b998      	cbnz	r0, 800acb2 <HMAC_Start+0xee>
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800ac8a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800ac8e:	2b08      	cmp	r3, #8
 800ac90:	d103      	bne.n	800ac9a <HMAC_Start+0xd6>
      __HAL_UNLOCK(hhash);
 800ac92:	2000      	movs	r0, #0
 800ac94:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_OK;
 800ac98:	e7ad      	b.n	800abf6 <HMAC_Start+0x32>
    __HAL_HASH_START_DIGEST();
 800ac9a:	68b3      	ldr	r3, [r6, #8]
 800ac9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aca0:	60b3      	str	r3, [r6, #8]
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 800aca2:	2201      	movs	r2, #1
 800aca4:	463b      	mov	r3, r7
 800aca6:	2108      	movs	r1, #8
 800aca8:	4620      	mov	r0, r4
 800acaa:	f7ff fb9b 	bl	800a3e4 <HASH_WaitOnFlagUntilTimeout>
 800acae:	b118      	cbz	r0, 800acb8 <HMAC_Start+0xf4>
      return HAL_TIMEOUT;
 800acb0:	2503      	movs	r5, #3
  }
}
 800acb2:	4628      	mov	r0, r5
 800acb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 800acb8:	2304      	movs	r3, #4
 800acba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_HASH_SET_NBVALIDBITS(hhash->HashBuffSize);
 800acbe:	68b3      	ldr	r3, [r6, #8]
 800acc0:	69e2      	ldr	r2, [r4, #28]
    hhash->Status = HASH_WriteData(hhash, hhash->pHashInBuffPtr, hhash->HashInCount);
 800acc2:	68e1      	ldr	r1, [r4, #12]
    __HAL_HASH_SET_NBVALIDBITS(hhash->HashBuffSize);
 800acc4:	f002 0203 	and.w	r2, r2, #3
 800acc8:	f023 031f 	bic.w	r3, r3, #31
 800accc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800acd0:	60b3      	str	r3, [r6, #8]
    hhash->Status = HASH_WriteData(hhash, hhash->pHashInBuffPtr, hhash->HashInCount);
 800acd2:	6a22      	ldr	r2, [r4, #32]
 800acd4:	4620      	mov	r0, r4
 800acd6:	f7ff fae3 	bl	800a2a0 <HASH_WriteData>
 800acda:	4605      	mov	r5, r0
 800acdc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d1e6      	bne.n	800acb2 <HMAC_Start+0xee>
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800ace4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800ace8:	2b08      	cmp	r3, #8
 800acea:	d0d2      	beq.n	800ac92 <HMAC_Start+0xce>
    __HAL_HASH_START_DIGEST();
 800acec:	68b3      	ldr	r3, [r6, #8]
 800acee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acf2:	60b3      	str	r3, [r6, #8]
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 800acf4:	2201      	movs	r2, #1
 800acf6:	463b      	mov	r3, r7
 800acf8:	2108      	movs	r1, #8
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7ff fb72 	bl	800a3e4 <HASH_WaitOnFlagUntilTimeout>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1d5      	bne.n	800acb0 <HMAC_Start+0xec>
    hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 800ad04:	2305      	movs	r3, #5
 800ad06:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 800ad0a:	68a3      	ldr	r3, [r4, #8]
 800ad0c:	6163      	str	r3, [r4, #20]
    hhash->HashKeyCount    = hhash->Init.KeySize;
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)
 800ad12:	e001      	b.n	800ad18 <HMAC_Start+0x154>
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2)
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d0d2      	beq.n	800acbe <HMAC_Start+0xfa>
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 800ad18:	68b3      	ldr	r3, [r6, #8]
 800ad1a:	6862      	ldr	r2, [r4, #4]
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 800ad1c:	6961      	ldr	r1, [r4, #20]
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 800ad1e:	f002 0203 	and.w	r2, r2, #3
 800ad22:	f023 031f 	bic.w	r3, r3, #31
 800ad26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ad2a:	60b3      	str	r3, [r6, #8]
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 800ad2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff fab6 	bl	800a2a0 <HASH_WriteData>
 800ad34:	4605      	mov	r5, r0
 800ad36:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d1b9      	bne.n	800acb2 <HMAC_Start+0xee>
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 800ad3e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800ad42:	2b08      	cmp	r3, #8
 800ad44:	d0a5      	beq.n	800ac92 <HMAC_Start+0xce>
    __HAL_HASH_START_DIGEST();
 800ad46:	68b3      	ldr	r3, [r6, #8]
 800ad48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad4c:	60b3      	str	r3, [r6, #8]
     if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 800ad4e:	4602      	mov	r2, r0
 800ad50:	463b      	mov	r3, r7
 800ad52:	2102      	movs	r1, #2
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7ff fb45 	bl	800a3e4 <HASH_WaitOnFlagUntilTimeout>
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d1a7      	bne.n	800acb0 <HMAC_Start+0xec>
    HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 800ad60:	6832      	ldr	r2, [r6, #0]
 800ad62:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <HMAC_Start+0x1e0>)
 800ad64:	6920      	ldr	r0, [r4, #16]
 800ad66:	421a      	tst	r2, r3
 800ad68:	d014      	beq.n	800ad94 <HMAC_Start+0x1d0>
 800ad6a:	6832      	ldr	r2, [r6, #0]
 800ad6c:	401a      	ands	r2, r3
 800ad6e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800ad72:	d011      	beq.n	800ad98 <HMAC_Start+0x1d4>
 800ad74:	6832      	ldr	r2, [r6, #0]
 800ad76:	4393      	bics	r3, r2
 800ad78:	bf0c      	ite	eq
 800ad7a:	2120      	moveq	r1, #32
 800ad7c:	2110      	movne	r1, #16
 800ad7e:	f7ff facf 	bl	800a320 <HASH_GetDigest>
    hhash->Phase = HAL_HASH_PHASE_READY;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   hhash->State = HAL_HASH_STATE_READY;
 800ad88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
   __HAL_UNLOCK(hhash);
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   return HAL_OK;
 800ad92:	e78e      	b.n	800acb2 <HMAC_Start+0xee>
    HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 800ad94:	2114      	movs	r1, #20
 800ad96:	e7f2      	b.n	800ad7e <HMAC_Start+0x1ba>
 800ad98:	211c      	movs	r1, #28
 800ad9a:	e7f0      	b.n	800ad7e <HMAC_Start+0x1ba>
    return HAL_BUSY;
 800ad9c:	2502      	movs	r5, #2
 800ad9e:	e788      	b.n	800acb2 <HMAC_Start+0xee>
 800ada0:	50060400 	.word	0x50060400
 800ada4:	00040080 	.word	0x00040080
 800ada8:	fffaff3b 	.word	0xfffaff3b

0800adac <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800adac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800adb4:	4604      	mov	r4, r0
 800adb6:	460e      	mov	r6, r1
 800adb8:	4615      	mov	r5, r2
 800adba:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800adbc:	6822      	ldr	r2, [r4, #0]
 800adbe:	6a13      	ldr	r3, [r2, #32]
 800adc0:	4233      	tst	r3, r6
 800adc2:	bf14      	ite	ne
 800adc4:	2301      	movne	r3, #1
 800adc6:	2300      	moveq	r3, #0
 800adc8:	42ab      	cmp	r3, r5
 800adca:	d101      	bne.n	800add0 <OSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800adcc:	2000      	movs	r0, #0
 800adce:	e012      	b.n	800adf6 <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800add0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800add4:	d0f3      	beq.n	800adbe <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800add6:	f7fc f97d 	bl	80070d4 <HAL_GetTick>
 800adda:	1bc0      	subs	r0, r0, r7
 800addc:	4540      	cmp	r0, r8
 800adde:	d802      	bhi.n	800ade6 <OSPI_WaitFlagStateUntilTimeout+0x3a>
 800ade0:	f1b8 0f00 	cmp.w	r8, #0
 800ade4:	d1ea      	bne.n	800adbc <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800ade6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adea:	6463      	str	r3, [r4, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800adec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	64a3      	str	r3, [r4, #72]	; 0x48
 800adf4:	2001      	movs	r0, #1
}
 800adf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800adfa <HAL_OSPI_MspInit>:
}
 800adfa:	4770      	bx	lr

0800adfc <HAL_OSPI_Init>:
{
 800adfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adfe:	b085      	sub	sp, #20
 800ae00:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ae02:	f7fc f967 	bl	80070d4 <HAL_GetTick>
 800ae06:	4603      	mov	r3, r0
  if (hospi == NULL)
 800ae08:	2c00      	cmp	r4, #0
 800ae0a:	d05d      	beq.n	800aec8 <HAL_OSPI_Init+0xcc>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800ae10:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	d156      	bne.n	800aec4 <HAL_OSPI_Init+0xc8>
      HAL_OSPI_MspInit(hospi);
 800ae16:	4620      	mov	r0, r4
 800ae18:	9303      	str	r3, [sp, #12]
 800ae1a:	f7ff ffee 	bl	800adfa <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 800ae1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ae20:	68e1      	ldr	r1, [r4, #12]
 800ae22:	6825      	ldr	r5, [r4, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800ae24:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 800ae26:	68af      	ldr	r7, [r5, #8]
 800ae28:	4301      	orrs	r1, r0
 800ae2a:	69e0      	ldr	r0, [r4, #28]
 800ae2c:	4301      	orrs	r1, r0
 800ae2e:	4827      	ldr	r0, [pc, #156]	; (800aecc <HAL_OSPI_Init+0xd0>)
 800ae30:	4038      	ands	r0, r7
 800ae32:	4301      	orrs	r1, r0
 800ae34:	6920      	ldr	r0, [r4, #16]
 800ae36:	3801      	subs	r0, #1
 800ae38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ae3c:	6960      	ldr	r0, [r4, #20]
 800ae3e:	3801      	subs	r0, #1
  hospi->Timeout = Timeout;
 800ae40:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 800ae44:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  hospi->Timeout = Timeout;
 800ae48:	64e2      	str	r2, [r4, #76]	; 0x4c
      MODIFY_REG(hospi->Instance->DCR1,
 800ae4a:	60a9      	str	r1, [r5, #8]
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800ae4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800ae4e:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800ae50:	0409      	lsls	r1, r1, #16
 800ae52:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800ae54:	6829      	ldr	r1, [r5, #0]
 800ae56:	3801      	subs	r0, #1
 800ae58:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 800ae5c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800ae60:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800ae62:	4620      	mov	r0, r4
 800ae64:	9200      	str	r2, [sp, #0]
 800ae66:	2120      	movs	r1, #32
 800ae68:	4632      	mov	r2, r6
 800ae6a:	f7ff ff9f 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800ae6e:	bb48      	cbnz	r0, 800aec4 <HAL_OSPI_Init+0xc8>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	6a22      	ldr	r2, [r4, #32]
 800ae74:	68d9      	ldr	r1, [r3, #12]
 800ae76:	3a01      	subs	r2, #1
 800ae78:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68a1      	ldr	r1, [r4, #8]
 800ae84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 800ae8c:	e9d4 2509 	ldrd	r2, r5, [r4, #36]	; 0x24
 800ae90:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800ae94:	432a      	orrs	r2, r5
 800ae96:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	f042 0201 	orr.w	r2, r2, #1
 800aea6:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800aea8:	69a2      	ldr	r2, [r4, #24]
 800aeaa:	2a02      	cmp	r2, #2
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800aeac:	bf02      	ittt	eq
 800aeae:	689a      	ldreq	r2, [r3, #8]
 800aeb0:	f042 0202 	orreq.w	r2, r2, #2
 800aeb4:	609a      	streq	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800aeb6:	68e3      	ldr	r3, [r4, #12]
 800aeb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800aebc:	bf0c      	ite	eq
 800aebe:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 800aec0:	2302      	movne	r3, #2
 800aec2:	6463      	str	r3, [r4, #68]	; 0x44
}
 800aec4:	b005      	add	sp, #20
 800aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 800aec8:	2001      	movs	r0, #1
 800aeca:	e7fb      	b.n	800aec4 <HAL_OSPI_Init+0xc8>
 800aecc:	f8e0f8f4 	.word	0xf8e0f8f4

0800aed0 <HAL_OSPI_Command>:
{
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	4605      	mov	r5, r0
 800aed6:	b085      	sub	sp, #20
 800aed8:	460c      	mov	r4, r1
 800aeda:	9202      	str	r2, [sp, #8]
  uint32_t tickstart = HAL_GetTick();
 800aedc:	f7fc f8fa 	bl	80070d4 <HAL_GetTick>
  state = hospi->State;
 800aee0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800aee2:	2a02      	cmp	r2, #2
  uint32_t tickstart = HAL_GetTick();
 800aee4:	ee07 0a90 	vmov	s15, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800aee8:	d105      	bne.n	800aef6 <HAL_OSPI_Command+0x26>
 800aeea:	68ea      	ldr	r2, [r5, #12]
 800aeec:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800aef0:	d107      	bne.n	800af02 <HAL_OSPI_Command+0x32>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800aef2:	2310      	movs	r3, #16
 800aef4:	e109      	b.n	800b10a <HAL_OSPI_Command+0x23a>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800aef6:	2a14      	cmp	r2, #20
 800aef8:	f040 8084 	bne.w	800b004 <HAL_OSPI_Command+0x134>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 800aefc:	6822      	ldr	r2, [r4, #0]
 800aefe:	2a02      	cmp	r2, #2
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 800af00:	d1f7      	bne.n	800aef2 <HAL_OSPI_Command+0x22>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800af02:	9a02      	ldr	r2, [sp, #8]
 800af04:	9200      	str	r2, [sp, #0]
 800af06:	ee17 3a90 	vmov	r3, s15
 800af0a:	2200      	movs	r2, #0
 800af0c:	2120      	movs	r1, #32
 800af0e:	4628      	mov	r0, r5
 800af10:	edcd 7a03 	vstr	s15, [sp, #12]
 800af14:	f7ff ff4a 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800af18:	eddd 7a03 	vldr	s15, [sp, #12]
 800af1c:	2800      	cmp	r0, #0
 800af1e:	f040 80b9 	bne.w	800b094 <HAL_OSPI_Command+0x1c4>
{
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t *ccr_reg, *tcr_reg, *ir_reg, *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800af22:	6829      	ldr	r1, [r5, #0]
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800af24:	64a8      	str	r0, [r5, #72]	; 0x48
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800af26:	680a      	ldr	r2, [r1, #0]
 800af28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800af2c:	600a      	str	r2, [r1, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800af2e:	68aa      	ldr	r2, [r5, #8]
 800af30:	b92a      	cbnz	r2, 800af3e <HAL_OSPI_Command+0x6e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800af32:	680a      	ldr	r2, [r1, #0]
 800af34:	6866      	ldr	r6, [r4, #4]
 800af36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af3a:	4332      	orrs	r2, r6
 800af3c:	600a      	str	r2, [r1, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800af3e:	6822      	ldr	r2, [r4, #0]
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800af40:	e9d4 6712 	ldrd	r6, r7, [r4, #72]	; 0x48
  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800af44:	2a02      	cmp	r2, #2
    ccr_reg = &(hospi->Instance->WCCR);
 800af46:	bf0c      	ite	eq
 800af48:	f501 72c0 	addeq.w	r2, r1, #384	; 0x180
    ccr_reg = &(hospi->Instance->CCR);
 800af4c:	f501 7280 	addne.w	r2, r1, #256	; 0x100
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800af50:	ea46 0607 	orr.w	r6, r6, r7
 800af54:	6016      	str	r6, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800af56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    tcr_reg = &(hospi->Instance->WTCR);
 800af58:	bf03      	ittte	eq
 800af5a:	f501 7cc4 	addeq.w	ip, r1, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800af5e:	f501 7ec8 	addeq.w	lr, r1, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800af62:	f501 78d0 	addeq.w	r8, r1, #416	; 0x1a0
    tcr_reg = &(hospi->Instance->TCR);
 800af66:	f501 7c84 	addne.w	ip, r1, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800af6a:	bf1c      	itt	ne
 800af6c:	f501 7e88 	addne.w	lr, r1, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800af70:	f501 7890 	addne.w	r8, r1, #288	; 0x120
  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800af74:	b16e      	cbz	r6, 800af92 <HAL_OSPI_Command+0xc2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800af76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af78:	f8c8 6000 	str.w	r6, [r8]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800af7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af7e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800af80:	6816      	ldr	r6, [r2, #0]
 800af82:	431f      	orrs	r7, r3
 800af84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af86:	f426 187c 	bic.w	r8, r6, #4128768	; 0x3f0000
 800af8a:	431f      	orrs	r7, r3
 800af8c:	ea47 0708 	orr.w	r7, r7, r8
 800af90:	6017      	str	r7, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800af92:	f8dc 7000 	ldr.w	r7, [ip]
 800af96:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800af98:	f027 071f 	bic.w	r7, r7, #31
 800af9c:	433e      	orrs	r6, r7
 800af9e:	f8cc 6000 	str.w	r6, [ip]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800afa2:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 800afa6:	f1bc 0f00 	cmp.w	ip, #0
 800afaa:	d004      	beq.n	800afb6 <HAL_OSPI_Command+0xe6>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800afac:	6827      	ldr	r7, [r4, #0]
 800afae:	b917      	cbnz	r7, 800afb6 <HAL_OSPI_Command+0xe6>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800afb0:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 800afb2:	3f01      	subs	r7, #1
 800afb4:	640f      	str	r7, [r1, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800afb6:	68e6      	ldr	r6, [r4, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800afb8:	69e7      	ldr	r7, [r4, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800afba:	2e00      	cmp	r6, #0
 800afbc:	f000 8082 	beq.w	800b0c4 <HAL_OSPI_Command+0x1f4>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800afc0:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800afc4:	2f00      	cmp	r7, #0
 800afc6:	d040      	beq.n	800b04a <HAL_OSPI_Command+0x17a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800afc8:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800afcc:	f1bc 0f00 	cmp.w	ip, #0
 800afd0:	d01e      	beq.n	800b010 <HAL_OSPI_Command+0x140>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800afd2:	ea4c 0606 	orr.w	r6, ip, r6
 800afd6:	433e      	orrs	r6, r7
 800afd8:	ea46 0909 	orr.w	r9, r6, r9
 800afdc:	ea49 0808 	orr.w	r8, r9, r8
 800afe0:	6813      	ldr	r3, [r2, #0]
 800afe2:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800afe4:	4f52      	ldr	r7, [pc, #328]	; (800b130 <HAL_OSPI_Command+0x260>)
 800afe6:	ea48 0b0b 	orr.w	fp, r8, fp
 800afea:	ea4b 0b0a 	orr.w	fp, fp, sl
 800afee:	ea4b 0606 	orr.w	r6, fp, r6
 800aff2:	401f      	ands	r7, r3
 800aff4:	433e      	orrs	r6, r7

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800aff6:	6016      	str	r6, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800aff8:	68a2      	ldr	r2, [r4, #8]
 800affa:	f8ce 2000 	str.w	r2, [lr]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800affe:	69a2      	ldr	r2, [r4, #24]
 800b000:	648a      	str	r2, [r1, #72]	; 0x48
      if (status == HAL_OK)
 800b002:	e038      	b.n	800b076 <HAL_OSPI_Command+0x1a6>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 800b004:	2a24      	cmp	r2, #36	; 0x24
 800b006:	f47f af74 	bne.w	800aef2 <HAL_OSPI_Command+0x22>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	2a01      	cmp	r2, #1
 800b00e:	e777      	b.n	800af00 <HAL_OSPI_Command+0x30>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b010:	433e      	orrs	r6, r7
 800b012:	f8d2 c000 	ldr.w	ip, [r2]
 800b016:	ea46 0609 	orr.w	r6, r6, r9
 800b01a:	ea46 0608 	orr.w	r6, r6, r8
 800b01e:	ea46 060b 	orr.w	r6, r6, fp
 800b022:	f42c 5c7c 	bic.w	ip, ip, #16128	; 0x3f00
 800b026:	ea46 060a 	orr.w	r6, r6, sl
 800b02a:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 800b02e:	ea46 060c 	orr.w	r6, r6, ip
 800b032:	6016      	str	r6, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b034:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800b036:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 800b03a:	d1dd      	bne.n	800aff8 <HAL_OSPI_Command+0x128>
 800b03c:	6966      	ldr	r6, [r4, #20]
 800b03e:	2e08      	cmp	r6, #8
 800b040:	d1da      	bne.n	800aff8 <HAL_OSPI_Command+0x128>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b042:	6816      	ldr	r6, [r2, #0]
 800b044:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
 800b048:	e7d5      	b.n	800aff6 <HAL_OSPI_Command+0x126>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b04a:	f1bc 0f00 	cmp.w	ip, #0
 800b04e:	d024      	beq.n	800b09a <HAL_OSPI_Command+0x1ca>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b050:	ea4c 0106 	orr.w	r1, ip, r6
 800b054:	6817      	ldr	r7, [r2, #0]
 800b056:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800b058:	ea41 0109 	orr.w	r1, r1, r9
 800b05c:	ea41 0108 	orr.w	r1, r1, r8
 800b060:	f027 6a70 	bic.w	sl, r7, #251658240	; 0xf000000
 800b064:	4331      	orrs	r1, r6
 800b066:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
 800b06a:	ea41 010a 	orr.w	r1, r1, sl
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b06e:	6011      	str	r1, [r2, #0]
      *ir_reg = cmd->Instruction;
 800b070:	68a2      	ldr	r2, [r4, #8]
 800b072:	f8ce 2000 	str.w	r2, [lr]
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800b076:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b078:	2a00      	cmp	r2, #0
 800b07a:	d149      	bne.n	800b110 <HAL_OSPI_Command+0x240>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b07c:	9b02      	ldr	r3, [sp, #8]
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	2201      	movs	r2, #1
 800b082:	ee17 3a90 	vmov	r3, s15
 800b086:	2102      	movs	r1, #2
 800b088:	4628      	mov	r0, r5
 800b08a:	f7ff fe8f 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b08e:	682b      	ldr	r3, [r5, #0]
 800b090:	2202      	movs	r2, #2
 800b092:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b094:	b005      	add	sp, #20
 800b096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b09a:	6811      	ldr	r1, [r2, #0]
 800b09c:	ea46 0609 	orr.w	r6, r6, r9
 800b0a0:	ea46 0808 	orr.w	r8, r6, r8
 800b0a4:	f021 063f 	bic.w	r6, r1, #63	; 0x3f
 800b0a8:	ea48 0606 	orr.w	r6, r8, r6
 800b0ac:	6016      	str	r6, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b0ae:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b0b0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b0b4:	d1dc      	bne.n	800b070 <HAL_OSPI_Command+0x1a0>
 800b0b6:	6961      	ldr	r1, [r4, #20]
 800b0b8:	2908      	cmp	r1, #8
 800b0ba:	d1d9      	bne.n	800b070 <HAL_OSPI_Command+0x1a0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b0bc:	6811      	ldr	r1, [r2, #0]
 800b0be:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800b0c2:	e7d4      	b.n	800b06e <HAL_OSPI_Command+0x19e>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b0c4:	b307      	cbz	r7, 800b108 <HAL_OSPI_Command+0x238>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b0c6:	e9d4 9808 	ldrd	r9, r8, [r4, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b0ca:	f1bc 0f00 	cmp.w	ip, #0
 800b0ce:	d011      	beq.n	800b0f4 <HAL_OSPI_Command+0x224>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b0d0:	f8d2 e000 	ldr.w	lr, [r2]
 800b0d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0d6:	ea4c 0607 	orr.w	r6, ip, r7
 800b0da:	ea46 0608 	orr.w	r6, r6, r8
 800b0de:	ea46 0609 	orr.w	r6, r6, r9
 800b0e2:	f02e 6e70 	bic.w	lr, lr, #251658240	; 0xf000000
 800b0e6:	431e      	orrs	r6, r3
 800b0e8:	f42e 5e7c 	bic.w	lr, lr, #16128	; 0x3f00
 800b0ec:	ea46 060e 	orr.w	r6, r6, lr
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b0f0:	6016      	str	r6, [r2, #0]
 800b0f2:	e784      	b.n	800affe <HAL_OSPI_Command+0x12e>
 800b0f4:	f8d2 c000 	ldr.w	ip, [r2]
 800b0f8:	ea48 0607 	orr.w	r6, r8, r7
 800b0fc:	ea46 0609 	orr.w	r6, r6, r9
 800b100:	f42c 577c 	bic.w	r7, ip, #16128	; 0x3f00
 800b104:	433e      	orrs	r6, r7
 800b106:	e7f3      	b.n	800b0f0 <HAL_OSPI_Command+0x220>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b108:	2308      	movs	r3, #8
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b10a:	64ab      	str	r3, [r5, #72]	; 0x48
    status = HAL_ERROR;
 800b10c:	2001      	movs	r0, #1
 800b10e:	e7c1      	b.n	800b094 <HAL_OSPI_Command+0x1c4>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	b90b      	cbnz	r3, 800b118 <HAL_OSPI_Command+0x248>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800b114:	2304      	movs	r3, #4
 800b116:	e005      	b.n	800b124 <HAL_OSPI_Command+0x254>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800b118:	2b01      	cmp	r3, #1
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800b11a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800b11c:	d104      	bne.n	800b128 <HAL_OSPI_Command+0x258>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800b11e:	2b24      	cmp	r3, #36	; 0x24
 800b120:	d0f8      	beq.n	800b114 <HAL_OSPI_Command+0x244>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800b122:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800b124:	646b      	str	r3, [r5, #68]	; 0x44
 800b126:	e7b5      	b.n	800b094 <HAL_OSPI_Command+0x1c4>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800b128:	2b14      	cmp	r3, #20
 800b12a:	d0f3      	beq.n	800b114 <HAL_OSPI_Command+0x244>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800b12c:	2324      	movs	r3, #36	; 0x24
 800b12e:	e7f9      	b.n	800b124 <HAL_OSPI_Command+0x254>
 800b130:	f0ffc0c0 	.word	0xf0ffc0c0

0800b134 <HAL_OSPI_Receive>:
{
 800b134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b136:	4604      	mov	r4, r0
 800b138:	b085      	sub	sp, #20
 800b13a:	460f      	mov	r7, r1
 800b13c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800b13e:	f7fb ffc9 	bl	80070d4 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800b142:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800b144:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 800b146:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800b148:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 800b14c:	b91f      	cbnz	r7, 800b156 <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b14e:	2308      	movs	r3, #8
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b150:	64a3      	str	r3, [r4, #72]	; 0x48
      status = HAL_ERROR;
 800b152:	2001      	movs	r0, #1
 800b154:	e034      	b.n	800b1c0 <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b156:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b158:	2a04      	cmp	r2, #4
 800b15a:	d13b      	bne.n	800b1d4 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b15c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 800b15e:	6367      	str	r7, [r4, #52]	; 0x34
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800b160:	3201      	adds	r2, #1
 800b162:	63e2      	str	r2, [r4, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800b164:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b166:	63a2      	str	r2, [r4, #56]	; 0x38
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b168:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b16a:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b16c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800b170:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b174:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b178:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b17a:	d123      	bne.n	800b1c4 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b17c:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800b17e:	9600      	str	r6, [sp, #0]
 800b180:	2201      	movs	r2, #1
 800b182:	2106      	movs	r1, #6
 800b184:	4620      	mov	r0, r4
 800b186:	9303      	str	r3, [sp, #12]
 800b188:	f7ff fe10 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b18c:	b9c0      	cbnz	r0, 800b1c0 <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800b18e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b190:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800b194:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800b196:	6b62      	ldr	r2, [r4, #52]	; 0x34
      } while(hospi->XferCount > 0U);
 800b198:	9b03      	ldr	r3, [sp, #12]
        hospi->pBuffPtr++;
 800b19a:	3201      	adds	r2, #1
 800b19c:	6362      	str	r2, [r4, #52]	; 0x34
        hospi->XferCount--;
 800b19e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b1a0:	3a01      	subs	r2, #1
 800b1a2:	63e2      	str	r2, [r4, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 800b1a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	d1e9      	bne.n	800b17e <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800b1aa:	9600      	str	r6, [sp, #0]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	2102      	movs	r1, #2
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f7ff fdfb 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b1b6:	b918      	cbnz	r0, 800b1c0 <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b1b8:	6822      	ldr	r2, [r4, #0]
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800b1be:	6463      	str	r3, [r4, #68]	; 0x44
}
 800b1c0:	b005      	add	sp, #20
 800b1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b1c4:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 800b1c8:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800b1cc:	d1d6      	bne.n	800b17c <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b1ce:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 800b1d2:	e7d4      	b.n	800b17e <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	e7bb      	b.n	800b150 <HAL_OSPI_Receive+0x1c>

0800b1d8 <HAL_OSPI_AutoPolling>:
{
 800b1d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b1dc:	4604      	mov	r4, r0
 800b1de:	4616      	mov	r6, r2
 800b1e0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b1e2:	f7fb ff77 	bl	80070d4 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800b1e6:	6822      	ldr	r2, [r4, #0]
 800b1e8:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800b1ea:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b1ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b1f0:	2a04      	cmp	r2, #4
  uint32_t tickstart = HAL_GetTick();
 800b1f2:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800b1f4:	d13c      	bne.n	800b270 <HAL_OSPI_AutoPolling+0x98>
 800b1f6:	68ea      	ldr	r2, [r5, #12]
 800b1f8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800b1fc:	d138      	bne.n	800b270 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b1fe:	9003      	str	r0, [sp, #12]
 800b200:	9600      	str	r6, [sp, #0]
 800b202:	2200      	movs	r2, #0
 800b204:	2120      	movs	r1, #32
 800b206:	4620      	mov	r0, r4
 800b208:	f7ff fdd0 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b20c:	bb28      	cbnz	r0, 800b25a <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800b20e:	6822      	ldr	r2, [r4, #0]
 800b210:	6829      	ldr	r1, [r5, #0]
 800b212:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800b216:	6869      	ldr	r1, [r5, #4]
 800b218:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800b21c:	6929      	ldr	r1, [r5, #16]
 800b21e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800b222:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 800b226:	6810      	ldr	r0, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b228:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800b22a:	4329      	orrs	r1, r5
 800b22c:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 800b230:	4301      	orrs	r1, r0
 800b232:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b236:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b238:	68e1      	ldr	r1, [r4, #12]
 800b23a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800b23e:	d10f      	bne.n	800b260 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b240:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800b242:	9600      	str	r6, [sp, #0]
 800b244:	2201      	movs	r2, #1
 800b246:	2108      	movs	r1, #8
 800b248:	4620      	mov	r0, r4
 800b24a:	f7ff fdaf 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800b24e:	b920      	cbnz	r0, 800b25a <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	2208      	movs	r2, #8
 800b254:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800b256:	2302      	movs	r3, #2
 800b258:	6463      	str	r3, [r4, #68]	; 0x44
}
 800b25a:	b004      	add	sp, #16
 800b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b260:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 800b264:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 800b268:	d1ea      	bne.n	800b240 <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b26a:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 800b26e:	e7e8      	b.n	800b242 <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b270:	2310      	movs	r3, #16
 800b272:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 800b274:	2001      	movs	r0, #1
 800b276:	e7f0      	b.n	800b25a <HAL_OSPI_AutoPolling+0x82>

0800b278 <HAL_OSPI_AutoPolling_IT>:
{
 800b278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b27a:	4604      	mov	r4, r0
 800b27c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800b27e:	f7fb ff29 	bl	80070d4 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	6c95      	ldr	r5, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800b286:	f8d2 6110 	ldr.w	r6, [r2, #272]	; 0x110
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b28a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b28c:	2a04      	cmp	r2, #4
  uint32_t tickstart = HAL_GetTick();
 800b28e:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b290:	d132      	bne.n	800b2f8 <HAL_OSPI_AutoPolling_IT+0x80>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b292:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b294:	9200      	str	r2, [sp, #0]
 800b296:	2120      	movs	r1, #32
 800b298:	2200      	movs	r2, #0
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7ff fd86 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b2a0:	bb00      	cbnz	r0, 800b2e4 <HAL_OSPI_AutoPolling_IT+0x6c>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800b2b6:	e9d7 2702 	ldrd	r2, r7, [r7, #8]
 800b2ba:	6819      	ldr	r1, [r3, #0]
 800b2bc:	433a      	orrs	r2, r7
 800b2be:	f021 5143 	bic.w	r1, r1, #817889280	; 0x30c00000
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b2c8:	601a      	str	r2, [r3, #0]
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_SM);
 800b2ca:	2209      	movs	r2, #9
 800b2cc:	625a      	str	r2, [r3, #36]	; 0x24
      hospi->State = HAL_OSPI_STATE_BUSY_AUTO_POLLING;
 800b2ce:	2248      	movs	r2, #72	; 0x48
 800b2d0:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 800b2d8:	601a      	str	r2, [r3, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800b2da:	68e2      	ldr	r2, [r4, #12]
 800b2dc:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800b2e0:	d102      	bne.n	800b2e8 <HAL_OSPI_AutoPolling_IT+0x70>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800b2e2:	649d      	str	r5, [r3, #72]	; 0x48
}
 800b2e4:	b003      	add	sp, #12
 800b2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800b2e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800b2ec:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800b2f0:	d1f7      	bne.n	800b2e2 <HAL_OSPI_AutoPolling_IT+0x6a>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800b2f2:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 800b2f6:	e7f5      	b.n	800b2e4 <HAL_OSPI_AutoPolling_IT+0x6c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7f1      	b.n	800b2e4 <HAL_OSPI_AutoPolling_IT+0x6c>

0800b300 <HAL_OSPI_MemoryMapped>:
{
 800b300:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b302:	4604      	mov	r4, r0
 800b304:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800b306:	f7fb fee5 	bl	80070d4 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b30a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b30c:	2a04      	cmp	r2, #4
  uint32_t tickstart = HAL_GetTick();
 800b30e:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800b310:	d121      	bne.n	800b356 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800b312:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b314:	9200      	str	r2, [sp, #0]
 800b316:	2120      	movs	r1, #32
 800b318:	2200      	movs	r2, #0
 800b31a:	4620      	mov	r0, r4
 800b31c:	f7ff fd46 	bl	800adac <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b320:	b9b8      	cbnz	r0, 800b352 <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800b322:	682e      	ldr	r6, [r5, #0]
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800b324:	6822      	ldr	r2, [r4, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800b326:	2388      	movs	r3, #136	; 0x88
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800b328:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800b32a:	6463      	str	r3, [r4, #68]	; 0x44
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800b32c:	d108      	bne.n	800b340 <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800b32e:	686b      	ldr	r3, [r5, #4]
 800b330:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800b334:	2310      	movs	r3, #16
 800b336:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800b338:	6811      	ldr	r1, [r2, #0]
 800b33a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b33e:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800b340:	6813      	ldr	r3, [r2, #0]
 800b342:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800b346:	f023 0308 	bic.w	r3, r3, #8
 800b34a:	4333      	orrs	r3, r6
 800b34c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800b350:	6013      	str	r3, [r2, #0]
}
 800b352:	b002      	add	sp, #8
 800b354:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b356:	2310      	movs	r3, #16
 800b358:	64a3      	str	r3, [r4, #72]	; 0x48
    status = HAL_ERROR;
 800b35a:	2001      	movs	r0, #1
 800b35c:	e7f9      	b.n	800b352 <HAL_OSPI_MemoryMapped+0x52>

0800b35e <HAL_OSPI_SetFifoThreshold>:
  if ((hospi->State & OSPI_BUSY_STATE_MASK) == 0U)
 800b35e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b360:	f013 0308 	ands.w	r3, r3, #8
 800b364:	d10a      	bne.n	800b37c <HAL_OSPI_SetFifoThreshold+0x1e>
    hospi->Init.FifoThreshold = Threshold;
 800b366:	6041      	str	r1, [r0, #4]
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold-1U) << OCTOSPI_CR_FTHRES_Pos));
 800b368:	6800      	ldr	r0, [r0, #0]
 800b36a:	6802      	ldr	r2, [r0, #0]
 800b36c:	3901      	subs	r1, #1
 800b36e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800b372:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 800b376:	6001      	str	r1, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b378:	4618      	mov	r0, r3
 800b37a:	4770      	bx	lr
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800b37c:	2310      	movs	r3, #16
 800b37e:	6483      	str	r3, [r0, #72]	; 0x48
    status = HAL_ERROR;
 800b380:	2001      	movs	r0, #1
}
 800b382:	4770      	bx	lr

0800b384 <HAL_OSPI_GetFifoThreshold>:
  return ((READ_BIT(hospi->Instance->CR, OCTOSPI_CR_FTHRES) >> OCTOSPI_CR_FTHRES_Pos) + 1U);
 800b384:	6803      	ldr	r3, [r0, #0]
 800b386:	6818      	ldr	r0, [r3, #0]
 800b388:	f3c0 2004 	ubfx	r0, r0, #8, #5
}
 800b38c:	3001      	adds	r0, #1
 800b38e:	4770      	bx	lr

0800b390 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 800b390:	64c1      	str	r1, [r0, #76]	; 0x4c
}
 800b392:	2000      	movs	r0, #0
 800b394:	4770      	bx	lr

0800b396 <HAL_OSPI_GetError>:
  return hospi->ErrorCode;
 800b396:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
 800b398:	4770      	bx	lr

0800b39a <HAL_OSPI_GetState>:
  return hospi->State;
 800b39a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800b39c:	4770      	bx	lr
	...

0800b3a0 <HAL_OSPIM_Config>:
{
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hospi->Instance == OCTOSPI1)
 800b3a4:	6802      	ldr	r2, [r0, #0]
    other_instance = 0U;
 800b3a6:	4bbf      	ldr	r3, [pc, #764]	; (800b6a4 <HAL_OSPIM_Config+0x304>)
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t reg, value = 0U;
 800b3a8:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800b6b0 <HAL_OSPIM_Config+0x310>
    other_instance = 0U;
 800b3ac:	429a      	cmp	r2, r3
{
 800b3ae:	b08b      	sub	sp, #44	; 0x2c
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
    {
      reg = OCTOSPIM->PCR[index];
 800b3b0:	4bbd      	ldr	r3, [pc, #756]	; (800b6a8 <HAL_OSPIM_Config+0x308>)
    other_instance = 0U;
 800b3b2:	bf0b      	itete	eq
 800b3b4:	f04f 0a01 	moveq.w	sl, #1
 800b3b8:	f04f 0a00 	movne.w	sl, #0
 800b3bc:	2000      	moveq	r0, #0
 800b3be:	2001      	movne	r0, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800b3c0:	466a      	mov	r2, sp
    instance = 1U;
 800b3c2:	2501      	movs	r5, #1
    cfg->ClkPort    = 0U;
 800b3c4:	2700      	movs	r7, #0
    cfg->DQSPort    = 0U;
 800b3c6:	e9c2 7700 	strd	r7, r7, [r2]
    cfg->IOLowPort  = 0U;
 800b3ca:	e9c2 7702 	strd	r7, r7, [r2, #8]
  uint32_t reg, value = 0U;
 800b3ce:	2d02      	cmp	r5, #2
 800b3d0:	bf0c      	ite	eq
 800b3d2:	46c4      	moveq	ip, r8
 800b3d4:	f04f 0c00 	movne.w	ip, #0
    cfg->IOHighPort = 0U;
 800b3d8:	6117      	str	r7, [r2, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b3da:	f04f 0e00 	mov.w	lr, #0
      reg = OCTOSPIM->PCR[index];
 800b3de:	eb03 048e 	add.w	r4, r3, lr, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800b3e2:	f10e 0601 	add.w	r6, lr, #1
      reg = OCTOSPIM->PCR[index];
 800b3e6:	6864      	ldr	r4, [r4, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b3e8:	f014 0f01 	tst.w	r4, #1
 800b3ec:	d005      	beq.n	800b3fa <HAL_OSPIM_Config+0x5a>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b3ee:	ea84 0e0c 	eor.w	lr, r4, ip
 800b3f2:	f01e 0f02 	tst.w	lr, #2
          cfg->ClkPort = index+1U;
 800b3f6:	bf08      	it	eq
 800b3f8:	6016      	streq	r6, [r2, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b3fa:	f014 0f10 	tst.w	r4, #16
 800b3fe:	d005      	beq.n	800b40c <HAL_OSPIM_Config+0x6c>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b400:	ea84 0e0c 	eor.w	lr, r4, ip
 800b404:	f01e 0f20 	tst.w	lr, #32
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800b408:	bf08      	it	eq
 800b40a:	6056      	streq	r6, [r2, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b40c:	f414 7f80 	tst.w	r4, #256	; 0x100
 800b410:	d005      	beq.n	800b41e <HAL_OSPIM_Config+0x7e>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b412:	ea84 0e0c 	eor.w	lr, r4, ip
 800b416:	f41e 7f00 	tst.w	lr, #512	; 0x200
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800b41a:	bf08      	it	eq
 800b41c:	6096      	streq	r6, [r2, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b41e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800b422:	d00d      	beq.n	800b440 <HAL_OSPIM_Config+0xa0>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b424:	ea84 0e0c 	eor.w	lr, r4, ip
 800b428:	f41e 2f80 	tst.w	lr, #262144	; 0x40000
 800b42c:	d108      	bne.n	800b440 <HAL_OSPIM_Config+0xa0>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b42e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800b432:	bf0c      	ite	eq
 800b434:	f446 3e80 	orreq.w	lr, r6, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800b438:	f046 7e80 	orrne.w	lr, r6, #16777216	; 0x1000000
 800b43c:	f8c2 e00c 	str.w	lr, [r2, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b440:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 800b444:	d00b      	beq.n	800b45e <HAL_OSPIM_Config+0xbe>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b446:	ea84 0e0c 	eor.w	lr, r4, ip
 800b44a:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
 800b44e:	d106      	bne.n	800b45e <HAL_OSPIM_Config+0xbe>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b450:	01a4      	lsls	r4, r4, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800b452:	bf54      	ite	pl
 800b454:	f446 3480 	orrpl.w	r4, r6, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800b458:	f046 7480 	orrmi.w	r4, r6, #16777216	; 0x1000000
 800b45c:	6114      	str	r4, [r2, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b45e:	2e02      	cmp	r6, #2
 800b460:	f04f 0e01 	mov.w	lr, #1
 800b464:	d1bb      	bne.n	800b3de <HAL_OSPIM_Config+0x3e>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800b466:	2d02      	cmp	r5, #2
 800b468:	f102 0214 	add.w	r2, r2, #20
 800b46c:	f040 8117 	bne.w	800b69e <HAL_OSPIM_Config+0x2fe>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800b470:	4c8c      	ldr	r4, [pc, #560]	; (800b6a4 <HAL_OSPIM_Config+0x304>)
 800b472:	6825      	ldr	r5, [r4, #0]
 800b474:	ea15 050e 	ands.w	r5, r5, lr
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800b478:	bf1e      	ittt	ne
 800b47a:	6822      	ldrne	r2, [r4, #0]
 800b47c:	f022 0201 	bicne.w	r2, r2, #1
 800b480:	6022      	strne	r2, [r4, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800b482:	4a8a      	ldr	r2, [pc, #552]	; (800b6ac <HAL_OSPIM_Config+0x30c>)
 800b484:	6814      	ldr	r4, [r2, #0]
      ospi_enabled |= 0x1U;
 800b486:	bf18      	it	ne
 800b488:	4675      	movne	r5, lr
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800b48a:	07e6      	lsls	r6, r4, #31
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800b48c:	bf42      	ittt	mi
 800b48e:	6814      	ldrmi	r4, [r2, #0]
 800b490:	f024 0401 	bicmi.w	r4, r4, #1
 800b494:	6014      	strmi	r4, [r2, #0]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800b496:	aa0a      	add	r2, sp, #40	; 0x28
 800b498:	f04f 0414 	mov.w	r4, #20
 800b49c:	fb04 2400 	mla	r4, r4, r0, r2
      ospi_enabled |= 0x2U;
 800b4a0:	bf48      	it	mi
 800b4a2:	f045 0b02 	orrmi.w	fp, r5, #2
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800b4a6:	f854 2c20 	ldr.w	r2, [r4, #-32]
 800b4aa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b4ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b4b2:	bf58      	it	pl
 800b4b4:	46ab      	movpl	fp, r5
 800b4b6:	6856      	ldr	r6, [r2, #4]
 800b4b8:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 800b4bc:	6056      	str	r6, [r2, #4]
      if (IOM_cfg[instance].ClkPort != 0U)
 800b4be:	f854 2c28 	ldr.w	r2, [r4, #-40]
 800b4c2:	b382      	cbz	r2, 800b526 <HAL_OSPIM_Config+0x186>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800b4c4:	3a01      	subs	r2, #1
 800b4c6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b4ca:	6856      	ldr	r6, [r2, #4]
 800b4cc:	f026 0601 	bic.w	r6, r6, #1
 800b4d0:	6056      	str	r6, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800b4d2:	f854 2c24 	ldr.w	r2, [r4, #-36]
 800b4d6:	b132      	cbz	r2, 800b4e6 <HAL_OSPIM_Config+0x146>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800b4d8:	3a01      	subs	r2, #1
 800b4da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b4de:	6854      	ldr	r4, [r2, #4]
 800b4e0:	f024 0410 	bic.w	r4, r4, #16
 800b4e4:	6054      	str	r4, [r2, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b4e6:	2214      	movs	r2, #20
 800b4e8:	ac0a      	add	r4, sp, #40	; 0x28
 800b4ea:	fb02 4200 	mla	r2, r2, r0, r4
 800b4ee:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 800b4f2:	b142      	cbz	r2, 800b506 <HAL_OSPIM_Config+0x166>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800b4f4:	3a01      	subs	r2, #1
 800b4f6:	f002 0201 	and.w	r2, r2, #1
 800b4fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b4fe:	6854      	ldr	r4, [r2, #4]
 800b500:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800b504:	6054      	str	r4, [r2, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b506:	2214      	movs	r2, #20
 800b508:	ac0a      	add	r4, sp, #40	; 0x28
 800b50a:	fb02 4200 	mla	r2, r2, r0, r4
 800b50e:	f852 2c18 	ldr.w	r2, [r2, #-24]
 800b512:	b142      	cbz	r2, 800b526 <HAL_OSPIM_Config+0x186>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800b514:	3a01      	subs	r2, #1
 800b516:	f002 0201 	and.w	r2, r2, #1
 800b51a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b51e:	6854      	ldr	r4, [r2, #4]
 800b520:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800b524:	6054      	str	r4, [r2, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800b526:	aa0a      	add	r2, sp, #40	; 0x28
 800b528:	f04f 0914 	mov.w	r9, #20
 800b52c:	fb09 290a 	mla	r9, r9, sl, r2
 800b530:	f8d1 c000 	ldr.w	ip, [r1]
 800b534:	f859 8c28 	ldr.w	r8, [r9, #-40]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800b538:	f859 4c18 	ldr.w	r4, [r9, #-24]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800b53c:	45c4      	cmp	ip, r8
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800b53e:	e9d1 6e01 	ldrd	r6, lr, [r1, #4]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800b542:	e9d1 2103 	ldrd	r2, r1, [r1, #12]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800b546:	d00d      	beq.n	800b564 <HAL_OSPIM_Config+0x1c4>
 800b548:	f859 7c24 	ldr.w	r7, [r9, #-36]
 800b54c:	42b7      	cmp	r7, r6
 800b54e:	d009      	beq.n	800b564 <HAL_OSPIM_Config+0x1c4>
 800b550:	f859 7c20 	ldr.w	r7, [r9, #-32]
 800b554:	45be      	cmp	lr, r7
 800b556:	d005      	beq.n	800b564 <HAL_OSPIM_Config+0x1c4>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800b558:	f859 7c1c 	ldr.w	r7, [r9, #-28]
 800b55c:	4297      	cmp	r7, r2
 800b55e:	d001      	beq.n	800b564 <HAL_OSPIM_Config+0x1c4>
 800b560:	428c      	cmp	r4, r1
 800b562:	d142      	bne.n	800b5ea <HAL_OSPIM_Config+0x24a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800b564:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b568:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800b56c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b570:	f027 0701 	bic.w	r7, r7, #1
 800b574:	f8c8 7004 	str.w	r7, [r8, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800b578:	2714      	movs	r7, #20
 800b57a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b57e:	fb07 870a 	mla	r7, r7, sl, r8
 800b582:	f857 7c24 	ldr.w	r7, [r7, #-36]
 800b586:	b147      	cbz	r7, 800b59a <HAL_OSPIM_Config+0x1fa>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800b588:	3f01      	subs	r7, #1
 800b58a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b58e:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800b592:	f028 0810 	bic.w	r8, r8, #16
 800b596:	f8c7 8004 	str.w	r8, [r7, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800b59a:	2714      	movs	r7, #20
 800b59c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b5a0:	fb07 8a0a 	mla	sl, r7, sl, r8
 800b5a4:	f85a 7c20 	ldr.w	r7, [sl, #-32]
 800b5a8:	3f01      	subs	r7, #1
 800b5aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5ae:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800b5b2:	f428 7880 	bic.w	r8, r8, #256	; 0x100
 800b5b6:	f8c7 8004 	str.w	r8, [r7, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b5ba:	f85a 7c1c 	ldr.w	r7, [sl, #-28]
 800b5be:	b157      	cbz	r7, 800b5d6 <HAL_OSPIM_Config+0x236>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800b5c0:	3f01      	subs	r7, #1
 800b5c2:	f007 0701 	and.w	r7, r7, #1
 800b5c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5ca:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800b5ce:	f428 3880 	bic.w	r8, r8, #65536	; 0x10000
 800b5d2:	f8c7 8004 	str.w	r8, [r7, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b5d6:	b144      	cbz	r4, 800b5ea <HAL_OSPIM_Config+0x24a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800b5d8:	3c01      	subs	r4, #1
 800b5da:	f004 0401 	and.w	r4, r4, #1
 800b5de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5e2:	6867      	ldr	r7, [r4, #4]
 800b5e4:	f027 7780 	bic.w	r7, r7, #16777216	; 0x1000000
 800b5e8:	6067      	str	r7, [r4, #4]
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 800b5ea:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800b5ee:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 800b5f2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 800b5f6:	f8de 4004 	ldr.w	r4, [lr, #4]
 800b5fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800b5fe:	ea44 2440 	orr.w	r4, r4, r0, lsl #9
 800b602:	f444 7480 	orr.w	r4, r4, #256	; 0x100
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 800b606:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 800b60a:	f8ce 4004 	str.w	r4, [lr, #4]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 800b60e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b612:	f024 0403 	bic.w	r4, r4, #3
 800b616:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 800b61a:	f044 0401 	orr.w	r4, r4, #1
 800b61e:	f8cc 4004 	str.w	r4, [ip, #4]
      if (cfg->DQSPort != 0U)
 800b622:	b156      	cbz	r6, 800b63a <HAL_OSPIM_Config+0x29a>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 800b624:	3e01      	subs	r6, #1
 800b626:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800b62a:	6874      	ldr	r4, [r6, #4]
 800b62c:	f024 0430 	bic.w	r4, r4, #48	; 0x30
 800b630:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
 800b634:	f044 0410 	orr.w	r4, r4, #16
 800b638:	6074      	str	r4, [r6, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b63a:	03d4      	lsls	r4, r2, #15
 800b63c:	d53a      	bpl.n	800b6b4 <HAL_OSPIM_Config+0x314>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800b63e:	3a01      	subs	r2, #1
 800b640:	f002 0201 	and.w	r2, r2, #1
 800b644:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b648:	6854      	ldr	r4, [r2, #4]
 800b64a:	f424 24e0 	bic.w	r4, r4, #458752	; 0x70000
 800b64e:	ea44 4480 	orr.w	r4, r4, r0, lsl #18
 800b652:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 800b656:	6054      	str	r4, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b658:	03ca      	lsls	r2, r1, #15
 800b65a:	d53a      	bpl.n	800b6d2 <HAL_OSPIM_Config+0x332>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800b65c:	3901      	subs	r1, #1
 800b65e:	f001 0101 	and.w	r1, r1, #1
 800b662:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b66c:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800b670:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 800b674:	6058      	str	r0, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 800b676:	b125      	cbz	r5, 800b682 <HAL_OSPIM_Config+0x2e2>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800b678:	4a0a      	ldr	r2, [pc, #40]	; (800b6a4 <HAL_OSPIM_Config+0x304>)
 800b67a:	6813      	ldr	r3, [r2, #0]
 800b67c:	f043 0301 	orr.w	r3, r3, #1
 800b680:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 800b682:	f01b 0f02 	tst.w	fp, #2
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800b686:	bf1c      	itt	ne
 800b688:	4a08      	ldrne	r2, [pc, #32]	; (800b6ac <HAL_OSPIM_Config+0x30c>)
 800b68a:	6813      	ldrne	r3, [r2, #0]
}
 800b68c:	f04f 0000 	mov.w	r0, #0
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800b690:	bf1c      	itt	ne
 800b692:	f043 0301 	orrne.w	r3, r3, #1
 800b696:	6013      	strne	r3, [r2, #0]
}
 800b698:	b00b      	add	sp, #44	; 0x2c
 800b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69e:	4635      	mov	r5, r6
 800b6a0:	e691      	b.n	800b3c6 <HAL_OSPIM_Config+0x26>
 800b6a2:	bf00      	nop
 800b6a4:	a0001000 	.word	0xa0001000
 800b6a8:	50061c00 	.word	0x50061c00
 800b6ac:	a0001400 	.word	0xa0001400
 800b6b0:	04040222 	.word	0x04040222
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b6b4:	2a00      	cmp	r2, #0
 800b6b6:	d0cf      	beq.n	800b658 <HAL_OSPIM_Config+0x2b8>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 800b6b8:	3a01      	subs	r2, #1
 800b6ba:	f002 0201 	and.w	r2, r2, #1
 800b6be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b6c2:	6854      	ldr	r4, [r2, #4]
 800b6c4:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 800b6c8:	ea44 6480 	orr.w	r4, r4, r0, lsl #26
 800b6cc:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800b6d0:	e7c1      	b.n	800b656 <HAL_OSPIM_Config+0x2b6>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	d0cf      	beq.n	800b676 <HAL_OSPIM_Config+0x2d6>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 800b6d6:	3901      	subs	r1, #1
 800b6d8:	f001 0101 	and.w	r1, r1, #1
 800b6dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800b6e6:	ea42 6080 	orr.w	r0, r2, r0, lsl #26
 800b6ea:	f040 7040 	orr.w	r0, r0, #50331648	; 0x3000000
 800b6ee:	e7c1      	b.n	800b674 <HAL_OSPIM_Config+0x2d4>

0800b6f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b6f0:	b530      	push	{r4, r5, lr}
 800b6f2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b6f4:	6804      	ldr	r4, [r0, #0]
 800b6f6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	4b05      	ldr	r3, [pc, #20]	; (800b714 <I2C_TransferConfig+0x24>)
 800b6fe:	6860      	ldr	r0, [r4, #4]
 800b700:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b704:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 800b708:	430a      	orrs	r2, r1
 800b70a:	ea20 0003 	bic.w	r0, r0, r3
 800b70e:	4302      	orrs	r2, r0
 800b710:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b712:	bd30      	pop	{r4, r5, pc}
 800b714:	03ff63ff 	.word	0x03ff63ff

0800b718 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b718:	6803      	ldr	r3, [r0, #0]
{
 800b71a:	b570      	push	{r4, r5, r6, lr}
 800b71c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b71e:	6998      	ldr	r0, [r3, #24]
 800b720:	f010 0010 	ands.w	r0, r0, #16
{
 800b724:	460d      	mov	r5, r1
 800b726:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b728:	d116      	bne.n	800b758 <I2C_IsAcknowledgeFailed+0x40>
}
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800b72c:	1c6a      	adds	r2, r5, #1
 800b72e:	d014      	beq.n	800b75a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b730:	f7fb fcd0 	bl	80070d4 <HAL_GetTick>
 800b734:	1b80      	subs	r0, r0, r6
 800b736:	4285      	cmp	r5, r0
 800b738:	d300      	bcc.n	800b73c <I2C_IsAcknowledgeFailed+0x24>
 800b73a:	b96d      	cbnz	r5, 800b758 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b73c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b73e:	f043 0320 	orr.w	r3, r3, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b742:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b744:	2320      	movs	r3, #32
 800b746:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b74a:	2300      	movs	r3, #0
 800b74c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b750:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800b754:	2001      	movs	r0, #1
 800b756:	e7e8      	b.n	800b72a <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	699a      	ldr	r2, [r3, #24]
 800b75c:	0690      	lsls	r0, r2, #26
 800b75e:	d5e5      	bpl.n	800b72c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b760:	2210      	movs	r2, #16
 800b762:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b764:	2220      	movs	r2, #32
 800b766:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b768:	699a      	ldr	r2, [r3, #24]
 800b76a:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800b76c:	bf44      	itt	mi
 800b76e:	2200      	movmi	r2, #0
 800b770:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b772:	699a      	ldr	r2, [r3, #24]
 800b774:	07d2      	lsls	r2, r2, #31
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b776:	bf5e      	ittt	pl
 800b778:	699a      	ldrpl	r2, [r3, #24]
 800b77a:	f042 0201 	orrpl.w	r2, r2, #1
 800b77e:	619a      	strpl	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800b786:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800b78a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800b78e:	f022 0201 	bic.w	r2, r2, #1
 800b792:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b794:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b796:	f043 0304 	orr.w	r3, r3, #4
 800b79a:	e7d2      	b.n	800b742 <I2C_IsAcknowledgeFailed+0x2a>

0800b79c <I2C_WaitOnFlagUntilTimeout>:
{
 800b79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a0:	9f06      	ldr	r7, [sp, #24]
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4688      	mov	r8, r1
 800b7a6:	4616      	mov	r6, r2
 800b7a8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	6993      	ldr	r3, [r2, #24]
 800b7ae:	ea38 0303 	bics.w	r3, r8, r3
 800b7b2:	bf0c      	ite	eq
 800b7b4:	2301      	moveq	r3, #1
 800b7b6:	2300      	movne	r3, #0
 800b7b8:	42b3      	cmp	r3, r6
 800b7ba:	d001      	beq.n	800b7c0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e015      	b.n	800b7ec <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800b7c0:	1c6b      	adds	r3, r5, #1
 800b7c2:	d0f3      	beq.n	800b7ac <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7c4:	f7fb fc86 	bl	80070d4 <HAL_GetTick>
 800b7c8:	1bc0      	subs	r0, r0, r7
 800b7ca:	42a8      	cmp	r0, r5
 800b7cc:	d801      	bhi.n	800b7d2 <I2C_WaitOnFlagUntilTimeout+0x36>
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	d1eb      	bne.n	800b7aa <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b7d4:	f043 0320 	orr.w	r3, r3, #32
 800b7d8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b7da:	2320      	movs	r3, #32
 800b7dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b7e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b7ea:	2001      	movs	r0, #1
}
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b7f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	460d      	mov	r5, r1
 800b7f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	069b      	lsls	r3, r3, #26
 800b7fe:	d501      	bpl.n	800b804 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800b800:	2000      	movs	r0, #0
}
 800b802:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b804:	4632      	mov	r2, r6
 800b806:	4629      	mov	r1, r5
 800b808:	4620      	mov	r0, r4
 800b80a:	f7ff ff85 	bl	800b718 <I2C_IsAcknowledgeFailed>
 800b80e:	b990      	cbnz	r0, 800b836 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b810:	f7fb fc60 	bl	80070d4 <HAL_GetTick>
 800b814:	1b80      	subs	r0, r0, r6
 800b816:	42a8      	cmp	r0, r5
 800b818:	d801      	bhi.n	800b81e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b81a:	2d00      	cmp	r5, #0
 800b81c:	d1ec      	bne.n	800b7f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b81e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b820:	f043 0320 	orr.w	r3, r3, #32
 800b824:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b826:	2320      	movs	r3, #32
 800b828:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b82c:	2300      	movs	r3, #0
 800b82e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b832:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b836:	2001      	movs	r0, #1
 800b838:	e7e3      	b.n	800b802 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800b83a <HAL_I2C_MspInit>:
}
 800b83a:	4770      	bx	lr

0800b83c <HAL_I2C_Init>:
{
 800b83c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b83e:	4604      	mov	r4, r0
 800b840:	2800      	cmp	r0, #0
 800b842:	d04a      	beq.n	800b8da <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b844:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b848:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b84c:	b91b      	cbnz	r3, 800b856 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800b84e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b852:	f7ff fff2 	bl	800b83a <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b856:	2324      	movs	r3, #36	; 0x24
 800b858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	f022 0201 	bic.w	r2, r2, #1
 800b864:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b866:	6862      	ldr	r2, [r4, #4]
 800b868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b86c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b86e:	689a      	ldr	r2, [r3, #8]
 800b870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b874:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b876:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b87a:	2901      	cmp	r1, #1
 800b87c:	d124      	bne.n	800b8c8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b87e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b882:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800b88a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b88e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b896:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b898:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800b89c:	430a      	orrs	r2, r1
 800b89e:	69a1      	ldr	r1, [r4, #24]
 800b8a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b8a4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b8a6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	f042 0201 	orr.w	r2, r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8b6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800b8b8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8ba:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b8bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b8c0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b8c6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b8c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8cc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b8ce:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b8d0:	bf04      	itt	eq
 800b8d2:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800b8d6:	605a      	streq	r2, [r3, #4]
 800b8d8:	e7d4      	b.n	800b884 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800b8da:	2001      	movs	r0, #1
 800b8dc:	e7f3      	b.n	800b8c6 <HAL_I2C_Init+0x8a>

0800b8de <HAL_I2C_MspDeInit>:
 800b8de:	4770      	bx	lr

0800b8e0 <HAL_I2C_Master_Transmit>:
{
 800b8e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b8ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8ec:	2b20      	cmp	r3, #32
{
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	460e      	mov	r6, r1
 800b8f2:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8f4:	f040 80a3 	bne.w	800ba3e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 800b8f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	f000 809e 	beq.w	800ba3e <HAL_I2C_Master_Transmit+0x15e>
 800b902:	f04f 0a01 	mov.w	sl, #1
 800b906:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b90a:	f7fb fbe3 	bl	80070d4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b90e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800b910:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b912:	9000      	str	r0, [sp, #0]
 800b914:	4652      	mov	r2, sl
 800b916:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff ff3e 	bl	800b79c <I2C_WaitOnFlagUntilTimeout>
 800b920:	b118      	cbz	r0, 800b92a <HAL_I2C_Master_Transmit+0x4a>
        return HAL_ERROR;
 800b922:	2001      	movs	r0, #1
}
 800b924:	b002      	add	sp, #8
 800b926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b92a:	2321      	movs	r3, #33	; 0x21
 800b92c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b930:	2310      	movs	r3, #16
 800b932:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b936:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800b938:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b93c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800b93e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b942:	b29b      	uxth	r3, r3
 800b944:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800b946:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b948:	4b3e      	ldr	r3, [pc, #248]	; (800ba44 <HAL_I2C_Master_Transmit+0x164>)
 800b94a:	d927      	bls.n	800b99c <HAL_I2C_Master_Transmit+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b94c:	22ff      	movs	r2, #255	; 0xff
 800b94e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b950:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b956:	4631      	mov	r1, r6
 800b958:	4620      	mov	r0, r4
 800b95a:	f7ff fec9 	bl	800b6f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b95e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b960:	b29b      	uxth	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d13e      	bne.n	800b9e4 <HAL_I2C_Master_Transmit+0x104>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b966:	462a      	mov	r2, r5
 800b968:	4639      	mov	r1, r7
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7ff ff40 	bl	800b7f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b970:	2800      	cmp	r0, #0
 800b972:	d1d6      	bne.n	800b922 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	2120      	movs	r1, #32
 800b978:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800b980:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800b984:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800b988:	f022 0201 	bic.w	r2, r2, #1
 800b98c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b98e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b992:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b996:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b99a:	e7c3      	b.n	800b924 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800b99c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b99e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800b9a0:	b292      	uxth	r2, r2
 800b9a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b9a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9a8:	b2d2      	uxtb	r2, r2
 800b9aa:	e7d4      	b.n	800b956 <HAL_I2C_Master_Transmit+0x76>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f7ff feb1 	bl	800b718 <I2C_IsAcknowledgeFailed>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d1b3      	bne.n	800b922 <HAL_I2C_Master_Transmit+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800b9ba:	1c7a      	adds	r2, r7, #1
 800b9bc:	d012      	beq.n	800b9e4 <HAL_I2C_Master_Transmit+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9be:	f7fb fb89 	bl	80070d4 <HAL_GetTick>
 800b9c2:	1b40      	subs	r0, r0, r5
 800b9c4:	4287      	cmp	r7, r0
 800b9c6:	d300      	bcc.n	800b9ca <HAL_I2C_Master_Transmit+0xea>
 800b9c8:	b967      	cbnz	r7, 800b9e4 <HAL_I2C_Master_Transmit+0x104>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b9cc:	f043 0320 	orr.w	r3, r3, #32
 800b9d0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b9d2:	2320      	movs	r3, #32
 800b9d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b9de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b9e2:	e79e      	b.n	800b922 <HAL_I2C_Master_Transmit+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b9e4:	6822      	ldr	r2, [r4, #0]
 800b9e6:	6993      	ldr	r3, [r2, #24]
 800b9e8:	079b      	lsls	r3, r3, #30
 800b9ea:	d5df      	bpl.n	800b9ac <HAL_I2C_Master_Transmit+0xcc>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b9f2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b9f4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b9f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b9f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ba02:	3a01      	subs	r2, #1
 800ba04:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba06:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800ba08:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0a7      	beq.n	800b95e <HAL_I2C_Master_Transmit+0x7e>
 800ba0e:	2a00      	cmp	r2, #0
 800ba10:	d1a5      	bne.n	800b95e <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ba12:	9500      	str	r5, [sp, #0]
 800ba14:	463b      	mov	r3, r7
 800ba16:	2180      	movs	r1, #128	; 0x80
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f7ff febf 	bl	800b79c <I2C_WaitOnFlagUntilTimeout>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	f47f af7f 	bne.w	800b922 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	2bff      	cmp	r3, #255	; 0xff
 800ba2a:	d903      	bls.n	800ba34 <HAL_I2C_Master_Transmit+0x154>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba2c:	22ff      	movs	r2, #255	; 0xff
 800ba2e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ba30:	9000      	str	r0, [sp, #0]
 800ba32:	e78e      	b.n	800b952 <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 800ba34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba36:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800ba38:	b292      	uxth	r2, r2
 800ba3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba3c:	e7b2      	b.n	800b9a4 <HAL_I2C_Master_Transmit+0xc4>
    return HAL_BUSY;
 800ba3e:	2002      	movs	r0, #2
 800ba40:	e770      	b.n	800b924 <HAL_I2C_Master_Transmit+0x44>
 800ba42:	bf00      	nop
 800ba44:	80002000 	.word	0x80002000

0800ba48 <HAL_I2C_Master_Receive>:
{
 800ba48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800ba52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba54:	2b20      	cmp	r3, #32
{
 800ba56:	4604      	mov	r4, r0
 800ba58:	460e      	mov	r6, r1
 800ba5a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba5c:	f040 80be 	bne.w	800bbdc <HAL_I2C_Master_Receive+0x194>
    __HAL_LOCK(hi2c);
 800ba60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	f000 80b9 	beq.w	800bbdc <HAL_I2C_Master_Receive+0x194>
 800ba6a:	f04f 0a01 	mov.w	sl, #1
 800ba6e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800ba72:	f7fb fb2f 	bl	80070d4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba76:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800ba78:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba7a:	9000      	str	r0, [sp, #0]
 800ba7c:	4652      	mov	r2, sl
 800ba7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba82:	4620      	mov	r0, r4
 800ba84:	f7ff fe8a 	bl	800b79c <I2C_WaitOnFlagUntilTimeout>
 800ba88:	b118      	cbz	r0, 800ba92 <HAL_I2C_Master_Receive+0x4a>
        return HAL_ERROR;
 800ba8a:	2001      	movs	r0, #1
}
 800ba8c:	b002      	add	sp, #8
 800ba8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ba92:	2322      	movs	r3, #34	; 0x22
 800ba94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ba98:	2310      	movs	r3, #16
 800ba9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba9e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800baa0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800baa6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baaa:	b29b      	uxth	r3, r3
 800baac:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800baae:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bab0:	4b4b      	ldr	r3, [pc, #300]	; (800bbe0 <HAL_I2C_Master_Receive+0x198>)
 800bab2:	d909      	bls.n	800bac8 <HAL_I2C_Master_Receive+0x80>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bab4:	22ff      	movs	r2, #255	; 0xff
 800bab6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bab8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800baba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800babe:	4631      	mov	r1, r6
 800bac0:	4620      	mov	r0, r4
 800bac2:	f7ff fe15 	bl	800b6f0 <I2C_TransferConfig>
 800bac6:	e052      	b.n	800bb6e <HAL_I2C_Master_Receive+0x126>
      hi2c->XferSize = hi2c->XferCount;
 800bac8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800baca:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800bacc:	b292      	uxth	r2, r2
 800bace:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	e7f2      	b.n	800babe <HAL_I2C_Master_Receive+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bad8:	2120      	movs	r1, #32
 800bada:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800bae2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800bae6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800baea:	f022 0201 	bic.w	r2, r2, #1
 800baee:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800baf4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800baf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bafc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bb00:	e7c3      	b.n	800ba8a <HAL_I2C_Master_Receive+0x42>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb02:	f7fb fae7 	bl	80070d4 <HAL_GetTick>
 800bb06:	1b40      	subs	r0, r0, r5
 800bb08:	4287      	cmp	r7, r0
 800bb0a:	d300      	bcc.n	800bb0e <HAL_I2C_Master_Receive+0xc6>
 800bb0c:	b947      	cbnz	r7, 800bb20 <HAL_I2C_Master_Receive+0xd8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb10:	f043 0320 	orr.w	r3, r3, #32
 800bb14:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bb16:	2320      	movs	r3, #32
 800bb18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e7ed      	b.n	800bafc <HAL_I2C_Master_Receive+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	075b      	lsls	r3, r3, #29
 800bb26:	d410      	bmi.n	800bb4a <HAL_I2C_Master_Receive+0x102>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb28:	462a      	mov	r2, r5
 800bb2a:	4639      	mov	r1, r7
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f7ff fdf3 	bl	800b718 <I2C_IsAcknowledgeFailed>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d1a9      	bne.n	800ba8a <HAL_I2C_Master_Receive+0x42>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	699a      	ldr	r2, [r3, #24]
 800bb3a:	0691      	lsls	r1, r2, #26
 800bb3c:	d5e1      	bpl.n	800bb02 <HAL_I2C_Master_Receive+0xba>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bb3e:	699a      	ldr	r2, [r3, #24]
 800bb40:	0752      	lsls	r2, r2, #29
 800bb42:	d5c9      	bpl.n	800bad8 <HAL_I2C_Master_Receive+0x90>
 800bb44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	d0c6      	beq.n	800bad8 <HAL_I2C_Master_Receive+0x90>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb50:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800bb52:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800bb54:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800bb56:	3301      	adds	r3, #1
 800bb58:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800bb5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bb64:	3a01      	subs	r2, #1
 800bb66:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb68:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800bb6a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb6c:	b9f3      	cbnz	r3, 800bbac <HAL_I2C_Master_Receive+0x164>
    while (hi2c->XferCount > 0U)
 800bb6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1d4      	bne.n	800bb20 <HAL_I2C_Master_Receive+0xd8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb76:	462a      	mov	r2, r5
 800bb78:	4639      	mov	r1, r7
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f7ff fe38 	bl	800b7f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d182      	bne.n	800ba8a <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	2120      	movs	r1, #32
 800bb88:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800bb90:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800bb94:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800bb98:	f022 0201 	bic.w	r2, r2, #1
 800bb9c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bb9e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800bba2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bba6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800bbaa:	e76f      	b.n	800ba8c <HAL_I2C_Master_Receive+0x44>
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bbac:	2a00      	cmp	r2, #0
 800bbae:	d1de      	bne.n	800bb6e <HAL_I2C_Master_Receive+0x126>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bbb0:	9500      	str	r5, [sp, #0]
 800bbb2:	463b      	mov	r3, r7
 800bbb4:	2180      	movs	r1, #128	; 0x80
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f7ff fdf0 	bl	800b79c <I2C_WaitOnFlagUntilTimeout>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	f47f af64 	bne.w	800ba8a <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	2bff      	cmp	r3, #255	; 0xff
 800bbc8:	d903      	bls.n	800bbd2 <HAL_I2C_Master_Receive+0x18a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbca:	22ff      	movs	r2, #255	; 0xff
 800bbcc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbce:	9000      	str	r0, [sp, #0]
 800bbd0:	e773      	b.n	800baba <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 800bbd2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bbd4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800bbd6:	b292      	uxth	r2, r2
 800bbd8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bbda:	e779      	b.n	800bad0 <HAL_I2C_Master_Receive+0x88>
    return HAL_BUSY;
 800bbdc:	2002      	movs	r0, #2
 800bbde:	e755      	b.n	800ba8c <HAL_I2C_Master_Receive+0x44>
 800bbe0:	80002400 	.word	0x80002400

0800bbe4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe8:	b086      	sub	sp, #24
 800bbea:	4605      	mov	r5, r0
 800bbec:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bbee:	f7fb fa71 	bl	80070d4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bbf2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800bbf4:	4681      	mov	r9, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bbf6:	6828      	ldr	r0, [r5, #0]
 800bbf8:	f001 f996 	bl	800cf28 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	bb48      	cbnz	r0, 800bc54 <SD_FindSCR+0x70>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bc00:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800bc02:	6828      	ldr	r0, [r5, #0]
 800bc04:	0409      	lsls	r1, r1, #16
 800bc06:	f001 fac8 	bl	800d19a <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	bb10      	cbnz	r0, 800bc54 <SD_FindSCR+0x70>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800bc0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc12:	2308      	movs	r3, #8
 800bc14:	e9cd 0300 	strd	r0, r3, [sp]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bc18:	2630      	movs	r6, #48	; 0x30
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	e9cd 6302 	strd	r6, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc20:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bc22:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc24:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bc26:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bc28:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc2a:	f001 f8a1 	bl	800cd70 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bc2e:	6828      	ldr	r0, [r5, #0]
 800bc30:	f001 fae7 	bl	800d202 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc34:	4604      	mov	r4, r0
 800bc36:	b968      	cbnz	r0, 800bc54 <SD_FindSCR+0x70>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bc38:	4607      	mov	r7, r0
 800bc3a:	4606      	mov	r6, r0
  {
    return errorstate;
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800bc3c:	f240 5a2a 	movw	sl, #1322	; 0x52a
 800bc40:	6828      	ldr	r0, [r5, #0]
 800bc42:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bc44:	ea12 0f0a 	tst.w	r2, sl
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bc48:	6b42      	ldr	r2, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800bc4a:	d007      	beq.n	800bc5c <SD_FindSCR+0x78>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bc4c:	0712      	lsls	r2, r2, #28
 800bc4e:	d519      	bpl.n	800bc84 <SD_FindSCR+0xa0>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bc50:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bc52:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800bc54:	4620      	mov	r0, r4
 800bc56:	b006      	add	sp, #24
 800bc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bc5c:	0311      	lsls	r1, r2, #12
 800bc5e:	d408      	bmi.n	800bc72 <SD_FindSCR+0x8e>
 800bc60:	b93c      	cbnz	r4, 800bc72 <SD_FindSCR+0x8e>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bc62:	f001 f849 	bl	800ccf8 <SDMMC_ReadFIFO>
 800bc66:	4606      	mov	r6, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bc68:	6828      	ldr	r0, [r5, #0]
 800bc6a:	f001 f845 	bl	800ccf8 <SDMMC_ReadFIFO>
      index++;
 800bc6e:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bc70:	4607      	mov	r7, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc72:	f7fb fa2f 	bl	80070d4 <HAL_GetTick>
 800bc76:	eba0 0009 	sub.w	r0, r0, r9
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d1e0      	bne.n	800bc40 <SD_FindSCR+0x5c>
      return HAL_SD_ERROR_TIMEOUT;
 800bc7e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bc82:	e7e7      	b.n	800bc54 <SD_FindSCR+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bc84:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bc86:	0793      	lsls	r3, r2, #30
 800bc88:	d501      	bpl.n	800bc8e <SD_FindSCR+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bc8a:	2402      	movs	r4, #2
 800bc8c:	e7e1      	b.n	800bc52 <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bc8e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bc90:	f014 0420 	ands.w	r4, r4, #32
 800bc94:	d001      	beq.n	800bc9a <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bc96:	2420      	movs	r4, #32
 800bc98:	e7db      	b.n	800bc52 <SD_FindSCR+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bc9a:	4a04      	ldr	r2, [pc, #16]	; (800bcac <SD_FindSCR+0xc8>)
 800bc9c:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bc9e:	ba3f      	rev	r7, r7
 800bca0:	ba36      	rev	r6, r6
 800bca2:	f8c8 7000 	str.w	r7, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bca6:	f8c8 6004 	str.w	r6, [r8, #4]
  return HAL_SD_ERROR_NONE;
 800bcaa:	e7d3      	b.n	800bc54 <SD_FindSCR+0x70>
 800bcac:	18000f3a 	.word	0x18000f3a

0800bcb0 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 800bcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800bcb4:	2640      	movs	r6, #64	; 0x40
{
 800bcb6:	b096      	sub	sp, #88	; 0x58
 800bcb8:	4605      	mov	r5, r0
  uint32_t SD_hs[16]  = {0};
 800bcba:	4632      	mov	r2, r6
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	a806      	add	r0, sp, #24
 800bcc0:	f001 fcb0 	bl	800d624 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 800bcc4:	f7fb fa06 	bl	80070d4 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800bcc8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 800bcca:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d067      	beq.n	800bda0 <SD_UltraHighSpeed+0xf0>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 800bcd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcd4:	d167      	bne.n	800bda6 <SD_UltraHighSpeed+0xf6>
 800bcd6:	69af      	ldr	r7, [r5, #24]
 800bcd8:	2f01      	cmp	r7, #1
 800bcda:	d164      	bne.n	800bda6 <SD_UltraHighSpeed+0xf6>
     (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 800bcdc:	6828      	ldr	r0, [r5, #0]
 800bcde:	2300      	movs	r3, #0
 800bce0:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bce2:	4631      	mov	r1, r6
 800bce4:	f001 f920 	bl	800cf28 <SDMMC_CmdBlockLength>

    if (errorstate != HAL_SD_ERROR_NONE)
 800bce8:	4604      	mov	r4, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d13e      	bne.n	800bd6c <SD_UltraHighSpeed+0xbc>
    {
      return errorstate;
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bcee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    sdmmc_datainitstructure.DataLength    = 64U;
 800bcf2:	e9cd 3600 	strd	r3, r6, [sp]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800bcf6:	e9cd 0704 	strd	r0, r7, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bcfa:	2660      	movs	r6, #96	; 0x60
 800bcfc:	2302      	movs	r3, #2

    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800bcfe:	6828      	ldr	r0, [r5, #0]
 800bd00:	4669      	mov	r1, sp
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd02:	e9cd 6302 	strd	r6, r3, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800bd06:	f001 f833 	bl	800cd70 <SDMMC_ConfigData>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d14d      	bne.n	800bdaa <SD_UltraHighSpeed+0xfa>
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 800bd0e:	492a      	ldr	r1, [pc, #168]	; (800bdb8 <SD_UltraHighSpeed+0x108>)
 800bd10:	6828      	ldr	r0, [r5, #0]
 800bd12:	f001 fa74 	bl	800d1fe <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd16:	4604      	mov	r4, r0
 800bd18:	bb40      	cbnz	r0, 800bd6c <SD_UltraHighSpeed+0xbc>
  uint32_t count, loop = 0 ;
 800bd1a:	4607      	mov	r7, r0
    {
      return errorstate;
    }

    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800bd1c:	f240 592a 	movw	r9, #1322	; 0x52a
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800bd24:	ea16 0609 	ands.w	r6, r6, r9
 800bd28:	d005      	beq.n	800bd36 <SD_UltraHighSpeed+0x86>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd2c:	0711      	lsls	r1, r2, #28
 800bd2e:	d521      	bpl.n	800bd74 <SD_UltraHighSpeed+0xc4>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bd30:	2208      	movs	r2, #8
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38

      return errorstate;
 800bd34:	e01a      	b.n	800bd6c <SD_UltraHighSpeed+0xbc>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd38:	0418      	lsls	r0, r3, #16
 800bd3a:	d50b      	bpl.n	800bd54 <SD_UltraHighSpeed+0xa4>
 800bd3c:	ab06      	add	r3, sp, #24
 800bd3e:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800bd42:	6828      	ldr	r0, [r5, #0]
 800bd44:	f000 ffd8 	bl	800ccf8 <SDMMC_ReadFIFO>
        for (count = 0U; count < 8U; count++)
 800bd48:	3601      	adds	r6, #1
 800bd4a:	2e08      	cmp	r6, #8
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800bd4c:	f84a 0b04 	str.w	r0, [sl], #4
        for (count = 0U; count < 8U; count++)
 800bd50:	d1f7      	bne.n	800bd42 <SD_UltraHighSpeed+0x92>
        loop ++;
 800bd52:	3701      	adds	r7, #1
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800bd54:	f7fb f9be 	bl	80070d4 <HAL_GetTick>
 800bd58:	eba0 0008 	sub.w	r0, r0, r8
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d1df      	bne.n	800bd20 <SD_UltraHighSpeed+0x70>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bd60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 800bd64:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bd66:	63ac      	str	r4, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bd68:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	b016      	add	sp, #88	; 0x58
 800bd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd76:	0792      	lsls	r2, r2, #30
 800bd78:	d502      	bpl.n	800bd80 <SD_UltraHighSpeed+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bd7a:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bd7c:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 800bd7e:	e7f5      	b.n	800bd6c <SD_UltraHighSpeed+0xbc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bd80:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800bd82:	f014 0420 	ands.w	r4, r4, #32
 800bd86:	d001      	beq.n	800bd8c <SD_UltraHighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bd88:	2420      	movs	r4, #32
 800bd8a:	e7f7      	b.n	800bd7c <SD_UltraHighSpeed+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bd8c:	4a0b      	ldr	r2, [pc, #44]	; (800bdbc <SD_UltraHighSpeed+0x10c>)
 800bd8e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800bd90:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800bd94:	079b      	lsls	r3, r3, #30
 800bd96:	d50b      	bpl.n	800bdb0 <SD_UltraHighSpeed+0x100>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800bd98:	2001      	movs	r0, #1
 800bd9a:	f7fb fa0b 	bl	80071b4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
 800bd9e:	e7e5      	b.n	800bd6c <SD_UltraHighSpeed+0xbc>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bda0:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800bda4:	e7e2      	b.n	800bd6c <SD_UltraHighSpeed+0xbc>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bda6:	2400      	movs	r4, #0
 800bda8:	e7e0      	b.n	800bd6c <SD_UltraHighSpeed+0xbc>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 800bdaa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800bdae:	e7dd      	b.n	800bd6c <SD_UltraHighSpeed+0xbc>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800bdb0:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800bdb4:	e7da      	b.n	800bd6c <SD_UltraHighSpeed+0xbc>
 800bdb6:	bf00      	nop
 800bdb8:	80ff1f03 	.word	0x80ff1f03
 800bdbc:	18000f3a 	.word	0x18000f3a

0800bdc0 <HAL_SD_MspInit>:
}
 800bdc0:	4770      	bx	lr

0800bdc2 <HAL_SD_MspDeInit>:
 800bdc2:	4770      	bx	lr

0800bdc4 <HAL_SD_DeInit>:
{
 800bdc4:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	b198      	cbz	r0, 800bdf2 <HAL_SD_DeInit+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800bdd0:	6983      	ldr	r3, [r0, #24]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d102      	bne.n	800bddc <HAL_SD_DeInit+0x18>
    HAL_SDEx_DriveTransceiver_1_8V_Callback(RESET);
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	f7fb f9ec 	bl	80071b4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	f000 ffa3 	bl	800cd28 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 800bde2:	4620      	mov	r0, r4
 800bde4:	f7ff ffed 	bl	800bdc2 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bde8:	2000      	movs	r0, #0
 800bdea:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 800bdec:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 800bdf0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	e7fc      	b.n	800bdf0 <HAL_SD_DeInit+0x2c>
	...

0800bdf8 <HAL_SD_ReadBlocks>:
{
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	b087      	sub	sp, #28
 800bdfe:	4604      	mov	r4, r0
 800be00:	460e      	mov	r6, r1
 800be02:	4692      	mov	sl, r2
 800be04:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800be06:	f7fb f965 	bl	80070d4 <HAL_GetTick>
 800be0a:	4681      	mov	r9, r0
  if(NULL == pData)
 800be0c:	b936      	cbnz	r6, 800be1c <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800be14:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800be16:	f04f 0801 	mov.w	r8, #1
 800be1a:	e011      	b.n	800be40 <HAL_SD_ReadBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 800be1c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800be20:	2b01      	cmp	r3, #1
 800be22:	fa5f f883 	uxtb.w	r8, r3
 800be26:	f040 80c3 	bne.w	800bfb0 <HAL_SD_ReadBlocks+0x1b8>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be2a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800be2c:	eb0a 0307 	add.w	r3, sl, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be30:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be32:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be34:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be36:	d907      	bls.n	800be48 <HAL_SD_ReadBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800be38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800be3e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800be40:	4640      	mov	r0, r8
 800be42:	b007      	add	sp, #28
 800be44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800be48:	2303      	movs	r3, #3
 800be4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 800be50:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be52:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be58:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800be5a:	ea4f 2347 	mov.w	r3, r7, lsl #9
 800be5e:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800be60:	f04f 0502 	mov.w	r5, #2
 800be64:	f04f 0390 	mov.w	r3, #144	; 0x90
 800be68:	e9cd 3502 	strd	r3, r5, [sp, #8]
    hsd->Instance->DCTRL = 0U;
 800be6c:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be6e:	f04f 0300 	mov.w	r3, #0
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be72:	4669      	mov	r1, sp
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800be74:	e9cd 3304 	strd	r3, r3, [sp, #16]
      add *= 512U;
 800be78:	bf18      	it	ne
 800be7a:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be7e:	f000 ff77 	bl	800cd70 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800be82:	6820      	ldr	r0, [r4, #0]
 800be84:	68c3      	ldr	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800be86:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800be88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be8c:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800be8e:	d910      	bls.n	800beb2 <HAL_SD_ReadBlocks+0xba>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800be90:	6325      	str	r5, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800be92:	4651      	mov	r1, sl
 800be94:	f001 f87a 	bl	800cf8c <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800be98:	b188      	cbz	r0, 800bebe <HAL_SD_ReadBlocks+0xc6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	4a46      	ldr	r2, [pc, #280]	; (800bfb8 <HAL_SD_ReadBlocks+0x1c0>)
 800be9e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bea2:	4318      	orrs	r0, r3
 800bea4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bea6:	2301      	movs	r3, #1
 800bea8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800beac:	2300      	movs	r3, #0
 800beae:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800beb0:	e7c6      	b.n	800be40 <HAL_SD_ReadBlocks+0x48>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800beb2:	2301      	movs	r3, #1
 800beb4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800beb6:	4651      	mov	r1, sl
 800beb8:	f001 f84f 	bl	800cf5a <SDMMC_CmdReadSingleBlock>
 800bebc:	e7ec      	b.n	800be98 <HAL_SD_ReadBlocks+0xa0>
    dataremaining = config.DataLength;
 800bebe:	9d01      	ldr	r5, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bec0:	6820      	ldr	r0, [r4, #0]
 800bec2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bec4:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800bec8:	d01b      	beq.n	800bf02 <HAL_SD_ReadBlocks+0x10a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800beca:	68c3      	ldr	r3, [r0, #12]
 800becc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bed0:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bed2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bed4:	05db      	lsls	r3, r3, #23
 800bed6:	d508      	bpl.n	800beea <HAL_SD_ReadBlocks+0xf2>
 800bed8:	2f01      	cmp	r7, #1
 800beda:	d906      	bls.n	800beea <HAL_SD_ReadBlocks+0xf2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bedc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d003      	beq.n	800beea <HAL_SD_ReadBlocks+0xf2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bee2:	f001 f91b 	bl	800d11c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d1d7      	bne.n	800be9a <HAL_SD_ReadBlocks+0xa2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800beee:	f010 0008 	ands.w	r0, r0, #8
 800bef2:	d038      	beq.n	800bf66 <HAL_SD_ReadBlocks+0x16e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bef4:	4a30      	ldr	r2, [pc, #192]	; (800bfb8 <HAL_SD_ReadBlocks+0x1c0>)
 800bef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800befa:	f043 0308 	orr.w	r3, r3, #8
 800befe:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf00:	e7d1      	b.n	800bea6 <HAL_SD_ReadBlocks+0xae>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800bf02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bf04:	041a      	lsls	r2, r3, #16
 800bf06:	d518      	bpl.n	800bf3a <HAL_SD_ReadBlocks+0x142>
 800bf08:	b1bd      	cbz	r5, 800bf3a <HAL_SD_ReadBlocks+0x142>
 800bf0a:	f106 0a04 	add.w	sl, r6, #4
 800bf0e:	f106 0b24 	add.w	fp, r6, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bf12:	6820      	ldr	r0, [r4, #0]
 800bf14:	f000 fef0 	bl	800ccf8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bf18:	0a02      	lsrs	r2, r0, #8
 800bf1a:	f80a 2c03 	strb.w	r2, [sl, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bf1e:	0c02      	lsrs	r2, r0, #16
 800bf20:	f80a 2c02 	strb.w	r2, [sl, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bf24:	0e02      	lsrs	r2, r0, #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bf26:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bf2a:	f80a 2c01 	strb.w	r2, [sl, #-1]
        for(count = 0U; count < 8U; count++)
 800bf2e:	f10a 0a04 	add.w	sl, sl, #4
 800bf32:	45d3      	cmp	fp, sl
 800bf34:	d1ed      	bne.n	800bf12 <HAL_SD_ReadBlocks+0x11a>
          tempbuff++;
 800bf36:	3620      	adds	r6, #32
          dataremaining--;
 800bf38:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bf3a:	f7fb f8cb 	bl	80070d4 <HAL_GetTick>
 800bf3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf40:	eba0 0009 	sub.w	r0, r0, r9
 800bf44:	4298      	cmp	r0, r3
 800bf46:	d3bb      	bcc.n	800bec0 <HAL_SD_ReadBlocks+0xc8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	4a1b      	ldr	r2, [pc, #108]	; (800bfb8 <HAL_SD_ReadBlocks+0x1c0>)
 800bf4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bf4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf54:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bf56:	2301      	movs	r3, #1
 800bf58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800bf60:	f04f 0803 	mov.w	r8, #3
 800bf64:	e76c      	b.n	800be40 <HAL_SD_ReadBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bf66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bf68:	f011 0102 	ands.w	r1, r1, #2
 800bf6c:	d00a      	beq.n	800bf84 <HAL_SD_ReadBlocks+0x18c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf6e:	4a12      	ldr	r2, [pc, #72]	; (800bfb8 <HAL_SD_ReadBlocks+0x1c0>)
 800bf70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf74:	f043 0302 	orr.w	r3, r3, #2
 800bf78:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf80:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 800bf82:	e75d      	b.n	800be40 <HAL_SD_ReadBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf86:	f012 0220 	ands.w	r2, r2, #32
 800bf8a:	d00a      	beq.n	800bfa2 <HAL_SD_ReadBlocks+0x1aa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf8c:	4a0a      	ldr	r2, [pc, #40]	; (800bfb8 <HAL_SD_ReadBlocks+0x1c0>)
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bf90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf92:	f043 0320 	orr.w	r3, r3, #32
 800bf96:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf9e:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800bfa0:	e74e      	b.n	800be40 <HAL_SD_ReadBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bfa2:	4906      	ldr	r1, [pc, #24]	; (800bfbc <HAL_SD_ReadBlocks+0x1c4>)
 800bfa4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800bfac:	4690      	mov	r8, r2
 800bfae:	e747      	b.n	800be40 <HAL_SD_ReadBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bfb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bfb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfb6:	e72d      	b.n	800be14 <HAL_SD_ReadBlocks+0x1c>
 800bfb8:	1fe00fff 	.word	0x1fe00fff
 800bfbc:	18000f3a 	.word	0x18000f3a

0800bfc0 <HAL_SD_WriteBlocks>:
{
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	b089      	sub	sp, #36	; 0x24
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	460d      	mov	r5, r1
 800bfca:	4692      	mov	sl, r2
 800bfcc:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800bfce:	f7fb f881 	bl	80070d4 <HAL_GetTick>
 800bfd2:	4681      	mov	r9, r0
  if(NULL == pData)
 800bfd4:	b935      	cbnz	r5, 800bfe4 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bfd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bfdc:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800bfde:	f04f 0801 	mov.w	r8, #1
 800bfe2:	e011      	b.n	800c008 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 800bfe4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	fa5f f883 	uxtb.w	r8, r3
 800bfee:	f040 80b4 	bne.w	800c15a <HAL_SD_WriteBlocks+0x19a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bff2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bff4:	eb0a 0307 	add.w	r3, sl, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bff8:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bffa:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bffc:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bffe:	d907      	bls.n	800c010 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c006:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c008:	4640      	mov	r0, r8
 800c00a:	b009      	add	sp, #36	; 0x24
 800c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800c010:	2303      	movs	r3, #3
 800c012:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c016:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 800c018:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c01a:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c020:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c022:	ea4f 2347 	mov.w	r3, r7, lsl #9
    hsd->Instance->DCTRL = 0U;
 800c026:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c028:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c02a:	f04f 0190 	mov.w	r1, #144	; 0x90
 800c02e:	f04f 0300 	mov.w	r3, #0
 800c032:	e9cd 1304 	strd	r1, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c036:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c038:	e9cd 3306 	strd	r3, r3, [sp, #24]
      add *= 512U;
 800c03c:	bf18      	it	ne
 800c03e:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c042:	f000 fe95 	bl	800cd70 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c046:	6820      	ldr	r0, [r4, #0]
 800c048:	68c3      	ldr	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800c04a:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c050:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 800c052:	d911      	bls.n	800c078 <HAL_SD_WriteBlocks+0xb8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c054:	2320      	movs	r3, #32
 800c056:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c058:	4651      	mov	r1, sl
 800c05a:	f000 ffc9 	bl	800cff0 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c05e:	b188      	cbz	r0, 800c084 <HAL_SD_WriteBlocks+0xc4>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	4a40      	ldr	r2, [pc, #256]	; (800c164 <HAL_SD_WriteBlocks+0x1a4>)
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c068:	4318      	orrs	r0, r3
 800c06a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c06c:	2301      	movs	r3, #1
 800c06e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c072:	2300      	movs	r3, #0
 800c074:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800c076:	e7c7      	b.n	800c008 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c078:	2310      	movs	r3, #16
 800c07a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c07c:	4651      	mov	r1, sl
 800c07e:	f000 ff9e 	bl	800cfbe <SDMMC_CmdWriteSingleBlock>
 800c082:	e7ec      	b.n	800c05e <HAL_SD_WriteBlocks+0x9e>
    dataremaining = config.DataLength;
 800c084:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c086:	6820      	ldr	r0, [r4, #0]
 800c088:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c08a:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800c08e:	d01b      	beq.n	800c0c8 <HAL_SD_WriteBlocks+0x108>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c090:	68c3      	ldr	r3, [r0, #12]
 800c092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c096:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c098:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c09a:	05db      	lsls	r3, r3, #23
 800c09c:	d508      	bpl.n	800c0b0 <HAL_SD_WriteBlocks+0xf0>
 800c09e:	2f01      	cmp	r7, #1
 800c0a0:	d906      	bls.n	800c0b0 <HAL_SD_WriteBlocks+0xf0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c0a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c0a4:	2b03      	cmp	r3, #3
 800c0a6:	d003      	beq.n	800c0b0 <HAL_SD_WriteBlocks+0xf0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c0a8:	f001 f838 	bl	800d11c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d1d7      	bne.n	800c060 <HAL_SD_WriteBlocks+0xa0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c0b4:	f010 0008 	ands.w	r0, r0, #8
 800c0b8:	d02a      	beq.n	800c110 <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0ba:	4a2a      	ldr	r2, [pc, #168]	; (800c164 <HAL_SD_WriteBlocks+0x1a4>)
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c0be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0c0:	f043 0308 	orr.w	r3, r3, #8
 800c0c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800c0c6:	e7d1      	b.n	800c06c <HAL_SD_WriteBlocks+0xac>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c0c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0ca:	045a      	lsls	r2, r3, #17
 800c0cc:	d50c      	bpl.n	800c0e8 <HAL_SD_WriteBlocks+0x128>
 800c0ce:	b15e      	cbz	r6, 800c0e8 <HAL_SD_WriteBlocks+0x128>
 800c0d0:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c0d4:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c0d8:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c0da:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c0dc:	a901      	add	r1, sp, #4
 800c0de:	f000 fe0e 	bl	800ccfe <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c0e2:	45ab      	cmp	fp, r5
 800c0e4:	d1f6      	bne.n	800c0d4 <HAL_SD_WriteBlocks+0x114>
          dataremaining--;
 800c0e6:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c0e8:	f7fa fff4 	bl	80070d4 <HAL_GetTick>
 800c0ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0ee:	eba0 0009 	sub.w	r0, r0, r9
 800c0f2:	4298      	cmp	r0, r3
 800c0f4:	d3c7      	bcc.n	800c086 <HAL_SD_WriteBlocks+0xc6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	4a1a      	ldr	r2, [pc, #104]	; (800c164 <HAL_SD_WriteBlocks+0x1a4>)
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c0fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c100:	2301      	movs	r3, #1
 800c102:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c106:	2300      	movs	r3, #0
 800c108:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800c10a:	f04f 0803 	mov.w	r8, #3
 800c10e:	e77b      	b.n	800c008 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c112:	f011 0102 	ands.w	r1, r1, #2
 800c116:	d00a      	beq.n	800c12e <HAL_SD_WriteBlocks+0x16e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c118:	4a12      	ldr	r2, [pc, #72]	; (800c164 <HAL_SD_WriteBlocks+0x1a4>)
 800c11a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c11c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c11e:	f043 0302 	orr.w	r3, r3, #2
 800c122:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c124:	2301      	movs	r3, #1
 800c126:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c12a:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 800c12c:	e76c      	b.n	800c008 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c12e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c130:	f012 0210 	ands.w	r2, r2, #16
 800c134:	d00a      	beq.n	800c14c <HAL_SD_WriteBlocks+0x18c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c136:	4a0b      	ldr	r2, [pc, #44]	; (800c164 <HAL_SD_WriteBlocks+0x1a4>)
 800c138:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c13a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c13c:	f043 0310 	orr.w	r3, r3, #16
 800c140:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c142:	2301      	movs	r3, #1
 800c144:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c148:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800c14a:	e75d      	b.n	800c008 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c14c:	4906      	ldr	r1, [pc, #24]	; (800c168 <HAL_SD_WriteBlocks+0x1a8>)
 800c14e:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c150:	2301      	movs	r3, #1
 800c152:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800c156:	4690      	mov	r8, r2
 800c158:	e756      	b.n	800c008 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c15a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c15c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c160:	e73c      	b.n	800bfdc <HAL_SD_WriteBlocks+0x1c>
 800c162:	bf00      	nop
 800c164:	1fe00fff 	.word	0x1fe00fff
 800c168:	18000f3a 	.word	0x18000f3a

0800c16c <HAL_SD_GetState>:
  return hsd->State;
 800c16c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
 800c170:	4770      	bx	lr

0800c172 <HAL_SD_GetError>:
  return hsd->ErrorCode;
 800c172:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800c174:	4770      	bx	lr

0800c176 <HAL_SD_TxCpltCallback>:
 800c176:	4770      	bx	lr

0800c178 <HAL_SD_RxCpltCallback>:
 800c178:	4770      	bx	lr

0800c17a <HAL_SD_ErrorCallback>:
 800c17a:	4770      	bx	lr

0800c17c <HAL_SD_AbortCallback>:
 800c17c:	4770      	bx	lr
	...

0800c180 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c180:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800c182:	0f9a      	lsrs	r2, r3, #30
 800c184:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c186:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800c18a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c18c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800c190:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c192:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c196:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c198:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c19c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c19e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c1a0:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c1a2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c1a4:	0d1a      	lsrs	r2, r3, #20
 800c1a6:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c1a8:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800c1ac:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c1ae:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800c1b2:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c1b4:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800c1b8:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c1ba:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800c1be:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c1c0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800c1c4:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800c1ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 800c1cc:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d16c      	bne.n	800c2ac <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c1d2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800c1d4:	f640 74fc 	movw	r4, #4092	; 0xffc
 800c1d8:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800c1dc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800c1e0:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c1e2:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800c1e6:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c1e8:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800c1ec:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c1ee:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800c1f2:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c1f4:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c1f8:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c1fc:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c1fe:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c200:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c202:	7e0a      	ldrb	r2, [r1, #24]
 800c204:	f002 0207 	and.w	r2, r2, #7
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c208:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c20a:	3202      	adds	r2, #2
 800c20c:	fa03 f202 	lsl.w	r2, r3, r2
 800c210:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c212:	7a0b      	ldrb	r3, [r1, #8]
 800c214:	f003 040f 	and.w	r4, r3, #15
 800c218:	2301      	movs	r3, #1
 800c21a:	40a3      	lsls	r3, r4
 800c21c:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c21e:	0a5b      	lsrs	r3, r3, #9
 800c220:	4353      	muls	r3, r2
 800c222:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c224:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c228:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c22a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800c22c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800c230:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c232:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c23a:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c23c:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c23e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800c240:	0fda      	lsrs	r2, r3, #31
 800c242:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c244:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800c248:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c24a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800c24e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c250:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800c254:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c256:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800c25a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800c25e:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c260:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800c264:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c268:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c26c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800c270:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c274:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800c278:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c27c:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800c280:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c284:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800c288:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c28c:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800c290:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c294:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c298:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c29c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c2a0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800c2aa:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c2ac:	2a01      	cmp	r2, #1
 800c2ae:	d10f      	bne.n	800c2d0 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c2b0:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800c2b4:	041b      	lsls	r3, r3, #16
 800c2b6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c2be:	690b      	ldr	r3, [r1, #16]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	029b      	lsls	r3, r3, #10
 800c2c4:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c2c6:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c2c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2cc:	6503      	str	r3, [r0, #80]	; 0x50
 800c2ce:	e7ab      	b.n	800c228 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2d0:	6803      	ldr	r3, [r0, #0]
 800c2d2:	4a05      	ldr	r2, [pc, #20]	; (800c2e8 <HAL_SD_GetCardCSD+0x168>)
 800c2d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2dc:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	e7e0      	b.n	800c2aa <HAL_SD_GetCardCSD+0x12a>
 800c2e8:	1fe00fff 	.word	0x1fe00fff

0800c2ec <HAL_SD_InitCard>:
{
 800c2ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c2f0:	2300      	movs	r3, #0
{
 800c2f2:	b099      	sub	sp, #100	; 0x64
 800c2f4:	4604      	mov	r4, r0
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800c2f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c2fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c2fe:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800c302:	f7fd fb2d 	bl	8009960 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800c306:	4605      	mov	r5, r0
 800c308:	b948      	cbnz	r0, 800c31e <HAL_SD_InitCard+0x32>
      hsd->State = HAL_SD_STATE_READY;
 800c30a:	2501      	movs	r5, #1
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c30c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
      hsd->State = HAL_SD_STATE_READY;
 800c310:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c314:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c316:	4628      	mov	r0, r5
 800c318:	b019      	add	sp, #100	; 0x64
 800c31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  Init.Transceiver = hsd->Init.Transceiver;
 800c31e:	69a3      	ldr	r3, [r4, #24]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800c320:	6827      	ldr	r7, [r4, #0]
  Init.Transceiver = hsd->Init.Transceiver;
 800c322:	930c      	str	r3, [sp, #48]	; 0x30
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c324:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800c326:	bf08      	it	eq
 800c328:	683b      	ldreq	r3, [r7, #0]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c32a:	4e99      	ldr	r6, [pc, #612]	; (800c590 <HAL_SD_InitCard+0x2a4>)
 800c32c:	fbb0 f6f6 	udiv	r6, r0, r6
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800c330:	bf04      	itt	eq
 800c332:	f043 0310 	orreq.w	r3, r3, #16
 800c336:	603b      	streq	r3, [r7, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 800c338:	960b      	str	r6, [sp, #44]	; 0x2c
 800c33a:	ab0a      	add	r3, sp, #40	; 0x28
 800c33c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c340:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c344:	ab07      	add	r3, sp, #28
 800c346:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c348:	4638      	mov	r0, r7
 800c34a:	f000 fcbb 	bl	800ccc4 <SDMMC_Init>
  if(status != HAL_OK)
 800c34e:	b108      	cbz	r0, 800c354 <HAL_SD_InitCard+0x68>
    return HAL_ERROR;
 800c350:	2501      	movs	r5, #1
 800c352:	e7e0      	b.n	800c316 <HAL_SD_InitCard+0x2a>
  status = SDMMC_PowerState_ON(hsd->Instance);
 800c354:	6820      	ldr	r0, [r4, #0]
 800c356:	f000 fcd7 	bl	800cd08 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800c35a:	4607      	mov	r7, r0
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d1f7      	bne.n	800c350 <HAL_SD_InitCard+0x64>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800c360:	0076      	lsls	r6, r6, #1
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800c362:	488c      	ldr	r0, [pc, #560]	; (800c594 <HAL_SD_InitCard+0x2a8>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800c364:	fbb5 f5f6 	udiv	r5, r5, r6
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800c368:	fbb0 f0f5 	udiv	r0, r0, r5
 800c36c:	3001      	adds	r0, #1
 800c36e:	f7f7 fad0 	bl	8003912 <HAL_Delay>
  __IO uint32_t count = 0U;
 800c372:	9706      	str	r7, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800c374:	f7fa feae 	bl	80070d4 <HAL_GetTick>
 800c378:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c37a:	6820      	ldr	r0, [r4, #0]
 800c37c:	f000 fd18 	bl	800cdb0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c380:	4605      	mov	r5, r0
 800c382:	b940      	cbnz	r0, 800c396 <HAL_SD_InitCard+0xaa>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c384:	6820      	ldr	r0, [r4, #0]
 800c386:	f001 f8fd 	bl	800d584 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c38a:	b158      	cbz	r0, 800c3a4 <HAL_SD_InitCard+0xb8>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c38c:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c38e:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c390:	f000 fd0e 	bl	800cdb0 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c394:	b180      	cbz	r0, 800c3b8 <HAL_SD_InitCard+0xcc>
    hsd->State = HAL_SD_STATE_READY;
 800c396:	2501      	movs	r5, #1
 800c398:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c39c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c39e:	4318      	orrs	r0, r3
 800c3a0:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800c3a2:	e7b8      	b.n	800c316 <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c3a8:	6820      	ldr	r0, [r4, #0]
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f000 fef5 	bl	800d19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3b0:	b128      	cbz	r0, 800c3be <HAL_SD_InitCard+0xd2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c3b6:	e7ee      	b.n	800c396 <HAL_SD_InitCard+0xaa>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c3b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d0f4      	beq.n	800c3a8 <HAL_SD_InitCard+0xbc>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c3be:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800c59c <HAL_SD_InitCard+0x2b0>
{
 800c3c2:	2700      	movs	r7, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c3c4:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 800c3c8:	9b06      	ldr	r3, [sp, #24]
 800c3ca:	4543      	cmp	r3, r8
 800c3cc:	d800      	bhi.n	800c3d0 <HAL_SD_InitCard+0xe4>
 800c3ce:	b12f      	cbz	r7, 800c3dc <HAL_SD_InitCard+0xf0>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c3d0:	9b06      	ldr	r3, [sp, #24]
 800c3d2:	4543      	cmp	r3, r8
 800c3d4:	d918      	bls.n	800c408 <HAL_SD_InitCard+0x11c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c3d6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800c3da:	e7dc      	b.n	800c396 <HAL_SD_InitCard+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c3dc:	6820      	ldr	r0, [r4, #0]
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f000 fedb 	bl	800d19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d1d6      	bne.n	800c396 <HAL_SD_InitCard+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c3e8:	6820      	ldr	r0, [r4, #0]
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	f001 f816 	bl	800d41c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d1de      	bne.n	800c3b2 <HAL_SD_InitCard+0xc6>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c3f4:	4639      	mov	r1, r7
 800c3f6:	6820      	ldr	r0, [r4, #0]
 800c3f8:	f000 fcb7 	bl	800cd6a <SDMMC_GetResponse>
    count++;
 800c3fc:	9b06      	ldr	r3, [sp, #24]
 800c3fe:	3301      	adds	r3, #1
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c400:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c402:	0fc7      	lsrs	r7, r0, #31
    count++;
 800c404:	9306      	str	r3, [sp, #24]
 800c406:	e7df      	b.n	800c3c8 <HAL_SD_InitCard+0xdc>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c408:	f015 4380 	ands.w	r3, r5, #1073741824	; 0x40000000
 800c40c:	d04b      	beq.n	800c4a6 <HAL_SD_InitCard+0x1ba>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c40e:	2301      	movs	r3, #1
 800c410:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c412:	69a3      	ldr	r3, [r4, #24]
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c414:	6820      	ldr	r0, [r4, #0]
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c416:	2b01      	cmp	r3, #1
 800c418:	d12d      	bne.n	800c476 <HAL_SD_InitCard+0x18a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800c41a:	01ef      	lsls	r7, r5, #7
 800c41c:	d52b      	bpl.n	800c476 <HAL_SD_InitCard+0x18a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c41e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c422:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800c424:	6803      	ldr	r3, [r0, #0]
 800c426:	f043 0308 	orr.w	r3, r3, #8
 800c42a:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800c42c:	f000 ff4e 	bl	800d2cc <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800c430:	2800      	cmp	r0, #0
 800c432:	d1b0      	bne.n	800c396 <HAL_SD_InitCard+0xaa>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c438:	0155      	lsls	r5, r2, #5
 800c43a:	d526      	bpl.n	800c48a <HAL_SD_InitCard+0x19e>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800c43c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c440:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800c442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c444:	02d8      	lsls	r0, r3, #11
 800c446:	d5b4      	bpl.n	800c3b2 <HAL_SD_InitCard+0xc6>
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800c448:	2001      	movs	r0, #1
 800c44a:	f7fa feb3 	bl	80071b4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800c44e:	6822      	ldr	r2, [r4, #0]
 800c450:	6813      	ldr	r3, [r2, #0]
 800c452:	f043 0304 	orr.w	r3, r3, #4
 800c456:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c45c:	0191      	lsls	r1, r2, #6
 800c45e:	d51c      	bpl.n	800c49a <HAL_SD_InitCard+0x1ae>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800c460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c464:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800c466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c468:	02d2      	lsls	r2, r2, #11
 800c46a:	d4b4      	bmi.n	800c3d6 <HAL_SD_InitCard+0xea>
          hsd->Instance->POWER = 0x13U;
 800c46c:	2213      	movs	r2, #19
 800c46e:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800c470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c474:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 800c476:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c478:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800c47a:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c47e:	f000 fc59 	bl	800cd34 <SDMMC_GetPowerState>
 800c482:	b990      	cbnz	r0, 800c4aa <HAL_SD_InitCard+0x1be>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c484:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c488:	e785      	b.n	800c396 <HAL_SD_InitCard+0xaa>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c48a:	f7fa fe23 	bl	80070d4 <HAL_GetTick>
 800c48e:	1b80      	subs	r0, r0, r6
 800c490:	3001      	adds	r0, #1
 800c492:	d1cf      	bne.n	800c434 <HAL_SD_InitCard+0x148>
            return HAL_SD_ERROR_TIMEOUT;
 800c494:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c498:	e77d      	b.n	800c396 <HAL_SD_InitCard+0xaa>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c49a:	f7fa fe1b 	bl	80070d4 <HAL_GetTick>
 800c49e:	1b80      	subs	r0, r0, r6
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d1d9      	bne.n	800c458 <HAL_SD_InitCard+0x16c>
 800c4a4:	e7f6      	b.n	800c494 <HAL_SD_InitCard+0x1a8>
    hsd->SdCard.CardType = CARD_SDSC;
 800c4a6:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4a8:	e7e5      	b.n	800c476 <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d045      	beq.n	800c53c <HAL_SD_InitCard+0x250>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	f000 ff65 	bl	800d380 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f47f af6d 	bne.w	800c396 <HAL_SD_InitCard+0xaa>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c4bc:	4601      	mov	r1, r0
 800c4be:	6820      	ldr	r0, [r4, #0]
 800c4c0:	f000 fc53 	bl	800cd6a <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c4c4:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c4c6:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	f000 fc4e 	bl	800cd6a <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4ce:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c4d0:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4d2:	6820      	ldr	r0, [r4, #0]
 800c4d4:	f000 fc49 	bl	800cd6a <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4d8:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c4da:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4dc:	6820      	ldr	r0, [r4, #0]
 800c4de:	f000 fc44 	bl	800cd6a <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4e4:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d028      	beq.n	800c53c <HAL_SD_InitCard+0x250>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c4ea:	6820      	ldr	r0, [r4, #0]
 800c4ec:	f10d 0116 	add.w	r1, sp, #22
 800c4f0:	f001 f804 	bl	800d4fc <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	f47f af4e 	bne.w	800c396 <HAL_SD_InitCard+0xaa>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c4fc:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d01c      	beq.n	800c53c <HAL_SD_InitCard+0x250>
    hsd->SdCard.RelCardAdd = sd_rca;
 800c502:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800c506:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c508:	0409      	lsls	r1, r1, #16
 800c50a:	f000 ff4f 	bl	800d3ac <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c50e:	2800      	cmp	r0, #0
 800c510:	f47f af41 	bne.w	800c396 <HAL_SD_InitCard+0xaa>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c514:	4601      	mov	r1, r0
 800c516:	6820      	ldr	r0, [r4, #0]
 800c518:	f000 fc27 	bl	800cd6a <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c51c:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c51e:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c520:	6820      	ldr	r0, [r4, #0]
 800c522:	f000 fc22 	bl	800cd6a <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c526:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c528:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c52a:	6820      	ldr	r0, [r4, #0]
 800c52c:	f000 fc1d 	bl	800cd6a <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c530:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c532:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	f000 fc18 	bl	800cd6a <SDMMC_GetResponse>
 800c53a:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c53c:	2104      	movs	r1, #4
 800c53e:	6820      	ldr	r0, [r4, #0]
 800c540:	f000 fc13 	bl	800cd6a <SDMMC_GetResponse>
 800c544:	0d00      	lsrs	r0, r0, #20
 800c546:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c548:	a90d      	add	r1, sp, #52	; 0x34
 800c54a:	4620      	mov	r0, r4
 800c54c:	f7ff fe18 	bl	800c180 <HAL_SD_GetCardCSD>
 800c550:	4605      	mov	r5, r0
 800c552:	2800      	cmp	r0, #0
 800c554:	f47f af2d 	bne.w	800c3b2 <HAL_SD_InitCard+0xc6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c558:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c55a:	4603      	mov	r3, r0
 800c55c:	0412      	lsls	r2, r2, #16
 800c55e:	6820      	ldr	r0, [r4, #0]
 800c560:	f000 fe02 	bl	800d168 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c564:	2800      	cmp	r0, #0
 800c566:	f47f af16 	bne.w	800c396 <HAL_SD_InitCard+0xaa>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c56a:	6820      	ldr	r0, [r4, #0]
 800c56c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c570:	f000 fcda 	bl	800cf28 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c574:	2800      	cmp	r0, #0
 800c576:	f43f aece 	beq.w	800c316 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	4a06      	ldr	r2, [pc, #24]	; (800c598 <HAL_SD_InitCard+0x2ac>)
 800c57e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c582:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 800c584:	4318      	orrs	r0, r3
 800c586:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c588:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c58c:	e6c3      	b.n	800c316 <HAL_SD_InitCard+0x2a>
 800c58e:	bf00      	nop
 800c590:	000c3500 	.word	0x000c3500
 800c594:	00012110 	.word	0x00012110
 800c598:	1fe00fff 	.word	0x1fe00fff
 800c59c:	c1100000 	.word	0xc1100000

0800c5a0 <HAL_SD_GetCardStatus>:
{
 800c5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a4:	b096      	sub	sp, #88	; 0x58
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800c5aa:	f7fa fd93 	bl	80070d4 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c5ae:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800c5b0:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c5b2:	6820      	ldr	r0, [r4, #0]
 800c5b4:	f000 fbd9 	bl	800cd6a <SDMMC_GetResponse>
 800c5b8:	0183      	lsls	r3, r0, #6
 800c5ba:	d50b      	bpl.n	800c5d4 <HAL_SD_GetCardStatus+0x34>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c5bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	4a54      	ldr	r2, [pc, #336]	; (800c714 <HAL_SD_GetCardStatus+0x174>)
 800c5c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c5c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c5c8:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 800c5ca:	4318      	orrs	r0, r3
 800c5cc:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c5ce:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    status = HAL_ERROR;
 800c5d2:	e08a      	b.n	800c6ea <HAL_SD_GetCardStatus+0x14a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	2140      	movs	r1, #64	; 0x40
 800c5d8:	f000 fca6 	bl	800cf28 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5dc:	b110      	cbz	r0, 800c5e4 <HAL_SD_GetCardStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c5de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c5e0:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 800c5e2:	e7ed      	b.n	800c5c0 <HAL_SD_GetCardStatus+0x20>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c5e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c5e6:	6820      	ldr	r0, [r4, #0]
 800c5e8:	0409      	lsls	r1, r1, #16
 800c5ea:	f000 fdd6 	bl	800d19a <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d1f5      	bne.n	800c5de <HAL_SD_GetCardStatus+0x3e>
  config.DataLength    = 64U;
 800c5f2:	2340      	movs	r3, #64	; 0x40
 800c5f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c5f8:	e9cd 7300 	strd	r7, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c5fc:	f04f 0c60 	mov.w	ip, #96	; 0x60
 800c600:	2302      	movs	r3, #2
 800c602:	e9cd c302 	strd	ip, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c606:	9004      	str	r0, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c608:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c60a:	6820      	ldr	r0, [r4, #0]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c60c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c60e:	4669      	mov	r1, sp
 800c610:	f000 fbae 	bl	800cd70 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c614:	6820      	ldr	r0, [r4, #0]
 800c616:	f000 fe40 	bl	800d29a <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d1df      	bne.n	800c5de <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800c61e:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c624:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800c628:	d00a      	beq.n	800c640 <HAL_SD_GetCardStatus+0xa0>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c62a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c62c:	0711      	lsls	r1, r2, #28
 800c62e:	d46f      	bmi.n	800c710 <HAL_SD_GetCardStatus+0x170>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c632:	0792      	lsls	r2, r2, #30
 800c634:	d46a      	bmi.n	800c70c <HAL_SD_GetCardStatus+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c638:	069b      	lsls	r3, r3, #26
 800c63a:	d51e      	bpl.n	800c67a <HAL_SD_GetCardStatus+0xda>
    return HAL_SD_ERROR_RX_OVERRUN;
 800c63c:	2020      	movs	r0, #32
 800c63e:	e7bf      	b.n	800c5c0 <HAL_SD_GetCardStatus+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c642:	0418      	lsls	r0, r3, #16
 800c644:	d508      	bpl.n	800c658 <HAL_SD_GetCardStatus+0xb8>
 800c646:	f107 0820 	add.w	r8, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c64a:	6820      	ldr	r0, [r4, #0]
 800c64c:	f000 fb54 	bl	800ccf8 <SDMMC_ReadFIFO>
 800c650:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800c654:	45b8      	cmp	r8, r7
 800c656:	d1f8      	bne.n	800c64a <HAL_SD_GetCardStatus+0xaa>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c658:	f7fa fd3c 	bl	80070d4 <HAL_GetTick>
 800c65c:	1b80      	subs	r0, r0, r6
 800c65e:	3001      	adds	r0, #1
 800c660:	d1de      	bne.n	800c620 <HAL_SD_GetCardStatus+0x80>
      return HAL_SD_ERROR_TIMEOUT;
 800c662:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if(errorstate != HAL_SD_ERROR_NONE)
 800c666:	e7ab      	b.n	800c5c0 <HAL_SD_GetCardStatus+0x20>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c668:	f000 fb46 	bl	800ccf8 <SDMMC_ReadFIFO>
 800c66c:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c670:	f7fa fd30 	bl	80070d4 <HAL_GetTick>
 800c674:	1b80      	subs	r0, r0, r6
 800c676:	3001      	adds	r0, #1
 800c678:	d0f3      	beq.n	800c662 <HAL_SD_GetCardStatus+0xc2>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c67a:	6820      	ldr	r0, [r4, #0]
 800c67c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c67e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800c682:	d1f1      	bne.n	800c668 <HAL_SD_GetCardStatus+0xc8>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c684:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c686:	4a24      	ldr	r2, [pc, #144]	; (800c718 <HAL_SD_GetCardStatus+0x178>)
 800c688:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c68a:	f3c1 1281 	ubfx	r2, r1, #6, #2
 800c68e:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c690:	f3c1 1240 	ubfx	r2, r1, #5, #1
 800c694:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c696:	0a0a      	lsrs	r2, r1, #8
 800c698:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c69c:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 800c6a0:	b292      	uxth	r2, r2
 800c6a2:	806a      	strh	r2, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c6a4:	9a07      	ldr	r2, [sp, #28]
 800c6a6:	ba12      	rev	r2, r2
 800c6a8:	606a      	str	r2, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c6aa:	9a08      	ldr	r2, [sp, #32]
 800c6ac:	b2d1      	uxtb	r1, r2
 800c6ae:	7229      	strb	r1, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c6b0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c6b4:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c6b6:	f3c2 5103 	ubfx	r1, r2, #20, #4
 800c6ba:	72a9      	strb	r1, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c6bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6be:	0c12      	lsrs	r2, r2, #16
 800c6c0:	b2c8      	uxtb	r0, r1
 800c6c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c6c6:	4302      	orrs	r2, r0
 800c6c8:	81aa      	strh	r2, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c6ca:	f3c1 2285 	ubfx	r2, r1, #10, #6
 800c6ce:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c6d0:	f3c1 2201 	ubfx	r2, r1, #8, #2
 800c6d4:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c6d6:	f3c1 1203 	ubfx	r2, r1, #4, #4
 800c6da:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c6dc:	f001 010f 	and.w	r1, r1, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c6e0:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c6e4:	7469      	strb	r1, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c6e6:	74aa      	strb	r2, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800c6e8:	461d      	mov	r5, r3
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c6ea:	6820      	ldr	r0, [r4, #0]
 800c6ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c6f0:	f000 fc1a 	bl	800cf28 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6f4:	b130      	cbz	r0, 800c704 <HAL_SD_GetCardStatus+0x164>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	4a06      	ldr	r2, [pc, #24]	; (800c714 <HAL_SD_GetCardStatus+0x174>)
 800c6fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c6fc:	2501      	movs	r5, #1
    hsd->ErrorCode = errorstate;
 800c6fe:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c700:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800c704:	4628      	mov	r0, r5
 800c706:	b016      	add	sp, #88	; 0x58
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c70c:	2002      	movs	r0, #2
 800c70e:	e757      	b.n	800c5c0 <HAL_SD_GetCardStatus+0x20>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c710:	2008      	movs	r0, #8
 800c712:	e755      	b.n	800c5c0 <HAL_SD_GetCardStatus+0x20>
 800c714:	1fe00fff 	.word	0x1fe00fff
 800c718:	18000f3a 	.word	0x18000f3a

0800c71c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c71c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c71e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c720:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c722:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c724:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c726:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c728:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800c72a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c72c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c72e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c730:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c732:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c734:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c736:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c738:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c73a:	61cb      	str	r3, [r1, #28]
}
 800c73c:	2000      	movs	r0, #0
 800c73e:	4770      	bx	lr

0800c740 <HAL_SD_ConfigWideBusOperation>:
{
 800c740:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800c742:	2303      	movs	r3, #3
 800c744:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c748:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c74a:	2b03      	cmp	r3, #3
{
 800c74c:	b08b      	sub	sp, #44	; 0x2c
 800c74e:	4604      	mov	r4, r0
 800c750:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c752:	d002      	beq.n	800c75a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c754:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c758:	d103      	bne.n	800c762 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c75a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c75c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c760:	e049      	b.n	800c7f6 <HAL_SD_ConfigWideBusOperation+0xb6>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c762:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c766:	d123      	bne.n	800c7b0 <HAL_SD_ConfigWideBusOperation+0x70>
  uint32_t scr[2U] = {0UL, 0UL};
 800c768:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c76a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800c76c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c770:	f000 fafb 	bl	800cd6a <SDMMC_GetResponse>
 800c774:	0180      	lsls	r0, r0, #6
 800c776:	d435      	bmi.n	800c7e4 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 800c778:	a904      	add	r1, sp, #16
 800c77a:	4620      	mov	r0, r4
 800c77c:	f7ff fa32 	bl	800bbe4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c780:	b960      	cbnz	r0, 800c79c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c782:	9b05      	ldr	r3, [sp, #20]
 800c784:	0359      	lsls	r1, r3, #13
 800c786:	d530      	bpl.n	800c7ea <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c788:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c78a:	6820      	ldr	r0, [r4, #0]
 800c78c:	0409      	lsls	r1, r1, #16
 800c78e:	f000 fd04 	bl	800d19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c792:	b918      	cbnz	r0, 800c79c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c794:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c796:	6820      	ldr	r0, [r4, #0]
 800c798:	f000 fd18 	bl	800d1cc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800c79c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c79e:	4318      	orrs	r0, r3
 800c7a0:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c7a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7a4:	b34b      	cbz	r3, 800c7fa <HAL_SD_ConfigWideBusOperation+0xba>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	4a42      	ldr	r2, [pc, #264]	; (800c8b4 <HAL_SD_ConfigWideBusOperation+0x174>)
 800c7aa:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800c7ac:	2501      	movs	r5, #1
 800c7ae:	e054      	b.n	800c85a <HAL_SD_ConfigWideBusOperation+0x11a>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c7b0:	b9f1      	cbnz	r1, 800c7f0 <HAL_SD_ConfigWideBusOperation+0xb0>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c7b2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800c7b4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c7b8:	f000 fad7 	bl	800cd6a <SDMMC_GetResponse>
 800c7bc:	0182      	lsls	r2, r0, #6
 800c7be:	d411      	bmi.n	800c7e4 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 800c7c0:	a904      	add	r1, sp, #16
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f7ff fa0e 	bl	800bbe4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d1e7      	bne.n	800c79c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c7cc:	9b05      	ldr	r3, [sp, #20]
 800c7ce:	03db      	lsls	r3, r3, #15
 800c7d0:	d50b      	bpl.n	800c7ea <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c7d2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c7d4:	6820      	ldr	r0, [r4, #0]
 800c7d6:	0409      	lsls	r1, r1, #16
 800c7d8:	f000 fcdf 	bl	800d19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d1dd      	bne.n	800c79c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c7e0:	4601      	mov	r1, r0
 800c7e2:	e7d8      	b.n	800c796 <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c7e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c7e8:	e7d8      	b.n	800c79c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c7ee:	e7d5      	b.n	800c79c <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c7f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7f8:	e7d3      	b.n	800c7a2 <HAL_SD_ConfigWideBusOperation+0x62>
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800c7fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c7fe:	f7fd f8af 	bl	8009960 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800c802:	2800      	cmp	r0, #0
 800c804:	d051      	beq.n	800c8aa <HAL_SD_ConfigWideBusOperation+0x16a>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c806:	6863      	ldr	r3, [r4, #4]
 800c808:	9304      	str	r3, [sp, #16]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c80a:	68a3      	ldr	r3, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c80c:	492a      	ldr	r1, [pc, #168]	; (800c8b8 <HAL_SD_ConfigWideBusOperation+0x178>)
 800c80e:	fbb0 f2f1 	udiv	r2, r0, r1
      Init.BusWide             = WideMode;
 800c812:	e9cd 3505 	strd	r3, r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	9307      	str	r3, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c81a:	6963      	ldr	r3, [r4, #20]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d301      	bcc.n	800c824 <HAL_SD_ConfigWideBusOperation+0xe4>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c820:	9308      	str	r3, [sp, #32]
 800c822:	e00d      	b.n	800c840 <HAL_SD_ConfigWideBusOperation+0x100>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c824:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800c826:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c82a:	d0f9      	beq.n	800c820 <HAL_SD_ConfigWideBusOperation+0xe0>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c82c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c830:	d12e      	bne.n	800c890 <HAL_SD_ConfigWideBusOperation+0x150>
        if (hsd->Init.ClockDiv == 0U)
 800c832:	bb3b      	cbnz	r3, 800c884 <HAL_SD_ConfigWideBusOperation+0x144>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c834:	4288      	cmp	r0, r1
 800c836:	d923      	bls.n	800c880 <HAL_SD_ConfigWideBusOperation+0x140>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c838:	4b20      	ldr	r3, [pc, #128]	; (800c8bc <HAL_SD_ConfigWideBusOperation+0x17c>)
 800c83a:	fbb0 f0f3 	udiv	r0, r0, r3
 800c83e:	9008      	str	r0, [sp, #32]
      Init.Transceiver = hsd->Init.Transceiver;
 800c840:	69a3      	ldr	r3, [r4, #24]
 800c842:	9309      	str	r3, [sp, #36]	; 0x24
      (void)SDMMC_Init(hsd->Instance, Init);
 800c844:	ab0a      	add	r3, sp, #40	; 0x28
 800c846:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c84a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c84e:	ab04      	add	r3, sp, #16
 800c850:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c852:	6820      	ldr	r0, [r4, #0]
 800c854:	f000 fa36 	bl	800ccc4 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800c858:	2500      	movs	r5, #0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c85a:	6820      	ldr	r0, [r4, #0]
 800c85c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c860:	f000 fb62 	bl	800cf28 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c864:	b130      	cbz	r0, 800c874 <HAL_SD_ConfigWideBusOperation+0x134>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	4a12      	ldr	r2, [pc, #72]	; (800c8b4 <HAL_SD_ConfigWideBusOperation+0x174>)
 800c86a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c86c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c86e:	4318      	orrs	r0, r3
 800c870:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800c872:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800c874:	2301      	movs	r3, #1
}
 800c876:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800c878:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800c87c:	b00b      	add	sp, #44	; 0x2c
 800c87e:	bd30      	pop	{r4, r5, pc}
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c880:	2300      	movs	r3, #0
 800c882:	e7cd      	b.n	800c820 <HAL_SD_ConfigWideBusOperation+0xe0>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c884:	005a      	lsls	r2, r3, #1
 800c886:	fbb0 f2f2 	udiv	r2, r0, r2
 800c88a:	428a      	cmp	r2, r1
 800c88c:	d9c8      	bls.n	800c820 <HAL_SD_ConfigWideBusOperation+0xe0>
 800c88e:	e7d3      	b.n	800c838 <HAL_SD_ConfigWideBusOperation+0xf8>
        if (hsd->Init.ClockDiv == 0U)
 800c890:	490b      	ldr	r1, [pc, #44]	; (800c8c0 <HAL_SD_ConfigWideBusOperation+0x180>)
 800c892:	b91b      	cbnz	r3, 800c89c <HAL_SD_ConfigWideBusOperation+0x15c>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c894:	4288      	cmp	r0, r1
 800c896:	d9f3      	bls.n	800c880 <HAL_SD_ConfigWideBusOperation+0x140>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c898:	9208      	str	r2, [sp, #32]
 800c89a:	e7d1      	b.n	800c840 <HAL_SD_ConfigWideBusOperation+0x100>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c89c:	005d      	lsls	r5, r3, #1
 800c89e:	fbb0 f0f5 	udiv	r0, r0, r5
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c8a2:	4288      	cmp	r0, r1
 800c8a4:	bf88      	it	hi
 800c8a6:	4613      	movhi	r3, r2
 800c8a8:	e7ba      	b.n	800c820 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c8aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c8ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c8b0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8b2:	e77b      	b.n	800c7ac <HAL_SD_ConfigWideBusOperation+0x6c>
 800c8b4:	1fe00fff 	.word	0x1fe00fff
 800c8b8:	02faf080 	.word	0x02faf080
 800c8bc:	05f5e100 	.word	0x05f5e100
 800c8c0:	017d7840 	.word	0x017d7840

0800c8c4 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8c4:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800c8c6:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8c8:	0409      	lsls	r1, r1, #16
{
 800c8ca:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8cc:	6800      	ldr	r0, [r0, #0]
 800c8ce:	f000 fccb 	bl	800d268 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	b928      	cbnz	r0, 800c8e2 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c8d6:	6820      	ldr	r0, [r4, #0]
 800c8d8:	f000 fa47 	bl	800cd6a <SDMMC_GetResponse>
}
 800c8dc:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800c8e0:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800c8e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c8e4:	4308      	orrs	r0, r1
 800c8e6:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e7f7      	b.n	800c8dc <HAL_SD_GetCardState+0x18>

0800c8ec <HAL_SD_Init>:
{
 800c8ec:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 800c8ee:	4604      	mov	r4, r0
{
 800c8f0:	b086      	sub	sp, #24
  if(hsd == NULL)
 800c8f2:	b918      	cbnz	r0, 800c8fc <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800c8f4:	2501      	movs	r5, #1
}
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	b006      	add	sp, #24
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800c8fc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800c900:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c904:	b913      	cbnz	r3, 800c90c <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 800c906:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800c908:	f7ff fa5a 	bl	800bdc0 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800c90c:	2303      	movs	r3, #3
 800c90e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c912:	4620      	mov	r0, r4
 800c914:	f7ff fcea 	bl	800c2ec <HAL_SD_InitCard>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d1eb      	bne.n	800c8f4 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c91c:	a901      	add	r1, sp, #4
 800c91e:	4620      	mov	r0, r4
 800c920:	f7ff fe3e 	bl	800c5a0 <HAL_SD_GetCardStatus>
 800c924:	2800      	cmp	r0, #0
 800c926:	d1e5      	bne.n	800c8f4 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c928:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800c92a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c92e:	f89d 3015 	ldrb.w	r3, [sp, #21]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c932:	2901      	cmp	r1, #1
  speedgrade = CardStatus.UhsSpeedGrade;
 800c934:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c936:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c938:	d11c      	bne.n	800c974 <HAL_SD_Init+0x88>
 800c93a:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c93c:	bf14      	ite	ne
 800c93e:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c942:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800c946:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c948:	68e1      	ldr	r1, [r4, #12]
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7ff fef8 	bl	800c740 <HAL_SD_ConfigWideBusOperation>
 800c950:	4605      	mov	r5, r0
 800c952:	2800      	cmp	r0, #0
 800c954:	d1ce      	bne.n	800c8f4 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 800c956:	f7fa fbbd 	bl	80070d4 <HAL_GetTick>
 800c95a:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7ff ffb1 	bl	800c8c4 <HAL_SD_GetCardState>
 800c962:	2804      	cmp	r0, #4
 800c964:	d108      	bne.n	800c978 <HAL_SD_Init+0x8c>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c966:	2300      	movs	r3, #0
 800c968:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800c96a:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800c96c:	2301      	movs	r3, #1
 800c96e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800c972:	e7c0      	b.n	800c8f6 <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c974:	65e0      	str	r0, [r4, #92]	; 0x5c
 800c976:	e7e7      	b.n	800c948 <HAL_SD_Init+0x5c>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800c978:	f7fa fbac 	bl	80070d4 <HAL_GetTick>
 800c97c:	1b80      	subs	r0, r0, r6
 800c97e:	3001      	adds	r0, #1
 800c980:	d1ec      	bne.n	800c95c <HAL_SD_Init+0x70>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c982:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c986:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800c988:	2301      	movs	r3, #1
 800c98a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c98e:	2300      	movs	r3, #0
 800c990:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800c992:	2503      	movs	r5, #3
 800c994:	e7af      	b.n	800c8f6 <HAL_SD_Init+0xa>
	...

0800c998 <SD_HighSpeed>:
{
 800c998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t SD_hs[16]  = {0};
 800c99c:	2640      	movs	r6, #64	; 0x40
{
 800c99e:	b096      	sub	sp, #88	; 0x58
 800c9a0:	4605      	mov	r5, r0
  uint32_t SD_hs[16]  = {0};
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	a806      	add	r0, sp, #24
 800c9a8:	f000 fe3c 	bl	800d624 <memset>
  uint32_t Timeout = HAL_GetTick();
 800c9ac:	f7fa fb92 	bl	80070d4 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800c9b0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 800c9b2:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d066      	beq.n	800ca86 <SD_HighSpeed+0xee>
  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c9b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9bc:	d004      	beq.n	800c9c8 <SD_HighSpeed+0x30>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800c9be:	2400      	movs	r4, #0
}
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	b016      	add	sp, #88	; 0x58
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 800c9c8:	6828      	ldr	r0, [r5, #0]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	f000 faaa 	bl	800cf28 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d1f2      	bne.n	800c9c0 <SD_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    sdmmc_datainitstructure.DataLength    = 64U;
 800c9de:	e9cd 3600 	strd	r3, r6, [sp]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c9e2:	2260      	movs	r2, #96	; 0x60
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c9ea:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800c9ec:	2301      	movs	r3, #1
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800c9ee:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800c9f0:	9305      	str	r3, [sp, #20]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800c9f2:	4669      	mov	r1, sp
 800c9f4:	f000 f9bc 	bl	800cd70 <SDMMC_ConfigData>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d147      	bne.n	800ca8c <SD_HighSpeed+0xf4>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 800c9fc:	4925      	ldr	r1, [pc, #148]	; (800ca94 <SD_HighSpeed+0xfc>)
 800c9fe:	6828      	ldr	r0, [r5, #0]
 800ca00:	f000 fbfd 	bl	800d1fe <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca04:	4604      	mov	r4, r0
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d1da      	bne.n	800c9c0 <SD_HighSpeed+0x28>
  uint32_t count, loop = 0 ;
 800ca0a:	4607      	mov	r7, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800ca0c:	f240 592a 	movw	r9, #1322	; 0x52a
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800ca14:	ea16 0609 	ands.w	r6, r6, r9
 800ca18:	d005      	beq.n	800ca26 <SD_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ca1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca1c:	0710      	lsls	r0, r2, #28
 800ca1e:	d51e      	bpl.n	800ca5e <SD_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ca20:	2208      	movs	r2, #8
 800ca22:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 800ca24:	e7cc      	b.n	800c9c0 <SD_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ca26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca28:	041b      	lsls	r3, r3, #16
 800ca2a:	d50b      	bpl.n	800ca44 <SD_HighSpeed+0xac>
 800ca2c:	ab06      	add	r3, sp, #24
 800ca2e:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800ca32:	6828      	ldr	r0, [r5, #0]
 800ca34:	f000 f960 	bl	800ccf8 <SDMMC_ReadFIFO>
        for (count = 0U; count < 8U; count++)
 800ca38:	3601      	adds	r6, #1
 800ca3a:	2e08      	cmp	r6, #8
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800ca3c:	f84a 0b04 	str.w	r0, [sl], #4
        for (count = 0U; count < 8U; count++)
 800ca40:	d1f7      	bne.n	800ca32 <SD_HighSpeed+0x9a>
        loop ++;
 800ca42:	3701      	adds	r7, #1
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800ca44:	f7fa fb46 	bl	80070d4 <HAL_GetTick>
 800ca48:	eba0 0008 	sub.w	r0, r0, r8
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d1df      	bne.n	800ca10 <SD_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ca50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 800ca54:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ca56:	63ac      	str	r4, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ca58:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 800ca5c:	e7b0      	b.n	800c9c0 <SD_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ca5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca60:	0791      	lsls	r1, r2, #30
 800ca62:	d502      	bpl.n	800ca6a <SD_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ca64:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ca66:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 800ca68:	e7aa      	b.n	800c9c0 <SD_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ca6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca6c:	0692      	lsls	r2, r2, #26
 800ca6e:	d501      	bpl.n	800ca74 <SD_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ca70:	2420      	movs	r4, #32
 800ca72:	e7f8      	b.n	800ca66 <SD_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca74:	4a08      	ldr	r2, [pc, #32]	; (800ca98 <SD_HighSpeed+0x100>)
 800ca76:	639a      	str	r2, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800ca78:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800ca7c:	079b      	lsls	r3, r3, #30
 800ca7e:	d49e      	bmi.n	800c9be <SD_HighSpeed+0x26>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800ca80:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800ca84:	e79c      	b.n	800c9c0 <SD_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ca86:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800ca8a:	e799      	b.n	800c9c0 <SD_HighSpeed+0x28>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 800ca8c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800ca90:	e796      	b.n	800c9c0 <SD_HighSpeed+0x28>
 800ca92:	bf00      	nop
 800ca94:	80ffff01 	.word	0x80ffff01
 800ca98:	18000f3a 	.word	0x18000f3a

0800ca9c <HAL_SD_ConfigSpeedBusOperation>:
{
 800ca9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800caa0:	2303      	movs	r3, #3
 800caa2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800caa6:	6983      	ldr	r3, [r0, #24]
 800caa8:	2b01      	cmp	r3, #1
{
 800caaa:	b096      	sub	sp, #88	; 0x58
 800caac:	4604      	mov	r4, r0
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800caae:	f040 80cf 	bne.w	800cc50 <HAL_SD_ConfigSpeedBusOperation+0x1b4>
    switch (SpeedMode)
 800cab2:	2904      	cmp	r1, #4
 800cab4:	f200 80eb 	bhi.w	800cc8e <HAL_SD_ConfigSpeedBusOperation+0x1f2>
 800cab8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800cabc:	00150005 	.word	0x00150005
 800cac0:	001e00dc 	.word	0x001e00dc
 800cac4:	0031      	.short	0x0031
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800cac6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cacc:	d002      	beq.n	800cad4 <HAL_SD_ConfigSpeedBusOperation+0x38>
 800cace:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cad0:	2a01      	cmp	r2, #1
 800cad2:	d10a      	bne.n	800caea <HAL_SD_ConfigSpeedBusOperation+0x4e>
          hsd->Instance->CLKCR |= 0x00100000U;
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	6853      	ldr	r3, [r2, #4]
 800cad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cadc:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff f8e6 	bl	800bcb0 <SD_UltraHighSpeed>
 800cae4:	b920      	cbnz	r0, 800caf0 <HAL_SD_ConfigSpeedBusOperation+0x54>
    switch (SpeedMode)
 800cae6:	2500      	movs	r5, #0
 800cae8:	e063      	b.n	800cbb2 <HAL_SD_ConfigSpeedBusOperation+0x116>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 800caea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800caee:	d1fa      	bne.n	800cae6 <HAL_SD_ConfigSpeedBusOperation+0x4a>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800caf0:	4620      	mov	r0, r4
 800caf2:	f7ff ff51 	bl	800c998 <SD_HighSpeed>
 800caf6:	e00f      	b.n	800cb18 <HAL_SD_ConfigSpeedBusOperation+0x7c>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800caf8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cafa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cafe:	d003      	beq.n	800cb08 <HAL_SD_ConfigSpeedBusOperation+0x6c>
 800cb00:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	f040 8089 	bne.w	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
          hsd->Instance->CLKCR |= 0x00100000U;
 800cb08:	6822      	ldr	r2, [r4, #0]
 800cb0a:	6853      	ldr	r3, [r2, #4]
 800cb0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb10:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800cb12:	4620      	mov	r0, r4
 800cb14:	f7ff f8cc 	bl	800bcb0 <SD_UltraHighSpeed>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d0e4      	beq.n	800cae6 <HAL_SD_ConfigSpeedBusOperation+0x4a>
 800cb1c:	e07d      	b.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800cb1e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cb20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb24:	d002      	beq.n	800cb2c <HAL_SD_ConfigSpeedBusOperation+0x90>
 800cb26:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d176      	bne.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
          hsd->Instance->CLKCR |= 0x00100000U;
 800cb2c:	6822      	ldr	r2, [r4, #0]
 800cb2e:	6853      	ldr	r3, [r2, #4]
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800cb30:	2540      	movs	r5, #64	; 0x40
          hsd->Instance->CLKCR |= 0x00100000U;
 800cb32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb36:	6053      	str	r3, [r2, #4]
  uint32_t SD_hs[16]  = {0};
 800cb38:	2100      	movs	r1, #0
 800cb3a:	462a      	mov	r2, r5
 800cb3c:	a806      	add	r0, sp, #24
 800cb3e:	f000 fd71 	bl	800d624 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 800cb42:	f7fa fac7 	bl	80070d4 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800cb46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 800cb48:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d065      	beq.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 800cb4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb52:	d1c8      	bne.n	800cae6 <HAL_SD_ConfigSpeedBusOperation+0x4a>
 800cb54:	69a6      	ldr	r6, [r4, #24]
 800cb56:	2e01      	cmp	r6, #1
 800cb58:	d1c5      	bne.n	800cae6 <HAL_SD_ConfigSpeedBusOperation+0x4a>
     (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 800cb5a:	6820      	ldr	r0, [r4, #0]
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cb60:	4629      	mov	r1, r5
 800cb62:	f000 f9e1 	bl	800cf28 <SDMMC_CmdBlockLength>

    if (errorstate != HAL_SD_ERROR_NONE)
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d157      	bne.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
    {
      return errorstate;
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    sdmmc_datainitstructure.DataLength    = 64U;
 800cb6e:	e9cd 3500 	strd	r3, r5, [sp]
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800cb72:	e9cd 0604 	strd	r0, r6, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cb76:	2260      	movs	r2, #96	; 0x60
 800cb78:	2302      	movs	r3, #2

    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800cb7a:	6820      	ldr	r0, [r4, #0]
 800cb7c:	4669      	mov	r1, sp
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cb7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 800cb82:	f000 f8f5 	bl	800cd70 <SDMMC_ConfigData>
 800cb86:	4605      	mov	r5, r0
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d146      	bne.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 800cb8c:	494a      	ldr	r1, [pc, #296]	; (800ccb8 <HAL_SD_ConfigSpeedBusOperation+0x21c>)
 800cb8e:	6820      	ldr	r0, [r4, #0]
 800cb90:	f000 fb35 	bl	800d1fe <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb94:	4607      	mov	r7, r0
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d13f      	bne.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
    {
      return errorstate;
    }

    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800cb9a:	f240 592a 	movw	r9, #1322	; 0x52a
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800cba2:	ea16 0609 	ands.w	r6, r6, r9
 800cba6:	d01d      	beq.n	800cbe4 <HAL_SD_ConfigSpeedBusOperation+0x148>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbaa:	0710      	lsls	r0, r2, #28
 800cbac:	d53b      	bpl.n	800cc26 <HAL_SD_ConfigSpeedBusOperation+0x18a>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cbae:	2208      	movs	r2, #8
 800cbb0:	639a      	str	r2, [r3, #56]	; 0x38
  tickstart = HAL_GetTick();
 800cbb2:	f7fa fa8f 	bl	80070d4 <HAL_GetTick>
 800cbb6:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f7ff fe83 	bl	800c8c4 <HAL_SD_GetCardState>
 800cbbe:	2804      	cmp	r0, #4
 800cbc0:	d169      	bne.n	800cc96 <HAL_SD_ConfigSpeedBusOperation+0x1fa>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cbc2:	6820      	ldr	r0, [r4, #0]
 800cbc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cbc8:	f000 f9ae 	bl	800cf28 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbcc:	b130      	cbz	r0, 800cbdc <HAL_SD_ConfigSpeedBusOperation+0x140>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	4a3a      	ldr	r2, [pc, #232]	; (800ccbc <HAL_SD_ConfigSpeedBusOperation+0x220>)
 800cbd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cbd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cbd6:	4318      	orrs	r0, r3
 800cbd8:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800cbda:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return status;
 800cbe2:	e064      	b.n	800ccae <HAL_SD_ConfigSpeedBusOperation+0x212>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbe6:	041b      	lsls	r3, r3, #16
 800cbe8:	d50b      	bpl.n	800cc02 <HAL_SD_ConfigSpeedBusOperation+0x166>
 800cbea:	ab06      	add	r3, sp, #24
 800cbec:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800cbf0:	6820      	ldr	r0, [r4, #0]
 800cbf2:	f000 f881 	bl	800ccf8 <SDMMC_ReadFIFO>
        for (count = 0U; count < 8U; count++)
 800cbf6:	3601      	adds	r6, #1
 800cbf8:	2e08      	cmp	r6, #8
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 800cbfa:	f84a 0b04 	str.w	r0, [sl], #4
        for (count = 0U; count < 8U; count++)
 800cbfe:	d1f7      	bne.n	800cbf0 <HAL_SD_ConfigSpeedBusOperation+0x154>
        loop ++;
 800cc00:	3701      	adds	r7, #1
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 800cc02:	f7fa fa67 	bl	80070d4 <HAL_GetTick>
 800cc06:	eba0 0008 	sub.w	r0, r0, r8
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	d1c7      	bne.n	800cb9e <HAL_SD_ConfigSpeedBusOperation+0x102>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cc0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc12:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cc14:	2301      	movs	r3, #1
 800cc16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
        hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc20:	63a3      	str	r3, [r4, #56]	; 0x38
        status = HAL_ERROR;
 800cc22:	2501      	movs	r5, #1
        break;
 800cc24:	e7c5      	b.n	800cbb2 <HAL_SD_ConfigSpeedBusOperation+0x116>

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc28:	0791      	lsls	r1, r2, #30
 800cc2a:	d502      	bpl.n	800cc32 <HAL_SD_ConfigSpeedBusOperation+0x196>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cc2c:	2202      	movs	r2, #2

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cc2e:	639a      	str	r2, [r3, #56]	; 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;

      return errorstate;
 800cc30:	e7f3      	b.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cc32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc34:	0692      	lsls	r2, r2, #26
 800cc36:	d501      	bpl.n	800cc3c <HAL_SD_ConfigSpeedBusOperation+0x1a0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cc38:	2220      	movs	r2, #32
 800cc3a:	e7f8      	b.n	800cc2e <HAL_SD_ConfigSpeedBusOperation+0x192>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc3c:	4a20      	ldr	r2, [pc, #128]	; (800ccc0 <HAL_SD_ConfigSpeedBusOperation+0x224>)
 800cc3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 800cc40:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800cc44:	079b      	lsls	r3, r3, #30
 800cc46:	d5e8      	bpl.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800cc48:	2001      	movs	r0, #1
 800cc4a:	f7fa fab3 	bl	80071b4 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
 800cc4e:	e7b0      	b.n	800cbb2 <HAL_SD_ConfigSpeedBusOperation+0x116>
    switch (SpeedMode)
 800cc50:	2901      	cmp	r1, #1
 800cc52:	f43f af48 	beq.w	800cae6 <HAL_SD_ConfigSpeedBusOperation+0x4a>
 800cc56:	2902      	cmp	r1, #2
 800cc58:	d00c      	beq.n	800cc74 <HAL_SD_ConfigSpeedBusOperation+0x1d8>
 800cc5a:	b9c1      	cbnz	r1, 800cc8e <HAL_SD_ConfigSpeedBusOperation+0x1f2>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800cc5c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800cc5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc62:	f43f af45 	beq.w	800caf0 <HAL_SD_ConfigSpeedBusOperation+0x54>
 800cc66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc6a:	f43f af41 	beq.w	800caf0 <HAL_SD_ConfigSpeedBusOperation+0x54>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800cc6e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	e73c      	b.n	800caee <HAL_SD_ConfigSpeedBusOperation+0x52>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800cc74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cc76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc7a:	f43f af39 	beq.w	800caf0 <HAL_SD_ConfigSpeedBusOperation+0x54>
 800cc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc82:	f43f af35 	beq.w	800caf0 <HAL_SD_ConfigSpeedBusOperation+0x54>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800cc86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d1c6      	bne.n	800cc1a <HAL_SD_ConfigSpeedBusOperation+0x17e>
 800cc8c:	e730      	b.n	800caf0 <HAL_SD_ConfigSpeedBusOperation+0x54>
        hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc94:	e7c4      	b.n	800cc20 <HAL_SD_ConfigSpeedBusOperation+0x184>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc96:	f7fa fa1d 	bl	80070d4 <HAL_GetTick>
 800cc9a:	1b80      	subs	r0, r0, r6
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d18b      	bne.n	800cbb8 <HAL_SD_ConfigSpeedBusOperation+0x11c>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cca4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cca6:	2301      	movs	r3, #1
 800cca8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800ccac:	2503      	movs	r5, #3
}
 800ccae:	4628      	mov	r0, r5
 800ccb0:	b016      	add	sp, #88	; 0x58
 800ccb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb6:	bf00      	nop
 800ccb8:	80ffff04 	.word	0x80ffff04
 800ccbc:	1fe00fff 	.word	0x1fe00fff
 800ccc0:	18000f3a 	.word	0x18000f3a

0800ccc4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ccc4:	b084      	sub	sp, #16
 800ccc6:	b510      	push	{r4, lr}
 800ccc8:	ac03      	add	r4, sp, #12
 800ccca:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800ccce:	9b03      	ldr	r3, [sp, #12]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ccd0:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800ccd2:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800ccd4:	9a05      	ldr	r2, [sp, #20]
 800ccd6:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800ccd8:	9a06      	ldr	r2, [sp, #24]
 800ccda:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800ccdc:	9a07      	ldr	r2, [sp, #28]

  return HAL_OK;
}
 800ccde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             Init.HardwareFlowControl |\
 800cce2:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cce4:	4a03      	ldr	r2, [pc, #12]	; (800ccf4 <SDMMC_Init+0x30>)
 800cce6:	400a      	ands	r2, r1
 800cce8:	4313      	orrs	r3, r2
 800ccea:	6043      	str	r3, [r0, #4]
}
 800ccec:	b004      	add	sp, #16
 800ccee:	2000      	movs	r0, #0
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	ffc02c00 	.word	0xffc02c00

0800ccf8 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ccf8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800ccfc:	4770      	bx	lr

0800ccfe <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ccfe:	680b      	ldr	r3, [r1, #0]
 800cd00:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 800cd04:	2000      	movs	r0, #0
 800cd06:	4770      	bx	lr

0800cd08 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cd08:	b508      	push	{r3, lr}
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cd0a:	6803      	ldr	r3, [r0, #0]
 800cd0c:	f043 0303 	orr.w	r3, r3, #3
 800cd10:	6003      	str	r3, [r0, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cd12:	2002      	movs	r0, #2
 800cd14:	f7f6 fdfd 	bl	8003912 <HAL_Delay>

  return HAL_OK;
}
 800cd18:	2000      	movs	r0, #0
 800cd1a:	bd08      	pop	{r3, pc}

0800cd1c <SDMMC_PowerState_Cycle>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_Cycle(SDMMC_TypeDef *SDMMCx)
{
  /* Set power state to Power Cycle*/
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL_1;
 800cd1c:	6803      	ldr	r3, [r0, #0]
 800cd1e:	f043 0302 	orr.w	r3, r3, #2
 800cd22:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 800cd24:	2000      	movs	r0, #0
 800cd26:	4770      	bx	lr

0800cd28 <SDMMC_PowerState_OFF>:
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
  /* Set power state to OFF */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 800cd28:	6803      	ldr	r3, [r0, #0]
 800cd2a:	f023 0303 	bic.w	r3, r3, #3
 800cd2e:	6003      	str	r3, [r0, #0]
#else
  SDMMCx->POWER = (uint32_t)0x00000000;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return HAL_OK;
}
 800cd30:	2000      	movs	r0, #0
 800cd32:	4770      	bx	lr

0800cd34 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cd34:	6800      	ldr	r0, [r0, #0]
}
 800cd36:	f000 0003 	and.w	r0, r0, #3
 800cd3a:	4770      	bx	lr

0800cd3c <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cd3c:	680b      	ldr	r3, [r1, #0]
{
 800cd3e:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800cd40:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd42:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800cd46:	4313      	orrs	r3, r2
                       Command->Response         |\
 800cd48:	68ca      	ldr	r2, [r1, #12]
                       Command->WaitForInterrupt |\
                       Command->CPSM);

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd4a:	68c4      	ldr	r4, [r0, #12]
                       Command->Response         |\
 800cd4c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800cd4e:	690a      	ldr	r2, [r1, #16]
 800cd50:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd52:	4a03      	ldr	r2, [pc, #12]	; (800cd60 <SDMMC_SendCommand+0x24>)
 800cd54:	4022      	ands	r2, r4
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	bf00      	nop
 800cd60:	fffee0c0 	.word	0xfffee0c0

0800cd64 <SDMMC_GetCommandResponse>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 800cd64:	6900      	ldr	r0, [r0, #16]
}
 800cd66:	b2c0      	uxtb	r0, r0
 800cd68:	4770      	bx	lr

0800cd6a <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800cd6a:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800cd6c:	5840      	ldr	r0, [r0, r1]
}
 800cd6e:	4770      	bx	lr

0800cd70 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cd70:	680b      	ldr	r3, [r1, #0]
{
 800cd72:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cd74:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cd76:	684b      	ldr	r3, [r1, #4]
 800cd78:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cd7a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800cd7e:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800cd80:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cd82:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 800cd84:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800cd86:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800cd88:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cd8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 800cd92:	2000      	movs	r0, #0
 800cd94:	bd10      	pop	{r4, pc}

0800cd96 <SDMMC_GetDataCounter>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDMMC_GetDataCounter(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->DCOUNT);
 800cd96:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
 800cd98:	4770      	bx	lr

0800cd9a <SDMMC_GetFIFOCount>:
 800cd9a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800cd9e:	4770      	bx	lr

0800cda0 <SDMMC_SetSDMMCReadWaitMode>:
{
  /* Check the parameters */
  assert_param(IS_SDMMC_READWAIT_MODE(SDMMC_ReadWaitMode));

  /* Set SDMMC read wait mode */
  MODIFY_REG(SDMMCx->DCTRL, SDMMC_DCTRL_RWMOD, SDMMC_ReadWaitMode);
 800cda0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800cda2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cda6:	4319      	orrs	r1, r3
 800cda8:	62c1      	str	r1, [r0, #44]	; 0x2c

  return HAL_OK;
}
 800cdaa:	2000      	movs	r0, #0
 800cdac:	4770      	bx	lr
	...

0800cdb0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cdb0:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cdb2:	2300      	movs	r3, #0
{
 800cdb4:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cdb6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdba:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdbe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdc4:	9305      	str	r3, [sp, #20]
{
 800cdc6:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdc8:	f7ff ffb8 	bl	800cd3c <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <SDMMC_CmdGoIdleState+0x48>)
 800cdce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cddc:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800cdde:	3b01      	subs	r3, #1
 800cde0:	d307      	bcc.n	800cdf2 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cde2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cde4:	0612      	lsls	r2, r2, #24
 800cde6:	d5fa      	bpl.n	800cdde <SDMMC_CmdGoIdleState+0x2e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cde8:	4b04      	ldr	r3, [pc, #16]	; (800cdfc <SDMMC_CmdGoIdleState+0x4c>)
 800cdea:	63a3      	str	r3, [r4, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800cdec:	2000      	movs	r0, #0
}
 800cdee:	b006      	add	sp, #24
 800cdf0:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800cdf2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800cdf6:	e7fa      	b.n	800cdee <SDMMC_CmdGoIdleState+0x3e>
 800cdf8:	2009e2a8 	.word	0x2009e2a8
 800cdfc:	002000c5 	.word	0x002000c5

0800ce00 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce00:	4b45      	ldr	r3, [pc, #276]	; (800cf18 <SDMMC_GetCmdResp1+0x118>)
{
 800ce02:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce04:	681b      	ldr	r3, [r3, #0]
{
 800ce06:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce08:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800ce0c:	fbb3 f3f0 	udiv	r3, r3, r0
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ce10:	4842      	ldr	r0, [pc, #264]	; (800cf1c <SDMMC_GetCmdResp1+0x11c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce12:	435a      	muls	r2, r3
    if (count-- == 0U)
 800ce14:	2a00      	cmp	r2, #0
 800ce16:	d048      	beq.n	800ceaa <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800ce18:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce1a:	4203      	tst	r3, r0
 800ce1c:	d007      	beq.n	800ce2e <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ce1e:	049b      	lsls	r3, r3, #18
 800ce20:	d405      	bmi.n	800ce2e <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce24:	0758      	lsls	r0, r3, #29
 800ce26:	d504      	bpl.n	800ce32 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce28:	2004      	movs	r0, #4
 800ce2a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800ce2c:	bd10      	pop	{r4, pc}
 800ce2e:	3a01      	subs	r2, #1
 800ce30:	e7f0      	b.n	800ce14 <SDMMC_GetCmdResp1+0x14>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ce34:	f010 0001 	ands.w	r0, r0, #1
 800ce38:	d002      	beq.n	800ce40 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce3e:	e7f5      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce40:	4b37      	ldr	r3, [pc, #220]	; (800cf20 <SDMMC_GetCmdResp1+0x120>)
 800ce42:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce44:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	4299      	cmp	r1, r3
 800ce4a:	d131      	bne.n	800ceb0 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 800ce4c:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce4e:	4835      	ldr	r0, [pc, #212]	; (800cf24 <SDMMC_GetCmdResp1+0x124>)
 800ce50:	4018      	ands	r0, r3
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d0ea      	beq.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	db2c      	blt.n	800ceb4 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ce5a:	005a      	lsls	r2, r3, #1
 800ce5c:	d42d      	bmi.n	800ceba <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ce5e:	009c      	lsls	r4, r3, #2
 800ce60:	d42d      	bmi.n	800cebe <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ce62:	00d9      	lsls	r1, r3, #3
 800ce64:	d42d      	bmi.n	800cec2 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ce66:	011a      	lsls	r2, r3, #4
 800ce68:	d42e      	bmi.n	800cec8 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ce6a:	015c      	lsls	r4, r3, #5
 800ce6c:	d42f      	bmi.n	800cece <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ce6e:	01d9      	lsls	r1, r3, #7
 800ce70:	d430      	bmi.n	800ced4 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ce72:	021a      	lsls	r2, r3, #8
 800ce74:	d431      	bmi.n	800ceda <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ce76:	025c      	lsls	r4, r3, #9
 800ce78:	d432      	bmi.n	800cee0 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ce7a:	0299      	lsls	r1, r3, #10
 800ce7c:	d433      	bmi.n	800cee6 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ce7e:	02da      	lsls	r2, r3, #11
 800ce80:	d434      	bmi.n	800ceec <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ce82:	035c      	lsls	r4, r3, #13
 800ce84:	d435      	bmi.n	800cef2 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ce86:	0399      	lsls	r1, r3, #14
 800ce88:	d436      	bmi.n	800cef8 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ce8a:	03da      	lsls	r2, r3, #15
 800ce8c:	d437      	bmi.n	800cefe <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ce8e:	041c      	lsls	r4, r3, #16
 800ce90:	d438      	bmi.n	800cf04 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ce92:	0459      	lsls	r1, r3, #17
 800ce94:	d439      	bmi.n	800cf0a <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ce96:	049a      	lsls	r2, r3, #18
 800ce98:	d43a      	bmi.n	800cf10 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce9a:	f013 0f08 	tst.w	r3, #8
 800ce9e:	bf14      	ite	ne
 800cea0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800cea4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cea8:	e7c0      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800ceaa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ceae:	e7bd      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	e7bb      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ceb4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ceb8:	e7b8      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ceba:	2040      	movs	r0, #64	; 0x40
 800cebc:	e7b6      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cebe:	2080      	movs	r0, #128	; 0x80
 800cec0:	e7b4      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cec2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cec6:	e7b1      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cec8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cecc:	e7ae      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cece:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ced2:	e7ab      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ced4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ced8:	e7a8      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ceda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cede:	e7a5      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cee0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cee4:	e7a2      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cee6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ceea:	e79f      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800ceec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cef0:	e79c      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cef2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cef6:	e799      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cef8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cefc:	e796      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cefe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cf02:	e793      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cf04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cf08:	e790      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cf0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800cf0e:	e78d      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800cf10:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800cf14:	e78a      	b.n	800ce2c <SDMMC_GetCmdResp1+0x2c>
 800cf16:	bf00      	nop
 800cf18:	2009e2a8 	.word	0x2009e2a8
 800cf1c:	00200045 	.word	0x00200045
 800cf20:	002000c5 	.word	0x002000c5
 800cf24:	fdffe008 	.word	0xfdffe008

0800cf28 <SDMMC_CmdBlockLength>:
{
 800cf28:	b530      	push	{r4, r5, lr}
 800cf2a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf2c:	2510      	movs	r5, #16
 800cf2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf32:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800cf36:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cf3c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf3e:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf40:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf42:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf46:	f7ff fef9 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cf4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4620      	mov	r0, r4
 800cf52:	f7ff ff55 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800cf56:	b007      	add	sp, #28
 800cf58:	bd30      	pop	{r4, r5, pc}

0800cf5a <SDMMC_CmdReadSingleBlock>:
{
 800cf5a:	b530      	push	{r4, r5, lr}
 800cf5c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf5e:	2511      	movs	r5, #17
 800cf60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf64:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800cf68:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf6e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf70:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf72:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf74:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf78:	f7ff fee0 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cf7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf80:	4629      	mov	r1, r5
 800cf82:	4620      	mov	r0, r4
 800cf84:	f7ff ff3c 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800cf88:	b007      	add	sp, #28
 800cf8a:	bd30      	pop	{r4, r5, pc}

0800cf8c <SDMMC_CmdReadMultiBlock>:
{
 800cf8c:	b530      	push	{r4, r5, lr}
 800cf8e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf90:	2512      	movs	r5, #18
 800cf92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf96:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800cf9a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfa0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfa2:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfa4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfaa:	f7ff fec7 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cfae:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f7ff ff23 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800cfba:	b007      	add	sp, #28
 800cfbc:	bd30      	pop	{r4, r5, pc}

0800cfbe <SDMMC_CmdWriteSingleBlock>:
{
 800cfbe:	b530      	push	{r4, r5, lr}
 800cfc0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfc2:	2518      	movs	r5, #24
 800cfc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfc8:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800cfcc:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cfd2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfd4:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfd6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfdc:	f7ff feae 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f7ff ff0a 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800cfec:	b007      	add	sp, #28
 800cfee:	bd30      	pop	{r4, r5, pc}

0800cff0 <SDMMC_CmdWriteMultiBlock>:
{
 800cff0:	b530      	push	{r4, r5, lr}
 800cff2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cff4:	2519      	movs	r5, #25
 800cff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cffa:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800cffe:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d004:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d006:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d008:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d00a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d00e:	f7ff fe95 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d012:	f241 3288 	movw	r2, #5000	; 0x1388
 800d016:	4629      	mov	r1, r5
 800d018:	4620      	mov	r0, r4
 800d01a:	f7ff fef1 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d01e:	b007      	add	sp, #28
 800d020:	bd30      	pop	{r4, r5, pc}

0800d022 <SDMMC_CmdSDEraseStartAdd>:
{
 800d022:	b530      	push	{r4, r5, lr}
 800d024:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d026:	2520      	movs	r5, #32
 800d028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d02c:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d030:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 800d036:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d038:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d03a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d03c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d040:	f7ff fe7c 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 800d044:	f241 3288 	movw	r2, #5000	; 0x1388
 800d048:	4629      	mov	r1, r5
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7ff fed8 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d050:	b007      	add	sp, #28
 800d052:	bd30      	pop	{r4, r5, pc}

0800d054 <SDMMC_CmdSDEraseEndAdd>:
{
 800d054:	b530      	push	{r4, r5, lr}
 800d056:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d058:	2521      	movs	r5, #33	; 0x21
 800d05a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d05e:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d062:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 800d068:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d06a:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d06c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d06e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d072:	f7ff fe63 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 800d076:	f241 3288 	movw	r2, #5000	; 0x1388
 800d07a:	4629      	mov	r1, r5
 800d07c:	4620      	mov	r0, r4
 800d07e:	f7ff febf 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d082:	b007      	add	sp, #28
 800d084:	bd30      	pop	{r4, r5, pc}

0800d086 <SDMMC_CmdEraseStartAdd>:
{
 800d086:	b530      	push	{r4, r5, lr}
 800d088:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d08a:	2523      	movs	r5, #35	; 0x23
 800d08c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d090:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d094:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 800d09a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d09c:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d09e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0a4:	f7ff fe4a 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 800d0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f7ff fea6 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d0b4:	b007      	add	sp, #28
 800d0b6:	bd30      	pop	{r4, r5, pc}

0800d0b8 <SDMMC_CmdEraseEndAdd>:
{
 800d0b8:	b530      	push	{r4, r5, lr}
 800d0ba:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0bc:	2524      	movs	r5, #36	; 0x24
 800d0be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0c2:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d0c6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 800d0cc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0ce:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0d0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0d6:	f7ff fe31 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 800d0da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0de:	4629      	mov	r1, r5
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f7ff fe8d 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d0e6:	b007      	add	sp, #28
 800d0e8:	bd30      	pop	{r4, r5, pc}

0800d0ea <SDMMC_CmdErase>:
{
 800d0ea:	b530      	push	{r4, r5, lr}
 800d0ec:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0ee:	2526      	movs	r5, #38	; 0x26
 800d0f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0f4:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d0f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = EraseType;
 800d0fe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d100:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d102:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d104:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d108:	f7ff fe18 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 800d10c:	f24f 6218 	movw	r2, #63000	; 0xf618
 800d110:	4629      	mov	r1, r5
 800d112:	4620      	mov	r0, r4
 800d114:	f7ff fe74 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d118:	b007      	add	sp, #28
 800d11a:	bd30      	pop	{r4, r5, pc}

0800d11c <SDMMC_CmdStopTransfer>:
{
 800d11c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d11e:	2300      	movs	r3, #0
{
 800d120:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d122:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d124:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d128:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d12c:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d134:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d136:	68c3      	ldr	r3, [r0, #12]
 800d138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d13c:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d13e:	68c3      	ldr	r3, [r0, #12]
 800d140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
{
 800d144:	4604      	mov	r4, r0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d146:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d148:	a901      	add	r1, sp, #4
 800d14a:	f7ff fdf7 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d14e:	4a05      	ldr	r2, [pc, #20]	; (800d164 <SDMMC_CmdStopTransfer+0x48>)
 800d150:	4629      	mov	r1, r5
 800d152:	4620      	mov	r0, r4
 800d154:	f7ff fe54 	bl	800ce00 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d158:	68e3      	ldr	r3, [r4, #12]
 800d15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d15e:	60e3      	str	r3, [r4, #12]
}
 800d160:	b007      	add	sp, #28
 800d162:	bd30      	pop	{r4, r5, pc}
 800d164:	05f5e100 	.word	0x05f5e100

0800d168 <SDMMC_CmdSelDesel>:
{
 800d168:	b530      	push	{r4, r5, lr}
 800d16a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d16c:	2507      	movs	r5, #7
 800d16e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d172:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d176:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d17c:	9201      	str	r2, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d17e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d180:	2200      	movs	r2, #0
 800d182:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d186:	f7ff fdd9 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d18a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d18e:	4629      	mov	r1, r5
 800d190:	4620      	mov	r0, r4
 800d192:	f7ff fe35 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d196:	b007      	add	sp, #28
 800d198:	bd30      	pop	{r4, r5, pc}

0800d19a <SDMMC_CmdAppCommand>:
{
 800d19a:	b530      	push	{r4, r5, lr}
 800d19c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d19e:	2537      	movs	r5, #55	; 0x37
 800d1a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1a4:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d1a8:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d1ae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1b0:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1b2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1b8:	f7ff fdc0 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f7ff fe1c 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d1c8:	b007      	add	sp, #28
 800d1ca:	bd30      	pop	{r4, r5, pc}

0800d1cc <SDMMC_CmdBusWidth>:
{
 800d1cc:	b530      	push	{r4, r5, lr}
 800d1ce:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1d0:	2506      	movs	r5, #6
 800d1d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1d6:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d1da:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d1e0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1e2:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1e4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1ea:	f7ff fda7 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d1ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f7ff fe03 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d1fa:	b007      	add	sp, #28
 800d1fc:	bd30      	pop	{r4, r5, pc}

0800d1fe <SDMMC_CmdSwitch>:
 800d1fe:	f7ff bfe5 	b.w	800d1cc <SDMMC_CmdBusWidth>

0800d202 <SDMMC_CmdSendSCR>:
{
 800d202:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d204:	2300      	movs	r3, #0
{
 800d206:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d208:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d20a:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d20e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d212:	e9cd 3501 	strd	r3, r5, [sp, #4]
{
 800d216:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d21c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d21e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d220:	f7ff fd8c 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d224:	f241 3288 	movw	r2, #5000	; 0x1388
 800d228:	4629      	mov	r1, r5
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7ff fde8 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d230:	b007      	add	sp, #28
 800d232:	bd30      	pop	{r4, r5, pc}

0800d234 <SDMMC_CmdSetRelAddMmc>:
{
 800d234:	b530      	push	{r4, r5, lr}
 800d236:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d238:	2503      	movs	r5, #3
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800d23a:	0409      	lsls	r1, r1, #16
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d23c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d240:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d244:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800d24a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d24c:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d24e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d250:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d254:	f7ff fd72 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800d258:	f241 3288 	movw	r2, #5000	; 0x1388
 800d25c:	4629      	mov	r1, r5
 800d25e:	4620      	mov	r0, r4
 800d260:	f7ff fdce 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d264:	b007      	add	sp, #28
 800d266:	bd30      	pop	{r4, r5, pc}

0800d268 <SDMMC_CmdSendStatus>:
{
 800d268:	b530      	push	{r4, r5, lr}
 800d26a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d26c:	250d      	movs	r5, #13
 800d26e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d272:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d276:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = Argument;
 800d27c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d27e:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d280:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d282:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d286:	f7ff fd59 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d28e:	4629      	mov	r1, r5
 800d290:	4620      	mov	r0, r4
 800d292:	f7ff fdb5 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d296:	b007      	add	sp, #28
 800d298:	bd30      	pop	{r4, r5, pc}

0800d29a <SDMMC_CmdStatusRegister>:
{
 800d29a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d29c:	2300      	movs	r3, #0
{
 800d29e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d2a0:	250d      	movs	r5, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d2aa:	e9cd 3501 	strd	r3, r5, [sp, #4]
{
 800d2ae:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2b4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2b6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2b8:	f7ff fd40 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f7ff fd9c 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d2c8:	b007      	add	sp, #28
 800d2ca:	bd30      	pop	{r4, r5, pc}

0800d2cc <SDMMC_CmdVoltageSwitch>:
{
 800d2cc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d2ce:	2300      	movs	r3, #0
{
 800d2d0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d2d2:	250b      	movs	r5, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2d4:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d2dc:	e9cd 3501 	strd	r3, r5, [sp, #4]
{
 800d2e0:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2e8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ea:	f7ff fd27 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d2ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7ff fd83 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d2fa:	b007      	add	sp, #28
 800d2fc:	bd30      	pop	{r4, r5, pc}

0800d2fe <SDMMC_CmdSendEXTCSD>:
{
 800d2fe:	b530      	push	{r4, r5, lr}
 800d300:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d302:	2508      	movs	r5, #8
 800d304:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d308:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800d30c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d30e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = Argument;
 800d312:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d314:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d316:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d318:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d31c:	f7ff fd0e 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD,SDMMC_CMDTIMEOUT);
 800d320:	f241 3288 	movw	r2, #5000	; 0x1388
 800d324:	4629      	mov	r1, r5
 800d326:	4620      	mov	r0, r4
 800d328:	f7ff fd6a 	bl	800ce00 <SDMMC_GetCmdResp1>
}
 800d32c:	b007      	add	sp, #28
 800d32e:	bd30      	pop	{r4, r5, pc}

0800d330 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d330:	4b11      	ldr	r3, [pc, #68]	; (800d378 <SDMMC_GetCmdResp2+0x48>)
 800d332:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	fbb3 f3f1 	udiv	r3, r3, r1
 800d33c:	f241 3188 	movw	r1, #5000	; 0x1388
{
 800d340:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d342:	434b      	muls	r3, r1
    if (count-- == 0U)
 800d344:	3b01      	subs	r3, #1
 800d346:	d313      	bcc.n	800d370 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 800d348:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d34a:	f011 0f45 	tst.w	r1, #69	; 0x45
 800d34e:	d0f9      	beq.n	800d344 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d350:	0489      	lsls	r1, r1, #18
 800d352:	d4f7      	bmi.n	800d344 <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d354:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800d356:	075b      	lsls	r3, r3, #29
 800d358:	d502      	bpl.n	800d360 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d35a:	2004      	movs	r0, #4
 800d35c:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d35e:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d360:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d362:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d366:	bf0c      	ite	eq
 800d368:	4b04      	ldreq	r3, [pc, #16]	; (800d37c <SDMMC_GetCmdResp2+0x4c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d36a:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d36c:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800d36e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800d370:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	2009e2a8 	.word	0x2009e2a8
 800d37c:	002000c5 	.word	0x002000c5

0800d380 <SDMMC_CmdSendCID>:
{
 800d380:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d382:	2300      	movs	r3, #0
{
 800d384:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d386:	2202      	movs	r2, #2
 800d388:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d38c:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d390:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 800d394:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d39a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d39c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d39e:	f7ff fccd 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f7ff ffc4 	bl	800d330 <SDMMC_GetCmdResp2>
}
 800d3a8:	b006      	add	sp, #24
 800d3aa:	bd10      	pop	{r4, pc}

0800d3ac <SDMMC_CmdSendCSD>:
{
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d3b0:	2209      	movs	r2, #9
 800d3b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d3b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 800d3ba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 800d3c6:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3c8:	a901      	add	r1, sp, #4
 800d3ca:	f7ff fcb7 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f7ff ffae 	bl	800d330 <SDMMC_GetCmdResp2>
}
 800d3d4:	b006      	add	sp, #24
 800d3d6:	bd10      	pop	{r4, pc}

0800d3d8 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3d8:	4b0e      	ldr	r3, [pc, #56]	; (800d414 <SDMMC_GetCmdResp3+0x3c>)
 800d3da:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3e4:	f241 3188 	movw	r1, #5000	; 0x1388
{
 800d3e8:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3ea:	434b      	muls	r3, r1
    if (count-- == 0U)
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	d30e      	bcc.n	800d40e <SDMMC_GetCmdResp3+0x36>
    sta_reg = SDMMCx->STA;
 800d3f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d3f2:	f011 0f45 	tst.w	r1, #69	; 0x45
 800d3f6:	d0f9      	beq.n	800d3ec <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3f8:	0489      	lsls	r1, r1, #18
 800d3fa:	d4f7      	bmi.n	800d3ec <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3fc:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d3fe:	f010 0004 	ands.w	r0, r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d402:	bf15      	itete	ne
 800d404:	2004      	movne	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d406:	4b04      	ldreq	r3, [pc, #16]	; (800d418 <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d408:	6390      	strne	r0, [r2, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d40a:	6393      	streq	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800d40c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800d40e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800d412:	4770      	bx	lr
 800d414:	2009e2a8 	.word	0x2009e2a8
 800d418:	002000c5 	.word	0x002000c5

0800d41c <SDMMC_CmdAppOperCommand>:
{
 800d41c:	b510      	push	{r4, lr}
 800d41e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d420:	2229      	movs	r2, #41	; 0x29
 800d422:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d426:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 800d42a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d42c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d430:	2100      	movs	r1, #0
 800d432:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 800d436:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d438:	a901      	add	r1, sp, #4
 800d43a:	f7ff fc7f 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d43e:	4620      	mov	r0, r4
 800d440:	f7ff ffca 	bl	800d3d8 <SDMMC_GetCmdResp3>
}
 800d444:	b006      	add	sp, #24
 800d446:	bd10      	pop	{r4, pc}

0800d448 <SDMMC_CmdOpCondition>:
{
 800d448:	b510      	push	{r4, lr}
 800d44a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d44c:	2201      	movs	r2, #1
 800d44e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d452:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 800d456:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d45c:	2100      	movs	r1, #0
 800d45e:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 800d462:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d464:	a901      	add	r1, sp, #4
 800d466:	f7ff fc69 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d46a:	4620      	mov	r0, r4
 800d46c:	f7ff ffb4 	bl	800d3d8 <SDMMC_GetCmdResp3>
}
 800d470:	b006      	add	sp, #24
 800d472:	bd10      	pop	{r4, pc}

0800d474 <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d474:	4b1f      	ldr	r3, [pc, #124]	; (800d4f4 <SDMMC_GetCmdResp6+0x80>)
{
 800d476:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d478:	681b      	ldr	r3, [r3, #0]
{
 800d47a:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d47c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800d480:	fbb3 f3f0 	udiv	r3, r3, r0
 800d484:	f241 3088 	movw	r0, #5000	; 0x1388
 800d488:	4343      	muls	r3, r0
    if (count-- == 0U)
 800d48a:	3b01      	subs	r3, #1
 800d48c:	d329      	bcc.n	800d4e2 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 800d48e:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d490:	f010 0f45 	tst.w	r0, #69	; 0x45
 800d494:	d0f9      	beq.n	800d48a <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d496:	0480      	lsls	r0, r0, #18
 800d498:	d4f7      	bmi.n	800d48a <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d49a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d49c:	0758      	lsls	r0, r3, #29
 800d49e:	d502      	bpl.n	800d4a6 <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4a0:	2004      	movs	r0, #4
 800d4a2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800d4a4:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d4a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d4a8:	f010 0001 	ands.w	r0, r0, #1
 800d4ac:	d002      	beq.n	800d4b4 <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4b2:	e7f7      	b.n	800d4a4 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 800d4b4:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	4299      	cmp	r1, r3
 800d4ba:	d115      	bne.n	800d4e8 <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4bc:	4b0e      	ldr	r3, [pc, #56]	; (800d4f8 <SDMMC_GetCmdResp6+0x84>)
 800d4be:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800d4c0:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d4c2:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800d4c6:	d102      	bne.n	800d4ce <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d4c8:	0c1b      	lsrs	r3, r3, #16
 800d4ca:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 800d4cc:	e7ea      	b.n	800d4a4 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d4ce:	045a      	lsls	r2, r3, #17
 800d4d0:	d40c      	bmi.n	800d4ec <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d4d2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800d4d6:	bf14      	ite	ne
 800d4d8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800d4dc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d4e0:	e7e0      	b.n	800d4a4 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d4e2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d4e6:	e7dd      	b.n	800d4a4 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4e8:	2001      	movs	r0, #1
 800d4ea:	e7db      	b.n	800d4a4 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d4f0:	e7d8      	b.n	800d4a4 <SDMMC_GetCmdResp6+0x30>
 800d4f2:	bf00      	nop
 800d4f4:	2009e2a8 	.word	0x2009e2a8
 800d4f8:	002000c5 	.word	0x002000c5

0800d4fc <SDMMC_CmdSetRelAdd>:
{
 800d4fc:	b530      	push	{r4, r5, lr}
 800d4fe:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d500:	2300      	movs	r3, #0
{
 800d502:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d504:	2503      	movs	r5, #3
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d506:	f44f 7180 	mov.w	r1, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d50a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d50e:	e9cd 3503 	strd	r3, r5, [sp, #12]
{
 800d512:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d518:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d51a:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d51c:	f7ff fc0e 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d520:	9a01      	ldr	r2, [sp, #4]
 800d522:	4629      	mov	r1, r5
 800d524:	4620      	mov	r0, r4
 800d526:	f7ff ffa5 	bl	800d474 <SDMMC_GetCmdResp6>
}
 800d52a:	b009      	add	sp, #36	; 0x24
 800d52c:	bd30      	pop	{r4, r5, pc}
	...

0800d530 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d530:	4b13      	ldr	r3, [pc, #76]	; (800d580 <SDMMC_GetCmdResp7+0x50>)
 800d532:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	fbb3 f3f1 	udiv	r3, r3, r1
 800d53c:	f241 3188 	movw	r1, #5000	; 0x1388
{
 800d540:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d542:	434b      	muls	r3, r1
    if (count-- == 0U)
 800d544:	3b01      	subs	r3, #1
 800d546:	d317      	bcc.n	800d578 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDMMCx->STA;
 800d548:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d54a:	f011 0f45 	tst.w	r1, #69	; 0x45
 800d54e:	d0f9      	beq.n	800d544 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d550:	0488      	lsls	r0, r1, #18
 800d552:	d4f7      	bmi.n	800d544 <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d554:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800d556:	0759      	lsls	r1, r3, #29
 800d558:	d502      	bpl.n	800d560 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d55a:	2004      	movs	r0, #4
 800d55c:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d55e:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d560:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d562:	f010 0001 	ands.w	r0, r0, #1
 800d566:	d002      	beq.n	800d56e <SDMMC_GetCmdResp7+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d568:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d56a:	6393      	str	r3, [r2, #56]	; 0x38
 800d56c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d56e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800d570:	065b      	lsls	r3, r3, #25
 800d572:	d503      	bpl.n	800d57c <SDMMC_GetCmdResp7+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d574:	2340      	movs	r3, #64	; 0x40
 800d576:	e7f8      	b.n	800d56a <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 800d578:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	2009e2a8 	.word	0x2009e2a8

0800d584 <SDMMC_CmdOperCond>:
{
 800d584:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d586:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 800d58a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d58c:	2308      	movs	r3, #8
 800d58e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d592:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d596:	2300      	movs	r3, #0
 800d598:	e9cd 1303 	strd	r1, r3, [sp, #12]
{
 800d59c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d59e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5a2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5a4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5a6:	f7ff fbc9 	bl	800cd3c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f7ff ffc0 	bl	800d530 <SDMMC_GetCmdResp7>
}
 800d5b0:	b006      	add	sp, #24
 800d5b2:	bd10      	pop	{r4, pc}

0800d5b4 <memcmp>:
 800d5b4:	b510      	push	{r4, lr}
 800d5b6:	3901      	subs	r1, #1
 800d5b8:	4402      	add	r2, r0
 800d5ba:	4290      	cmp	r0, r2
 800d5bc:	d101      	bne.n	800d5c2 <memcmp+0xe>
 800d5be:	2000      	movs	r0, #0
 800d5c0:	e005      	b.n	800d5ce <memcmp+0x1a>
 800d5c2:	7803      	ldrb	r3, [r0, #0]
 800d5c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d5c8:	42a3      	cmp	r3, r4
 800d5ca:	d001      	beq.n	800d5d0 <memcmp+0x1c>
 800d5cc:	1b18      	subs	r0, r3, r4
 800d5ce:	bd10      	pop	{r4, pc}
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	e7f2      	b.n	800d5ba <memcmp+0x6>

0800d5d4 <memcpy>:
 800d5d4:	440a      	add	r2, r1
 800d5d6:	4291      	cmp	r1, r2
 800d5d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d5dc:	d100      	bne.n	800d5e0 <memcpy+0xc>
 800d5de:	4770      	bx	lr
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5ea:	4291      	cmp	r1, r2
 800d5ec:	d1f9      	bne.n	800d5e2 <memcpy+0xe>
 800d5ee:	bd10      	pop	{r4, pc}

0800d5f0 <memmove>:
 800d5f0:	4288      	cmp	r0, r1
 800d5f2:	b510      	push	{r4, lr}
 800d5f4:	eb01 0402 	add.w	r4, r1, r2
 800d5f8:	d902      	bls.n	800d600 <memmove+0x10>
 800d5fa:	4284      	cmp	r4, r0
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	d807      	bhi.n	800d610 <memmove+0x20>
 800d600:	1e43      	subs	r3, r0, #1
 800d602:	42a1      	cmp	r1, r4
 800d604:	d008      	beq.n	800d618 <memmove+0x28>
 800d606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d60a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d60e:	e7f8      	b.n	800d602 <memmove+0x12>
 800d610:	4402      	add	r2, r0
 800d612:	4601      	mov	r1, r0
 800d614:	428a      	cmp	r2, r1
 800d616:	d100      	bne.n	800d61a <memmove+0x2a>
 800d618:	bd10      	pop	{r4, pc}
 800d61a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d61e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d622:	e7f7      	b.n	800d614 <memmove+0x24>

0800d624 <memset>:
 800d624:	4402      	add	r2, r0
 800d626:	4603      	mov	r3, r0
 800d628:	4293      	cmp	r3, r2
 800d62a:	d100      	bne.n	800d62e <memset+0xa>
 800d62c:	4770      	bx	lr
 800d62e:	f803 1b01 	strb.w	r1, [r3], #1
 800d632:	e7f9      	b.n	800d628 <memset+0x4>

0800d634 <setjmp>:
 800d634:	46ec      	mov	ip, sp
 800d636:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800d63a:	f04f 0000 	mov.w	r0, #0
 800d63e:	4770      	bx	lr

0800d640 <longjmp>:
 800d640:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800d644:	46e5      	mov	sp, ip
 800d646:	0008      	movs	r0, r1
 800d648:	bf08      	it	eq
 800d64a:	2001      	moveq	r0, #1
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop

0800d650 <strcpy>:
 800d650:	4603      	mov	r3, r0
 800d652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d656:	f803 2b01 	strb.w	r2, [r3], #1
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	d1f9      	bne.n	800d652 <strcpy+0x2>
 800d65e:	4770      	bx	lr

0800d660 <strlcpy>:
 800d660:	b510      	push	{r4, lr}
 800d662:	460b      	mov	r3, r1
 800d664:	b162      	cbz	r2, 800d680 <strlcpy+0x20>
 800d666:	3a01      	subs	r2, #1
 800d668:	d008      	beq.n	800d67c <strlcpy+0x1c>
 800d66a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800d66e:	f800 4b01 	strb.w	r4, [r0], #1
 800d672:	2c00      	cmp	r4, #0
 800d674:	d1f7      	bne.n	800d666 <strlcpy+0x6>
 800d676:	1a58      	subs	r0, r3, r1
 800d678:	3801      	subs	r0, #1
 800d67a:	bd10      	pop	{r4, pc}
 800d67c:	2200      	movs	r2, #0
 800d67e:	7002      	strb	r2, [r0, #0]
 800d680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d684:	2a00      	cmp	r2, #0
 800d686:	d1fb      	bne.n	800d680 <strlcpy+0x20>
 800d688:	e7f5      	b.n	800d676 <strlcpy+0x16>

0800d68a <strlen>:
 800d68a:	4603      	mov	r3, r0
 800d68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d690:	2a00      	cmp	r2, #0
 800d692:	d1fb      	bne.n	800d68c <strlen+0x2>
 800d694:	1a18      	subs	r0, r3, r0
 800d696:	3801      	subs	r0, #1
 800d698:	4770      	bx	lr
 800d69a:	0000      	movs	r0, r0
 800d69c:	0000      	movs	r0, r0
	...

0800d6a0 <__flash_burn_veneer>:
 800d6a0:	f85f f000 	ldr.w	pc, [pc]	; 800d6a4 <__flash_burn_veneer+0x4>
 800d6a4:	2009e001 	.word	0x2009e001

0800d6a8 <__flash_page_erase_veneer>:
 800d6a8:	f85f f000 	ldr.w	pc, [pc]	; 800d6ac <__flash_page_erase_veneer+0x4>
 800d6ac:	2009e08d 	.word	0x2009e08d
 800d6b0:	6f636e69 	.word	0x6f636e69
 800d6b4:	006e      	.short	0x006e
 800d6b6:	6944      	.short	0x6944
 800d6b8:	44203a65 	.word	0x44203a65
 800d6bc:	44005546 	.word	0x44005546
 800d6c0:	203a6569 	.word	0x203a6569
 800d6c4:	6e776f44 	.word	0x6e776f44
 800d6c8:	64617267 	.word	0x64617267
 800d6cc:	69440065 	.word	0x69440065
 800d6d0:	42203a65 	.word	0x42203a65
 800d6d4:	6b6e616c 	.word	0x6b6e616c
 800d6d8:	00687369 	.word	0x00687369
 800d6dc:	3a656944 	.word	0x3a656944
 800d6e0:	69724220 	.word	0x69724220
 800d6e4:	42006b63 	.word	0x42006b63
 800d6e8:	32746f6f 	.word	0x32746f6f
 800d6ec:	00554644 	.word	0x00554644
 800d6f0:	43455441 	.word	0x43455441
 800d6f4:	38303643 	.word	0x38303643
 800d6f8:	53440a42 	.word	0x53440a42
 800d6fc:	33433832 	.word	0x33433832
 800d700:	4c004236 	.word	0x4c004236
 800d704:	0052      	.short	0x0052
 800d706:	6e65      	.short	0x6e65
 800d708:	5f726574 	.word	0x5f726574
 800d70c:	28756664 	.word	0x28756664
 800d710:	0029      	.short	0x0029
 800d712:	0a0d      	.short	0x0a0d
 800d714:	346b4d0a 	.word	0x346b4d0a
 800d718:	6f6f4220 	.word	0x6f6f4220
 800d71c:	616f6c74 	.word	0x616f6c74
 800d720:	3a726564 	.word	0x3a726564
 800d724:	463e0020 	.word	0x463e0020
 800d728:	57455249 	.word	0x57455249
 800d72c:	454c4c41 	.word	0x454c4c41
 800d730:	70003c44 	.word	0x70003c44
 800d734:	2d726961 	.word	0x2d726961
 800d738:	63697262 	.word	0x63697262
 800d73c:	0064656b 	.word	0x0064656b
 800d740:	69726556 	.word	0x69726556
 800d744:	203a7966 	.word	0x203a7966
 800d748:	00000000 	.word	0x00000000
 800d74c:	00000150 	.word	0x00000150
 800d750:	00000001 	.word	0x00000001
 800d754:	00000000 	.word	0x00000000
 800d758:	00000001 	.word	0x00000001
 800d75c:	00000000 	.word	0x00000000

0800d760 <animate.0>:
 800d760:	0700262e ff000707                        .&....../

0800d769 <before_show>:
 800d769:	227f0021                                 !.."..

0800d76f <reset_commands>:
 800d76f:	400020ae c83fa8a1 12da00d3 f1d980d5     . .@..?.........
 800d77f:	ff8130db 148da6a4                        .0.......

0800d788 <setup.1>:
 800d788:	227f0021                                 !.."..

0800d78e <screen_blankish>:
 800d78e:	007f007f 0034007f 000d8081 000d8081     ......4.........
 800d79e:	00628081 01030183 0183000b 000b0103     ..b.............
 800d7ae:	01030183 007f007f 0034007f               ..........4..

0800d7bb <screen_brick>:
 800d7bb:	007f007f 002b007f 8803f881 0000f085     ......+.........
 800d7cb:	400380c0 00008086 03d84040 04808100     ...@....@@......
 800d7db:	00808a40 800000f8 80000040 80834004     @.......@....@..
 800d7eb:	40038000 50f88082 041f8100 000f8310     ...@...P........
 800d7fb:	8100091f 8100031f 8a10040f 021f0008     ................
 800d80b:	10080403 12040f00 0f001383 08821003     ................
 800d81b:	7f007f1f 2b007f00                        .......+..

0800d825 <screen_corrupt>:
 800d825:	0037007f 40c08086 03303060 05188190     ..7....@`00.....
 800d835:	08188510 68e0f018 f8808b00 38e1071c     .......h.......8
 800d845:	0103060c 82000b01 006820ff 0e7fc182     ......... h.....
 800d855:	80808700 0e3860c0 85006907 04060301     .....`8..i......
 800d865:	82020406 02030606 01030383 f881005e     ............^...
 800d875:	08868804 40400000 820003d8 400380c0     ......@@.......@
 800d885:	c000808a 40804040 04c00080 00c08300     ....@@.@........
 800d895:	84400400 80c00080 80834003 40048000     ..@......@.....@
 800d8a5:	08008087 30488808 1f810043 1f810009     ......H0C.......
 800d8b5:	1f810003 1f8f0006 00070000 100f001f     ................
 800d8c5:	0f100f08 11030e00 001f0984 8100061f     ................
 800d8d5:	8412040f 1b000013 0026007f               ..........&..

0800d8e2 <screen_devmode>:
 800d8e2:	002c007f 00888003 98f09000 1640d0a0     ..,...........@.
 800d8f2:	80808400 180330e0 18031081 80e03084     .....0.......0..
 800d902:	89004380 0c18f0c0 191373e6 89010519     .C.......s......
 800d912:	07030100 000039ef 92001501 f9ede702     .....9..........
 800d922:	783818c8 78381838 f9c81838 0042e7ed     ..8x8.8x8.....B.
 800d932:	e03d0f85 000a0180 70c08085 0017023f     ..=........p?...
 800d942:	07fcf883 7e870304 640464fc 03047efc     .......~.d.d.~..
 800d952:	f0fc0783 01840043 06020301 03028306     ....C...........
 800d962:	82001b01 06060703 06030781 06060781     ................
 800d972:	2e030782 03f88100 e0108408 40040000     ...............@
 800d982:	c0008084 83400380 03800080 c0808440     ......@.....@...
 800d992:	40048000 c0008084 81400380 81000380     ...@......@.....
 800d9a2:	81000bf8 830804f0 04c00030 00c08300     ........0.......
 800d9b2:	84400480 f0400080 00834003 40048000     ..@...@..@.....@
 800d9c2:	c0008088 40804040 81000380 81001bf8     ....@@.@........
 800d9d2:	8410031f 0e000708 09841103 041f001f     ................
 800d9e2:	001f8300 84880347 0f007f84 13831204     ....G...........
 800d9f2:	00081f00 000b1b81 10040f81 0f000c83     ................
 800da02:	08841003 0409001f 000c8412 10030f00     ................
 800da12:	0f000883 0f881004 00001f00 031f0007     ................
 800da22:	7f1b8100 00001000                       ........

0800da2a <screen_downgrade>:
 800da2a:	0035007f 00f0f095 6060c080 10103030     ..5.......``00..
 800da3a:	10101818 60603030 006b80c0 0c040f04     ....00``..k.....
 800da4a:	ff820003 840007ff e0fc0f03 c083006c     ............l...
 800da5a:	00058080 0603018c 80800006 0f3c70c0     .............p<.
 800da6a:	8e006d01 03030101 06060202 03030202     .m..............
 800da7a:	00570101 0803f881 00e01084 83400480     ..W...........@.
 800da8a:	04c00080 00c08400 400380c0 80008083     ...........@....
 800da9a:	80854003 80c000c0 80834003 40040000     .@.......@.....@
 800daaa:	80008083 80844003 048000f8 00808740     .....@......@...
 800daba:	48880808 81003c30 8410031f 0f000708     ...H0<..........
 800daca:	0f8a1004 08100f00 000f100f 8300041f     ................
 800dada:	0347001f 7f848488 00061f00 11030e81     ..G.............
 800daea:	001f0984 8410030f 0f001f08 13841204     ................
 800dafa:	7f1b0000 00002200                       ....."..

0800db02 <screen_fatal>:
 800db02:	007f007f 0036007f 90fc9089 0090fc90     ......6.........
 800db12:	4203fc40 f000048b 00c00000 fc4000f0     @..B..........@.
 800db22:	04814203 03840066 03030000 05078100     .B..f...........
 800db32:	04038900 03040302 7f070000 7f007f00     ................
 800db42:	00003900                                .9..

0800db46 <screen_logout>:
 800db46:	0035007f c0078081 00064081 6f808082     ..5......@.....o
 800db56:	ffff8200 c0070006 c7c3c189 f0f8dcce     ................
 800db66:	0068c0e0 06ff7f82 068081c0 70608800     ..h...........`p
 800db76:	070e1c38 007f0103 f8810050 80810006     8.......P.......
 800db86:	80834004 40038000 00c08084 83400480     .@.....@......@.
 800db96:	04c00080 00c08400 4003f040 f8810009     ........@..@....
 800dba6:	10840803 048000e0 00808440 400380c0     ........@......@
 800dbb6:	80008083 80814004 1f810034 00821005     .....@..4.......
 800dbc6:	8310040f 0347000f 7f848488 10040f00     ......G.........
 800dbd6:	0f000f83 08851003 0f00001f 08811003     ................
 800dbe6:	1f810008 08841003 040f0007 000f8310     ................
 800dbf6:	8300041f 040f001f 7f138112 00001b00     ................

0800dc06 <screen_mitm>:
 800dc06:	007f007f 0043007f 0c30c083 01060073     ......C...0.s...
 800dc16:	0c300084 06000403 7f007f01 39007f00     ..0............9
	...

0800dc28 <screen_recovery>:
 800dc28:	0031007f c0e06084 85001080 f030e0e0     ..1..`........0.
 800dc38:	863008f0 6020f0f0 004f80c0 c189c00c     ..0... `..O.....
 800dc48:	dccec7c3 c0e0f0f8 ff8f0009 0f0f00ff     ................
 800dc58:	cc8c0c0c cccc4ccc 00030f8f feff0183     .....L..........
 800dc68:	808a0057 3870e0c0 03070e1c 82000a01     W.....p8........
 800dc78:	0004ffff 301f0689 30302030 0004061f     .......00 00....
 800dc88:	57ffff82 01018200 01820012 82031101     ...W............
 800dc98:	00410101 f8080889 00000808 400380c0     ..A............@
 800dca8:	80008083 80834004 40048000 c0008084     .....@.....@....
 800dcb8:	84400380 f0400080 00094003 0804f081     ..@...@..@......
 800dcc8:	00003083 80844004 0380c000 00808340     .0...@......@...
 800dcd8:	82400380 0034f880 1f101088 00001010     ..@...4.........
 800dce8:	8300041f 0409001f 000c8312 8312040f     ................
 800dcf8:	071f0013 030f8100 08088110 040f8100     ................
 800dd08:	000c8310 8411030e 1f001f09 0f810006     ................
 800dd18:	08821003 1b007f1f                        ..........

0800dd22 <screen_red_light>:
 800dd22:	002c007f 00888003 98f09000 1640d0a0     ..,...........@.
 800dd32:	80808400 180330e0 18031081 80e03084     .....0.......0..
 800dd42:	89004380 0c18f0c0 191373e6 89010519     .C.......s......
 800dd52:	07030100 000039ef 92001501 f9ede702     .....9..........
 800dd62:	783818c8 78381838 f9c81838 0042e7ed     ..8x8.8x8.....B.
 800dd72:	e03d0f85 000a0180 70c08085 0017023f     ..=........p?...
 800dd82:	07fcf883 7e870304 640464fc 03047efc     .......~.d.d.~..
 800dd92:	f0fc0783 01840043 06020301 03028306     ....C...........
 800dda2:	82001b01 06060703 06030781 06060781     ................
 800ddb2:	2b030782 03f88100 e0108408 40040000     ...+...........@
 800ddc2:	c0008084 83400380 03800080 c0808440     ......@.....@...
 800ddd2:	40048000 c0008084 81400380 81000380     ...@......@.....
 800dde2:	81000bf8 830804f0 04000030 00808340     ........0...@...
 800ddf2:	840004c0 f04000c0 00034003 d8404083     ......@..@...@@.
 800de02:	80810003 80844004 0380c000 03808140     .....@......@...
 800de12:	14f88100 031f8100 07088410 11030e00     ................
 800de22:	001f0984 8300041f 0347001f 7f848488     ..........G.....
 800de32:	12040f00 1f001383 1b810008 0f81000b     ................
 800de42:	0c831004 11030e00 001f0984 8510030f     ................
 800de52:	00001f08 8110030f 81000408 8100031f     ................
 800de62:	8310040f 041f000f 031f8100 7f1b8100     ................
 800de72:	00000c00                                ....

0800de76 <screen_replug>:
 800de76:	007f007f 002f007f 0804f881 8000f083     ....../.........
 800de86:	80844004 0380c000 00808440 0005f800     .@......@.......
 800de96:	0004c081 8000c083 80824003 880057c0     .........@...W..
 800dea6:	0503011f 0f001009 13841204 03047f00     ................
 800deb6:	00078408 10030f00 0f000083 08841003     ................
 800dec6:	0347001f 7f848288 007f007f 002e007f     ..G.............
	...

0800ded7 <screen_se1_issue>:
 800ded7:	0035007f 04808082 60c08300 83180530     ..5........`0...
 800dee7:	04c07030 6b808100 ff018600 070606fe     0p.....k........
 800def7:	e6810604 07860604 fffe0607 03006901     .............i..
 800df07:	bf078401 000580e0 0005ff81 bfe08084     ................
 800df17:	69010307 07068300 89010303 06060203     ...i............
 800df27:	02020607 83010303 62060703 04f88100     ...........b....
 800df37:	00f88900 0830c000 060000f8 70008980     ......0........p
 800df47:	08088888 04f80010 00088688 f8102040     ............@ ..
 800df57:	0f810059 0f831004 02030300 00021f83     Y...............
 800df67:	00890406 11101008 1f000e11 00041005     ................
 800df77:	007f1f81                                 .......

0800df7e <screen_se2_issue>:
 800df7e:	0035007f 04808082 60c08300 83180530     ..5........`0...
 800df8e:	04c07030 6b808100 ff018600 070606fe     0p.....k........
 800df9e:	e6810604 07860604 fffe0607 03006901     .............i..
 800dfae:	bf078401 000580e0 0005ff81 bfe08084     ................
 800dfbe:	69010307 07068300 89010303 06060203     ...i............
 800dfce:	02020607 83010303 62060703 04f88100     ...........b....
 800dfde:	00f88300 824804f8 80060088 88700089     ......H.......p.
 800dfee:	10080888 8804f800 30000883 88820803     ...........0....
 800dffe:	81005770 8310040f 0408000f 000f8210     pW..............
 800e00e:	00890406 11101008 1f000e11 00871005     ................
 800e01e:	11121418 007f1010                        ........,..

0800e029 <screen_search>:
 800e029:	0028007f 2060c085 18061030 60301085     ..(...` 0.....0`
 800e039:	000f80c0 30e0e085 3008f0f0 20f0f086     .......0...0... 
 800e049:	4c80c060 fffc8300 82000e01 000eff03     `..L............
 800e059:	00ffff8f 0c0c0f0f 4ccccc8c 0f8fcccc     ...........L....
 800e069:	01830003 004bfeff 0c060389 20303018     ......K......00 
 800e079:	20036020 18103089 e0713f1e 000b80c0      `. .0...?q.....
 800e089:	04ffff82 1f068900 30203030 04061f30     ........00 00...
 800e099:	ffff8200 0184005e 09060703 01018200     ....^...........
 800e0a9:	01820311 88003c01 08888870 80001008     .....<..p.......
 800e0b9:	80834004 40040000 c0008084 83400380     .@.....@......@.
 800e0c9:	04800080 00808440 400380f8 00008086     ....@......@....
 800e0d9:	03d84040 80c08200 80834003 40038000     @@.......@.....@
 800e0e9:	42c08082 10088800 0e111110 12040f00     ...B............
 800e0f9:	0e001383 09841103 061f001f 040f8100     ................
 800e109:	00088310 8100041f 8100041f 8100031f     ................
 800e119:	8300041f 0347001f 7f848788 38100000     ......G........8
 800e129:	83000410 04103810 38108300 19007f10     .....8.....8....
	...

0800e13b <screen_upgrading>:
 800e13b:	0035007f 0e80c082 6a800600 ffff8200     ..5........j....
 800e14b:	80900005 603060c0 63c080c0 30181c37     .....`0`...c7..0
 800e15b:	691e3f20 ffff8800 ceccc0c0 c005c1c7      ?.i............
 800e16b:	c009c181 007f8081 f8810056 f8840004     ........V.......
 800e17b:	0380c000 00808340 85400380 c000c080     ....@.....@.....
 800e18b:	83400380 04000080 00808340 87400380     ..@.....@.....@.
 800e19b:	0000f880 03d84040 80c08200 80834003     ....@@.......@..
 800e1ab:	40038000 42c08082 040f8100 000f8410     ...@...B........
 800e1bb:	0803047f 47000783 84848803 061f007f     .......G........
 800e1cb:	030e8100 1f098411 10030f00 041f0882     ................
 800e1db:	031f8100 041f8100 001f8300 82880347     ............G...
 800e1eb:	007f7f84                                 ...."..

0800e1f2 <screen_verify>:
 800e1f2:	0038007f 60c08085 10033020 1018188a     ..8....` 0......
 800e202:	60303010 6b80c060 fce08400 00070107     .00``..k........
 800e212:	07ffff82 0f038400 0068e0fc 380f0187     ..........h....8
 800e222:	8080c060 018c0005 00060703 70c08080     `..............p
 800e232:	6d010f3c 01018e00 02020303 02020606     <..m............
 800e242:	01010303 f881005a f8830004 40048000     ....Z..........@
 800e252:	c0008084 86400380 40000080 0004d840     ......@....@@...
 800e262:	0803f081 c0001083 c0860004 40400000     ..............@@
 800e272:	820003d8 400380c0 80008083 80824003     .......@.....@..
 800e282:	880042c0 18180601 0f000106 13831204     .B..............
 800e292:	00091f00 00031f81 031f0182 00008301     ................
 800e2a2:	82880347 00047f84 00031f81 00041f81     G...............
 800e2b2:	47001f83 84828803 22007f7f               ...G......."..

0800e2c0 <screen_wiped>:
 800e2c0:	0038007f 60c08084 82000420 0004f8f8     ..8....` .......
 800e2d0:	c0606084 84006b80 0307fce0 ff820007     .``..k..........
 800e2e0:	840007ff e0fc0f03 01870068 c060380f     ........h....8`.
 800e2f0:	000a8080 c0808087 010f3c70 018e006d     ........p<..m...
 800e300:	02030301 02060602 01030302 88005701     .............W..
 800e310:	08888870 80001008 80834004 40048000     p........@.....@
 800e320:	80008083 80824003 810008f8 860004f8     .....@..........
 800e330:	400000f8 0003d840 0380c082 00808340     ...@@.......@...
 800e340:	83400480 03800080 f8808240 0888003b     ..@.....@...;...
 800e350:	11111010 040f000e 00138312 8312040f     ................
 800e360:	030f0013 1f088210 07860008 18070718     ................
 800e370:	81000407 8200031f 0803047f 0f000783     ................
 800e380:	13831204 10030f00 7f1f0882 00001e00     ................
 800e390:	65737361 64007472 676e776f 65646172     assert.downgrade
 800e3a0:	67697300 69616620 6f6e006c 72696620     .sig fail.no fir
 800e3b0:	7261776d 61460065 726f7463 6f622079     mware.Factory bo
 800e3c0:	5700746f 3a4e5241 64655220 67696c20     ot.WARN: Red lig
 800e3d0:	57007468 3a4e5241 736e5520 656e6769     ht.WARN: Unsigne
 800e3e0:	69662064 61776d72 47006572 20646f6f     d firmware.Good 
 800e3f0:	6d726966 65726177 726f6300 74707572     firmware.corrupt
 800e400:	72696620 7261776d                         firmware.

0800e40a <approved_pubkeys>:
 800e40a:	2641cbb4 f36ce1f7 71b4f28f 0123fb1d     ..A&..l....q..#.
 800e41a:	66d6760d 6ca38aa7 f6f9539b 0518587b     .v.f...l.S..{X..
 800e42a:	e93b0b58 b89fc431 113c0444 470f0896     X.;.1...D.<....G
 800e43a:	37ed2581 4a9e237a 3818b7af da0438ba     .%.7z#.J...8.8..
 800e44a:	1dc8a2d6 df5e811c 6d290ca6 8d8f57b8     ......^...)m.W..
 800e45a:	9269295e c178d1ce 31d7207b b596a17b     ^)i...x.{ .1{...
 800e46a:	0c1bef3d c31a79aa c8c45845 ffeb2d8a     =....y..EX...-..
 800e47a:	01829bfe bc5e5f87 4fe5a596 9ffe68c7     ....._^....O.h..
 800e48a:	0166ef42 95cfc456 38f0b5f4 c5261164     B.f.V......8d.&.
 800e49a:	66c13999 14120632 689c254c bad38c35     .9.f2...L%.h5...
 800e4aa:	8cde7824 6cdfab52 7809bfb8 3a63bb03     $x..R..l...x..c:
 800e4ba:	0ed90111 8f737aa4 7f3b18bf c87b0af0     .....zs...;...{.
 800e4ca:	56546067 c5ec0c82 0882bc1d ef39c116     g`TV..........9.
 800e4da:	32babff5 e35fce7c d7621e74 4cc5fce9     ...2|._.t.b....L
 800e4ea:	8d11e88a 13c2adc3 2a4f2992 a4f8d2ea     .........)O*....
 800e4fa:	fe7cd5c4 3b450512 07598954 88d7d6da     ..|...E;T.Y.....
 800e50a:	37cfb143 1f897cd2 f3acfe5b 95fc33ba     C..7.|..[....3..
 800e51a:	dde7d981 14ef9525 bb97efdd a7d8f333     ....%.......3...
 800e52a:	977a2b34 73aab3ba 32419de7 17a1fcd8     4+z....s..A2....
 800e53a:	fe0bb566 89214063 8e7b92c9 590bdf72     f...c@!...{.r..Y
 800e54a:	76dc5cd0 30dd3016 56f180c2 61a85c26     .\.v.0.0...V&\.a
 800e55a:	69694fd7 3d57b8e5 582ae235 c69acedd     .Oii..W=5.*X....
 800e56a:	2b1ca945 8efc010c 13513fbf 137c7e80     E..+.....?Q..~|.
 800e57a:	5e4b4fd5 d59b4c9b e0d81d9e 2246c0ad     .OK^.L........F"
 800e58a:	20314553 666e6f63 66206769 006c6961     SE1 config fail.
 800e59a:	6c706572 72206775 69757165 00646572     replug required.
 800e5aa:	72726f63 20747075 72696170 63657320     corrupt pair sec
 800e5ba:	75636d00 6c756620 7562006c 66206e72     .mcu full.burn f
 800e5ca:	3a6c6961 76210020 64696c61 6162003f     ail: .!valid?.ba
 800e5da:	61762064 66003f6c 20747361 63697262     d val?.fast bric
 800e5ea:	2e2e2e6b 64200020 00656e6f 79706f43     k... . done.Copy
 800e5fa:	68676972 30322074 202d3831 43207962     right 2018- by C
 800e60a:	6b6e696f 20657469 2e636e49 206f6e00     oinkite Inc..no 
 800e61a:	00726573 66206b77 0016006c 01410800     ser.wk fl.....A.
	...
 800e636:	000000ee 006100e1 218f0000 438f808f     ......a....!...C
 800e646:	430080af 20834300 43c343c3 43c343c3     ...C.C. .C.C.C.C
 800e656:	43c343c3 0000438f ffffffff 00000000     .C.C.C..........
 800e666:	ffffffff 00000000 00000000 000000f0     ................
	...
 800e67e:	00001502 003c0000 01bc005c 01bc01fc     ......<.\.......
 800e68e:	01dc01dc 03dc03d1 03dc03dc 03dc03dc     ................
 800e69e:	01dc03dc 0001003c 00120000 00000000     ....<...........
 800e6ae:	00010000 00080000 02000000 00020000     ................
 800e6be:	00000000 00010000 00070000               ..............

0800e6cc <CSWTCH.37>:
 800e6cc:	0d0c0b09                                ....

0800e6d0 <version_string>:
 800e6d0:	2e322e33 69742030 323d656d 30343230     3.2.0 time=20240
 800e6e0:	2e323234 34343031 67203433 513d7469     422.104434 git=Q
 800e6f0:	34616140 35663235 0a0d0035               @aa452f55....

0800e6fd <hexmap>:
 800e6fd:	33323130 37363534 62613938 66656463     0123456789abcdef
 800e70d:	41525350 6166204d 50006c69 203a5253     PSRAM fail.PSR: 
 800e71d:	6164616e 52535000 6321203a 6b636568     nada.PSR: !check
 800e72d:	52535000 6576203a 6f697372 0000006e     .PSR: version...
 800e73d:	020000fc 00000000 03000000 0a000000     ................
 800e74d:	08000000 10000000 6c000000 20676e6f     ...........long 
 800e75d:	64616572 69616620 4644006c 61702055     read fail.DFU pa
 800e76d:	20657372 6c696166 6f6f6700 69662064     rse fail.good fi
 800e77d:	61776d72 77006572 676e6f72 726f7720     rmware.wrong wor
 800e78d:	7300646c 72616364 65735f64 68637261     ld.sdcard_search
 800e79d:	7300203a 72616364 72705f64 3a65626f     : .sdcard_probe:
 800e7ad:	6e690020 66207469 006c6961 65657073      .init fail.spee
 800e7bd:	69770064 62006564 657a6973 6b6f003f     d.wide.bsize?.ok
 800e7cd:	69616600 6572206c 44006461 65537566     .fail read.DfuSe
 800e7dd:	756f6600 4020646e 65520020 65766f63     .found @ .Recove
 800e7ed:	6d207972 2e65646f 00000000 0200001f     ry mode.........
 800e7fd:	01000000 03000000 0c000000 04000000     ................
 800e80d:	02000000 01000000 03000000 0c000000     ................
 800e81d:	                                         ...

0800e820 <curve_secp256k1>:
 800e820:	01002008 fffffc2f fffffffe ffffffff     . ../...........
 800e830:	ffffffff ffffffff ffffffff ffffffff     ................
 800e840:	ffffffff d0364141 bfd25e8c af48a03b     ....AA6..^..;.H.
 800e850:	baaedce6 fffffffe ffffffff ffffffff     ................
 800e860:	ffffffff 16f81798 59f2815b 2dce28d9     ........[..Y.(.-
 800e870:	029bfcdb ce870b07 55a06295 f9dcbbac     .........b.U....
 800e880:	79be667e fb10d4b8 9c47d08f a6855419     ~f.y......G..T..
 800e890:	fd17b448 0e1108a8 5da4fbfc 26a3c465     H..........]e..&
 800e8a0:	483ada77 00000007 00000000 00000000     w.:H............
	...
 800e8c4:	08006625 08005ea9 0800607f 08005c95     %f...^...`...\..

0800e8d4 <curve_secp256r1>:
 800e8d4:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
 800e8f0:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
 800e900:	a7179e84 bce6faad ffffffff ffffffff     ................
 800e910:	00000000 ffffffff d898c296 f4a13945     ............E9..
 800e920:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
 800e930:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
 800e940:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
 800e950:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
 800e960:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
 800e970:	aa3a93e7 5ac635d8 0800676d 08005ea9     ..:..5.Zmg...^..
 800e980:	08006713 08005d11                       .g...]..

0800e988 <AHBPrescTable>:
	...
 800e990:	04030201 09080706                       ........

0800e998 <APBPrescTable>:
 800e998:	00000000 04030201                       ........

0800e9a0 <MSIRangeTable>:
 800e9a0:	000186a0 00030d40 00061a80 000c3500     ....@........5..
 800e9b0:	000f4240 001e8480 003d0900 007a1200     @B........=...z.
 800e9c0:	00f42400 016e3600 01e84800 02dc6c00     .$...6n..H...l..
 800e9d0:	20727463 3f746573 00702100 00006000     ctr set?.!p..`..
 800e9e0:	00000012 00000000 00000003 00000004     ................

0800e9f0 <DEV_MANID>:
 800e9f0:	00008000                                ....

Disassembly of section .relocate:

2009e000 <flash_burn>:
{
2009e000:	b530      	push	{r4, r5, lr}
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
2009e002:	4920      	ldr	r1, [pc, #128]	; (2009e084 <flash_burn+0x84>)
2009e004:	690c      	ldr	r4, [r1, #16]
2009e006:	03e5      	lsls	r5, r4, #15
2009e008:	d4fc      	bmi.n	2009e004 <flash_burn+0x4>
    uint32_t error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
2009e00a:	690d      	ldr	r5, [r1, #16]
    if(error) {
2009e00c:	4c1e      	ldr	r4, [pc, #120]	; (2009e088 <flash_burn+0x88>)
2009e00e:	4225      	tst	r5, r4
2009e010:	d104      	bne.n	2009e01c <flash_burn+0x1c>
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
2009e012:	690c      	ldr	r4, [r1, #16]
2009e014:	07e4      	lsls	r4, r4, #31
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
2009e016:	bf44      	itt	mi
2009e018:	2401      	movmi	r4, #1
2009e01a:	610c      	strmi	r4, [r1, #16]
    FLASH->SR = FLASH->SR & FLASH_FLAG_SR_ERRORS;
2009e01c:	4919      	ldr	r1, [pc, #100]	; (2009e084 <flash_burn+0x84>)
2009e01e:	4d1a      	ldr	r5, [pc, #104]	; (2009e088 <flash_burn+0x88>)
2009e020:	690c      	ldr	r4, [r1, #16]
2009e022:	402c      	ands	r4, r5
2009e024:	610c      	str	r4, [r1, #16]
    __HAL_FLASH_DATA_CACHE_DISABLE();
2009e026:	680c      	ldr	r4, [r1, #0]
2009e028:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
2009e02c:	600c      	str	r4, [r1, #0]
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));      // added
2009e02e:	694c      	ldr	r4, [r1, #20]
2009e030:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
2009e034:	f024 0407 	bic.w	r4, r4, #7
2009e038:	614c      	str	r4, [r1, #20]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
2009e03a:	694c      	ldr	r4, [r1, #20]
2009e03c:	f044 0401 	orr.w	r4, r4, #1
2009e040:	614c      	str	r4, [r1, #20]
    *(__IO uint32_t *)(address) = (uint32_t)val;
2009e042:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
2009e044:	f3bf 8f6f 	isb	sy
    *(__IO uint32_t *)(address+4) = (uint32_t)(val >> 32);
2009e048:	6043      	str	r3, [r0, #4]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
2009e04a:	690b      	ldr	r3, [r1, #16]
2009e04c:	03da      	lsls	r2, r3, #15
2009e04e:	d4fc      	bmi.n	2009e04a <flash_burn+0x4a>
    uint32_t error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
2009e050:	6908      	ldr	r0, [r1, #16]
    if(error) {
2009e052:	4028      	ands	r0, r5
2009e054:	d104      	bne.n	2009e060 <flash_burn+0x60>
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
2009e056:	690b      	ldr	r3, [r1, #16]
2009e058:	07db      	lsls	r3, r3, #31
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
2009e05a:	bf44      	itt	mi
2009e05c:	2301      	movmi	r3, #1
2009e05e:	610b      	strmi	r3, [r1, #16]
    CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
2009e060:	4b08      	ldr	r3, [pc, #32]	; (2009e084 <flash_burn+0x84>)
2009e062:	695a      	ldr	r2, [r3, #20]
2009e064:	f022 0201 	bic.w	r2, r2, #1
2009e068:	615a      	str	r2, [r3, #20]
    __HAL_FLASH_DATA_CACHE_RESET();
2009e06a:	681a      	ldr	r2, [r3, #0]
2009e06c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2009e070:	601a      	str	r2, [r3, #0]
2009e072:	681a      	ldr	r2, [r3, #0]
2009e074:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2009e078:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
2009e07a:	681a      	ldr	r2, [r3, #0]
2009e07c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2009e080:	601a      	str	r2, [r3, #0]
}
2009e082:	bd30      	pop	{r4, r5, pc}
2009e084:	40022000 	.word	0x40022000
2009e088:	0002c3fa 	.word	0x0002c3fa

2009e08c <flash_page_erase>:
    if(page_num < ((BL_FLASH_SIZE + BL_NVROM_SIZE) / FLASH_ERASE_SIZE)) {
2009e08c:	4b2d      	ldr	r3, [pc, #180]	; (2009e144 <flash_page_erase+0xb8>)
2009e08e:	4003      	ands	r3, r0
{
2009e090:	b510      	push	{r4, lr}
    if(page_num < ((BL_FLASH_SIZE + BL_NVROM_SIZE) / FLASH_ERASE_SIZE)) {
2009e092:	2b00      	cmp	r3, #0
2009e094:	d054      	beq.n	2009e140 <flash_page_erase+0xb4>
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
2009e096:	4b2c      	ldr	r3, [pc, #176]	; (2009e148 <flash_page_erase+0xbc>)
    page_num &= 0xff;
2009e098:	f3c0 3207 	ubfx	r2, r0, #12, #8
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
2009e09c:	6919      	ldr	r1, [r3, #16]
2009e09e:	03c9      	lsls	r1, r1, #15
2009e0a0:	d4fc      	bmi.n	2009e09c <flash_page_erase+0x10>
    uint32_t error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
2009e0a2:	691c      	ldr	r4, [r3, #16]
    if(error) {
2009e0a4:	4929      	ldr	r1, [pc, #164]	; (2009e14c <flash_page_erase+0xc0>)
2009e0a6:	420c      	tst	r4, r1
2009e0a8:	d104      	bne.n	2009e0b4 <flash_page_erase+0x28>
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
2009e0aa:	6919      	ldr	r1, [r3, #16]
2009e0ac:	07cc      	lsls	r4, r1, #31
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
2009e0ae:	bf44      	itt	mi
2009e0b0:	2101      	movmi	r1, #1
2009e0b2:	6119      	strmi	r1, [r3, #16]
    FLASH->SR = FLASH->SR & 0xffff;
2009e0b4:	4b24      	ldr	r3, [pc, #144]	; (2009e148 <flash_page_erase+0xbc>)
2009e0b6:	6919      	ldr	r1, [r3, #16]
2009e0b8:	b289      	uxth	r1, r1
2009e0ba:	6119      	str	r1, [r3, #16]
    __HAL_FLASH_DATA_CACHE_DISABLE();
2009e0bc:	6819      	ldr	r1, [r3, #0]
2009e0be:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
2009e0c2:	6019      	str	r1, [r3, #0]
        SET_BIT(FLASH->CR, FLASH_CR_BKER);
2009e0c4:	6959      	ldr	r1, [r3, #20]
    if(bank2) {
2009e0c6:	f010 6ffe 	tst.w	r0, #133169152	; 0x7f00000
        SET_BIT(FLASH->CR, FLASH_CR_BKER);
2009e0ca:	bf14      	ite	ne
2009e0cc:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
        CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
2009e0d0:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
2009e0d4:	6159      	str	r1, [r3, #20]
    MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (page_num << POSITION_VAL(FLASH_CR_PNB)));
2009e0d6:	6959      	ldr	r1, [r3, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2009e0d8:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
2009e0dc:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
2009e0e0:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
2009e0e4:	fab3 f383 	clz	r3, r3
2009e0e8:	409a      	lsls	r2, r3
2009e0ea:	4b17      	ldr	r3, [pc, #92]	; (2009e148 <flash_page_erase+0xbc>)
2009e0ec:	430a      	orrs	r2, r1
2009e0ee:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
2009e0f0:	695a      	ldr	r2, [r3, #20]
2009e0f2:	f042 0202 	orr.w	r2, r2, #2
2009e0f6:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
2009e0f8:	695a      	ldr	r2, [r3, #20]
2009e0fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2009e0fe:	615a      	str	r2, [r3, #20]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) {
2009e100:	691a      	ldr	r2, [r3, #16]
2009e102:	03d1      	lsls	r1, r2, #15
2009e104:	d4fc      	bmi.n	2009e100 <flash_page_erase+0x74>
    uint32_t error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
2009e106:	6918      	ldr	r0, [r3, #16]
2009e108:	4a10      	ldr	r2, [pc, #64]	; (2009e14c <flash_page_erase+0xc0>)
    if(error) {
2009e10a:	4010      	ands	r0, r2
2009e10c:	d104      	bne.n	2009e118 <flash_page_erase+0x8c>
    if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP)) {
2009e10e:	691a      	ldr	r2, [r3, #16]
2009e110:	07d2      	lsls	r2, r2, #31
        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
2009e112:	bf44      	itt	mi
2009e114:	2201      	movmi	r2, #1
2009e116:	611a      	strmi	r2, [r3, #16]
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
2009e118:	4b0b      	ldr	r3, [pc, #44]	; (2009e148 <flash_page_erase+0xbc>)
2009e11a:	695a      	ldr	r2, [r3, #20]
2009e11c:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
2009e120:	f022 0202 	bic.w	r2, r2, #2
2009e124:	615a      	str	r2, [r3, #20]
    __HAL_FLASH_DATA_CACHE_RESET();
2009e126:	681a      	ldr	r2, [r3, #0]
2009e128:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2009e12c:	601a      	str	r2, [r3, #0]
2009e12e:	681a      	ldr	r2, [r3, #0]
2009e130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2009e134:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
2009e136:	681a      	ldr	r2, [r3, #0]
2009e138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2009e13c:	601a      	str	r2, [r3, #0]
}
2009e13e:	bd10      	pop	{r4, pc}
        return 1;
2009e140:	2001      	movs	r0, #1
2009e142:	e7fc      	b.n	2009e13e <flash_page_erase+0xb2>
2009e144:	07fe0000 	.word	0x07fe0000
2009e148:	40022000 	.word	0x40022000
2009e14c:	0002c3fa 	.word	0x0002c3fa
