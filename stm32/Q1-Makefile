# (c) Copyright 2021 by Coinkite Inc. This file is covered by license found in COPYING-CC.
#
# Build micropython for stm32 (an ARM processor). Also handles signing of resulting firmware images.
#
# Q1 .. mostly same as Mk4
#
include version.mk

BOARD = COLDCARD_Q1
FIRMWARE_BASE   = 0x08020000
BOOTLOADER_BASE = 0x08000000
HW_MODEL = q1
PARENT_MKFILE = Q1-Makefile

# This is release of the bootloader that will be built into the release firmware.
BOOTLOADER_VERSION = 1.0.0
BOOTLOADER_DIR = q1-bootloader

LATEST_RELEASE = $(shell ls -t1 ../releases/*-q1-*.dfu | head -1)

# keep near top, because defined default target (all)
include shared.mk

# This is fast for Coinkite devs, but no DFU support in the wild.
dfu-up: dev.dfu
	echo 'dfu' | nc localhost 4444
	$(PYTHON_DO_DFU) -u dev.dfu

up2: dev.dfu
	$(PYTHON_DO_DFU) -u dev.dfu

# Super fast, assumes Coldcard already attached and unlocked on this Mac.
up: dev.dfu
	cp dev.dfu /Volumes/COLDCARD/.
	diskutil eject /Volumes/COLDCARD

# Slowest DFU, but easier w/ stock tools
dfu-slow: dev.dfu
	dfu-util -d 0483:df11 -a 0 -D $< -R

# Fairly fast, assumes openocd already running, and its current directory is here.
ocp-up: dev.dfu
	echo "load_image dev.dfu $(FIRMWARE_BASE) bin; reset run" | nc localhost 4444

# In another window: 
#
#		openocd -f openocd-q1.cfg
#
# Can do:
# - "load" which writes the flash (medium speed, lots of output on st-util)
# - "cont" starts/continues system
# - "br main" sets breakpoints
# - "mon reset" to reset micro
# - and so on
#
debug:
	arm-none-eabi-gdb $(BUILD_DIR)/firmware.elf -x gogo-q1.gdb

# EOF
